var serverExportVar;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 9986:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    if(a===b) {
      return [ai, bi];
    }
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 473:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var balanced = __webpack_require__(9986);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m) return [str];

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  if (/\$$/.test(m.pre)) {    
    for (var k = 0; k < post.length; k++) {
      var expansion = pre+ '{' + m.body + '}' + post[k];
      expansions.push(expansion);
    }
  } else {
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(',') >= 0;
    if (!isSequence && !isOptions) {
      // {a},b}
      if (m.post.match(/,.*\}/)) {
        str = m.pre + '{' + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }

    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        // x{{a,b}}y ==> x{a}y x{b}y
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }

    // at this point, n is the parts, and we know it's not a comma set
    // with a single entry.
    var N;

    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length)
      var incr = n.length == 3
        ? Math.abs(numeric(n[2]))
        : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);

      N = [];

      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === '\\')
            c = '';
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join('0');
              if (i < 0)
                c = '-' + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = [];

      for (var j = 0; j < n.length; j++) {
        N.push.apply(N, expand(n[j], false));
      }
    }

    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }
  }

  return expansions;
}



/***/ }),

/***/ 288:
/***/ ((module, exports, __webpack_require__) => {

// Save global object in a variable
var __global__ =
(typeof globalThis !== 'undefined' && globalThis) ||
(typeof self !== 'undefined' && self) ||
(typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g);
// Create an object that extends from __global__ without the fetch function
var __globalThis__ = (function () {
function F() {
this.fetch = false;
this.DOMException = __global__.DOMException
}
F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code
return new F();
})();
// Wraps whatwg-fetch with a function scope to hijack the global object
// "globalThis" that's going to be patched
(function(globalThis) {

var irrelevant = (function (exports) {

  var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    (typeof global !== 'undefined' && global);

  var support = {
    searchParams: 'URLSearchParams' in global,
    iterable: 'Symbol' in global && 'iterator' in Symbol,
    blob:
      'FileReader' in global &&
      'Blob' in global &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in global,
    arrayBuffer: 'ArrayBuffer' in global
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
      throw new TypeError('Invalid character in header field name: "' + name + '"')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed
          }
          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(
              this._bodyArrayBuffer.buffer.slice(
                this._bodyArrayBuffer.byteOffset,
                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
              )
            )
          } else {
            return Promise.resolve(this._bodyArrayBuffer)
          }
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }

    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);

    if (this.method === 'GET' || this.method === 'HEAD') {
      if (options.cache === 'no-store' || options.cache === 'no-cache') {
        // Search for a '_' parameter in the query string
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          // If it already exists then set the value with the current time
          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
        } else {
          // Otherwise add a new '_' parameter to the end with the current time
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
        }
      }
    }
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders
      .split('\r')
      .map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
      })
      .forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = global.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };

      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.onabort = function() {
        setTimeout(function() {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        }, 0);
      };

      function fixUrl(url) {
        try {
          return url === '' && global.location.href ? global.location.href : url
        } catch (e) {
          return url
        }
      }

      xhr.open(request.method, fixUrl(request.url), true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr) {
        if (support.blob) {
          xhr.responseType = 'blob';
        } else if (
          support.arrayBuffer &&
          request.headers.get('Content-Type') &&
          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
        ) {
          xhr.responseType = 'arraybuffer';
        }
      }

      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!global.fetch) {
    global.fetch = fetch;
    global.Headers = Headers;
    global.Request = Request;
    global.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  return exports;

})({});
})(__globalThis__);
// This is a ponyfill, so...
__globalThis__.fetch.ponyfill = true;
delete __globalThis__.fetch.polyfill;
// Choose between native implementation (__global__) or custom implementation (__globalThis__)
var ctx = __global__.fetch ? __global__ : __globalThis__;
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
exports["default"] = ctx.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers
exports.Request = ctx.Request
exports.Response = ctx.Response
module.exports = exports


/***/ }),

/***/ 6815:
/***/ ((module) => {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ 9537:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */



var isArray = __webpack_require__(6815);

module.exports = function isObject(val) {
  return val != null && typeof val === 'object' && isArray(val) === false;
};


/***/ }),

/***/ 2328:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ParseErrorCode: () => (/* binding */ ParseErrorCode),
  ScanError: () => (/* binding */ ScanError),
  SyntaxKind: () => (/* binding */ SyntaxKind),
  applyEdits: () => (/* binding */ applyEdits),
  createScanner: () => (/* binding */ main_createScanner),
  findNodeAtLocation: () => (/* binding */ main_findNodeAtLocation),
  findNodeAtOffset: () => (/* binding */ main_findNodeAtOffset),
  format: () => (/* binding */ main_format),
  getLocation: () => (/* binding */ main_getLocation),
  getNodePath: () => (/* binding */ main_getNodePath),
  getNodeValue: () => (/* binding */ main_getNodeValue),
  modify: () => (/* binding */ modify),
  parse: () => (/* binding */ main_parse),
  parseTree: () => (/* binding */ main_parseTree),
  printParseErrorCode: () => (/* binding */ printParseErrorCode),
  stripComments: () => (/* binding */ main_stripComments),
  visit: () => (/* binding */ main_visit)
});

;// CONCATENATED MODULE: ../../node_modules/jsonc-parser/lib/esm/impl/scanner.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Creates a JSON scanner on the given text.
 * If ignoreTrivia is set, whitespaces or comments are ignored.
 */
function createScanner(text, ignoreTrivia = false) {
    const len = text.length;
    let pos = 0, value = '', tokenOffset = 0, token = 16 /* SyntaxKind.Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* ScanError.None */;
    function scanHexDigits(count, exact) {
        let digits = 0;
        let value = 0;
        while (digits < count || !exact) {
            let ch = text.charCodeAt(pos);
            if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {
                value = value * 16 + ch - 48 /* CharacterCodes._0 */;
            }
            else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {
                value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;
            }
            else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {
                value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;
            }
            else {
                break;
            }
            pos++;
            digits++;
        }
        if (digits < count) {
            value = -1;
        }
        return value;
    }
    function setPosition(newPosition) {
        pos = newPosition;
        value = '';
        tokenOffset = 0;
        token = 16 /* SyntaxKind.Unknown */;
        scanError = 0 /* ScanError.None */;
    }
    function scanNumber() {
        let start = pos;
        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {
            pos++;
        }
        else {
            pos++;
            while (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
            }
        }
        if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {
            pos++;
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while (pos < text.length && isDigit(text.charCodeAt(pos))) {
                    pos++;
                }
            }
            else {
                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;
                return text.substring(start, pos);
            }
        }
        let end = pos;
        if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {
            pos++;
            if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {
                pos++;
            }
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while (pos < text.length && isDigit(text.charCodeAt(pos))) {
                    pos++;
                }
                end = pos;
            }
            else {
                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;
            }
        }
        return text.substring(start, end);
    }
    function scanString() {
        let result = '', start = pos;
        while (true) {
            if (pos >= len) {
                result += text.substring(start, pos);
                scanError = 2 /* ScanError.UnexpectedEndOfString */;
                break;
            }
            const ch = text.charCodeAt(pos);
            if (ch === 34 /* CharacterCodes.doubleQuote */) {
                result += text.substring(start, pos);
                pos++;
                break;
            }
            if (ch === 92 /* CharacterCodes.backslash */) {
                result += text.substring(start, pos);
                pos++;
                if (pos >= len) {
                    scanError = 2 /* ScanError.UnexpectedEndOfString */;
                    break;
                }
                const ch2 = text.charCodeAt(pos++);
                switch (ch2) {
                    case 34 /* CharacterCodes.doubleQuote */:
                        result += '\"';
                        break;
                    case 92 /* CharacterCodes.backslash */:
                        result += '\\';
                        break;
                    case 47 /* CharacterCodes.slash */:
                        result += '/';
                        break;
                    case 98 /* CharacterCodes.b */:
                        result += '\b';
                        break;
                    case 102 /* CharacterCodes.f */:
                        result += '\f';
                        break;
                    case 110 /* CharacterCodes.n */:
                        result += '\n';
                        break;
                    case 114 /* CharacterCodes.r */:
                        result += '\r';
                        break;
                    case 116 /* CharacterCodes.t */:
                        result += '\t';
                        break;
                    case 117 /* CharacterCodes.u */:
                        const ch3 = scanHexDigits(4, true);
                        if (ch3 >= 0) {
                            result += String.fromCharCode(ch3);
                        }
                        else {
                            scanError = 4 /* ScanError.InvalidUnicode */;
                        }
                        break;
                    default:
                        scanError = 5 /* ScanError.InvalidEscapeCharacter */;
                }
                start = pos;
                continue;
            }
            if (ch >= 0 && ch <= 0x1f) {
                if (isLineBreak(ch)) {
                    result += text.substring(start, pos);
                    scanError = 2 /* ScanError.UnexpectedEndOfString */;
                    break;
                }
                else {
                    scanError = 6 /* ScanError.InvalidCharacter */;
                    // mark as error but continue with string
                }
            }
            pos++;
        }
        return result;
    }
    function scanNext() {
        value = '';
        scanError = 0 /* ScanError.None */;
        tokenOffset = pos;
        lineStartOffset = lineNumber;
        prevTokenLineStartOffset = tokenLineStartOffset;
        if (pos >= len) {
            // at the end
            tokenOffset = len;
            return token = 17 /* SyntaxKind.EOF */;
        }
        let code = text.charCodeAt(pos);
        // trivia: whitespace
        if (isWhiteSpace(code)) {
            do {
                pos++;
                value += String.fromCharCode(code);
                code = text.charCodeAt(pos);
            } while (isWhiteSpace(code));
            return token = 15 /* SyntaxKind.Trivia */;
        }
        // trivia: newlines
        if (isLineBreak(code)) {
            pos++;
            value += String.fromCharCode(code);
            if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {
                pos++;
                value += '\n';
            }
            lineNumber++;
            tokenLineStartOffset = pos;
            return token = 14 /* SyntaxKind.LineBreakTrivia */;
        }
        switch (code) {
            // tokens: []{}:,
            case 123 /* CharacterCodes.openBrace */:
                pos++;
                return token = 1 /* SyntaxKind.OpenBraceToken */;
            case 125 /* CharacterCodes.closeBrace */:
                pos++;
                return token = 2 /* SyntaxKind.CloseBraceToken */;
            case 91 /* CharacterCodes.openBracket */:
                pos++;
                return token = 3 /* SyntaxKind.OpenBracketToken */;
            case 93 /* CharacterCodes.closeBracket */:
                pos++;
                return token = 4 /* SyntaxKind.CloseBracketToken */;
            case 58 /* CharacterCodes.colon */:
                pos++;
                return token = 6 /* SyntaxKind.ColonToken */;
            case 44 /* CharacterCodes.comma */:
                pos++;
                return token = 5 /* SyntaxKind.CommaToken */;
            // strings
            case 34 /* CharacterCodes.doubleQuote */:
                pos++;
                value = scanString();
                return token = 10 /* SyntaxKind.StringLiteral */;
            // comments
            case 47 /* CharacterCodes.slash */:
                const start = pos - 1;
                // Single-line comment
                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                    pos += 2;
                    while (pos < len) {
                        if (isLineBreak(text.charCodeAt(pos))) {
                            break;
                        }
                        pos++;
                    }
                    value = text.substring(start, pos);
                    return token = 12 /* SyntaxKind.LineCommentTrivia */;
                }
                // Multi-line comment
                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {
                    pos += 2;
                    const safeLength = len - 1; // For lookahead.
                    let commentClosed = false;
                    while (pos < safeLength) {
                        const ch = text.charCodeAt(pos);
                        if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {
                            pos += 2;
                            commentClosed = true;
                            break;
                        }
                        pos++;
                        if (isLineBreak(ch)) {
                            if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {
                                pos++;
                            }
                            lineNumber++;
                            tokenLineStartOffset = pos;
                        }
                    }
                    if (!commentClosed) {
                        pos++;
                        scanError = 1 /* ScanError.UnexpectedEndOfComment */;
                    }
                    value = text.substring(start, pos);
                    return token = 13 /* SyntaxKind.BlockCommentTrivia */;
                }
                // just a single slash
                value += String.fromCharCode(code);
                pos++;
                return token = 16 /* SyntaxKind.Unknown */;
            // numbers
            case 45 /* CharacterCodes.minus */:
                value += String.fromCharCode(code);
                pos++;
                if (pos === len || !isDigit(text.charCodeAt(pos))) {
                    return token = 16 /* SyntaxKind.Unknown */;
                }
            // found a minus, followed by a number so
            // we fall through to proceed with scanning
            // numbers
            case 48 /* CharacterCodes._0 */:
            case 49 /* CharacterCodes._1 */:
            case 50 /* CharacterCodes._2 */:
            case 51 /* CharacterCodes._3 */:
            case 52 /* CharacterCodes._4 */:
            case 53 /* CharacterCodes._5 */:
            case 54 /* CharacterCodes._6 */:
            case 55 /* CharacterCodes._7 */:
            case 56 /* CharacterCodes._8 */:
            case 57 /* CharacterCodes._9 */:
                value += scanNumber();
                return token = 11 /* SyntaxKind.NumericLiteral */;
            // literals and unknown symbols
            default:
                // is a literal? Read the full word.
                while (pos < len && isUnknownContentCharacter(code)) {
                    pos++;
                    code = text.charCodeAt(pos);
                }
                if (tokenOffset !== pos) {
                    value = text.substring(tokenOffset, pos);
                    // keywords: true, false, null
                    switch (value) {
                        case 'true': return token = 8 /* SyntaxKind.TrueKeyword */;
                        case 'false': return token = 9 /* SyntaxKind.FalseKeyword */;
                        case 'null': return token = 7 /* SyntaxKind.NullKeyword */;
                    }
                    return token = 16 /* SyntaxKind.Unknown */;
                }
                // some
                value += String.fromCharCode(code);
                pos++;
                return token = 16 /* SyntaxKind.Unknown */;
        }
    }
    function isUnknownContentCharacter(code) {
        if (isWhiteSpace(code) || isLineBreak(code)) {
            return false;
        }
        switch (code) {
            case 125 /* CharacterCodes.closeBrace */:
            case 93 /* CharacterCodes.closeBracket */:
            case 123 /* CharacterCodes.openBrace */:
            case 91 /* CharacterCodes.openBracket */:
            case 34 /* CharacterCodes.doubleQuote */:
            case 58 /* CharacterCodes.colon */:
            case 44 /* CharacterCodes.comma */:
            case 47 /* CharacterCodes.slash */:
                return false;
        }
        return true;
    }
    function scanNextNonTrivia() {
        let result;
        do {
            result = scanNext();
        } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);
        return result;
    }
    return {
        setPosition: setPosition,
        getPosition: () => pos,
        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
        getToken: () => token,
        getTokenValue: () => value,
        getTokenOffset: () => tokenOffset,
        getTokenLength: () => pos - tokenOffset,
        getTokenStartLine: () => lineStartOffset,
        getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,
        getTokenError: () => scanError,
    };
}
function isWhiteSpace(ch) {
    return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;
}
function isLineBreak(ch) {
    return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;
}
function isDigit(ch) {
    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;
}
var CharacterCodes;
(function (CharacterCodes) {
    CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";
    CharacterCodes[CharacterCodes["carriageReturn"] = 13] = "carriageReturn";
    CharacterCodes[CharacterCodes["space"] = 32] = "space";
    CharacterCodes[CharacterCodes["_0"] = 48] = "_0";
    CharacterCodes[CharacterCodes["_1"] = 49] = "_1";
    CharacterCodes[CharacterCodes["_2"] = 50] = "_2";
    CharacterCodes[CharacterCodes["_3"] = 51] = "_3";
    CharacterCodes[CharacterCodes["_4"] = 52] = "_4";
    CharacterCodes[CharacterCodes["_5"] = 53] = "_5";
    CharacterCodes[CharacterCodes["_6"] = 54] = "_6";
    CharacterCodes[CharacterCodes["_7"] = 55] = "_7";
    CharacterCodes[CharacterCodes["_8"] = 56] = "_8";
    CharacterCodes[CharacterCodes["_9"] = 57] = "_9";
    CharacterCodes[CharacterCodes["a"] = 97] = "a";
    CharacterCodes[CharacterCodes["b"] = 98] = "b";
    CharacterCodes[CharacterCodes["c"] = 99] = "c";
    CharacterCodes[CharacterCodes["d"] = 100] = "d";
    CharacterCodes[CharacterCodes["e"] = 101] = "e";
    CharacterCodes[CharacterCodes["f"] = 102] = "f";
    CharacterCodes[CharacterCodes["g"] = 103] = "g";
    CharacterCodes[CharacterCodes["h"] = 104] = "h";
    CharacterCodes[CharacterCodes["i"] = 105] = "i";
    CharacterCodes[CharacterCodes["j"] = 106] = "j";
    CharacterCodes[CharacterCodes["k"] = 107] = "k";
    CharacterCodes[CharacterCodes["l"] = 108] = "l";
    CharacterCodes[CharacterCodes["m"] = 109] = "m";
    CharacterCodes[CharacterCodes["n"] = 110] = "n";
    CharacterCodes[CharacterCodes["o"] = 111] = "o";
    CharacterCodes[CharacterCodes["p"] = 112] = "p";
    CharacterCodes[CharacterCodes["q"] = 113] = "q";
    CharacterCodes[CharacterCodes["r"] = 114] = "r";
    CharacterCodes[CharacterCodes["s"] = 115] = "s";
    CharacterCodes[CharacterCodes["t"] = 116] = "t";
    CharacterCodes[CharacterCodes["u"] = 117] = "u";
    CharacterCodes[CharacterCodes["v"] = 118] = "v";
    CharacterCodes[CharacterCodes["w"] = 119] = "w";
    CharacterCodes[CharacterCodes["x"] = 120] = "x";
    CharacterCodes[CharacterCodes["y"] = 121] = "y";
    CharacterCodes[CharacterCodes["z"] = 122] = "z";
    CharacterCodes[CharacterCodes["A"] = 65] = "A";
    CharacterCodes[CharacterCodes["B"] = 66] = "B";
    CharacterCodes[CharacterCodes["C"] = 67] = "C";
    CharacterCodes[CharacterCodes["D"] = 68] = "D";
    CharacterCodes[CharacterCodes["E"] = 69] = "E";
    CharacterCodes[CharacterCodes["F"] = 70] = "F";
    CharacterCodes[CharacterCodes["G"] = 71] = "G";
    CharacterCodes[CharacterCodes["H"] = 72] = "H";
    CharacterCodes[CharacterCodes["I"] = 73] = "I";
    CharacterCodes[CharacterCodes["J"] = 74] = "J";
    CharacterCodes[CharacterCodes["K"] = 75] = "K";
    CharacterCodes[CharacterCodes["L"] = 76] = "L";
    CharacterCodes[CharacterCodes["M"] = 77] = "M";
    CharacterCodes[CharacterCodes["N"] = 78] = "N";
    CharacterCodes[CharacterCodes["O"] = 79] = "O";
    CharacterCodes[CharacterCodes["P"] = 80] = "P";
    CharacterCodes[CharacterCodes["Q"] = 81] = "Q";
    CharacterCodes[CharacterCodes["R"] = 82] = "R";
    CharacterCodes[CharacterCodes["S"] = 83] = "S";
    CharacterCodes[CharacterCodes["T"] = 84] = "T";
    CharacterCodes[CharacterCodes["U"] = 85] = "U";
    CharacterCodes[CharacterCodes["V"] = 86] = "V";
    CharacterCodes[CharacterCodes["W"] = 87] = "W";
    CharacterCodes[CharacterCodes["X"] = 88] = "X";
    CharacterCodes[CharacterCodes["Y"] = 89] = "Y";
    CharacterCodes[CharacterCodes["Z"] = 90] = "Z";
    CharacterCodes[CharacterCodes["asterisk"] = 42] = "asterisk";
    CharacterCodes[CharacterCodes["backslash"] = 92] = "backslash";
    CharacterCodes[CharacterCodes["closeBrace"] = 125] = "closeBrace";
    CharacterCodes[CharacterCodes["closeBracket"] = 93] = "closeBracket";
    CharacterCodes[CharacterCodes["colon"] = 58] = "colon";
    CharacterCodes[CharacterCodes["comma"] = 44] = "comma";
    CharacterCodes[CharacterCodes["dot"] = 46] = "dot";
    CharacterCodes[CharacterCodes["doubleQuote"] = 34] = "doubleQuote";
    CharacterCodes[CharacterCodes["minus"] = 45] = "minus";
    CharacterCodes[CharacterCodes["openBrace"] = 123] = "openBrace";
    CharacterCodes[CharacterCodes["openBracket"] = 91] = "openBracket";
    CharacterCodes[CharacterCodes["plus"] = 43] = "plus";
    CharacterCodes[CharacterCodes["slash"] = 47] = "slash";
    CharacterCodes[CharacterCodes["formFeed"] = 12] = "formFeed";
    CharacterCodes[CharacterCodes["tab"] = 9] = "tab";
})(CharacterCodes || (CharacterCodes = {}));

;// CONCATENATED MODULE: ../../node_modules/jsonc-parser/lib/esm/impl/string-intern.js
const cachedSpaces = new Array(20).fill(0).map((_, index) => {
    return ' '.repeat(index);
});
const maxCachedValues = 200;
const cachedBreakLinesWithSpaces = {
    ' ': {
        '\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\n' + ' '.repeat(index);
        }),
        '\r': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r' + ' '.repeat(index);
        }),
        '\r\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r\n' + ' '.repeat(index);
        }),
    },
    '\t': {
        '\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\n' + '\t'.repeat(index);
        }),
        '\r': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r' + '\t'.repeat(index);
        }),
        '\r\n': new Array(maxCachedValues).fill(0).map((_, index) => {
            return '\r\n' + '\t'.repeat(index);
        }),
    }
};
const supportedEols = ['\n', '\r', '\r\n'];

;// CONCATENATED MODULE: ../../node_modules/jsonc-parser/lib/esm/impl/format.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function format(documentText, range, options) {
    let initialIndentLevel;
    let formatText;
    let formatTextStart;
    let rangeStart;
    let rangeEnd;
    if (range) {
        rangeStart = range.offset;
        rangeEnd = rangeStart + range.length;
        formatTextStart = rangeStart;
        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {
            formatTextStart--;
        }
        let endOffset = rangeEnd;
        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {
            endOffset++;
        }
        formatText = documentText.substring(formatTextStart, endOffset);
        initialIndentLevel = computeIndentLevel(formatText, options);
    }
    else {
        formatText = documentText;
        initialIndentLevel = 0;
        formatTextStart = 0;
        rangeStart = 0;
        rangeEnd = documentText.length;
    }
    const eol = getEOL(options, documentText);
    const eolFastPathSupported = supportedEols.includes(eol);
    let numberLineBreaks = 0;
    let indentLevel = 0;
    let indentValue;
    if (options.insertSpaces) {
        indentValue = cachedSpaces[options.tabSize || 4] ?? repeat(cachedSpaces[1], options.tabSize || 4);
    }
    else {
        indentValue = '\t';
    }
    const indentType = indentValue === '\t' ? '\t' : ' ';
    let scanner = createScanner(formatText, false);
    let hasError = false;
    function newLinesAndIndent() {
        if (numberLineBreaks > 1) {
            return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);
        }
        const amountOfSpaces = indentValue.length * (initialIndentLevel + indentLevel);
        if (!eolFastPathSupported || amountOfSpaces > cachedBreakLinesWithSpaces[indentType][eol].length) {
            return eol + repeat(indentValue, initialIndentLevel + indentLevel);
        }
        if (amountOfSpaces <= 0) {
            return eol;
        }
        return cachedBreakLinesWithSpaces[indentType][eol][amountOfSpaces];
    }
    function scanNext() {
        let token = scanner.scan();
        numberLineBreaks = 0;
        while (token === 15 /* SyntaxKind.Trivia */ || token === 14 /* SyntaxKind.LineBreakTrivia */) {
            if (token === 14 /* SyntaxKind.LineBreakTrivia */ && options.keepLines) {
                numberLineBreaks += 1;
            }
            else if (token === 14 /* SyntaxKind.LineBreakTrivia */) {
                numberLineBreaks = 1;
            }
            token = scanner.scan();
        }
        hasError = token === 16 /* SyntaxKind.Unknown */ || scanner.getTokenError() !== 0 /* ScanError.None */;
        return token;
    }
    const editOperations = [];
    function addEdit(text, startOffset, endOffset) {
        if (!hasError && (!range || (startOffset < rangeEnd && endOffset > rangeStart)) && documentText.substring(startOffset, endOffset) !== text) {
            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });
        }
    }
    let firstToken = scanNext();
    if (options.keepLines && numberLineBreaks > 0) {
        addEdit(repeat(eol, numberLineBreaks), 0, 0);
    }
    if (firstToken !== 17 /* SyntaxKind.EOF */) {
        let firstTokenStart = scanner.getTokenOffset() + formatTextStart;
        let initialIndent = (indentValue.length * initialIndentLevel < 20) && options.insertSpaces
            ? cachedSpaces[indentValue.length * initialIndentLevel]
            : repeat(indentValue, initialIndentLevel);
        addEdit(initialIndent, formatTextStart, firstTokenStart);
    }
    while (firstToken !== 17 /* SyntaxKind.EOF */) {
        let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;
        let secondToken = scanNext();
        let replaceContent = '';
        let needsLineBreak = false;
        while (numberLineBreaks === 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {
            let commentTokenStart = scanner.getTokenOffset() + formatTextStart;
            addEdit(cachedSpaces[1], firstTokenEnd, commentTokenStart);
            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;
            needsLineBreak = secondToken === 12 /* SyntaxKind.LineCommentTrivia */;
            replaceContent = needsLineBreak ? newLinesAndIndent() : '';
            secondToken = scanNext();
        }
        if (secondToken === 2 /* SyntaxKind.CloseBraceToken */) {
            if (firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {
                indentLevel--;
            }
            ;
            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {
                replaceContent = newLinesAndIndent();
            }
            else if (options.keepLines) {
                replaceContent = cachedSpaces[1];
            }
        }
        else if (secondToken === 4 /* SyntaxKind.CloseBracketToken */) {
            if (firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {
                indentLevel--;
            }
            ;
            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {
                replaceContent = newLinesAndIndent();
            }
            else if (options.keepLines) {
                replaceContent = cachedSpaces[1];
            }
        }
        else {
            switch (firstToken) {
                case 3 /* SyntaxKind.OpenBracketToken */:
                case 1 /* SyntaxKind.OpenBraceToken */:
                    indentLevel++;
                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {
                        replaceContent = newLinesAndIndent();
                    }
                    else {
                        replaceContent = cachedSpaces[1];
                    }
                    break;
                case 5 /* SyntaxKind.CommaToken */:
                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {
                        replaceContent = newLinesAndIndent();
                    }
                    else {
                        replaceContent = cachedSpaces[1];
                    }
                    break;
                case 12 /* SyntaxKind.LineCommentTrivia */:
                    replaceContent = newLinesAndIndent();
                    break;
                case 13 /* SyntaxKind.BlockCommentTrivia */:
                    if (numberLineBreaks > 0) {
                        replaceContent = newLinesAndIndent();
                    }
                    else if (!needsLineBreak) {
                        replaceContent = cachedSpaces[1];
                    }
                    break;
                case 6 /* SyntaxKind.ColonToken */:
                    if (options.keepLines && numberLineBreaks > 0) {
                        replaceContent = newLinesAndIndent();
                    }
                    else if (!needsLineBreak) {
                        replaceContent = cachedSpaces[1];
                    }
                    break;
                case 10 /* SyntaxKind.StringLiteral */:
                    if (options.keepLines && numberLineBreaks > 0) {
                        replaceContent = newLinesAndIndent();
                    }
                    else if (secondToken === 6 /* SyntaxKind.ColonToken */ && !needsLineBreak) {
                        replaceContent = '';
                    }
                    break;
                case 7 /* SyntaxKind.NullKeyword */:
                case 8 /* SyntaxKind.TrueKeyword */:
                case 9 /* SyntaxKind.FalseKeyword */:
                case 11 /* SyntaxKind.NumericLiteral */:
                case 2 /* SyntaxKind.CloseBraceToken */:
                case 4 /* SyntaxKind.CloseBracketToken */:
                    if (options.keepLines && numberLineBreaks > 0) {
                        replaceContent = newLinesAndIndent();
                    }
                    else {
                        if ((secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */) && !needsLineBreak) {
                            replaceContent = cachedSpaces[1];
                        }
                        else if (secondToken !== 5 /* SyntaxKind.CommaToken */ && secondToken !== 17 /* SyntaxKind.EOF */) {
                            hasError = true;
                        }
                    }
                    break;
                case 16 /* SyntaxKind.Unknown */:
                    hasError = true;
                    break;
            }
            if (numberLineBreaks > 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {
                replaceContent = newLinesAndIndent();
            }
        }
        if (secondToken === 17 /* SyntaxKind.EOF */) {
            if (options.keepLines && numberLineBreaks > 0) {
                replaceContent = newLinesAndIndent();
            }
            else {
                replaceContent = options.insertFinalNewline ? eol : '';
            }
        }
        const secondTokenStart = scanner.getTokenOffset() + formatTextStart;
        addEdit(replaceContent, firstTokenEnd, secondTokenStart);
        firstToken = secondToken;
    }
    return editOperations;
}
function repeat(s, count) {
    let result = '';
    for (let i = 0; i < count; i++) {
        result += s;
    }
    return result;
}
function computeIndentLevel(content, options) {
    let i = 0;
    let nChars = 0;
    const tabSize = options.tabSize || 4;
    while (i < content.length) {
        let ch = content.charAt(i);
        if (ch === cachedSpaces[1]) {
            nChars++;
        }
        else if (ch === '\t') {
            nChars += tabSize;
        }
        else {
            break;
        }
        i++;
    }
    return Math.floor(nChars / tabSize);
}
function getEOL(options, text) {
    for (let i = 0; i < text.length; i++) {
        const ch = text.charAt(i);
        if (ch === '\r') {
            if (i + 1 < text.length && text.charAt(i + 1) === '\n') {
                return '\r\n';
            }
            return '\r';
        }
        else if (ch === '\n') {
            return '\n';
        }
    }
    return (options && options.eol) || '\n';
}
function isEOL(text, offset) {
    return '\r\n'.indexOf(text.charAt(offset)) !== -1;
}

;// CONCATENATED MODULE: ../../node_modules/jsonc-parser/lib/esm/impl/parser.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


var ParseOptions;
(function (ParseOptions) {
    ParseOptions.DEFAULT = {
        allowTrailingComma: false
    };
})(ParseOptions || (ParseOptions = {}));
/**
 * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.
 */
function getLocation(text, position) {
    const segments = []; // strings or numbers
    const earlyReturnException = new Object();
    let previousNode = undefined;
    const previousNodeInst = {
        value: {},
        offset: 0,
        length: 0,
        type: 'object',
        parent: undefined
    };
    let isAtPropertyKey = false;
    function setPreviousNode(value, offset, length, type) {
        previousNodeInst.value = value;
        previousNodeInst.offset = offset;
        previousNodeInst.length = length;
        previousNodeInst.type = type;
        previousNodeInst.colonOffset = undefined;
        previousNode = previousNodeInst;
    }
    try {
        visit(text, {
            onObjectBegin: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                isAtPropertyKey = position > offset;
                segments.push(''); // push a placeholder (will be replaced)
            },
            onObjectProperty: (name, offset, length) => {
                if (position < offset) {
                    throw earlyReturnException;
                }
                setPreviousNode(name, offset, length, 'property');
                segments[segments.length - 1] = name;
                if (position <= offset + length) {
                    throw earlyReturnException;
                }
            },
            onObjectEnd: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                segments.pop();
            },
            onArrayBegin: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                segments.push(0);
            },
            onArrayEnd: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                segments.pop();
            },
            onLiteralValue: (value, offset, length) => {
                if (position < offset) {
                    throw earlyReturnException;
                }
                setPreviousNode(value, offset, length, getNodeType(value));
                if (position <= offset + length) {
                    throw earlyReturnException;
                }
            },
            onSeparator: (sep, offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                if (sep === ':' && previousNode && previousNode.type === 'property') {
                    previousNode.colonOffset = offset;
                    isAtPropertyKey = false;
                    previousNode = undefined;
                }
                else if (sep === ',') {
                    const last = segments[segments.length - 1];
                    if (typeof last === 'number') {
                        segments[segments.length - 1] = last + 1;
                    }
                    else {
                        isAtPropertyKey = true;
                        segments[segments.length - 1] = '';
                    }
                    previousNode = undefined;
                }
            }
        });
    }
    catch (e) {
        if (e !== earlyReturnException) {
            throw e;
        }
    }
    return {
        path: segments,
        previousNode,
        isAtPropertyKey,
        matches: (pattern) => {
            let k = 0;
            for (let i = 0; k < pattern.length && i < segments.length; i++) {
                if (pattern[k] === segments[i] || pattern[k] === '*') {
                    k++;
                }
                else if (pattern[k] !== '**') {
                    return false;
                }
            }
            return k === pattern.length;
        }
    };
}
/**
 * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.
 * Therefore always check the errors list to find out if the input was valid.
 */
function parse(text, errors = [], options = ParseOptions.DEFAULT) {
    let currentProperty = null;
    let currentParent = [];
    const previousParents = [];
    function onValue(value) {
        if (Array.isArray(currentParent)) {
            currentParent.push(value);
        }
        else if (currentProperty !== null) {
            currentParent[currentProperty] = value;
        }
    }
    const visitor = {
        onObjectBegin: () => {
            const object = {};
            onValue(object);
            previousParents.push(currentParent);
            currentParent = object;
            currentProperty = null;
        },
        onObjectProperty: (name) => {
            currentProperty = name;
        },
        onObjectEnd: () => {
            currentParent = previousParents.pop();
        },
        onArrayBegin: () => {
            const array = [];
            onValue(array);
            previousParents.push(currentParent);
            currentParent = array;
            currentProperty = null;
        },
        onArrayEnd: () => {
            currentParent = previousParents.pop();
        },
        onLiteralValue: onValue,
        onError: (error, offset, length) => {
            errors.push({ error, offset, length });
        }
    };
    visit(text, visitor, options);
    return currentParent[0];
}
/**
 * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.
 */
function parseTree(text, errors = [], options = ParseOptions.DEFAULT) {
    let currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined }; // artificial root
    function ensurePropertyComplete(endOffset) {
        if (currentParent.type === 'property') {
            currentParent.length = endOffset - currentParent.offset;
            currentParent = currentParent.parent;
        }
    }
    function onValue(valueNode) {
        currentParent.children.push(valueNode);
        return valueNode;
    }
    const visitor = {
        onObjectBegin: (offset) => {
            currentParent = onValue({ type: 'object', offset, length: -1, parent: currentParent, children: [] });
        },
        onObjectProperty: (name, offset, length) => {
            currentParent = onValue({ type: 'property', offset, length: -1, parent: currentParent, children: [] });
            currentParent.children.push({ type: 'string', value: name, offset, length, parent: currentParent });
        },
        onObjectEnd: (offset, length) => {
            ensurePropertyComplete(offset + length); // in case of a missing value for a property: make sure property is complete
            currentParent.length = offset + length - currentParent.offset;
            currentParent = currentParent.parent;
            ensurePropertyComplete(offset + length);
        },
        onArrayBegin: (offset, length) => {
            currentParent = onValue({ type: 'array', offset, length: -1, parent: currentParent, children: [] });
        },
        onArrayEnd: (offset, length) => {
            currentParent.length = offset + length - currentParent.offset;
            currentParent = currentParent.parent;
            ensurePropertyComplete(offset + length);
        },
        onLiteralValue: (value, offset, length) => {
            onValue({ type: getNodeType(value), offset, length, parent: currentParent, value });
            ensurePropertyComplete(offset + length);
        },
        onSeparator: (sep, offset, length) => {
            if (currentParent.type === 'property') {
                if (sep === ':') {
                    currentParent.colonOffset = offset;
                }
                else if (sep === ',') {
                    ensurePropertyComplete(offset);
                }
            }
        },
        onError: (error, offset, length) => {
            errors.push({ error, offset, length });
        }
    };
    visit(text, visitor, options);
    const result = currentParent.children[0];
    if (result) {
        delete result.parent;
    }
    return result;
}
/**
 * Finds the node at the given path in a JSON DOM.
 */
function findNodeAtLocation(root, path) {
    if (!root) {
        return undefined;
    }
    let node = root;
    for (let segment of path) {
        if (typeof segment === 'string') {
            if (node.type !== 'object' || !Array.isArray(node.children)) {
                return undefined;
            }
            let found = false;
            for (const propertyNode of node.children) {
                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment && propertyNode.children.length === 2) {
                    node = propertyNode.children[1];
                    found = true;
                    break;
                }
            }
            if (!found) {
                return undefined;
            }
        }
        else {
            const index = segment;
            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {
                return undefined;
            }
            node = node.children[index];
        }
    }
    return node;
}
/**
 * Gets the JSON path of the given JSON DOM node
 */
function getNodePath(node) {
    if (!node.parent || !node.parent.children) {
        return [];
    }
    const path = getNodePath(node.parent);
    if (node.parent.type === 'property') {
        const key = node.parent.children[0].value;
        path.push(key);
    }
    else if (node.parent.type === 'array') {
        const index = node.parent.children.indexOf(node);
        if (index !== -1) {
            path.push(index);
        }
    }
    return path;
}
/**
 * Evaluates the JavaScript object of the given JSON DOM node
 */
function getNodeValue(node) {
    switch (node.type) {
        case 'array':
            return node.children.map(getNodeValue);
        case 'object':
            const obj = Object.create(null);
            for (let prop of node.children) {
                const valueNode = prop.children[1];
                if (valueNode) {
                    obj[prop.children[0].value] = getNodeValue(valueNode);
                }
            }
            return obj;
        case 'null':
        case 'string':
        case 'number':
        case 'boolean':
            return node.value;
        default:
            return undefined;
    }
}
function contains(node, offset, includeRightBound = false) {
    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));
}
/**
 * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.
 */
function findNodeAtOffset(node, offset, includeRightBound = false) {
    if (contains(node, offset, includeRightBound)) {
        const children = node.children;
        if (Array.isArray(children)) {
            for (let i = 0; i < children.length && children[i].offset <= offset; i++) {
                const item = findNodeAtOffset(children[i], offset, includeRightBound);
                if (item) {
                    return item;
                }
            }
        }
        return node;
    }
    return undefined;
}
/**
 * Parses the given text and invokes the visitor functions for each object, array and literal reached.
 */
function visit(text, visitor, options = ParseOptions.DEFAULT) {
    const _scanner = createScanner(text, false);
    // Important: Only pass copies of this to visitor functions to prevent accidental modification, and
    // to not affect visitor functions which stored a reference to a previous JSONPath
    const _jsonPath = [];
    function toNoArgVisit(visitFunction) {
        return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
    }
    function toNoArgVisitWithPath(visitFunction) {
        return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
    }
    function toOneArgVisit(visitFunction) {
        return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
    }
    function toOneArgVisitWithPath(visitFunction) {
        return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
    }
    const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
    const disallowComments = options && options.disallowComments;
    const allowTrailingComma = options && options.allowTrailingComma;
    function scanNext() {
        while (true) {
            const token = _scanner.scan();
            switch (_scanner.getTokenError()) {
                case 4 /* ScanError.InvalidUnicode */:
                    handleError(14 /* ParseErrorCode.InvalidUnicode */);
                    break;
                case 5 /* ScanError.InvalidEscapeCharacter */:
                    handleError(15 /* ParseErrorCode.InvalidEscapeCharacter */);
                    break;
                case 3 /* ScanError.UnexpectedEndOfNumber */:
                    handleError(13 /* ParseErrorCode.UnexpectedEndOfNumber */);
                    break;
                case 1 /* ScanError.UnexpectedEndOfComment */:
                    if (!disallowComments) {
                        handleError(11 /* ParseErrorCode.UnexpectedEndOfComment */);
                    }
                    break;
                case 2 /* ScanError.UnexpectedEndOfString */:
                    handleError(12 /* ParseErrorCode.UnexpectedEndOfString */);
                    break;
                case 6 /* ScanError.InvalidCharacter */:
                    handleError(16 /* ParseErrorCode.InvalidCharacter */);
                    break;
            }
            switch (token) {
                case 12 /* SyntaxKind.LineCommentTrivia */:
                case 13 /* SyntaxKind.BlockCommentTrivia */:
                    if (disallowComments) {
                        handleError(10 /* ParseErrorCode.InvalidCommentToken */);
                    }
                    else {
                        onComment();
                    }
                    break;
                case 16 /* SyntaxKind.Unknown */:
                    handleError(1 /* ParseErrorCode.InvalidSymbol */);
                    break;
                case 15 /* SyntaxKind.Trivia */:
                case 14 /* SyntaxKind.LineBreakTrivia */:
                    break;
                default:
                    return token;
            }
        }
    }
    function handleError(error, skipUntilAfter = [], skipUntil = []) {
        onError(error);
        if (skipUntilAfter.length + skipUntil.length > 0) {
            let token = _scanner.getToken();
            while (token !== 17 /* SyntaxKind.EOF */) {
                if (skipUntilAfter.indexOf(token) !== -1) {
                    scanNext();
                    break;
                }
                else if (skipUntil.indexOf(token) !== -1) {
                    break;
                }
                token = scanNext();
            }
        }
    }
    function parseString(isValue) {
        const value = _scanner.getTokenValue();
        if (isValue) {
            onLiteralValue(value);
        }
        else {
            onObjectProperty(value);
            // add property name afterwards
            _jsonPath.push(value);
        }
        scanNext();
        return true;
    }
    function parseLiteral() {
        switch (_scanner.getToken()) {
            case 11 /* SyntaxKind.NumericLiteral */:
                const tokenValue = _scanner.getTokenValue();
                let value = Number(tokenValue);
                if (isNaN(value)) {
                    handleError(2 /* ParseErrorCode.InvalidNumberFormat */);
                    value = 0;
                }
                onLiteralValue(value);
                break;
            case 7 /* SyntaxKind.NullKeyword */:
                onLiteralValue(null);
                break;
            case 8 /* SyntaxKind.TrueKeyword */:
                onLiteralValue(true);
                break;
            case 9 /* SyntaxKind.FalseKeyword */:
                onLiteralValue(false);
                break;
            default:
                return false;
        }
        scanNext();
        return true;
    }
    function parseProperty() {
        if (_scanner.getToken() !== 10 /* SyntaxKind.StringLiteral */) {
            handleError(3 /* ParseErrorCode.PropertyNameExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);
            return false;
        }
        parseString(false);
        if (_scanner.getToken() === 6 /* SyntaxKind.ColonToken */) {
            onSeparator(':');
            scanNext(); // consume colon
            if (!parseValue()) {
                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);
            }
        }
        else {
            handleError(5 /* ParseErrorCode.ColonExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);
        }
        _jsonPath.pop(); // remove processed property name
        return true;
    }
    function parseObject() {
        onObjectBegin();
        scanNext(); // consume open brace
        let needsComma = false;
        while (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {
            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {
                if (!needsComma) {
                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);
                }
                onSeparator(',');
                scanNext(); // consume comma
                if (_scanner.getToken() === 2 /* SyntaxKind.CloseBraceToken */ && allowTrailingComma) {
                    break;
                }
            }
            else if (needsComma) {
                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);
            }
            if (!parseProperty()) {
                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);
            }
            needsComma = true;
        }
        onObjectEnd();
        if (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */) {
            handleError(7 /* ParseErrorCode.CloseBraceExpected */, [2 /* SyntaxKind.CloseBraceToken */], []);
        }
        else {
            scanNext(); // consume close brace
        }
        return true;
    }
    function parseArray() {
        onArrayBegin();
        scanNext(); // consume open bracket
        let isFirstElement = true;
        let needsComma = false;
        while (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {
            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {
                if (!needsComma) {
                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);
                }
                onSeparator(',');
                scanNext(); // consume comma
                if (_scanner.getToken() === 4 /* SyntaxKind.CloseBracketToken */ && allowTrailingComma) {
                    break;
                }
            }
            else if (needsComma) {
                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);
            }
            if (isFirstElement) {
                _jsonPath.push(0);
                isFirstElement = false;
            }
            else {
                _jsonPath[_jsonPath.length - 1]++;
            }
            if (!parseValue()) {
                handleError(4 /* ParseErrorCode.ValueExpected */, [], [4 /* SyntaxKind.CloseBracketToken */, 5 /* SyntaxKind.CommaToken */]);
            }
            needsComma = true;
        }
        onArrayEnd();
        if (!isFirstElement) {
            _jsonPath.pop(); // remove array index
        }
        if (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */) {
            handleError(8 /* ParseErrorCode.CloseBracketExpected */, [4 /* SyntaxKind.CloseBracketToken */], []);
        }
        else {
            scanNext(); // consume close bracket
        }
        return true;
    }
    function parseValue() {
        switch (_scanner.getToken()) {
            case 3 /* SyntaxKind.OpenBracketToken */:
                return parseArray();
            case 1 /* SyntaxKind.OpenBraceToken */:
                return parseObject();
            case 10 /* SyntaxKind.StringLiteral */:
                return parseString(true);
            default:
                return parseLiteral();
        }
    }
    scanNext();
    if (_scanner.getToken() === 17 /* SyntaxKind.EOF */) {
        if (options.allowEmptyContent) {
            return true;
        }
        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);
        return false;
    }
    if (!parseValue()) {
        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);
        return false;
    }
    if (_scanner.getToken() !== 17 /* SyntaxKind.EOF */) {
        handleError(9 /* ParseErrorCode.EndOfFileExpected */, [], []);
    }
    return true;
}
/**
 * Takes JSON with JavaScript-style comments and remove
 * them. Optionally replaces every none-newline character
 * of comments with a replaceCharacter
 */
function stripComments(text, replaceCh) {
    let _scanner = createScanner(text), parts = [], kind, offset = 0, pos;
    do {
        pos = _scanner.getPosition();
        kind = _scanner.scan();
        switch (kind) {
            case 12 /* SyntaxKind.LineCommentTrivia */:
            case 13 /* SyntaxKind.BlockCommentTrivia */:
            case 17 /* SyntaxKind.EOF */:
                if (offset !== pos) {
                    parts.push(text.substring(offset, pos));
                }
                if (replaceCh !== undefined) {
                    parts.push(_scanner.getTokenValue().replace(/[^\r\n]/g, replaceCh));
                }
                offset = _scanner.getPosition();
                break;
        }
    } while (kind !== 17 /* SyntaxKind.EOF */);
    return parts.join('');
}
function getNodeType(value) {
    switch (typeof value) {
        case 'boolean': return 'boolean';
        case 'number': return 'number';
        case 'string': return 'string';
        case 'object': {
            if (!value) {
                return 'null';
            }
            else if (Array.isArray(value)) {
                return 'array';
            }
            return 'object';
        }
        default: return 'null';
    }
}

;// CONCATENATED MODULE: ../../node_modules/jsonc-parser/lib/esm/impl/edit.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function removeProperty(text, path, options) {
    return setProperty(text, path, void 0, options);
}
function setProperty(text, originalPath, value, options) {
    const path = originalPath.slice();
    const errors = [];
    const root = parseTree(text, errors);
    let parent = void 0;
    let lastSegment = void 0;
    while (path.length > 0) {
        lastSegment = path.pop();
        parent = findNodeAtLocation(root, path);
        if (parent === void 0 && value !== void 0) {
            if (typeof lastSegment === 'string') {
                value = { [lastSegment]: value };
            }
            else {
                value = [value];
            }
        }
        else {
            break;
        }
    }
    if (!parent) {
        // empty document
        if (value === void 0) { // delete
            throw new Error('Can not delete in empty document');
        }
        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, options);
    }
    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {
        const existing = findNodeAtLocation(parent, [lastSegment]);
        if (existing !== void 0) {
            if (value === void 0) { // delete
                if (!existing.parent) {
                    throw new Error('Malformed AST');
                }
                const propertyIndex = parent.children.indexOf(existing.parent);
                let removeBegin;
                let removeEnd = existing.parent.offset + existing.parent.length;
                if (propertyIndex > 0) {
                    // remove the comma of the previous node
                    let previous = parent.children[propertyIndex - 1];
                    removeBegin = previous.offset + previous.length;
                }
                else {
                    removeBegin = parent.offset + 1;
                    if (parent.children.length > 1) {
                        // remove the comma of the next node
                        let next = parent.children[1];
                        removeEnd = next.offset;
                    }
                }
                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, options);
            }
            else {
                // set value of existing property
                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, options);
            }
        }
        else {
            if (value === void 0) { // delete
                return []; // property does not exist, nothing to do
            }
            const newProperty = `${JSON.stringify(lastSegment)}: ${JSON.stringify(value)}`;
            const index = options.getInsertionIndex ? options.getInsertionIndex(parent.children.map(p => p.children[0].value)) : parent.children.length;
            let edit;
            if (index > 0) {
                let previous = parent.children[index - 1];
                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };
            }
            else if (parent.children.length === 0) {
                edit = { offset: parent.offset + 1, length: 0, content: newProperty };
            }
            else {
                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };
            }
            return withFormatting(text, edit, options);
        }
    }
    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {
        const insertIndex = lastSegment;
        if (insertIndex === -1) {
            // Insert
            const newProperty = `${JSON.stringify(value)}`;
            let edit;
            if (parent.children.length === 0) {
                edit = { offset: parent.offset + 1, length: 0, content: newProperty };
            }
            else {
                const previous = parent.children[parent.children.length - 1];
                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };
            }
            return withFormatting(text, edit, options);
        }
        else if (value === void 0 && parent.children.length >= 0) {
            // Removal
            const removalIndex = lastSegment;
            const toRemove = parent.children[removalIndex];
            let edit;
            if (parent.children.length === 1) {
                // only item
                edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };
            }
            else if (parent.children.length - 1 === removalIndex) {
                // last item
                let previous = parent.children[removalIndex - 1];
                let offset = previous.offset + previous.length;
                let parentEndOffset = parent.offset + parent.length;
                edit = { offset, length: parentEndOffset - 2 - offset, content: '' };
            }
            else {
                edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };
            }
            return withFormatting(text, edit, options);
        }
        else if (value !== void 0) {
            let edit;
            const newProperty = `${JSON.stringify(value)}`;
            if (!options.isArrayInsertion && parent.children.length > lastSegment) {
                const toModify = parent.children[lastSegment];
                edit = { offset: toModify.offset, length: toModify.length, content: newProperty };
            }
            else if (parent.children.length === 0 || lastSegment === 0) {
                edit = { offset: parent.offset + 1, length: 0, content: parent.children.length === 0 ? newProperty : newProperty + ',' };
            }
            else {
                const index = lastSegment > parent.children.length ? parent.children.length : lastSegment;
                const previous = parent.children[index - 1];
                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };
            }
            return withFormatting(text, edit, options);
        }
        else {
            throw new Error(`Can not ${value === void 0 ? 'remove' : (options.isArrayInsertion ? 'insert' : 'modify')} Array index ${insertIndex} as length is not sufficient`);
        }
    }
    else {
        throw new Error(`Can not add ${typeof lastSegment !== 'number' ? 'index' : 'property'} to parent of type ${parent.type}`);
    }
}
function withFormatting(text, edit, options) {
    if (!options.formattingOptions) {
        return [edit];
    }
    // apply the edit
    let newText = applyEdit(text, edit);
    // format the new text
    let begin = edit.offset;
    let end = edit.offset + edit.content.length;
    if (edit.length === 0 || edit.content.length === 0) { // insert or remove
        while (begin > 0 && !isEOL(newText, begin - 1)) {
            begin--;
        }
        while (end < newText.length && !isEOL(newText, end)) {
            end++;
        }
    }
    const edits = format(newText, { offset: begin, length: end - begin }, { ...options.formattingOptions, keepLines: false });
    // apply the formatting edits and track the begin and end offsets of the changes
    for (let i = edits.length - 1; i >= 0; i--) {
        const edit = edits[i];
        newText = applyEdit(newText, edit);
        begin = Math.min(begin, edit.offset);
        end = Math.max(end, edit.offset + edit.length);
        end += edit.content.length - edit.length;
    }
    // create a single edit with all changes
    const editLength = text.length - (newText.length - end) - begin;
    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];
}
function applyEdit(text, edit) {
    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);
}
function isWS(text, offset) {
    return '\r\n \t'.indexOf(text.charAt(offset)) !== -1;
}

;// CONCATENATED MODULE: ../../node_modules/jsonc-parser/lib/esm/main.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





/**
 * Creates a JSON scanner on the given text.
 * If ignoreTrivia is set, whitespaces or comments are ignored.
 */
const main_createScanner = createScanner;
var ScanError;
(function (ScanError) {
    ScanError[ScanError["None"] = 0] = "None";
    ScanError[ScanError["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
    ScanError[ScanError["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
    ScanError[ScanError["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
    ScanError[ScanError["InvalidUnicode"] = 4] = "InvalidUnicode";
    ScanError[ScanError["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
    ScanError[ScanError["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {}));
var SyntaxKind;
(function (SyntaxKind) {
    SyntaxKind[SyntaxKind["OpenBraceToken"] = 1] = "OpenBraceToken";
    SyntaxKind[SyntaxKind["CloseBraceToken"] = 2] = "CloseBraceToken";
    SyntaxKind[SyntaxKind["OpenBracketToken"] = 3] = "OpenBracketToken";
    SyntaxKind[SyntaxKind["CloseBracketToken"] = 4] = "CloseBracketToken";
    SyntaxKind[SyntaxKind["CommaToken"] = 5] = "CommaToken";
    SyntaxKind[SyntaxKind["ColonToken"] = 6] = "ColonToken";
    SyntaxKind[SyntaxKind["NullKeyword"] = 7] = "NullKeyword";
    SyntaxKind[SyntaxKind["TrueKeyword"] = 8] = "TrueKeyword";
    SyntaxKind[SyntaxKind["FalseKeyword"] = 9] = "FalseKeyword";
    SyntaxKind[SyntaxKind["StringLiteral"] = 10] = "StringLiteral";
    SyntaxKind[SyntaxKind["NumericLiteral"] = 11] = "NumericLiteral";
    SyntaxKind[SyntaxKind["LineCommentTrivia"] = 12] = "LineCommentTrivia";
    SyntaxKind[SyntaxKind["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
    SyntaxKind[SyntaxKind["LineBreakTrivia"] = 14] = "LineBreakTrivia";
    SyntaxKind[SyntaxKind["Trivia"] = 15] = "Trivia";
    SyntaxKind[SyntaxKind["Unknown"] = 16] = "Unknown";
    SyntaxKind[SyntaxKind["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {}));
/**
 * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.
 */
const main_getLocation = getLocation;
/**
 * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.
 * Therefore, always check the errors list to find out if the input was valid.
 */
const main_parse = parse;
/**
 * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.
 */
const main_parseTree = parseTree;
/**
 * Finds the node at the given path in a JSON DOM.
 */
const main_findNodeAtLocation = findNodeAtLocation;
/**
 * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.
 */
const main_findNodeAtOffset = findNodeAtOffset;
/**
 * Gets the JSON path of the given JSON DOM node
 */
const main_getNodePath = getNodePath;
/**
 * Evaluates the JavaScript object of the given JSON DOM node
 */
const main_getNodeValue = getNodeValue;
/**
 * Parses the given text and invokes the visitor functions for each object, array and literal reached.
 */
const main_visit = visit;
/**
 * Takes JSON with JavaScript-style comments and remove
 * them. Optionally replaces every none-newline character
 * of comments with a replaceCharacter
 */
const main_stripComments = stripComments;
var ParseErrorCode;
(function (ParseErrorCode) {
    ParseErrorCode[ParseErrorCode["InvalidSymbol"] = 1] = "InvalidSymbol";
    ParseErrorCode[ParseErrorCode["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
    ParseErrorCode[ParseErrorCode["PropertyNameExpected"] = 3] = "PropertyNameExpected";
    ParseErrorCode[ParseErrorCode["ValueExpected"] = 4] = "ValueExpected";
    ParseErrorCode[ParseErrorCode["ColonExpected"] = 5] = "ColonExpected";
    ParseErrorCode[ParseErrorCode["CommaExpected"] = 6] = "CommaExpected";
    ParseErrorCode[ParseErrorCode["CloseBraceExpected"] = 7] = "CloseBraceExpected";
    ParseErrorCode[ParseErrorCode["CloseBracketExpected"] = 8] = "CloseBracketExpected";
    ParseErrorCode[ParseErrorCode["EndOfFileExpected"] = 9] = "EndOfFileExpected";
    ParseErrorCode[ParseErrorCode["InvalidCommentToken"] = 10] = "InvalidCommentToken";
    ParseErrorCode[ParseErrorCode["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
    ParseErrorCode[ParseErrorCode["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
    ParseErrorCode[ParseErrorCode["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
    ParseErrorCode[ParseErrorCode["InvalidUnicode"] = 14] = "InvalidUnicode";
    ParseErrorCode[ParseErrorCode["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
    ParseErrorCode[ParseErrorCode["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {}));
function printParseErrorCode(code) {
    switch (code) {
        case 1 /* ParseErrorCode.InvalidSymbol */: return 'InvalidSymbol';
        case 2 /* ParseErrorCode.InvalidNumberFormat */: return 'InvalidNumberFormat';
        case 3 /* ParseErrorCode.PropertyNameExpected */: return 'PropertyNameExpected';
        case 4 /* ParseErrorCode.ValueExpected */: return 'ValueExpected';
        case 5 /* ParseErrorCode.ColonExpected */: return 'ColonExpected';
        case 6 /* ParseErrorCode.CommaExpected */: return 'CommaExpected';
        case 7 /* ParseErrorCode.CloseBraceExpected */: return 'CloseBraceExpected';
        case 8 /* ParseErrorCode.CloseBracketExpected */: return 'CloseBracketExpected';
        case 9 /* ParseErrorCode.EndOfFileExpected */: return 'EndOfFileExpected';
        case 10 /* ParseErrorCode.InvalidCommentToken */: return 'InvalidCommentToken';
        case 11 /* ParseErrorCode.UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';
        case 12 /* ParseErrorCode.UnexpectedEndOfString */: return 'UnexpectedEndOfString';
        case 13 /* ParseErrorCode.UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';
        case 14 /* ParseErrorCode.InvalidUnicode */: return 'InvalidUnicode';
        case 15 /* ParseErrorCode.InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';
        case 16 /* ParseErrorCode.InvalidCharacter */: return 'InvalidCharacter';
    }
    return '<unknown ParseErrorCode>';
}
/**
 * Computes the edit operations needed to format a JSON document.
 *
 * @param documentText The input text
 * @param range The range to format or `undefined` to format the full content
 * @param options The formatting options
 * @returns The edit operations describing the formatting changes to the original document following the format described in {@linkcode EditResult}.
 * To apply the edit operations to the input, use {@linkcode applyEdits}.
 */
function main_format(documentText, range, options) {
    return format(documentText, range, options);
}
/**
 * Computes the edit operations needed to modify a value in the JSON document.
 *
 * @param documentText The input text
 * @param path The path of the value to change. The path represents either to the document root, a property or an array item.
 * If the path points to an non-existing property or item, it will be created.
 * @param value The new value for the specified property or item. If the value is undefined,
 * the property or item will be removed.
 * @param options Options
 * @returns The edit operations describing the changes to the original document, following the format described in {@linkcode EditResult}.
 * To apply the edit operations to the input, use {@linkcode applyEdits}.
 */
function modify(text, path, value, options) {
    return setProperty(text, path, value, options);
}
/**
 * Applies edits to an input string.
 * @param text The input text
 * @param edits Edit operations following the format described in {@linkcode EditResult}.
 * @returns The text with the applied edits.
 * @throws An error if the edit operations are not well-formed as described in {@linkcode EditResult}.
 */
function applyEdits(text, edits) {
    let sortedEdits = edits.slice(0).sort((a, b) => {
        const diff = a.offset - b.offset;
        if (diff === 0) {
            return a.length - b.length;
        }
        return diff;
    });
    let lastModifiedOffset = text.length;
    for (let i = sortedEdits.length - 1; i >= 0; i--) {
        let e = sortedEdits[i];
        if (e.offset + e.length <= lastModifiedOffset) {
            text = applyEdit(text, e);
        }
        else {
            throw new Error('Overlapping edit');
        }
        lastModifiedOffset = e.offset;
    }
    return text;
}


/***/ }),

/***/ 4638:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * line-column - Convert efficiently index to/from line-column in a string
 * @module  lineColumn
 * @license MIT
 */


var isArray  = __webpack_require__(6815);
var isObject = __webpack_require__(9537);
var slice = Array.prototype.slice;

module.exports = LineColumnFinder;

/**
 * Finder for index and line-column from given string.
 *
 * You can call this without `new` operator as it returns an instance anyway.
 *
 * @class
 * @param {string} str - A string to be parsed.
 * @param {Object|number} [options] - Options.
 *     This can be an index in the string for shorthand of `lineColumn(str, index)`.
 * @param {number} [options.origin=1] - The origin value of line and column.
 */
function LineColumnFinder(str, options) {
  if (!(this instanceof LineColumnFinder)) {
    if (typeof options === "number") {
      return (new LineColumnFinder(str)).fromIndex(options);
    }
    return new LineColumnFinder(str, options);
  }

  this.str = str || "";
  this.lineToIndex = buildLineToIndex(this.str);

  options = options || {};
  this.origin = typeof options.origin === "undefined" ? 1 : options.origin;
}

/**
 * Find line and column from index in the string.
 *
 * @param  {number} index - Index in the string. (0-origin)
 * @return {Object|null}
 *     Found line number and column number in object `{ line: X, col: Y }`.
 *     If the given index is out of range, it returns `null`.
 */
LineColumnFinder.prototype.fromIndex = function (index) {
  if (index < 0 || index >= this.str.length || isNaN(index)) {
    return null;
  }

  var line = findLowerIndexInRangeArray(index, this.lineToIndex);
  return {
    line: line + this.origin,
    col:  index - this.lineToIndex[line] + this.origin
  };
}

/**
 * Find index from line and column in the string.
 *
 * @param  {number|Object|Array} line - Line number in the string.
 *     This can be an Object of `{ line: X, col: Y }`, or
 *     an Array of `[line, col]`.
 * @param  {number} [column] - Column number in the string.
 *     This must be omitted or undefined when Object or Array is given
 *     to the first argument.
 * @return {number}
 *     Found index in the string. (always 0-origin)
 *     If the given line or column is out of range, it returns `-1`.
 */
LineColumnFinder.prototype.toIndex = function (line, column) {
  if (typeof column === "undefined") {
    if (isArray(line) && line.length >= 2) {
      return this.toIndex(line[0], line[1]);
    }
    if (isObject(line) && "line" in line && ("col" in line || "column" in line)) {
      return this.toIndex(line.line, ("col" in line ? line.col : line.column));
    }
    return -1;
  }
  if (isNaN(line) || isNaN(column)) {
    return -1;
  }

  line -= this.origin;
  column -= this.origin;

  if (line >= 0 && column >= 0 && line < this.lineToIndex.length) {
    var lineIndex = this.lineToIndex[line];
    var nextIndex = (
      line === this.lineToIndex.length - 1
        ? this.str.length
        : this.lineToIndex[line + 1]
    );

    if (column < nextIndex - lineIndex) {
      return lineIndex + column;
    }
  }
  return -1;
}

/**
 * Build an array of indexes of each line from a string.
 *
 * @private
 * @param   str {string}  An input string.
 * @return  {number[]}    Built array of indexes. The key is line number.
 */
function buildLineToIndex(str) {
  var lines = str.split("\n"),
      lineToIndex = new Array(lines.length),
      index = 0;

  for (var i = 0, l = lines.length; i < l; i++) {
    lineToIndex[i] = index;
    index += lines[i].length + /* "\n".length */ 1;
  }
  return lineToIndex;
}

/**
 * Find a lower-bound index of a value in a sorted array of ranges.
 *
 * Assume `arr = [0, 5, 10, 15, 20]` and
 * this returns `1` for `value = 7` (5 <= value < 10),
 * and returns `3` for `value = 18` (15 <= value < 20).
 *
 * @private
 * @param  arr   {number[]} An array of values representing ranges.
 * @param  value {number}   A value to be searched.
 * @return {number} Found index. If not found `-1`.
 */
function findLowerIndexInRangeArray(value, arr) {
  if (value >= arr[arr.length - 1]) {
    return arr.length - 1;
  }

  var min = 0, max = arr.length - 2, mid;
  while (min < max) {
    mid = min + ((max - min) >> 1);

    if (value < arr[mid]) {
      max = mid - 1;
    } else if (value >= arr[mid + 1]) {
      min = mid + 1;
    } else { // value >= arr[mid] && value < arr[mid + 1]
      min = mid;
      break;
    }
  }
  return min;
}


/***/ }),

/***/ 5098:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__(3305),
    hashDelete = __webpack_require__(9361),
    hashGet = __webpack_require__(1112),
    hashHas = __webpack_require__(5276),
    hashSet = __webpack_require__(7452);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ 1386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(2393),
    listCacheDelete = __webpack_require__(2049),
    listCacheGet = __webpack_require__(7144),
    listCacheHas = __webpack_require__(5071),
    listCacheSet = __webpack_require__(3964);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ 9770:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(4715),
    root = __webpack_require__(8942);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ 8250:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__(2134),
    mapCacheDelete = __webpack_require__(5681),
    mapCacheGet = __webpack_require__(88),
    mapCacheHas = __webpack_require__(4732),
    mapCacheSet = __webpack_require__(9068);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ 5650:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(8942);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ 5111:
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ 4187:
/***/ ((module) => {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;


/***/ }),

/***/ 2837:
/***/ ((module) => {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;


/***/ }),

/***/ 9546:
/***/ ((module) => {

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

module.exports = asciiWords;


/***/ }),

/***/ 3422:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(7073),
    eq = __webpack_require__(6285);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ 7034:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(6285);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ 7073:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__(2532);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ 7923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(3526),
    toKey = __webpack_require__(6040);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ 7379:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(5650),
    getRawTag = __webpack_require__(8870),
    objectToString = __webpack_require__(9005);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ 9624:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(3655),
    isMasked = __webpack_require__(4759),
    isObject = __webpack_require__(1580),
    toSource = __webpack_require__(4066);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ 1035:
/***/ ((module) => {

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;


/***/ }),

/***/ 7655:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(3422),
    castPath = __webpack_require__(3526),
    isIndex = __webpack_require__(9632),
    isObject = __webpack_require__(1580),
    toKey = __webpack_require__(6040);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),

/***/ 3501:
/***/ ((module) => {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;


/***/ }),

/***/ 2291:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(5650),
    arrayMap = __webpack_require__(5111),
    isArray = __webpack_require__(3142),
    isSymbol = __webpack_require__(1187);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ 1586:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(3526),
    last = __webpack_require__(8087),
    parent = __webpack_require__(3398),
    toKey = __webpack_require__(6040);

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;


/***/ }),

/***/ 3526:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(3142),
    isKey = __webpack_require__(5187),
    stringToPath = __webpack_require__(6493),
    toString = __webpack_require__(5243);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ 8931:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSlice = __webpack_require__(3501);

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

module.exports = castSlice;


/***/ }),

/***/ 1950:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(8942);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ 4326:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castSlice = __webpack_require__(8931),
    hasUnicode = __webpack_require__(3417),
    stringToArray = __webpack_require__(2237),
    toString = __webpack_require__(5243);

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;


/***/ }),

/***/ 3640:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayReduce = __webpack_require__(4187),
    deburr = __webpack_require__(5881),
    words = __webpack_require__(9850);

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

module.exports = createCompounder;


/***/ }),

/***/ 9968:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var basePropertyOf = __webpack_require__(1035);

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

module.exports = deburrLetter;


/***/ }),

/***/ 2532:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(4715);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ 4967:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ 4700:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__(9067);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ 4715:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__(9624),
    getValue = __webpack_require__(155);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ 8870:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(5650);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ 155:
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ 3417:
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;


/***/ }),

/***/ 5813:
/***/ ((module) => {

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

module.exports = hasUnicodeWord;


/***/ }),

/***/ 3305:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(4497);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ 9361:
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ 1112:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(4497);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ 5276:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(4497);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ 7452:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(4497);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ 9632:
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ 5187:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(3142),
    isSymbol = __webpack_require__(1187);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ 9067:
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ 4759:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__(1950);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ 2393:
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ 2049:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(7034);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ 7144:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(7034);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ 5071:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(7034);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ 3964:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(7034);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ 2134:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__(5098),
    ListCache = __webpack_require__(1386),
    Map = __webpack_require__(9770);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ 5681:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(4700);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ 88:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(4700);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ 4732:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(4700);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ 9068:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(4700);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ 6853:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__(9011);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ 4497:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(4715);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ 9005:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ 3398:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(7923),
    baseSlice = __webpack_require__(3501);

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;


/***/ }),

/***/ 8942:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(4967);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ 2237:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiToArray = __webpack_require__(2837),
    hasUnicode = __webpack_require__(3417),
    unicodeToArray = __webpack_require__(2013);

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

module.exports = stringToArray;


/***/ }),

/***/ 6493:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__(6853);

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ 6040:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(1187);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ 4066:
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ 2013:
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;


/***/ }),

/***/ 482:
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;


/***/ }),

/***/ 9677:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var capitalize = __webpack_require__(6005),
    createCompounder = __webpack_require__(3640);

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});

module.exports = camelCase;


/***/ }),

/***/ 6005:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toString = __webpack_require__(5243),
    upperFirst = __webpack_require__(5485);

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}

module.exports = capitalize;


/***/ }),

/***/ 5881:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var deburrLetter = __webpack_require__(9968),
    toString = __webpack_require__(5243);

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

/** Used to compose unicode capture groups. */
var rsCombo = '[' + rsComboRange + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

module.exports = deburr;


/***/ }),

/***/ 6285:
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ 3142:
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ 3655:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(7379),
    isObject = __webpack_require__(1580);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ 1580:
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ 547:
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ 1187:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(7379),
    isObjectLike = __webpack_require__(547);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ 750:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createCompounder = __webpack_require__(3640);

/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */
var kebabCase = createCompounder(function(result, word, index) {
  return result + (index ? '-' : '') + word.toLowerCase();
});

module.exports = kebabCase;


/***/ }),

/***/ 8087:
/***/ ((module) => {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;


/***/ }),

/***/ 9011:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(8250);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ 1263:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSet = __webpack_require__(7655);

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

module.exports = set;


/***/ }),

/***/ 9867:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createCompounder = __webpack_require__(3640);

/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */
var snakeCase = createCompounder(function(result, word, index) {
  return result + (index ? '_' : '') + word.toLowerCase();
});

module.exports = snakeCase;


/***/ }),

/***/ 5243:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(2291);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ 3450:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseUnset = __webpack_require__(1586);

/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

module.exports = unset;


/***/ }),

/***/ 5485:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createCaseFirst = __webpack_require__(4326);

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

module.exports = upperFirst;


/***/ }),

/***/ 9850:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiWords = __webpack_require__(9546),
    hasUnicodeWord = __webpack_require__(5813),
    toString = __webpack_require__(5243),
    unicodeWords = __webpack_require__(482);

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = words;


/***/ }),

/***/ 350:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ohm),
/* harmony export */   extras: () => (/* binding */ extras)
/* harmony export */ });
/// <reference types="../index.d.ts" />
var main$1 = {exports: {}};

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

/*
  `Failure`s represent expressions that weren't matched while parsing. They are used to generate
  error messages automatically. The interface of `Failure`s includes the collowing methods:

  - getText() : String
  - getType() : String  (one of {"description", "string", "code"})
  - isDescription() : bool
  - isStringTerminal() : bool
  - isCode() : bool
  - isFluffy() : bool
  - makeFluffy() : void
  - subsumes(Failure) : bool
*/

function isValidType(type) {
  return type === 'description' || type === 'string' || type === 'code';
}

function Failure$2(pexpr, text, type) {
  if (!isValidType(type)) {
    throw new Error('invalid Failure type: ' + type);
  }
  this.pexpr = pexpr;
  this.text = text;
  this.type = type;
  this.fluffy = false;
}

Failure$2.prototype.getPExpr = function() {
  return this.pexpr;
};

Failure$2.prototype.getText = function() {
  return this.text;
};

Failure$2.prototype.getType = function() {
  return this.type;
};

Failure$2.prototype.isDescription = function() {
  return this.type === 'description';
};

Failure$2.prototype.isStringTerminal = function() {
  return this.type === 'string';
};

Failure$2.prototype.isCode = function() {
  return this.type === 'code';
};

Failure$2.prototype.isFluffy = function() {
  return this.fluffy;
};

Failure$2.prototype.makeFluffy = function() {
  this.fluffy = true;
};

Failure$2.prototype.clearFluffy = function() {
  this.fluffy = false;
};

Failure$2.prototype.subsumes = function(that) {
  return (
    this.getText() === that.getText() &&
    this.type === that.type &&
    (!this.isFluffy() || (this.isFluffy() && that.isFluffy()))
  );
};

Failure$2.prototype.toString = function() {
  return this.type === 'string' ? JSON.stringify(this.getText()) : this.getText();
};

Failure$2.prototype.clone = function() {
  const failure = new Failure$2(this.pexpr, this.text, this.type);
  if (this.isFluffy()) {
    failure.makeFluffy();
  }
  return failure;
};

Failure$2.prototype.toKey = function() {
  return this.toString() + '#' + this.type;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Failure_1 = Failure$2;

var common$l = {};

(function (exports) {

// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Helpers

const escapeStringFor = {};
for (let c = 0; c < 128; c++) {
  escapeStringFor[c] = String.fromCharCode(c);
}
escapeStringFor["'".charCodeAt(0)] = "\\'";
escapeStringFor['"'.charCodeAt(0)] = '\\"';
escapeStringFor['\\'.charCodeAt(0)] = '\\\\';
escapeStringFor['\b'.charCodeAt(0)] = '\\b';
escapeStringFor['\f'.charCodeAt(0)] = '\\f';
escapeStringFor['\n'.charCodeAt(0)] = '\\n';
escapeStringFor['\r'.charCodeAt(0)] = '\\r';
escapeStringFor['\t'.charCodeAt(0)] = '\\t';
escapeStringFor['\u000b'.charCodeAt(0)] = '\\v';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

exports.abstract = function(optMethodName) {
  const methodName = optMethodName || '';
  return function() {
    throw new Error(
        'this method ' +
        methodName +
        ' is abstract! ' +
        '(it has no implementation in class ' +
        this.constructor.name +
        ')'
    );
  };
};

exports.assert = function(cond, message) {
  if (!cond) {
    throw new Error(message || 'Assertion failed');
  }
};

// Define a lazily-computed, non-enumerable property named `propName`
// on the object `obj`. `getterFn` will be called to compute the value the
// first time the property is accessed.
exports.defineLazyProperty = function(obj, propName, getterFn) {
  let memo;
  Object.defineProperty(obj, propName, {
    get() {
      if (!memo) {
        memo = getterFn.call(this);
      }
      return memo;
    },
  });
};

exports.clone = function(obj) {
  if (obj) {
    return Object.assign({}, obj);
  }
  return obj;
};

exports.repeatFn = function(fn, n) {
  const arr = [];
  while (n-- > 0) {
    arr.push(fn());
  }
  return arr;
};

exports.repeatStr = function(str, n) {
  return new Array(n + 1).join(str);
};

exports.repeat = function(x, n) {
  return exports.repeatFn(() => x, n);
};

exports.getDuplicates = function(array) {
  const duplicates = [];
  for (let idx = 0; idx < array.length; idx++) {
    const x = array[idx];
    if (array.lastIndexOf(x) !== idx && duplicates.indexOf(x) < 0) {
      duplicates.push(x);
    }
  }
  return duplicates;
};

exports.copyWithoutDuplicates = function(array) {
  const noDuplicates = [];
  array.forEach(entry => {
    if (noDuplicates.indexOf(entry) < 0) {
      noDuplicates.push(entry);
    }
  });
  return noDuplicates;
};

exports.isSyntactic = function(ruleName) {
  const firstChar = ruleName[0];
  return firstChar === firstChar.toUpperCase();
};

exports.isLexical = function(ruleName) {
  return !exports.isSyntactic(ruleName);
};

exports.padLeft = function(str, len, optChar) {
  const ch = optChar || ' ';
  if (str.length < len) {
    return exports.repeatStr(ch, len - str.length) + str;
  }
  return str;
};

// StringBuffer

exports.StringBuffer = function() {
  this.strings = [];
};

exports.StringBuffer.prototype.append = function(str) {
  this.strings.push(str);
};

exports.StringBuffer.prototype.contents = function() {
  return this.strings.join('');
};

const escapeUnicode = str => String.fromCodePoint(parseInt(str, 16));

exports.unescapeCodePoint = function(s) {
  if (s.charAt(0) === '\\') {
    switch (s.charAt(1)) {
      case 'b':
        return '\b';
      case 'f':
        return '\f';
      case 'n':
        return '\n';
      case 'r':
        return '\r';
      case 't':
        return '\t';
      case 'v':
        return '\v';
      case 'x':
        return escapeUnicode(s.slice(2, 4));
      case 'u':
        return s.charAt(2) === '{' ?
          escapeUnicode(s.slice(3, -1)) :
          escapeUnicode(s.slice(2, 6));
      default:
        return s.charAt(1);
    }
  } else {
    return s;
  }
};

// Helper for producing a description of an unknown object in a safe way.
// Especially useful for error messages where an unexpected type of object was encountered.
exports.unexpectedObjToString = function(obj) {
  if (obj == null) {
    return String(obj);
  }
  const baseToString = Object.prototype.toString.call(obj);
  try {
    let typeName;
    if (obj.constructor && obj.constructor.name) {
      typeName = obj.constructor.name;
    } else if (baseToString.indexOf('[object ') === 0) {
      typeName = baseToString.slice(8, -1); // Extract e.g. "Array" from "[object Array]".
    } else {
      typeName = typeof obj;
    }
    return typeName + ': ' + JSON.stringify(String(obj));
  } catch (e) {
    return baseToString;
  }
};
}(common$l));

const common$k = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

class Node {
  constructor(matchLength) {
    this.matchLength = matchLength;
  }

  get ctorName() {
    throw new Error('subclass responsibility');
  }

  numChildren() {
    return this.children ? this.children.length : 0;
  }

  childAt(idx) {
    if (this.children) {
      return this.children[idx];
    }
  }

  indexOfChild(arg) {
    return this.children.indexOf(arg);
  }

  hasChildren() {
    return this.numChildren() > 0;
  }

  hasNoChildren() {
    return !this.hasChildren();
  }

  onlyChild() {
    if (this.numChildren() !== 1) {
      throw new Error(
          'cannot get only child of a node of type ' +
          this.ctorName +
          ' (it has ' +
          this.numChildren() +
          ' children)'
      );
    } else {
      return this.firstChild();
    }
  }

  firstChild() {
    if (this.hasNoChildren()) {
      throw new Error(
          'cannot get first child of a ' + this.ctorName + ' node, which has no children'
      );
    } else {
      return this.childAt(0);
    }
  }

  lastChild() {
    if (this.hasNoChildren()) {
      throw new Error(
          'cannot get last child of a ' + this.ctorName + ' node, which has no children'
      );
    } else {
      return this.childAt(this.numChildren() - 1);
    }
  }

  childBefore(child) {
    const childIdx = this.indexOfChild(child);
    if (childIdx < 0) {
      throw new Error('Node.childBefore() called w/ an argument that is not a child');
    } else if (childIdx === 0) {
      throw new Error('cannot get child before first child');
    } else {
      return this.childAt(childIdx - 1);
    }
  }

  childAfter(child) {
    const childIdx = this.indexOfChild(child);
    if (childIdx < 0) {
      throw new Error('Node.childAfter() called w/ an argument that is not a child');
    } else if (childIdx === this.numChildren() - 1) {
      throw new Error('cannot get child after last child');
    } else {
      return this.childAt(childIdx + 1);
    }
  }

  isTerminal() {
    return false;
  }

  isNonterminal() {
    return false;
  }

  isIteration() {
    return false;
  }

  isOptional() {
    return false;
  }
}

// Terminals

class TerminalNode$2 extends Node {
  get ctorName() {
    return '_terminal';
  }

  isTerminal() {
    return true;
  }

  get primitiveValue() {
    throw new Error('The `primitiveValue` property was removed in Ohm v17.');
  }
}

// Nonterminals

class NonterminalNode$1 extends Node {
  constructor(ruleName, children, childOffsets, matchLength) {
    super(matchLength);
    this.ruleName = ruleName;
    this.children = children;
    this.childOffsets = childOffsets;
  }

  get ctorName() {
    return this.ruleName;
  }

  isNonterminal() {
    return true;
  }

  isLexical() {
    return common$k.isLexical(this.ctorName);
  }

  isSyntactic() {
    return common$k.isSyntactic(this.ctorName);
  }
}

// Iterations

class IterationNode$2 extends Node {
  constructor(children, childOffsets, matchLength, isOptional) {
    super(matchLength);
    this.children = children;
    this.childOffsets = childOffsets;
    this.optional = isOptional;
  }

  get ctorName() {
    return '_iter';
  }

  isIteration() {
    return true;
  }

  isOptional() {
    return this.optional;
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var nodes$1 = {
  Node,
  TerminalNode: TerminalNode$2,
  NonterminalNode: NonterminalNode$1,
  IterationNode: IterationNode$2,
};

var pexprsMain = {};

// Based on https://github.com/mathiasbynens/unicode-9.0.0.
// These are just categories that are used in ES5/ES2015.
// The full list of Unicode categories is here: http://www.fileformat.info/info/unicode/category/index.htm.
var UnicodeCategories$1 = {
  // Letters
  Lu: /[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]/,
  Ll: /[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]/,
  Lt: /[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
  Lm: /[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]/,
  Lo: /[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,

  // Numbers
  Nl: /[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]|\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]/,
  Nd: /[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]|\uD801[\uDCA0-\uDCA9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|[\uD805\uD807][\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]/,

  // Marks
  Mn: /[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]/,
  Mc: /[\u0903-\u0903]|[\u093E-\u0940]|[\u0949-\u094C]|[\u0982-\u0983]|[\u09BE-\u09C0]|[\u09C7-\u09C8]|[\u09CB-\u09CC]|[\u09D7-\u09D7]|[\u0A3E-\u0A40]|[\u0A83-\u0A83]|[\u0ABE-\u0AC0]|[\u0AC9-\u0AC9]|[\u0ACB-\u0ACC]|[\u0B02-\u0B03]|[\u0B3E-\u0B3E]|[\u0B40-\u0B40]|[\u0B47-\u0B48]|[\u0B4B-\u0B4C]|[\u0B57-\u0B57]|[\u0B83-\u0B83]|[\u0BBE-\u0BBF]|[\u0BC1-\u0BC2]|[\u0BC6-\u0BC8]|[\u0BCA-\u0BCC]|[\u0BD7-\u0BD7]|[\u0C01-\u0C03]|[\u0C41-\u0C44]|[\u0C82-\u0C83]|[\u0CBE-\u0CBE]|[\u0CC0-\u0CC4]|[\u0CC7-\u0CC8]|[\u0CCA-\u0CCB]|[\u0CD5-\u0CD6]|[\u0D02-\u0D03]|[\u0D3E-\u0D40]|[\u0D46-\u0D48]|[\u0D4A-\u0D4C]|[\u0D57-\u0D57]|[\u0F3E-\u0F3F]|[\u0F7F-\u0F7F]/,

  // Punctuation, Connector
  Pc: /[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F]/,

  // Separator, Space
  Zs: /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,

  // These two are not real Unicode categories, but our useful for Ohm.
  // L is a combination of all the letter categories.
  // Ltmo is a combination of Lt, Lm, and Lo.
  L: /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
  Ltmo: /[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]|[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]|[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const UnicodeCategories = UnicodeCategories$1;
const common$j = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// General stuff

class PExpr$1 {
  constructor() {
    if (this.constructor === PExpr$1) {
      throw new Error("PExpr cannot be instantiated -- it's abstract");
    }
  }

  // Set the `source` property to the interval containing the source for this expression.
  withSource(interval) {
    if (interval) {
      this.source = interval.trimmed();
    }
    return this;
  }
}

// Any

const any = Object.create(PExpr$1.prototype);

// End

const end = Object.create(PExpr$1.prototype);

// Terminals

class Terminal$1 extends PExpr$1 {
  constructor(obj) {
    super();
    this.obj = obj;
  }
}

// Ranges

class Range extends PExpr$1 {
  constructor(from, to) {
    super();
    this.from = from;
    this.to = to;
    // If either `from` or `to` is made up of multiple code units, then
    // the range should consume a full code point, not a single code unit.
    this.matchCodePoint = from.length > 1 || to.length > 1;
  }
}

// Parameters

class Param extends PExpr$1 {
  constructor(index) {
    super();
    this.index = index;
  }
}

// Alternation

class Alt extends PExpr$1 {
  constructor(terms) {
    super();
    this.terms = terms;
  }
}

// Extend is an implementation detail of rule extension

class Extend extends Alt {
  constructor(superGrammar, name, body) {
    const origBody = superGrammar.rules[name].body;
    super([body, origBody]);

    this.superGrammar = superGrammar;
    this.name = name;
    this.body = body;
  }
}

// Splice is an implementation detail of rule overriding with the `...` operator.
class Splice extends Alt {
  constructor(superGrammar, ruleName, beforeTerms, afterTerms) {
    const origBody = superGrammar.rules[ruleName].body;
    super([...beforeTerms, origBody, ...afterTerms]);

    this.superGrammar = superGrammar;
    this.ruleName = ruleName;
    this.expansionPos = beforeTerms.length;
  }
}

// Sequences

class Seq extends PExpr$1 {
  constructor(factors) {
    super();
    this.factors = factors;
  }
}

// Iterators and optionals

class Iter extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

class Star extends Iter {}
class Plus extends Iter {}
class Opt extends Iter {}

Star.prototype.operator = '*';
Plus.prototype.operator = '+';
Opt.prototype.operator = '?';

Star.prototype.minNumMatches = 0;
Plus.prototype.minNumMatches = 1;
Opt.prototype.minNumMatches = 0;

Star.prototype.maxNumMatches = Number.POSITIVE_INFINITY;
Plus.prototype.maxNumMatches = Number.POSITIVE_INFINITY;
Opt.prototype.maxNumMatches = 1;

// Predicates

class Not extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

class Lookahead extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

// "Lexification"

class Lex extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

// Rule application

class Apply extends PExpr$1 {
  constructor(ruleName, args = []) {
    super();
    this.ruleName = ruleName;
    this.args = args;
  }

  isSyntactic() {
    return common$j.isSyntactic(this.ruleName);
  }

  // This method just caches the result of `this.toString()` in a non-enumerable property.
  toMemoKey() {
    if (!this._memoKey) {
      Object.defineProperty(this, '_memoKey', {value: this.toString()});
    }
    return this._memoKey;
  }
}

// Unicode character

class UnicodeChar extends PExpr$1 {
  constructor(category) {
    super();
    this.category = category;
    this.pattern = UnicodeCategories[category];
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

pexprsMain.PExpr = PExpr$1;
pexprsMain.any = any;
pexprsMain.end = end;
pexprsMain.Terminal = Terminal$1;
pexprsMain.Range = Range;
pexprsMain.Param = Param;
pexprsMain.Alt = Alt;
pexprsMain.Extend = Extend;
pexprsMain.Splice = Splice;
pexprsMain.Seq = Seq;
pexprsMain.Iter = Iter;
pexprsMain.Star = Star;
pexprsMain.Plus = Plus;
pexprsMain.Opt = Opt;
pexprsMain.Not = Not;
pexprsMain.Lookahead = Lookahead;
pexprsMain.Lex = Lex;
pexprsMain.Apply = Apply;
pexprsMain.UnicodeChar = UnicodeChar;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$i = common$l;
const pexprs$l = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Return true if we should skip spaces preceding this expression in a syntactic context.
*/
pexprs$l.PExpr.prototype.allowsSkippingPrecedingSpace = common$i.abstract(
    'allowsSkippingPrecedingSpace'
);

/*
  Generally, these are all first-order expressions and (with the exception of Apply)
  directly read from the input stream.
*/
pexprs$l.any.allowsSkippingPrecedingSpace =
  pexprs$l.end.allowsSkippingPrecedingSpace =
  pexprs$l.Apply.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Terminal.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Range.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.UnicodeChar.prototype.allowsSkippingPrecedingSpace =
    function() {
      return true;
    };

/*
  Higher-order expressions that don't directly consume input.
*/
pexprs$l.Alt.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Iter.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Lex.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Lookahead.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Not.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Param.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Seq.prototype.allowsSkippingPrecedingSpace =
    function() {
      return false;
    };

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Namespace$2() {}
Namespace$2.prototype = Object.create(null);

Namespace$2.asNamespace = function(objOrNamespace) {
  if (objOrNamespace instanceof Namespace$2) {
    return objOrNamespace;
  }
  return Namespace$2.createNamespace(objOrNamespace);
};

// Create a new namespace. If `optProps` is specified, all of its properties
// will be copied to the new namespace.
Namespace$2.createNamespace = function(optProps) {
  return Namespace$2.extend(Namespace$2.prototype, optProps);
};

// Create a new namespace which extends another namespace. If `optProps` is
// specified, all of its properties will be copied to the new namespace.
Namespace$2.extend = function(namespace, optProps) {
  if (namespace !== Namespace$2.prototype && !(namespace instanceof Namespace$2)) {
    throw new TypeError('not a Namespace object: ' + namespace);
  }
  const ns = Object.create(namespace, {
    constructor: {
      value: Namespace$2,
      enumerable: false,
      writable: true,
      configurable: true,
    },
  });
  return Object.assign(ns, optProps);
};

// TODO: Should this be a regular method?
Namespace$2.toString = function(ns) {
  return Object.prototype.toString.call(ns);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Namespace_1 = Namespace$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert: assert$3} = common$l;
const Namespace$1 = Namespace_1;
const pexprs$k = pexprsMain;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function createError(message, optInterval) {
  let e;
  if (optInterval) {
    e = new Error(optInterval.getLineAndColumnMessage() + message);
    e.shortMessage = message;
    e.interval = optInterval;
  } else {
    e = new Error(message);
  }
  return e;
}

// ----------------- errors about intervals -----------------

function intervalSourcesDontMatch() {
  return createError("Interval sources don't match");
}

// ----------------- errors about grammars -----------------

// Grammar syntax error

function grammarSyntaxError(matchFailure) {
  const e = new Error();
  Object.defineProperty(e, 'message', {
    enumerable: true,
    get() {
      return matchFailure.message;
    },
  });
  Object.defineProperty(e, 'shortMessage', {
    enumerable: true,
    get() {
      return 'Expected ' + matchFailure.getExpectedText();
    },
  });
  e.interval = matchFailure.getInterval();
  return e;
}

// Undeclared grammar

function undeclaredGrammar(grammarName, namespace, interval) {
  const message = namespace ?
    'Grammar ' +
      grammarName +
      ' is not declared in namespace ' +
      Namespace$1.toString(namespace) :
    'Undeclared grammar ' + grammarName;
  return createError(message, interval);
}

// Duplicate grammar declaration

function duplicateGrammarDeclaration(grammar, namespace) {
  return createError('Grammar ' + grammar.name + ' is already declared in this namespace');
}

// ----------------- rules -----------------

// Undeclared rule

function undeclaredRule(ruleName, grammarName, optInterval) {
  return createError(
      'Rule ' + ruleName + ' is not declared in grammar ' + grammarName,
      optInterval
  );
}

// Cannot override undeclared rule

function cannotOverrideUndeclaredRule(ruleName, grammarName, optSource) {
  return createError(
      'Cannot override rule ' + ruleName + ' because it is not declared in ' + grammarName,
      optSource
  );
}

// Cannot extend undeclared rule

function cannotExtendUndeclaredRule(ruleName, grammarName, optSource) {
  return createError(
      'Cannot extend rule ' + ruleName + ' because it is not declared in ' + grammarName,
      optSource
  );
}

// Duplicate rule declaration

function duplicateRuleDeclaration(ruleName, grammarName, declGrammarName, optSource) {
  let message =
    "Duplicate declaration for rule '" + ruleName + "' in grammar '" + grammarName + "'";
  if (grammarName !== declGrammarName) {
    message += " (originally declared in '" + declGrammarName + "')";
  }
  return createError(message, optSource);
}

// Wrong number of parameters

function wrongNumberOfParameters(ruleName, expected, actual, source) {
  return createError(
      'Wrong number of parameters for rule ' +
      ruleName +
      ' (expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      source
  );
}

// Wrong number of arguments

function wrongNumberOfArguments(ruleName, expected, actual, expr) {
  return createError(
      'Wrong number of arguments for rule ' +
      ruleName +
      ' (expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      expr
  );
}

// Duplicate parameter names

function duplicateParameterNames(ruleName, duplicates, source) {
  return createError(
      'Duplicate parameter names in rule ' + ruleName + ': ' + duplicates.join(', '),
      source
  );
}

// Invalid parameter expression

function invalidParameter(ruleName, expr) {
  return createError(
      'Invalid parameter to rule ' +
      ruleName +
      ': ' +
      expr +
      ' has arity ' +
      expr.getArity() +
      ', but parameter expressions must have arity 1',
      expr.source
  );
}

// Application of syntactic rule from lexical rule

const syntacticVsLexicalNote =
  'NOTE: A _syntactic rule_ is a rule whose name begins with a capital letter. ' +
  'See https://ohmjs.org/d/svl for more details.';

function applicationOfSyntacticRuleFromLexicalContext(ruleName, applyExpr) {
  return createError(
      'Cannot apply syntactic rule ' + ruleName + ' from here (inside a lexical context)',
      applyExpr.source
  );
}

// Lexical rule application used with applySyntactic

function applySyntacticWithLexicalRuleApplication(applyExpr) {
  const {ruleName} = applyExpr;
  return createError(
      `applySyntactic is for syntactic rules, but '${ruleName}' is a lexical rule. ` +
      syntacticVsLexicalNote,
      applyExpr.source
  );
}

// Application of applySyntactic in a syntactic context

function unnecessaryExperimentalApplySyntactic(applyExpr) {
  return createError(
      'applySyntactic is not required here (in a syntactic context)',
      applyExpr.source
  );
}

// Incorrect argument type

function incorrectArgumentType(expectedType, expr) {
  return createError('Incorrect argument type: expected ' + expectedType, expr.source);
}

// Multiple instances of the super-splice operator (`...`) in the rule body.

function multipleSuperSplices(expr) {
  return createError("'...' can appear at most once in a rule body", expr.source);
}

// Unicode code point escapes

function invalidCodePoint(applyWrapper) {
  const node = applyWrapper._node;
  assert$3(node && node.isNonterminal() && node.ctorName === 'escapeChar_unicodeCodePoint');

  // Get an interval that covers all of the hex digits.
  const digitIntervals = applyWrapper.children.slice(1, -1).map(d => d.source);
  const fullInterval = digitIntervals[0].coverageWith(...digitIntervals.slice(1));
  return createError(
      `U+${fullInterval.contents} is not a valid Unicode code point`,
      fullInterval
  );
}

// ----------------- Kleene operators -----------------

function kleeneExprHasNullableOperand(kleeneExpr, applicationStack) {
  const actuals =
    applicationStack.length > 0 ? applicationStack[applicationStack.length - 1].args : [];
  const expr = kleeneExpr.expr.substituteParams(actuals);
  let message =
    'Nullable expression ' +
    expr +
    " is not allowed inside '" +
    kleeneExpr.operator +
    "' (possible infinite loop)";
  if (applicationStack.length > 0) {
    const stackTrace = applicationStack
        .map(app => new pexprs$k.Apply(app.ruleName, app.args))
        .join('\n');
    message += '\nApplication stack (most recent application last):\n' + stackTrace;
  }
  return createError(message, kleeneExpr.expr.source);
}

// ----------------- arity -----------------

function inconsistentArity(ruleName, expected, actual, expr) {
  return createError(
      'Rule ' +
      ruleName +
      ' involves an alternation which has inconsistent arity ' +
      '(expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      expr.source
  );
}

// ----------------- properties -----------------

function duplicatePropertyNames(duplicates) {
  return createError('Object pattern has duplicate property names: ' + duplicates.join(', '));
}

// ----------------- constructors -----------------

function invalidConstructorCall(grammar, ctorName, children) {
  return createError(
      'Attempt to invoke constructor ' + ctorName + ' with invalid or unexpected arguments'
  );
}

// ----------------- convenience -----------------

function multipleErrors(errors) {
  const messages = errors.map(e => e.message);
  return createError(['Errors:'].concat(messages).join('\n- '), errors[0].interval);
}

// ----------------- semantic -----------------

function missingSemanticAction(ctorName, name, type, stack) {
  let stackTrace = stack
      .slice(0, -1)
      .map(info => {
        const ans = '  ' + info[0].name + ' > ' + info[1];
        return info.length === 3 ? ans + " for '" + info[2] + "'" : ans;
      })
      .join('\n');
  stackTrace += '\n  ' + name + ' > ' + ctorName;

  let moreInfo = '';
  if (ctorName === '_iter') {
    moreInfo = [
      '\nNOTE: as of Ohm v16, there is no default action for iteration nodes — see ',
      '  https://ohmjs.org/d/dsa for details.',
    ].join('\n');
  }

  const message = [
    `Missing semantic action for '${ctorName}' in ${type} '${name}'.${moreInfo}`,
    'Action stack (most recent call last):',
    stackTrace,
  ].join('\n');

  const e = createError(message);
  e.name = 'missingSemanticAction';
  return e;
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var errors$9 = {
  applicationOfSyntacticRuleFromLexicalContext,
  applySyntacticWithLexicalRuleApplication,
  cannotExtendUndeclaredRule,
  cannotOverrideUndeclaredRule,
  duplicateGrammarDeclaration,
  duplicateParameterNames,
  duplicatePropertyNames,
  duplicateRuleDeclaration,
  inconsistentArity,
  incorrectArgumentType,
  intervalSourcesDontMatch,
  invalidCodePoint,
  invalidConstructorCall,
  invalidParameter,
  grammarSyntaxError,
  kleeneExprHasNullableOperand,
  missingSemanticAction,
  multipleSuperSplices,
  undeclaredGrammar,
  undeclaredRule,
  unnecessaryExperimentalApplySyntactic,
  wrongNumberOfArguments,
  wrongNumberOfParameters,

  throwErrors(errors) {
    if (errors.length === 1) {
      throw errors[0];
    }
    if (errors.length > 1) {
      throw multipleErrors(errors);
    }
  },
};

var util$7 = {};

(function (exports) {

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Given an array of numbers `arr`, return an array of the numbers as strings,
// right-justified and padded to the same length.
function padNumbersToEqualLength(arr) {
  let maxLen = 0;
  const strings = arr.map(n => {
    const str = n.toString();
    maxLen = Math.max(maxLen, str.length);
    return str;
  });
  return strings.map(s => common.padLeft(s, maxLen));
}

// Produce a new string that would be the result of copying the contents
// of the string `src` onto `dest` at offset `offest`.
function strcpy(dest, src, offset) {
  const origDestLen = dest.length;
  const start = dest.slice(0, offset);
  const end = dest.slice(offset + src.length);
  return (start + src + end).substr(0, origDestLen);
}

// Casts the underlying lineAndCol object to a formatted message string,
// highlighting `ranges`.
function lineAndColumnToMessage(...ranges) {
  const lineAndCol = this;
  const {offset} = lineAndCol;
  const {repeatStr} = common;

  const sb = new common.StringBuffer();
  sb.append('Line ' + lineAndCol.lineNum + ', col ' + lineAndCol.colNum + ':\n');

  // An array of the previous, current, and next line numbers as strings of equal length.
  const lineNumbers = padNumbersToEqualLength([
    lineAndCol.prevLine == null ? 0 : lineAndCol.lineNum - 1,
    lineAndCol.lineNum,
    lineAndCol.nextLine == null ? 0 : lineAndCol.lineNum + 1,
  ]);

  // Helper for appending formatting input lines to the buffer.
  const appendLine = (num, content, prefix) => {
    sb.append(prefix + lineNumbers[num] + ' | ' + content + '\n');
  };

  // Include the previous line for context if possible.
  if (lineAndCol.prevLine != null) {
    appendLine(0, lineAndCol.prevLine, '  ');
  }
  // Line that the error occurred on.
  appendLine(1, lineAndCol.line, '> ');

  // Build up the line that points to the offset and possible indicates one or more ranges.
  // Start with a blank line, and indicate each range by overlaying a string of `~` chars.
  const lineLen = lineAndCol.line.length;
  let indicationLine = repeatStr(' ', lineLen + 1);
  for (let i = 0; i < ranges.length; ++i) {
    let startIdx = ranges[i][0];
    let endIdx = ranges[i][1];
    common.assert(startIdx >= 0 && startIdx <= endIdx, 'range start must be >= 0 and <= end');

    const lineStartOffset = offset - lineAndCol.colNum + 1;
    startIdx = Math.max(0, startIdx - lineStartOffset);
    endIdx = Math.min(endIdx - lineStartOffset, lineLen);

    indicationLine = strcpy(indicationLine, repeatStr('~', endIdx - startIdx), startIdx);
  }
  const gutterWidth = 2 + lineNumbers[1].length + 3;
  sb.append(repeatStr(' ', gutterWidth));
  indicationLine = strcpy(indicationLine, '^', lineAndCol.colNum - 1);
  sb.append(indicationLine.replace(/ +$/, '') + '\n');

  // Include the next line for context if possible.
  if (lineAndCol.nextLine != null) {
    appendLine(2, lineAndCol.nextLine, '  ');
  }
  return sb.contents();
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

let builtInRulesCallbacks = [];

// Since Grammar.BuiltInRules is bootstrapped, most of Ohm can't directly depend it.
// This function allows modules that do depend on the built-in rules to register a callback
// that will be called later in the initialization process.
exports.awaitBuiltInRules = cb => {
  builtInRulesCallbacks.push(cb);
};

exports.announceBuiltInRules = grammar => {
  builtInRulesCallbacks.forEach(cb => {
    cb(grammar);
  });
  builtInRulesCallbacks = null;
};

// Return an object with the line and column information for the given
// offset in `str`.
exports.getLineAndColumn = (str, offset) => {
  let lineNum = 1;
  let colNum = 1;

  let currOffset = 0;
  let lineStartOffset = 0;

  let nextLine = null;
  let prevLine = null;
  let prevLineStartOffset = -1;

  while (currOffset < offset) {
    const c = str.charAt(currOffset++);
    if (c === '\n') {
      lineNum++;
      colNum = 1;
      prevLineStartOffset = lineStartOffset;
      lineStartOffset = currOffset;
    } else if (c !== '\r') {
      colNum++;
    }
  }

  // Find the end of the target line.
  let lineEndOffset = str.indexOf('\n', lineStartOffset);
  if (lineEndOffset === -1) {
    lineEndOffset = str.length;
  } else {
    // Get the next line.
    const nextLineEndOffset = str.indexOf('\n', lineEndOffset + 1);
    nextLine =
      nextLineEndOffset === -1 ?
        str.slice(lineEndOffset) :
        str.slice(lineEndOffset, nextLineEndOffset);
    // Strip leading and trailing EOL char(s).
    nextLine = nextLine.replace(/^\r?\n/, '').replace(/\r$/, '');
  }

  // Get the previous line.
  if (prevLineStartOffset >= 0) {
    // Strip trailing EOL char(s).
    prevLine = str.slice(prevLineStartOffset, lineStartOffset).replace(/\r?\n$/, '');
  }

  // Get the target line, stripping a trailing carriage return if necessary.
  const line = str.slice(lineStartOffset, lineEndOffset).replace(/\r$/, '');

  return {
    offset,
    lineNum,
    colNum,
    line,
    prevLine,
    nextLine,
    toString: lineAndColumnToMessage,
  };
};

// Return a nicely-formatted string describing the line and column for the
// given offset in `str` highlighting `ranges`.
exports.getLineAndColumnMessage = function(str, offset, ...ranges) {
  return exports.getLineAndColumn(str, offset).toString(...ranges);
};

exports.uniqueId = (() => {
  let idCounter = 0;
  return prefix => '' + prefix + idCounter++;
})();
}(util$7));

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {abstract, isSyntactic} = common$l;
const errors$8 = errors$9;
const pexprs$j = pexprsMain;
const util$6 = util$7;

let BuiltInRules;

util$6.awaitBuiltInRules(g => {
  BuiltInRules = g;
});

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

let lexifyCount;

pexprs$j.PExpr.prototype.assertAllApplicationsAreValid = function(ruleName, grammar) {
  lexifyCount = 0;
  this._assertAllApplicationsAreValid(ruleName, grammar);
};

pexprs$j.PExpr.prototype._assertAllApplicationsAreValid = abstract(
    '_assertAllApplicationsAreValid'
);

pexprs$j.any._assertAllApplicationsAreValid =
  pexprs$j.end._assertAllApplicationsAreValid =
  pexprs$j.Terminal.prototype._assertAllApplicationsAreValid =
  pexprs$j.Range.prototype._assertAllApplicationsAreValid =
  pexprs$j.Param.prototype._assertAllApplicationsAreValid =
  pexprs$j.UnicodeChar.prototype._assertAllApplicationsAreValid =
    function(ruleName, grammar) {
      // no-op
    };

pexprs$j.Lex.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  lexifyCount++;
  this.expr._assertAllApplicationsAreValid(ruleName, grammar);
  lexifyCount--;
};

pexprs$j.Alt.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    this.terms[idx]._assertAllApplicationsAreValid(ruleName, grammar);
  }
};

pexprs$j.Seq.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx]._assertAllApplicationsAreValid(ruleName, grammar);
  }
};

pexprs$j.Iter.prototype._assertAllApplicationsAreValid =
  pexprs$j.Not.prototype._assertAllApplicationsAreValid =
  pexprs$j.Lookahead.prototype._assertAllApplicationsAreValid =
    function(ruleName, grammar) {
      this.expr._assertAllApplicationsAreValid(ruleName, grammar);
    };

pexprs$j.Apply.prototype._assertAllApplicationsAreValid = function(
    ruleName,
    grammar,
    skipSyntacticCheck = false
) {
  const ruleInfo = grammar.rules[this.ruleName];
  const isContextSyntactic = isSyntactic(ruleName) && lexifyCount === 0;

  // Make sure that the rule exists...
  if (!ruleInfo) {
    throw errors$8.undeclaredRule(this.ruleName, grammar.name, this.source);
  }

  // ...and that this application is allowed
  if (!skipSyntacticCheck && isSyntactic(this.ruleName) && !isContextSyntactic) {
    throw errors$8.applicationOfSyntacticRuleFromLexicalContext(this.ruleName, this);
  }

  // ...and that this application has the correct number of arguments.
  const actual = this.args.length;
  const expected = ruleInfo.formals.length;
  if (actual !== expected) {
    throw errors$8.wrongNumberOfArguments(this.ruleName, expected, actual, this.source);
  }

  const isBuiltInApplySyntactic =
    BuiltInRules && ruleInfo === BuiltInRules.rules.applySyntactic;
  const isBuiltInCaseInsensitive =
    BuiltInRules && ruleInfo === BuiltInRules.rules.caseInsensitive;

  // If it's an application of 'caseInsensitive', ensure that the argument is a Terminal.
  if (isBuiltInCaseInsensitive) {
    if (!(this.args[0] instanceof pexprs$j.Terminal)) {
      throw errors$8.incorrectArgumentType('a Terminal (e.g. "abc")', this.args[0]);
    }
  }

  if (isBuiltInApplySyntactic) {
    const arg = this.args[0];
    if (!(arg instanceof pexprs$j.Apply)) {
      throw errors$8.incorrectArgumentType('a syntactic rule application', arg);
    }
    if (!isSyntactic(arg.ruleName)) {
      throw errors$8.applySyntacticWithLexicalRuleApplication(arg);
    }
    if (isContextSyntactic) {
      throw errors$8.unnecessaryExperimentalApplySyntactic(this);
    }
  }

  // ...and that all of the argument expressions only have valid applications and have arity 1.
  // If `this` is an application of the built-in applySyntactic rule, then its arg is
  // allowed (and expected) to be a syntactic rule, even if we're in a lexical context.
  this.args.forEach(arg => {
    arg._assertAllApplicationsAreValid(ruleName, grammar, isBuiltInApplySyntactic);
    if (arg.getArity() !== 1) {
      throw errors$8.invalidParameter(this.ruleName, arg);
    }
  });
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$h = common$l;
const errors$7 = errors$9;
const pexprs$i = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$i.PExpr.prototype.assertChoicesHaveUniformArity = common$h.abstract(
    'assertChoicesHaveUniformArity'
);

pexprs$i.any.assertChoicesHaveUniformArity =
  pexprs$i.end.assertChoicesHaveUniformArity =
  pexprs$i.Terminal.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Range.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Param.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Lex.prototype.assertChoicesHaveUniformArity =
  pexprs$i.UnicodeChar.prototype.assertChoicesHaveUniformArity =
    function(ruleName) {
      // no-op
    };

pexprs$i.Alt.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  if (this.terms.length === 0) {
    return;
  }
  const arity = this.terms[0].getArity();
  for (let idx = 0; idx < this.terms.length; idx++) {
    const term = this.terms[idx];
    term.assertChoicesHaveUniformArity();
    const otherArity = term.getArity();
    if (arity !== otherArity) {
      throw errors$7.inconsistentArity(ruleName, arity, otherArity, term);
    }
  }
};

pexprs$i.Extend.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // Extend is a special case of Alt that's guaranteed to have exactly two
  // cases: [extensions, origBody].
  const actualArity = this.terms[0].getArity();
  const expectedArity = this.terms[1].getArity();
  if (actualArity !== expectedArity) {
    throw errors$7.inconsistentArity(ruleName, expectedArity, actualArity, this.terms[0]);
  }
};

pexprs$i.Seq.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx].assertChoicesHaveUniformArity(ruleName);
  }
};

pexprs$i.Iter.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  this.expr.assertChoicesHaveUniformArity(ruleName);
};

pexprs$i.Not.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // no-op (not required b/c the nested expr doesn't show up in the CST)
};

pexprs$i.Lookahead.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  this.expr.assertChoicesHaveUniformArity(ruleName);
};

pexprs$i.Apply.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // The arities of the parameter expressions is required to be 1 by
  // `assertAllApplicationsAreValid()`.
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$g = common$l;
const errors$6 = errors$9;
const pexprs$h = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$h.PExpr.prototype.assertIteratedExprsAreNotNullable = common$g.abstract(
    'assertIteratedExprsAreNotNullable'
);

pexprs$h.any.assertIteratedExprsAreNotNullable =
  pexprs$h.end.assertIteratedExprsAreNotNullable =
  pexprs$h.Terminal.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Range.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Param.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.UnicodeChar.prototype.assertIteratedExprsAreNotNullable =
    function(grammar) {
      // no-op
    };

pexprs$h.Alt.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    this.terms[idx].assertIteratedExprsAreNotNullable(grammar);
  }
};

pexprs$h.Seq.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx].assertIteratedExprsAreNotNullable(grammar);
  }
};

pexprs$h.Iter.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  // Note: this is the implementation of this method for `Star` and `Plus` expressions.
  // It is overridden for `Opt` below.
  this.expr.assertIteratedExprsAreNotNullable(grammar);
  if (this.expr.isNullable(grammar)) {
    throw errors$6.kleeneExprHasNullableOperand(this, []);
  }
};

pexprs$h.Opt.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Not.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Lookahead.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Lex.prototype.assertIteratedExprsAreNotNullable =
    function(grammar) {
      this.expr.assertIteratedExprsAreNotNullable(grammar);
    };

pexprs$h.Apply.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  this.args.forEach(arg => {
    arg.assertIteratedExprsAreNotNullable(grammar);
  });
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert: assert$2} = common$l;
const errors$5 = errors$9;
const util$5 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Interval$3(sourceString, startIdx, endIdx) {
  this.sourceString = sourceString;
  this.startIdx = startIdx;
  this.endIdx = endIdx;
}

Interval$3.coverage = function(firstInterval, ...intervals) {
  let {startIdx, endIdx} = firstInterval;
  for (const interval of intervals) {
    if (interval.sourceString !== firstInterval.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    } else {
      startIdx = Math.min(startIdx, interval.startIdx);
      endIdx = Math.max(endIdx, interval.endIdx);
    }
  }
  return new Interval$3(firstInterval.sourceString, startIdx, endIdx);
};

Interval$3.prototype = {
  coverageWith(...intervals) {
    return Interval$3.coverage(...intervals, this);
  },

  collapsedLeft() {
    return new Interval$3(this.sourceString, this.startIdx, this.startIdx);
  },

  collapsedRight() {
    return new Interval$3(this.sourceString, this.endIdx, this.endIdx);
  },

  getLineAndColumn() {
    return util$5.getLineAndColumn(this.sourceString, this.startIdx);
  },

  getLineAndColumnMessage() {
    const range = [this.startIdx, this.endIdx];
    return util$5.getLineAndColumnMessage(this.sourceString, this.startIdx, range);
  },

  // Returns an array of 0, 1, or 2 intervals that represents the result of the
  // interval difference operation.
  minus(that) {
    if (this.sourceString !== that.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    } else if (this.startIdx === that.startIdx && this.endIdx === that.endIdx) {
      // `this` and `that` are the same interval!
      return [];
    } else if (this.startIdx < that.startIdx && that.endIdx < this.endIdx) {
      // `that` splits `this` into two intervals
      return [
        new Interval$3(this.sourceString, this.startIdx, that.startIdx),
        new Interval$3(this.sourceString, that.endIdx, this.endIdx),
      ];
    } else if (this.startIdx < that.endIdx && that.endIdx < this.endIdx) {
      // `that` contains a prefix of `this`
      return [new Interval$3(this.sourceString, that.endIdx, this.endIdx)];
    } else if (this.startIdx < that.startIdx && that.startIdx < this.endIdx) {
      // `that` contains a suffix of `this`
      return [new Interval$3(this.sourceString, this.startIdx, that.startIdx)];
    } else {
      // `that` and `this` do not overlap
      return [this];
    }
  },

  // Returns a new Interval that has the same extent as this one, but which is relative
  // to `that`, an Interval that fully covers this one.
  relativeTo(that) {
    if (this.sourceString !== that.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    }
    assert$2(
        this.startIdx >= that.startIdx && this.endIdx <= that.endIdx,
        'other interval does not cover this one'
    );
    return new Interval$3(
        this.sourceString,
        this.startIdx - that.startIdx,
        this.endIdx - that.startIdx
    );
  },

  // Returns a new Interval which contains the same contents as this one,
  // but with whitespace trimmed from both ends.
  trimmed() {
    const {contents} = this;
    const startIdx = this.startIdx + contents.match(/^\s*/)[0].length;
    const endIdx = this.endIdx - contents.match(/\s*$/)[0].length;
    return new Interval$3(this.sourceString, startIdx, endIdx);
  },

  subInterval(offset, len) {
    const newStartIdx = this.startIdx + offset;
    return new Interval$3(this.sourceString, newStartIdx, newStartIdx + len);
  },
};

Object.defineProperties(Interval$3.prototype, {
  contents: {
    get() {
      if (this._contents === undefined) {
        this._contents = this.sourceString.slice(this.startIdx, this.endIdx);
      }
      return this._contents;
    },
    enumerable: true,
  },
  length: {
    get() {
      return this.endIdx - this.startIdx;
    },
    enumerable: true,
  },
});

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Interval_1 = Interval$3;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Interval$2 = Interval_1;
const common$f = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Unicode characters that are used in the `toString` output.
const BALLOT_X = '\u2717';
const CHECK_MARK = '\u2713';
const DOT_OPERATOR = '\u22C5';
const RIGHTWARDS_DOUBLE_ARROW = '\u21D2';
const SYMBOL_FOR_HORIZONTAL_TABULATION = '\u2409';
const SYMBOL_FOR_LINE_FEED = '\u240A';
const SYMBOL_FOR_CARRIAGE_RETURN = '\u240D';

const Flags = {
  succeeded: 1 << 0,
  isRootNode: 1 << 1,
  isImplicitSpaces: 1 << 2,
  isMemoized: 1 << 3,
  isHeadOfLeftRecursion: 1 << 4,
  terminatesLR: 1 << 5,
};

function spaces(n) {
  return common$f.repeat(' ', n).join('');
}

// Return a string representation of a portion of `input` at offset `pos`.
// The result will contain exactly `len` characters.
function getInputExcerpt(input, pos, len) {
  const excerpt = asEscapedString(input.slice(pos, pos + len));

  // Pad the output if necessary.
  if (excerpt.length < len) {
    return excerpt + common$f.repeat(' ', len - excerpt.length).join('');
  }
  return excerpt;
}

function asEscapedString(obj) {
  if (typeof obj === 'string') {
    // Replace non-printable characters with visible symbols.
    return obj
        .replace(/ /g, DOT_OPERATOR)
        .replace(/\t/g, SYMBOL_FOR_HORIZONTAL_TABULATION)
        .replace(/\n/g, SYMBOL_FOR_LINE_FEED)
        .replace(/\r/g, SYMBOL_FOR_CARRIAGE_RETURN);
  }
  return String(obj);
}

// ----------------- Trace -----------------

function Trace$2(input, pos1, pos2, expr, succeeded, bindings, optChildren) {
  this.input = input;
  this.pos = this.pos1 = pos1;
  this.pos2 = pos2;
  this.source = new Interval$2(input, pos1, pos2);
  this.expr = expr;
  this.bindings = bindings;
  this.children = optChildren || [];
  this.terminatingLREntry = null;

  this._flags = succeeded ? Flags.succeeded : 0;
}

// A value that can be returned from visitor functions to indicate that a
// node should not be recursed into.
Trace$2.prototype.SKIP = {};

Object.defineProperty(Trace$2.prototype, 'displayString', {
  get() {
    return this.expr.toDisplayString();
  },
});

// For convenience, create a getter and setter for the boolean flags in `Flags`.
Object.keys(Flags).forEach(name => {
  const mask = Flags[name];
  Object.defineProperty(Trace$2.prototype, name, {
    get() {
      return (this._flags & mask) !== 0;
    },
    set(val) {
      if (val) {
        this._flags |= mask;
      } else {
        this._flags &= ~mask;
      }
    },
  });
});

Trace$2.prototype.clone = function() {
  return this.cloneWithExpr(this.expr);
};

Trace$2.prototype.cloneWithExpr = function(expr) {
  const ans = new Trace$2(
      this.input,
      this.pos,
      this.pos2,
      expr,
      this.succeeded,
      this.bindings,
      this.children
  );

  ans.isHeadOfLeftRecursion = this.isHeadOfLeftRecursion;
  ans.isImplicitSpaces = this.isImplicitSpaces;
  ans.isMemoized = this.isMemoized;
  ans.isRootNode = this.isRootNode;
  ans.terminatesLR = this.terminatesLR;
  ans.terminatingLREntry = this.terminatingLREntry;
  return ans;
};

// Record the trace information for the terminating condition of the LR loop.
Trace$2.prototype.recordLRTermination = function(ruleBodyTrace, value) {
  this.terminatingLREntry = new Trace$2(
      this.input,
      this.pos,
      this.pos2,
      this.expr,
      false,
      [value],
      [ruleBodyTrace]
  );
  this.terminatingLREntry.terminatesLR = true;
};

// Recursively traverse this trace node and all its descendents, calling a visitor function
// for each node that is visited. If `vistorObjOrFn` is an object, then its 'enter' property
// is a function to call before visiting the children of a node, and its 'exit' property is
// a function to call afterwards. If `visitorObjOrFn` is a function, it represents the 'enter'
// function.
//
// The functions are called with three arguments: the Trace node, its parent Trace, and a number
// representing the depth of the node in the tree. (The root node has depth 0.) `optThisArg`, if
// specified, is the value to use for `this` when executing the visitor functions.
Trace$2.prototype.walk = function(visitorObjOrFn, optThisArg) {
  let visitor = visitorObjOrFn;
  if (typeof visitor === 'function') {
    visitor = {enter: visitor};
  }

  function _walk(node, parent, depth) {
    let recurse = true;
    if (visitor.enter) {
      if (visitor.enter.call(optThisArg, node, parent, depth) === Trace$2.prototype.SKIP) {
        recurse = false;
      }
    }
    if (recurse) {
      node.children.forEach(child => {
        _walk(child, node, depth + 1);
      });
      if (visitor.exit) {
        visitor.exit.call(optThisArg, node, parent, depth);
      }
    }
  }
  if (this.isRootNode) {
    // Don't visit the root node itself, only its children.
    this.children.forEach(c => {
      _walk(c, null, 0);
    });
  } else {
    _walk(this, null, 0);
  }
};

// Return a string representation of the trace.
// Sample:
//     12⋅+⋅2⋅*⋅3 ✓ exp ⇒  "12"
//     12⋅+⋅2⋅*⋅3   ✓ addExp (LR) ⇒  "12"
//     12⋅+⋅2⋅*⋅3       ✗ addExp_plus
Trace$2.prototype.toString = function() {
  const sb = new common$f.StringBuffer();
  this.walk((node, parent, depth) => {
    if (!node) {
      return this.SKIP;
    }
    const ctorName = node.expr.constructor.name;
    // Don't print anything for Alt nodes.
    if (ctorName === 'Alt') {
      return; // eslint-disable-line consistent-return
    }
    sb.append(getInputExcerpt(node.input, node.pos, 10) + spaces(depth * 2 + 1));
    sb.append((node.succeeded ? CHECK_MARK : BALLOT_X) + ' ' + node.displayString);
    if (node.isHeadOfLeftRecursion) {
      sb.append(' (LR)');
    }
    if (node.succeeded) {
      const contents = asEscapedString(node.source.contents);
      sb.append(' ' + RIGHTWARDS_DOUBLE_ARROW + '  ');
      sb.append(typeof contents === 'string' ? '"' + contents + '"' : contents);
    }
    sb.append('\n');
  });
  return sb.contents();
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Trace_1 = Trace$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Trace$1 = Trace_1;
const common$e = common$l;
const errors$4 = errors$9;
const nodes = nodes$1;
const pexprs$g = pexprsMain;

const {TerminalNode: TerminalNode$1} = nodes;
const {NonterminalNode} = nodes;
const {IterationNode: IterationNode$1} = nodes;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Evaluate the expression and return `true` if it succeeds, `false` otherwise. This method should
  only be called directly by `State.prototype.eval(expr)`, which also updates the data structures
  that are used for tracing. (Making those updates in a method of `State` enables the trace-specific
  data structures to be "secrets" of that class, which is good for modularity.)

  The contract of this method is as follows:
  * When the return value is `true`,
    - the state object will have `expr.getArity()` more bindings than it did before the call.
  * When the return value is `false`,
    - the state object may have more bindings than it did before the call, and
    - its input stream's position may be anywhere.

  Note that `State.prototype.eval(expr)`, unlike this method, guarantees that neither the state
  object's bindings nor its input stream's position will change if the expression fails to match.
*/
pexprs$g.PExpr.prototype.eval = common$e.abstract('eval'); // function(state) { ... }

pexprs$g.any.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const ch = inputStream.next();
  if (ch) {
    state.pushBinding(new TerminalNode$1(ch.length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.end.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (inputStream.atEnd()) {
    state.pushBinding(new TerminalNode$1(0), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.Terminal.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (!inputStream.matchString(this.obj)) {
    state.processFailure(origPos, this);
    return false;
  } else {
    state.pushBinding(new TerminalNode$1(this.obj.length), origPos);
    return true;
  }
};

pexprs$g.Range.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;

  // A range can operate in one of two modes: matching a single, 16-bit _code unit_,
  // or matching a _code point_. (Code points over 0xFFFF take up two 16-bit code units.)
  const cp = this.matchCodePoint ? inputStream.nextCodePoint() : inputStream.nextCharCode();

  // Always compare by code point value to get the correct result in all scenarios.
  // Note that for strings of length 1, codePointAt(0) and charPointAt(0) are equivalent.
  if (cp !== undefined && this.from.codePointAt(0) <= cp && cp <= this.to.codePointAt(0)) {
    state.pushBinding(new TerminalNode$1(String.fromCodePoint(cp).length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.Param.prototype.eval = function(state) {
  return state.eval(state.currentApplication().args[this.index]);
};

pexprs$g.Lex.prototype.eval = function(state) {
  state.enterLexifiedContext();
  const ans = state.eval(this.expr);
  state.exitLexifiedContext();
  return ans;
};

pexprs$g.Alt.prototype.eval = function(state) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    if (state.eval(this.terms[idx])) {
      return true;
    }
  }
  return false;
};

pexprs$g.Seq.prototype.eval = function(state) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    const factor = this.factors[idx];
    if (!state.eval(factor)) {
      return false;
    }
  }
  return true;
};

pexprs$g.Iter.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const arity = this.getArity();
  const cols = [];
  const colOffsets = [];
  while (cols.length < arity) {
    cols.push([]);
    colOffsets.push([]);
  }

  let numMatches = 0;
  let prevPos = origPos;
  let idx;
  while (numMatches < this.maxNumMatches && state.eval(this.expr)) {
    if (inputStream.pos === prevPos) {
      throw errors$4.kleeneExprHasNullableOperand(this, state._applicationStack);
    }
    prevPos = inputStream.pos;
    numMatches++;
    const row = state._bindings.splice(state._bindings.length - arity, arity);
    const rowOffsets = state._bindingOffsets.splice(
        state._bindingOffsets.length - arity,
        arity
    );
    for (idx = 0; idx < row.length; idx++) {
      cols[idx].push(row[idx]);
      colOffsets[idx].push(rowOffsets[idx]);
    }
  }
  if (numMatches < this.minNumMatches) {
    return false;
  }
  let offset = state.posToOffset(origPos);
  let matchLength = 0;
  if (numMatches > 0) {
    const lastCol = cols[arity - 1];
    const lastColOffsets = colOffsets[arity - 1];

    const endOffset =
      lastColOffsets[lastColOffsets.length - 1] + lastCol[lastCol.length - 1].matchLength;
    offset = colOffsets[0][0];
    matchLength = endOffset - offset;
  }
  const isOptional = this instanceof pexprs$g.Opt;
  for (idx = 0; idx < cols.length; idx++) {
    state._bindings.push(
        new IterationNode$1(cols[idx], colOffsets[idx], matchLength, isOptional)
    );
    state._bindingOffsets.push(offset);
  }
  return true;
};

pexprs$g.Not.prototype.eval = function(state) {
  /*
    TODO:
    - Right now we're just throwing away all of the failures that happen inside a `not`, and
      recording `this` as a failed expression.
    - Double negation should be equivalent to lookahead, but that's not the case right now wrt
      failures. E.g., ~~'foo' produces a failure for ~~'foo', but maybe it should produce
      a failure for 'foo' instead.
  */

  const {inputStream} = state;
  const origPos = inputStream.pos;
  state.pushFailuresInfo();

  const ans = state.eval(this.expr);

  state.popFailuresInfo();
  if (ans) {
    state.processFailure(origPos, this);
    return false;
  }

  inputStream.pos = origPos;
  return true;
};

pexprs$g.Lookahead.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (state.eval(this.expr)) {
    inputStream.pos = origPos;
    return true;
  } else {
    return false;
  }
};

pexprs$g.Apply.prototype.eval = function(state) {
  const caller = state.currentApplication();
  const actuals = caller ? caller.args : [];
  const app = this.substituteParams(actuals);

  const posInfo = state.getCurrentPosInfo();
  if (posInfo.isActive(app)) {
    // This rule is already active at this position, i.e., it is left-recursive.
    return app.handleCycle(state);
  }

  const memoKey = app.toMemoKey();
  const memoRec = posInfo.memo[memoKey];

  if (memoRec && posInfo.shouldUseMemoizedResult(memoRec)) {
    if (state.hasNecessaryInfo(memoRec)) {
      return state.useMemoizedResult(state.inputStream.pos, memoRec);
    }
    delete posInfo.memo[memoKey];
  }
  return app.reallyEval(state);
};

pexprs$g.Apply.prototype.handleCycle = function(state) {
  const posInfo = state.getCurrentPosInfo();
  const {currentLeftRecursion} = posInfo;
  const memoKey = this.toMemoKey();
  let memoRec = posInfo.memo[memoKey];

  if (currentLeftRecursion && currentLeftRecursion.headApplication.toMemoKey() === memoKey) {
    // We already know about this left recursion, but it's possible there are "involved
    // applications" that we don't already know about, so...
    memoRec.updateInvolvedApplicationMemoKeys();
  } else if (!memoRec) {
    // New left recursion detected! Memoize a failure to try to get a seed parse.
    memoRec = posInfo.memoize(memoKey, {
      matchLength: 0,
      examinedLength: 0,
      value: false,
      rightmostFailureOffset: -1,
    });
    posInfo.startLeftRecursion(this, memoRec);
  }
  return state.useMemoizedResult(state.inputStream.pos, memoRec);
};

pexprs$g.Apply.prototype.reallyEval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const origPosInfo = state.getCurrentPosInfo();
  const ruleInfo = state.grammar.rules[this.ruleName];
  const {body} = ruleInfo;
  const {description} = ruleInfo;

  state.enterApplication(origPosInfo, this);

  if (description) {
    state.pushFailuresInfo();
  }

  // Reset the input stream's examinedLength property so that we can track
  // the examined length of this particular application.
  const origInputStreamExaminedLength = inputStream.examinedLength;
  inputStream.examinedLength = 0;

  let value = this.evalOnce(body, state);
  const currentLR = origPosInfo.currentLeftRecursion;
  const memoKey = this.toMemoKey();
  const isHeadOfLeftRecursion = currentLR && currentLR.headApplication.toMemoKey() === memoKey;
  let memoRec;

  if (isHeadOfLeftRecursion) {
    value = this.growSeedResult(body, state, origPos, currentLR, value);
    origPosInfo.endLeftRecursion();
    memoRec = currentLR;
    memoRec.examinedLength = inputStream.examinedLength - origPos;
    memoRec.rightmostFailureOffset = state._getRightmostFailureOffset();
    origPosInfo.memoize(memoKey, memoRec); // updates origPosInfo's maxExaminedLength
  } else if (!currentLR || !currentLR.isInvolved(memoKey)) {
    // This application is not involved in left recursion, so it's ok to memoize it.
    memoRec = origPosInfo.memoize(memoKey, {
      matchLength: inputStream.pos - origPos,
      examinedLength: inputStream.examinedLength - origPos,
      value,
      failuresAtRightmostPosition: state.cloneRecordedFailures(),
      rightmostFailureOffset: state._getRightmostFailureOffset(),
    });
  }
  const succeeded = !!value;

  if (description) {
    state.popFailuresInfo();
    if (!succeeded) {
      state.processFailure(origPos, this);
    }
    if (memoRec) {
      memoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();
    }
  }

  // Record trace information in the memo table, so that it is available if the memoized result
  // is used later.
  if (state.isTracing() && memoRec) {
    const entry = state.getTraceEntry(origPos, this, succeeded, succeeded ? [value] : []);
    if (isHeadOfLeftRecursion) {
      common$e.assert(entry.terminatingLREntry != null || !succeeded);
      entry.isHeadOfLeftRecursion = true;
    }
    memoRec.traceEntry = entry;
  }

  // Fix the input stream's examinedLength -- it should be the maximum examined length
  // across all applications, not just this one.
  inputStream.examinedLength = Math.max(
      inputStream.examinedLength,
      origInputStreamExaminedLength
  );

  state.exitApplication(origPosInfo, value);

  return succeeded;
};

pexprs$g.Apply.prototype.evalOnce = function(expr, state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;

  if (state.eval(expr)) {
    const arity = expr.getArity();
    const bindings = state._bindings.splice(state._bindings.length - arity, arity);
    const offsets = state._bindingOffsets.splice(state._bindingOffsets.length - arity, arity);
    const matchLength = inputStream.pos - origPos;
    return new NonterminalNode(this.ruleName, bindings, offsets, matchLength);
  } else {
    return false;
  }
};

pexprs$g.Apply.prototype.growSeedResult = function(body, state, origPos, lrMemoRec, newValue) {
  if (!newValue) {
    return false;
  }

  const {inputStream} = state;

  while (true) {
    lrMemoRec.matchLength = inputStream.pos - origPos;
    lrMemoRec.value = newValue;
    lrMemoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();

    if (state.isTracing()) {
      // Before evaluating the body again, add a trace node for this application to the memo entry.
      // Its only child is a copy of the trace node from `newValue`, which will always be the last
      // element in `state.trace`.
      const seedTrace = state.trace[state.trace.length - 1];
      lrMemoRec.traceEntry = new Trace$1(
          state.input,
          origPos,
          inputStream.pos,
          this,
          true,
          [newValue],
          [seedTrace.clone()]
      );
    }
    inputStream.pos = origPos;
    newValue = this.evalOnce(body, state);
    if (inputStream.pos - origPos <= lrMemoRec.matchLength) {
      break;
    }
    if (state.isTracing()) {
      state.trace.splice(-2, 1); // Drop the trace for the old seed.
    }
  }
  if (state.isTracing()) {
    // The last entry is for an unused result -- pop it and save it in the "real" entry.
    lrMemoRec.traceEntry.recordLRTermination(state.trace.pop(), newValue);
  }
  inputStream.pos = origPos + lrMemoRec.matchLength;
  return lrMemoRec.value;
};

pexprs$g.UnicodeChar.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const ch = inputStream.next();
  if (ch && this.pattern.test(ch)) {
    state.pushBinding(new TerminalNode$1(ch.length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$d = common$l;
const pexprs$f = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$f.PExpr.prototype.getArity = common$d.abstract('getArity');

pexprs$f.any.getArity =
  pexprs$f.end.getArity =
  pexprs$f.Terminal.prototype.getArity =
  pexprs$f.Range.prototype.getArity =
  pexprs$f.Param.prototype.getArity =
  pexprs$f.Apply.prototype.getArity =
  pexprs$f.UnicodeChar.prototype.getArity =
    function() {
      return 1;
    };

pexprs$f.Alt.prototype.getArity = function() {
  // This is ok b/c all terms must have the same arity -- this property is
  // checked by the Grammar constructor.
  return this.terms.length === 0 ? 0 : this.terms[0].getArity();
};

pexprs$f.Seq.prototype.getArity = function() {
  let arity = 0;
  for (let idx = 0; idx < this.factors.length; idx++) {
    arity += this.factors[idx].getArity();
  }
  return arity;
};

pexprs$f.Iter.prototype.getArity = function() {
  return this.expr.getArity();
};

pexprs$f.Not.prototype.getArity = function() {
  return 0;
};

pexprs$f.Lookahead.prototype.getArity = pexprs$f.Lex.prototype.getArity = function() {
  return this.expr.getArity();
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$c = common$l;
const pexprs$e = pexprsMain;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function getMetaInfo(expr, grammarInterval) {
  const metaInfo = {};
  if (expr.source && grammarInterval) {
    const adjusted = expr.source.relativeTo(grammarInterval);
    metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];
  }
  return metaInfo;
}

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$e.PExpr.prototype.outputRecipe = common$c.abstract('outputRecipe');

pexprs$e.any.outputRecipe = function(formals, grammarInterval) {
  return ['any', getMetaInfo(this, grammarInterval)];
};

pexprs$e.end.outputRecipe = function(formals, grammarInterval) {
  return ['end', getMetaInfo(this, grammarInterval)];
};

pexprs$e.Terminal.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['terminal', getMetaInfo(this, grammarInterval), this.obj];
};

pexprs$e.Range.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['range', getMetaInfo(this, grammarInterval), this.from, this.to];
};

pexprs$e.Param.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['param', getMetaInfo(this, grammarInterval), this.index];
};

pexprs$e.Alt.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['alt', getMetaInfo(this, grammarInterval)].concat(
      this.terms.map(term => term.outputRecipe(formals, grammarInterval))
  );
};

pexprs$e.Extend.prototype.outputRecipe = function(formals, grammarInterval) {
  const extension = this.terms[0]; // [extension, original]
  return extension.outputRecipe(formals, grammarInterval);
};

pexprs$e.Splice.prototype.outputRecipe = function(formals, grammarInterval) {
  const beforeTerms = this.terms.slice(0, this.expansionPos);
  const afterTerms = this.terms.slice(this.expansionPos + 1);
  return [
    'splice',
    getMetaInfo(this, grammarInterval),
    beforeTerms.map(term => term.outputRecipe(formals, grammarInterval)),
    afterTerms.map(term => term.outputRecipe(formals, grammarInterval)),
  ];
};

pexprs$e.Seq.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['seq', getMetaInfo(this, grammarInterval)].concat(
      this.factors.map(factor => factor.outputRecipe(formals, grammarInterval))
  );
};

pexprs$e.Star.prototype.outputRecipe =
  pexprs$e.Plus.prototype.outputRecipe =
  pexprs$e.Opt.prototype.outputRecipe =
  pexprs$e.Not.prototype.outputRecipe =
  pexprs$e.Lookahead.prototype.outputRecipe =
  pexprs$e.Lex.prototype.outputRecipe =
    function(formals, grammarInterval) {
      return [
        this.constructor.name.toLowerCase(),
        getMetaInfo(this, grammarInterval),
        this.expr.outputRecipe(formals, grammarInterval),
      ];
    };

pexprs$e.Apply.prototype.outputRecipe = function(formals, grammarInterval) {
  return [
    'app',
    getMetaInfo(this, grammarInterval),
    this.ruleName,
    this.args.map(arg => arg.outputRecipe(formals, grammarInterval)),
  ];
};

pexprs$e.UnicodeChar.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['unicodeChar', getMetaInfo(this, grammarInterval), this.category];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$b = common$l;
const pexprs$d = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Called at grammar creation time to rewrite a rule body, replacing each reference to a formal
  parameter with a `Param` node. Returns a PExpr -- either a new one, or the original one if
  it was modified in place.
*/
pexprs$d.PExpr.prototype.introduceParams = common$b.abstract('introduceParams');

pexprs$d.any.introduceParams =
  pexprs$d.end.introduceParams =
  pexprs$d.Terminal.prototype.introduceParams =
  pexprs$d.Range.prototype.introduceParams =
  pexprs$d.Param.prototype.introduceParams =
  pexprs$d.UnicodeChar.prototype.introduceParams =
    function(formals) {
      return this;
    };

pexprs$d.Alt.prototype.introduceParams = function(formals) {
  this.terms.forEach((term, idx, terms) => {
    terms[idx] = term.introduceParams(formals);
  });
  return this;
};

pexprs$d.Seq.prototype.introduceParams = function(formals) {
  this.factors.forEach((factor, idx, factors) => {
    factors[idx] = factor.introduceParams(formals);
  });
  return this;
};

pexprs$d.Iter.prototype.introduceParams =
  pexprs$d.Not.prototype.introduceParams =
  pexprs$d.Lookahead.prototype.introduceParams =
  pexprs$d.Lex.prototype.introduceParams =
    function(formals) {
      this.expr = this.expr.introduceParams(formals);
      return this;
    };

pexprs$d.Apply.prototype.introduceParams = function(formals) {
  const index = formals.indexOf(this.ruleName);
  if (index >= 0) {
    if (this.args.length > 0) {
      // TODO: Should this be supported? See issue #64.
      throw new Error('Parameterized rules cannot be passed as arguments to another rule.');
    }
    return new pexprs$d.Param(index).withSource(this.source);
  } else {
    this.args.forEach((arg, idx, args) => {
      args[idx] = arg.introduceParams(formals);
    });
    return this;
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$a = common$l;
const pexprs$c = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

// Returns `true` if this parsing expression may accept without consuming any input.
pexprs$c.PExpr.prototype.isNullable = function(grammar) {
  return this._isNullable(grammar, Object.create(null));
};

pexprs$c.PExpr.prototype._isNullable = common$a.abstract('_isNullable');

pexprs$c.any._isNullable =
  pexprs$c.Range.prototype._isNullable =
  pexprs$c.Param.prototype._isNullable =
  pexprs$c.Plus.prototype._isNullable =
  pexprs$c.UnicodeChar.prototype._isNullable =
    function(grammar, memo) {
      return false;
    };

pexprs$c.end._isNullable = function(grammar, memo) {
  return true;
};

pexprs$c.Terminal.prototype._isNullable = function(grammar, memo) {
  if (typeof this.obj === 'string') {
    // This is an over-simplification: it's only correct if the input is a string. If it's an array
    // or an object, then the empty string parsing expression is not nullable.
    return this.obj === '';
  } else {
    return false;
  }
};

pexprs$c.Alt.prototype._isNullable = function(grammar, memo) {
  return this.terms.length === 0 || this.terms.some(term => term._isNullable(grammar, memo));
};

pexprs$c.Seq.prototype._isNullable = function(grammar, memo) {
  return this.factors.every(factor => factor._isNullable(grammar, memo));
};

pexprs$c.Star.prototype._isNullable =
  pexprs$c.Opt.prototype._isNullable =
  pexprs$c.Not.prototype._isNullable =
  pexprs$c.Lookahead.prototype._isNullable =
    function(grammar, memo) {
      return true;
    };

pexprs$c.Lex.prototype._isNullable = function(grammar, memo) {
  return this.expr._isNullable(grammar, memo);
};

pexprs$c.Apply.prototype._isNullable = function(grammar, memo) {
  const key = this.toMemoKey();
  if (!Object.prototype.hasOwnProperty.call(memo, key)) {
    const {body} = grammar.rules[this.ruleName];
    const inlined = body.substituteParams(this.args);
    memo[key] = false; // Prevent infinite recursion for recursive rules.
    memo[key] = inlined._isNullable(grammar, memo);
  }
  return memo[key];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$9 = common$l;
const pexprs$b = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Returns a PExpr that results from recursively replacing every formal parameter (i.e., instance
  of `Param`) inside this PExpr with its actual value from `actuals` (an Array).

  The receiver must not be modified; a new PExpr must be returned if any replacement is necessary.
*/
// function(actuals) { ... }
pexprs$b.PExpr.prototype.substituteParams = common$9.abstract('substituteParams');

pexprs$b.any.substituteParams =
  pexprs$b.end.substituteParams =
  pexprs$b.Terminal.prototype.substituteParams =
  pexprs$b.Range.prototype.substituteParams =
  pexprs$b.UnicodeChar.prototype.substituteParams =
    function(actuals) {
      return this;
    };

pexprs$b.Param.prototype.substituteParams = function(actuals) {
  return actuals[this.index];
};

pexprs$b.Alt.prototype.substituteParams = function(actuals) {
  return new pexprs$b.Alt(this.terms.map(term => term.substituteParams(actuals)));
};

pexprs$b.Seq.prototype.substituteParams = function(actuals) {
  return new pexprs$b.Seq(this.factors.map(factor => factor.substituteParams(actuals)));
};

pexprs$b.Iter.prototype.substituteParams =
  pexprs$b.Not.prototype.substituteParams =
  pexprs$b.Lookahead.prototype.substituteParams =
  pexprs$b.Lex.prototype.substituteParams =
    function(actuals) {
      return new this.constructor(this.expr.substituteParams(actuals));
    };

pexprs$b.Apply.prototype.substituteParams = function(actuals) {
  if (this.args.length === 0) {
    // Avoid making a copy of this application, as an optimization
    return this;
  } else {
    const args = this.args.map(arg => arg.substituteParams(actuals));
    return new pexprs$b.Apply(this.ruleName, args);
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$8 = common$l;
const pexprs$a = pexprsMain;

const {copyWithoutDuplicates} = common$8;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function isRestrictedJSIdentifier(str) {
  return /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(str);
}

function resolveDuplicatedNames(argumentNameList) {
  // `count` is used to record the number of times each argument name occurs in the list,
  // this is useful for checking duplicated argument name. It maps argument names to ints.
  const count = Object.create(null);
  argumentNameList.forEach(argName => {
    count[argName] = (count[argName] || 0) + 1;
  });

  // Append subscripts ('_1', '_2', ...) to duplicate argument names.
  Object.keys(count).forEach(dupArgName => {
    if (count[dupArgName] <= 1) {
      return;
    }

    // This name shows up more than once, so add subscripts.
    let subscript = 1;
    argumentNameList.forEach((argName, idx) => {
      if (argName === dupArgName) {
        argumentNameList[idx] = argName + '_' + subscript++;
      }
    });
  });
}

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Returns a list of strings that will be used as the default argument names for its receiver
  (a pexpr) in a semantic action. This is used exclusively by the Semantics Editor.

  `firstArgIndex` is the 1-based index of the first argument name that will be generated for this
  pexpr. It enables us to name arguments positionally, e.g., if the second argument is a
  non-alphanumeric terminal like "+", it will be named '$2'.

  `noDupCheck` is true if the caller of `toArgumentNameList` is not a top level caller. It enables
  us to avoid nested duplication subscripts appending, e.g., '_1_1', '_1_2', by only checking
  duplicates at the top level.

  Here is a more elaborate example that illustrates how this method works:
  `(a "+" b).toArgumentNameList(1)` evaluates to `['a', '$2', 'b']` with the following recursive
  calls:

    (a).toArgumentNameList(1) -> ['a'],
    ("+").toArgumentNameList(2) -> ['$2'],
    (b).toArgumentNameList(3) -> ['b']

  Notes:
  * This method must only be called on well-formed expressions, e.g., the receiver must
    not have any Alt sub-expressions with inconsistent arities.
  * e.getArity() === e.toArgumentNameList(1).length
*/
// function(firstArgIndex, noDupCheck) { ... }
pexprs$a.PExpr.prototype.toArgumentNameList = common$8.abstract('toArgumentNameList');

pexprs$a.any.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['any'];
};

pexprs$a.end.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['end'];
};

pexprs$a.Terminal.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  if (typeof this.obj === 'string' && /^[_a-zA-Z0-9]+$/.test(this.obj)) {
    // If this terminal is a valid suffix for a JS identifier, just prepend it with '_'
    return ['_' + this.obj];
  } else {
    // Otherwise, name it positionally.
    return ['$' + firstArgIndex];
  }
};

pexprs$a.Range.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  let argName = this.from + '_to_' + this.to;
  // If the `argName` is not valid then try to prepend a `_`.
  if (!isRestrictedJSIdentifier(argName)) {
    argName = '_' + argName;
  }
  // If the `argName` still not valid after prepending a `_`, then name it positionally.
  if (!isRestrictedJSIdentifier(argName)) {
    argName = '$' + firstArgIndex;
  }
  return [argName];
};

pexprs$a.Alt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  // `termArgNameLists` is an array of arrays where each row is the
  // argument name list that corresponds to a term in this alternation.
  const termArgNameLists = this.terms.map(term =>
    term.toArgumentNameList(firstArgIndex, true)
  );

  const argumentNameList = [];
  const numArgs = termArgNameLists[0].length;
  for (let colIdx = 0; colIdx < numArgs; colIdx++) {
    const col = [];
    for (let rowIdx = 0; rowIdx < this.terms.length; rowIdx++) {
      col.push(termArgNameLists[rowIdx][colIdx]);
    }
    const uniqueNames = copyWithoutDuplicates(col);
    argumentNameList.push(uniqueNames.join('_or_'));
  }

  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Seq.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  // Generate the argument name list, without worrying about duplicates.
  let argumentNameList = [];
  this.factors.forEach(factor => {
    const factorArgumentNameList = factor.toArgumentNameList(firstArgIndex, true);
    argumentNameList = argumentNameList.concat(factorArgumentNameList);

    // Shift the firstArgIndex to take this factor's argument names into account.
    firstArgIndex += factorArgumentNameList.length;
  });
  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Iter.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  const argumentNameList = this.expr
      .toArgumentNameList(firstArgIndex, noDupCheck)
      .map(exprArgumentString =>
      exprArgumentString[exprArgumentString.length - 1] === 's' ?
        exprArgumentString + 'es' :
        exprArgumentString + 's'
      );
  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Opt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return this.expr.toArgumentNameList(firstArgIndex, noDupCheck).map(argName => {
    return 'opt' + argName[0].toUpperCase() + argName.slice(1);
  });
};

pexprs$a.Not.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return [];
};

pexprs$a.Lookahead.prototype.toArgumentNameList = pexprs$a.Lex.prototype.toArgumentNameList =
  function(firstArgIndex, noDupCheck) {
    return this.expr.toArgumentNameList(firstArgIndex, noDupCheck);
  };

pexprs$a.Apply.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return [this.ruleName];
};

pexprs$a.UnicodeChar.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['$' + firstArgIndex];
};

pexprs$a.Param.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['param' + this.index];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$7 = common$l;
const pexprs$9 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

// Returns a string representing the PExpr, for use as a UI label, etc.
pexprs$9.PExpr.prototype.toDisplayString = common$7.abstract('toDisplayString');

pexprs$9.Alt.prototype.toDisplayString = pexprs$9.Seq.prototype.toDisplayString = function() {
  if (this.source) {
    return this.source.trimmed().contents;
  }
  return '[' + this.constructor.name + ']';
};

pexprs$9.any.toDisplayString =
  pexprs$9.end.toDisplayString =
  pexprs$9.Iter.prototype.toDisplayString =
  pexprs$9.Not.prototype.toDisplayString =
  pexprs$9.Lookahead.prototype.toDisplayString =
  pexprs$9.Lex.prototype.toDisplayString =
  pexprs$9.Terminal.prototype.toDisplayString =
  pexprs$9.Range.prototype.toDisplayString =
  pexprs$9.Param.prototype.toDisplayString =
    function() {
      return this.toString();
    };

pexprs$9.Apply.prototype.toDisplayString = function() {
  if (this.args.length > 0) {
    const ps = this.args.map(arg => arg.toDisplayString());
    return this.ruleName + '<' + ps.join(',') + '>';
  } else {
    return this.ruleName;
  }
};

pexprs$9.UnicodeChar.prototype.toDisplayString = function() {
  return 'Unicode [' + this.category + '] character';
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Failure$1 = Failure_1;
const common$6 = common$l;
const pexprs$8 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$8.PExpr.prototype.toFailure = common$6.abstract('toFailure');

pexprs$8.any.toFailure = function(grammar) {
  return new Failure$1(this, 'any object', 'description');
};

pexprs$8.end.toFailure = function(grammar) {
  return new Failure$1(this, 'end of input', 'description');
};

pexprs$8.Terminal.prototype.toFailure = function(grammar) {
  return new Failure$1(this, this.obj, 'string');
};

pexprs$8.Range.prototype.toFailure = function(grammar) {
  // TODO: come up with something better
  return new Failure$1(this, JSON.stringify(this.from) + '..' + JSON.stringify(this.to), 'code');
};

pexprs$8.Not.prototype.toFailure = function(grammar) {
  const description =
    this.expr === pexprs$8.any ? 'nothing' : 'not ' + this.expr.toFailure(grammar);
  return new Failure$1(this, description, 'description');
};

pexprs$8.Lookahead.prototype.toFailure = function(grammar) {
  return this.expr.toFailure(grammar);
};

pexprs$8.Apply.prototype.toFailure = function(grammar) {
  let {description} = grammar.rules[this.ruleName];
  if (!description) {
    const article = /^[aeiouAEIOU]/.test(this.ruleName) ? 'an' : 'a';
    description = article + ' ' + this.ruleName;
  }
  return new Failure$1(this, description, 'description');
};

pexprs$8.UnicodeChar.prototype.toFailure = function(grammar) {
  return new Failure$1(this, 'a Unicode [' + this.category + '] character', 'description');
};

pexprs$8.Alt.prototype.toFailure = function(grammar) {
  const fs = this.terms.map(t => t.toFailure(grammar));
  const description = '(' + fs.join(' or ') + ')';
  return new Failure$1(this, description, 'description');
};

pexprs$8.Seq.prototype.toFailure = function(grammar) {
  const fs = this.factors.map(f => f.toFailure(grammar));
  const description = '(' + fs.join(' ') + ')';
  return new Failure$1(this, description, 'description');
};

pexprs$8.Iter.prototype.toFailure = function(grammar) {
  const description = '(' + this.expr.toFailure(grammar) + this.operator + ')';
  return new Failure$1(this, description, 'description');
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$5 = common$l;
const pexprs$7 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  e1.toString() === e2.toString() ==> e1 and e2 are semantically equivalent.
  Note that this is not an iff (<==>): e.g.,
  (~"b" "a").toString() !== ("a").toString(), even though
  ~"b" "a" and "a" are interchangeable in any grammar,
  both in terms of the languages they accept and their arities.
*/
pexprs$7.PExpr.prototype.toString = common$5.abstract('toString');

pexprs$7.any.toString = function() {
  return 'any';
};

pexprs$7.end.toString = function() {
  return 'end';
};

pexprs$7.Terminal.prototype.toString = function() {
  return JSON.stringify(this.obj);
};

pexprs$7.Range.prototype.toString = function() {
  return JSON.stringify(this.from) + '..' + JSON.stringify(this.to);
};

pexprs$7.Param.prototype.toString = function() {
  return '$' + this.index;
};

pexprs$7.Lex.prototype.toString = function() {
  return '#(' + this.expr.toString() + ')';
};

pexprs$7.Alt.prototype.toString = function() {
  return this.terms.length === 1 ?
    this.terms[0].toString() :
    '(' + this.terms.map(term => term.toString()).join(' | ') + ')';
};

pexprs$7.Seq.prototype.toString = function() {
  return this.factors.length === 1 ?
    this.factors[0].toString() :
    '(' + this.factors.map(factor => factor.toString()).join(' ') + ')';
};

pexprs$7.Iter.prototype.toString = function() {
  return this.expr + this.operator;
};

pexprs$7.Not.prototype.toString = function() {
  return '~' + this.expr;
};

pexprs$7.Lookahead.prototype.toString = function() {
  return '&' + this.expr;
};

pexprs$7.Apply.prototype.toString = function() {
  if (this.args.length > 0) {
    const ps = this.args.map(arg => arg.toString());
    return this.ruleName + '<' + ps.join(',') + '>';
  } else {
    return this.ruleName;
  }
};

pexprs$7.UnicodeChar.prototype.toString = function() {
  return '\\p{' + this.category + '}';
};

// --------------------------------------------------------------------
// Re-export classes
// --------------------------------------------------------------------

var pexprs$6 = pexprsMain;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Failure = Failure_1;
const {TerminalNode} = nodes$1;
const {assert: assert$1} = common$l;
const {PExpr, Terminal} = pexprs$6;

class CaseInsensitiveTerminal$1 extends PExpr {
  constructor(param) {
    super();
    this.obj = param;
  }

  _getString(state) {
    const terminal = state.currentApplication().args[this.obj.index];
    assert$1(terminal instanceof Terminal, 'expected a Terminal expression');
    return terminal.obj;
  }

  // Implementation of the PExpr API

  allowsSkippingPrecedingSpace() {
    return true;
  }

  eval(state) {
    const {inputStream} = state;
    const origPos = inputStream.pos;
    const matchStr = this._getString(state);
    if (!inputStream.matchString(matchStr, true)) {
      state.processFailure(origPos, this);
      return false;
    } else {
      state.pushBinding(new TerminalNode(matchStr.length), origPos);
      return true;
    }
  }

  getArity() {
    return 1;
  }

  substituteParams(actuals) {
    return new CaseInsensitiveTerminal$1(this.obj.substituteParams(actuals));
  }

  toDisplayString() {
    return this.obj.toDisplayString() + ' (case-insensitive)';
  }

  toFailure(grammar) {
    return new Failure(
        this,
        this.obj.toFailure(grammar) + ' (case-insensitive)',
        'description'
    );
  }

  _isNullable(grammar, memo) {
    return this.obj._isNullable(grammar, memo);
  }
}

var CaseInsensitiveTerminal_1 = CaseInsensitiveTerminal$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Interval$1 = Interval_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function InputStream$3(source) {
  this.source = source;
  this.pos = 0;
  this.examinedLength = 0;
}

InputStream$3.prototype = {
  atEnd() {
    const ans = this.pos === this.source.length;
    this.examinedLength = Math.max(this.examinedLength, this.pos + 1);
    return ans;
  },

  next() {
    const ans = this.source[this.pos++];
    this.examinedLength = Math.max(this.examinedLength, this.pos);
    return ans;
  },

  nextCharCode() {
    const nextChar = this.next();
    return nextChar && nextChar.charCodeAt(0);
  },

  nextCodePoint() {
    const cp = this.source.slice(this.pos++).codePointAt(0);
    // If the code point is beyond plane 0, it takes up two characters.
    if (cp > 0xffff) {
      this.pos += 1;
    }
    this.examinedLength = Math.max(this.examinedLength, this.pos);
    return cp;
  },

  matchString(s, optIgnoreCase) {
    let idx;
    if (optIgnoreCase) {
      /*
        Case-insensitive comparison is a tricky business. Some notable gotchas include the
        "Turkish I" problem (http://www.i18nguy.com/unicode/turkish-i18n.html) and the fact
        that the German Esszet (ß) turns into "SS" in upper case.

        This is intended to be a locale-invariant comparison, which means it may not obey
        locale-specific expectations (e.g. "i" => "İ").
       */
      for (idx = 0; idx < s.length; idx++) {
        const actual = this.next();
        const expected = s[idx];
        if (actual == null || actual.toUpperCase() !== expected.toUpperCase()) {
          return false;
        }
      }
      return true;
    }
    // Default is case-sensitive comparison.
    for (idx = 0; idx < s.length; idx++) {
      if (this.next() !== s[idx]) {
        return false;
      }
    }
    return true;
  },

  sourceSlice(startIdx, endIdx) {
    return this.source.slice(startIdx, endIdx);
  },

  interval(startIdx, optEndIdx) {
    return new Interval$1(this.source, startIdx, optEndIdx ? optEndIdx : this.pos);
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var InputStream_1 = InputStream$3;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$4 = common$l;
const util$4 = util$7;
const Interval = Interval_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function MatchResult$2(
    matcher,
    input,
    startExpr,
    cst,
    cstOffset,
    rightmostFailurePosition,
    optRecordedFailures
) {
  this.matcher = matcher;
  this.input = input;
  this.startExpr = startExpr;
  this._cst = cst;
  this._cstOffset = cstOffset;
  this._rightmostFailurePosition = rightmostFailurePosition;
  this._rightmostFailures = optRecordedFailures;

  if (this.failed()) {
    /* eslint-disable no-invalid-this */
    common$4.defineLazyProperty(this, 'message', function() {
      const detail = 'Expected ' + this.getExpectedText();
      return (
        util$4.getLineAndColumnMessage(this.input, this.getRightmostFailurePosition()) + detail
      );
    });
    common$4.defineLazyProperty(this, 'shortMessage', function() {
      const detail = 'expected ' + this.getExpectedText();
      const errorInfo = util$4.getLineAndColumn(this.input, this.getRightmostFailurePosition());
      return 'Line ' + errorInfo.lineNum + ', col ' + errorInfo.colNum + ': ' + detail;
    });
    /* eslint-enable no-invalid-this */
  }
}

MatchResult$2.prototype.succeeded = function() {
  return !!this._cst;
};

MatchResult$2.prototype.failed = function() {
  return !this.succeeded();
};

MatchResult$2.prototype.getRightmostFailurePosition = function() {
  return this._rightmostFailurePosition;
};

MatchResult$2.prototype.getRightmostFailures = function() {
  if (!this._rightmostFailures) {
    this.matcher.setInput(this.input);
    const matchResultWithFailures = this.matcher._match(
        this.startExpr,
        false,
        this.getRightmostFailurePosition()
    );
    this._rightmostFailures = matchResultWithFailures.getRightmostFailures();
  }
  return this._rightmostFailures;
};

MatchResult$2.prototype.toString = function() {
  return this.succeeded() ?
    '[match succeeded]' :
    '[match failed at position ' + this.getRightmostFailurePosition() + ']';
};

// Return a string summarizing the expected contents of the input stream when
// the match failure occurred.
MatchResult$2.prototype.getExpectedText = function() {
  if (this.succeeded()) {
    throw new Error('cannot get expected text of a successful MatchResult');
  }

  const sb = new common$4.StringBuffer();
  let failures = this.getRightmostFailures();

  // Filter out the fluffy failures to make the default error messages more useful
  failures = failures.filter(failure => !failure.isFluffy());

  for (let idx = 0; idx < failures.length; idx++) {
    if (idx > 0) {
      if (idx === failures.length - 1) {
        sb.append(failures.length > 2 ? ', or ' : ' or ');
      } else {
        sb.append(', ');
      }
    }
    sb.append(failures[idx].toString());
  }
  return sb.contents();
};

MatchResult$2.prototype.getInterval = function() {
  const pos = this.getRightmostFailurePosition();
  return new Interval(this.input, pos, pos);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var MatchResult_1 = MatchResult$2;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function PosInfo$1() {
  this.applicationMemoKeyStack = []; // active applications at this position
  this.memo = {};
  this.maxExaminedLength = 0;
  this.maxRightmostFailureOffset = -1;
  this.currentLeftRecursion = undefined;
}

PosInfo$1.prototype = {
  isActive(application) {
    return this.applicationMemoKeyStack.indexOf(application.toMemoKey()) >= 0;
  },

  enter(application) {
    this.applicationMemoKeyStack.push(application.toMemoKey());
  },

  exit() {
    this.applicationMemoKeyStack.pop();
  },

  startLeftRecursion(headApplication, memoRec) {
    memoRec.isLeftRecursion = true;
    memoRec.headApplication = headApplication;
    memoRec.nextLeftRecursion = this.currentLeftRecursion;
    this.currentLeftRecursion = memoRec;

    const {applicationMemoKeyStack} = this;
    const indexOfFirstInvolvedRule =
      applicationMemoKeyStack.indexOf(headApplication.toMemoKey()) + 1;
    const involvedApplicationMemoKeys = applicationMemoKeyStack.slice(
        indexOfFirstInvolvedRule
    );

    memoRec.isInvolved = function(applicationMemoKey) {
      return involvedApplicationMemoKeys.indexOf(applicationMemoKey) >= 0;
    };

    memoRec.updateInvolvedApplicationMemoKeys = function() {
      for (let idx = indexOfFirstInvolvedRule; idx < applicationMemoKeyStack.length; idx++) {
        const applicationMemoKey = applicationMemoKeyStack[idx];
        if (!this.isInvolved(applicationMemoKey)) {
          involvedApplicationMemoKeys.push(applicationMemoKey);
        }
      }
    };
  },

  endLeftRecursion() {
    this.currentLeftRecursion = this.currentLeftRecursion.nextLeftRecursion;
  },

  // Note: this method doesn't get called for the "head" of a left recursion -- for LR heads,
  // the memoized result (which starts out being a failure) is always used.
  shouldUseMemoizedResult(memoRec) {
    if (!memoRec.isLeftRecursion) {
      return true;
    }
    const {applicationMemoKeyStack} = this;
    for (let idx = 0; idx < applicationMemoKeyStack.length; idx++) {
      const applicationMemoKey = applicationMemoKeyStack[idx];
      if (memoRec.isInvolved(applicationMemoKey)) {
        return false;
      }
    }
    return true;
  },

  memoize(memoKey, memoRec) {
    this.memo[memoKey] = memoRec;
    this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);
    this.maxRightmostFailureOffset = Math.max(
        this.maxRightmostFailureOffset,
        memoRec.rightmostFailureOffset
    );
    return memoRec;
  },

  clearObsoleteEntries(pos, invalidatedIdx) {
    if (pos + this.maxExaminedLength <= invalidatedIdx) {
      // Optimization: none of the rule applications that were memoized here examined the
      // interval of the input that changed, so nothing has to be invalidated.
      return;
    }

    const {memo} = this;
    this.maxExaminedLength = 0;
    this.maxRightmostFailureOffset = -1;
    Object.keys(memo).forEach(k => {
      const memoRec = memo[k];
      if (pos + memoRec.examinedLength > invalidatedIdx) {
        delete memo[k];
      } else {
        this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);
        this.maxRightmostFailureOffset = Math.max(
            this.maxRightmostFailureOffset,
            memoRec.rightmostFailureOffset
        );
      }
    });
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var PosInfo_1 = PosInfo$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const InputStream$2 = InputStream_1;
const MatchResult$1 = MatchResult_1;
const PosInfo = PosInfo_1;
const Trace = Trace_1;
const pexprs$5 = pexprs$6;
const util$3 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

let builtInApplySyntacticBody;

util$3.awaitBuiltInRules(builtInRules => {
  builtInApplySyntacticBody = builtInRules.rules.applySyntactic.body;
});

const applySpaces = new pexprs$5.Apply('spaces');

function MatchState$1(matcher, startExpr, optPositionToRecordFailures) {
  this.matcher = matcher;
  this.startExpr = startExpr;

  this.grammar = matcher.grammar;
  this.input = matcher.input;
  this.inputStream = new InputStream$2(matcher.input);
  this.memoTable = matcher.memoTable;

  this._bindings = [];
  this._bindingOffsets = [];
  this._applicationStack = [];
  this._posStack = [0];
  this.inLexifiedContextStack = [false];

  this.rightmostFailurePosition = -1;
  this._rightmostFailurePositionStack = [];
  this._recordedFailuresStack = [];

  if (optPositionToRecordFailures !== undefined) {
    this.positionToRecordFailures = optPositionToRecordFailures;
    this.recordedFailures = Object.create(null);
  }
}

MatchState$1.prototype = {
  posToOffset(pos) {
    return pos - this._posStack[this._posStack.length - 1];
  },

  enterApplication(posInfo, app) {
    this._posStack.push(this.inputStream.pos);
    this._applicationStack.push(app);
    this.inLexifiedContextStack.push(false);
    posInfo.enter(app);
    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);
    this.rightmostFailurePosition = -1;
  },

  exitApplication(posInfo, optNode) {
    const origPos = this._posStack.pop();
    this._applicationStack.pop();
    this.inLexifiedContextStack.pop();
    posInfo.exit();

    this.rightmostFailurePosition = Math.max(
        this.rightmostFailurePosition,
        this._rightmostFailurePositionStack.pop()
    );

    if (optNode) {
      this.pushBinding(optNode, origPos);
    }
  },

  enterLexifiedContext() {
    this.inLexifiedContextStack.push(true);
  },

  exitLexifiedContext() {
    this.inLexifiedContextStack.pop();
  },

  currentApplication() {
    return this._applicationStack[this._applicationStack.length - 1];
  },

  inSyntacticContext() {
    const currentApplication = this.currentApplication();
    if (currentApplication) {
      return currentApplication.isSyntactic() && !this.inLexifiedContext();
    } else {
      // The top-level context is syntactic if the start application is.
      return this.startExpr.factors[0].isSyntactic();
    }
  },

  inLexifiedContext() {
    return this.inLexifiedContextStack[this.inLexifiedContextStack.length - 1];
  },

  skipSpaces() {
    this.pushFailuresInfo();
    this.eval(applySpaces);
    this.popBinding();
    this.popFailuresInfo();
    return this.inputStream.pos;
  },

  skipSpacesIfInSyntacticContext() {
    return this.inSyntacticContext() ? this.skipSpaces() : this.inputStream.pos;
  },

  maybeSkipSpacesBefore(expr) {
    if (expr.allowsSkippingPrecedingSpace() && expr !== applySpaces) {
      return this.skipSpacesIfInSyntacticContext();
    } else {
      return this.inputStream.pos;
    }
  },

  pushBinding(node, origPos) {
    this._bindings.push(node);
    this._bindingOffsets.push(this.posToOffset(origPos));
  },

  popBinding() {
    this._bindings.pop();
    this._bindingOffsets.pop();
  },

  numBindings() {
    return this._bindings.length;
  },

  truncateBindings(newLength) {
    // Yes, this is this really faster than setting the `length` property (tested with
    // bin/es5bench on Node v6.1.0).
    // Update 2021-10-25: still true on v14.15.5 — it's ~20% speedup on es5bench.
    while (this._bindings.length > newLength) {
      this.popBinding();
    }
  },

  getCurrentPosInfo() {
    return this.getPosInfo(this.inputStream.pos);
  },

  getPosInfo(pos) {
    let posInfo = this.memoTable[pos];
    if (!posInfo) {
      posInfo = this.memoTable[pos] = new PosInfo();
    }
    return posInfo;
  },

  processFailure(pos, expr) {
    this.rightmostFailurePosition = Math.max(this.rightmostFailurePosition, pos);

    if (this.recordedFailures && pos === this.positionToRecordFailures) {
      const app = this.currentApplication();
      if (app) {
        // Substitute parameters with the actual pexprs that were passed to
        // the current rule.
        expr = expr.substituteParams(app.args);
      }

      this.recordFailure(expr.toFailure(this.grammar), false);
    }
  },

  recordFailure(failure, shouldCloneIfNew) {
    const key = failure.toKey();
    if (!this.recordedFailures[key]) {
      this.recordedFailures[key] = shouldCloneIfNew ? failure.clone() : failure;
    } else if (this.recordedFailures[key].isFluffy() && !failure.isFluffy()) {
      this.recordedFailures[key].clearFluffy();
    }
  },

  recordFailures(failures, shouldCloneIfNew) {
    Object.keys(failures).forEach(key => {
      this.recordFailure(failures[key], shouldCloneIfNew);
    });
  },

  cloneRecordedFailures() {
    if (!this.recordedFailures) {
      return undefined;
    }

    const ans = Object.create(null);
    Object.keys(this.recordedFailures).forEach(key => {
      ans[key] = this.recordedFailures[key].clone();
    });
    return ans;
  },

  getRightmostFailurePosition() {
    return this.rightmostFailurePosition;
  },

  _getRightmostFailureOffset() {
    return this.rightmostFailurePosition >= 0 ?
      this.posToOffset(this.rightmostFailurePosition) :
      -1;
  },

  // Returns the memoized trace entry for `expr` at `pos`, if one exists, `null` otherwise.
  getMemoizedTraceEntry(pos, expr) {
    const posInfo = this.memoTable[pos];
    if (posInfo && expr instanceof pexprs$5.Apply) {
      const memoRec = posInfo.memo[expr.toMemoKey()];
      if (memoRec && memoRec.traceEntry) {
        const entry = memoRec.traceEntry.cloneWithExpr(expr);
        entry.isMemoized = true;
        return entry;
      }
    }
    return null;
  },

  // Returns a new trace entry, with the currently active trace array as its children.
  getTraceEntry(pos, expr, succeeded, bindings) {
    if (expr instanceof pexprs$5.Apply) {
      const app = this.currentApplication();
      const actuals = app ? app.args : [];
      expr = expr.substituteParams(actuals);
    }
    return (
      this.getMemoizedTraceEntry(pos, expr) ||
      new Trace(this.input, pos, this.inputStream.pos, expr, succeeded, bindings, this.trace)
    );
  },

  isTracing() {
    return !!this.trace;
  },

  hasNecessaryInfo(memoRec) {
    if (this.trace && !memoRec.traceEntry) {
      return false;
    }

    if (
      this.recordedFailures &&
      this.inputStream.pos + memoRec.rightmostFailureOffset === this.positionToRecordFailures
    ) {
      return !!memoRec.failuresAtRightmostPosition;
    }

    return true;
  },

  useMemoizedResult(origPos, memoRec) {
    if (this.trace) {
      this.trace.push(memoRec.traceEntry);
    }

    const memoRecRightmostFailurePosition =
      this.inputStream.pos + memoRec.rightmostFailureOffset;
    this.rightmostFailurePosition = Math.max(
        this.rightmostFailurePosition,
        memoRecRightmostFailurePosition
    );
    if (
      this.recordedFailures &&
      this.positionToRecordFailures === memoRecRightmostFailurePosition &&
      memoRec.failuresAtRightmostPosition
    ) {
      this.recordFailures(memoRec.failuresAtRightmostPosition, true);
    }

    this.inputStream.examinedLength = Math.max(
        this.inputStream.examinedLength,
        memoRec.examinedLength + origPos
    );

    if (memoRec.value) {
      this.inputStream.pos += memoRec.matchLength;
      this.pushBinding(memoRec.value, origPos);
      return true;
    }
    return false;
  },

  // Evaluate `expr` and return `true` if it succeeded, `false` otherwise. On success, `bindings`
  // will have `expr.getArity()` more elements than before, and the input stream's position may
  // have increased. On failure, `bindings` and position will be unchanged.
  eval(expr) {
    const {inputStream} = this;
    const origNumBindings = this._bindings.length;

    let origRecordedFailures;
    if (this.recordedFailures) {
      origRecordedFailures = this.recordedFailures;
      this.recordedFailures = Object.create(null);
    }

    const origPos = inputStream.pos;
    const memoPos = this.maybeSkipSpacesBefore(expr);

    let origTrace;
    if (this.trace) {
      origTrace = this.trace;
      this.trace = [];
    }

    // Do the actual evaluation.
    const ans = expr.eval(this);

    if (this.trace) {
      const bindings = this._bindings.slice(origNumBindings);
      const traceEntry = this.getTraceEntry(memoPos, expr, ans, bindings);
      traceEntry.isImplicitSpaces = expr === applySpaces;
      traceEntry.isRootNode = expr === this.startExpr;
      origTrace.push(traceEntry);
      this.trace = origTrace;
    }

    if (ans) {
      if (this.recordedFailures && inputStream.pos === this.positionToRecordFailures) {
        Object.keys(this.recordedFailures).forEach(key => {
          this.recordedFailures[key].makeFluffy();
        });
      }
    } else {
      // Reset the position and the bindings.
      inputStream.pos = origPos;
      this.truncateBindings(origNumBindings);
    }

    if (this.recordedFailures) {
      this.recordFailures(origRecordedFailures, false);
    }

    // The built-in applySyntactic rule needs special handling: we want to skip
    // trailing spaces, just as with the top-level application of a syntactic rule.
    if (expr === builtInApplySyntacticBody) {
      this.skipSpaces();
    }

    return ans;
  },

  getMatchResult() {
    this.eval(this.startExpr);
    let rightmostFailures;
    if (this.recordedFailures) {
      rightmostFailures = Object.keys(this.recordedFailures).map(
          key => this.recordedFailures[key]
      );
    }
    const cst = this._bindings[0];
    if (cst) {
      cst.grammar = this.grammar;
    }
    return new MatchResult$1(
        this.matcher,
        this.input,
        this.startExpr,
        cst,
        this._bindingOffsets[0],
        this.rightmostFailurePosition,
        rightmostFailures
    );
  },

  getTrace() {
    this.trace = [];
    const matchResult = this.getMatchResult();

    // The trace node for the start rule is always the last entry. If it is a syntactic rule,
    // the first entry is for an application of 'spaces'.
    // TODO(pdubroy): Clean this up by introducing a special `Match<startAppl>` rule, which will
    // ensure that there is always a single root trace node.
    const rootTrace = this.trace[this.trace.length - 1];
    rootTrace.result = matchResult;
    return rootTrace;
  },

  pushFailuresInfo() {
    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);
    this._recordedFailuresStack.push(this.recordedFailures);
  },

  popFailuresInfo() {
    this.rightmostFailurePosition = this._rightmostFailurePositionStack.pop();
    this.recordedFailures = this._recordedFailuresStack.pop();
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var MatchState_1 = MatchState$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const MatchState = MatchState_1;

const pexprs$4 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Matcher$1(grammar) {
  this.grammar = grammar;
  this.memoTable = [];
  this.input = '';
}

Matcher$1.prototype.getInput = function() {
  return this.input;
};

Matcher$1.prototype.setInput = function(str) {
  if (this.input !== str) {
    this.replaceInputRange(0, this.input.length, str);
  }
  return this;
};

Matcher$1.prototype.replaceInputRange = function(startIdx, endIdx, str) {
  const currentInput = this.input;
  if (
    startIdx < 0 ||
    startIdx > currentInput.length ||
    endIdx < 0 ||
    endIdx > currentInput.length ||
    startIdx > endIdx
  ) {
    throw new Error('Invalid indices: ' + startIdx + ' and ' + endIdx);
  }

  // update input
  this.input = currentInput.slice(0, startIdx) + str + currentInput.slice(endIdx);

  // update memo table (similar to the above)
  const restOfMemoTable = this.memoTable.slice(endIdx);
  this.memoTable.length = startIdx;
  for (let idx = 0; idx < str.length; idx++) {
    this.memoTable.push(undefined);
  }
  restOfMemoTable.forEach(function(posInfo) {
    this.memoTable.push(posInfo);
  }, this);

  // Invalidate memoRecs
  for (let pos = 0; pos < startIdx; pos++) {
    const posInfo = this.memoTable[pos];
    if (posInfo) {
      posInfo.clearObsoleteEntries(pos, startIdx);
    }
  }

  return this;
};

Matcher$1.prototype.match = function(optStartApplicationStr) {
  return this._match(this._getStartExpr(optStartApplicationStr), false);
};

Matcher$1.prototype.trace = function(optStartApplicationStr) {
  return this._match(this._getStartExpr(optStartApplicationStr), true);
};

Matcher$1.prototype._match = function(startExpr, tracing, optPositionToRecordFailures) {
  const state = new MatchState(this, startExpr, optPositionToRecordFailures);
  return tracing ? state.getTrace() : state.getMatchResult();
};

/*
  Returns the starting expression for this Matcher's associated grammar. If `optStartApplicationStr`
  is specified, it is a string expressing a rule application in the grammar. If not specified, the
  grammar's default start rule will be used.
*/
Matcher$1.prototype._getStartExpr = function(optStartApplicationStr) {
  const applicationStr = optStartApplicationStr || this.grammar.defaultStartRule;
  if (!applicationStr) {
    throw new Error('Missing start rule argument -- the grammar has no default start rule.');
  }

  const startApp = this.grammar.parseApplication(applicationStr);
  return new pexprs$4.Seq([startApp, pexprs$4.end]);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Matcher_1 = Matcher$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const InputStream$1 = InputStream_1;
const {IterationNode} = nodes$1;
const MatchResult = MatchResult_1;
const common$3 = common$l;
const errors$3 = errors$9;
const util$2 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

const globalActionStack = [];

const hasOwnProperty = (x, prop) => Object.prototype.hasOwnProperty.call(x, prop);

// ----------------- Wrappers -----------------

// Wrappers decorate CST nodes with all of the functionality (i.e., operations and attributes)
// provided by a Semantics (see below). `Wrapper` is the abstract superclass of all wrappers. A
// `Wrapper` must have `_node` and `_semantics` instance variables, which refer to the CST node and
// Semantics (resp.) for which it was created, and a `_childWrappers` instance variable which is
// used to cache the wrapper instances that are created for its child nodes. Setting these instance
// variables is the responsibility of the constructor of each Semantics-specific subclass of
// `Wrapper`.
class Wrapper {
  constructor(node, sourceInterval, baseInterval) {
    this._node = node;
    this.source = sourceInterval;

    // The interval that the childOffsets of `node` are relative to. It should be the source
    // of the closest Nonterminal node.
    this._baseInterval = baseInterval;

    if (node.isNonterminal()) {
      common$3.assert(sourceInterval === baseInterval);
    }
    this._childWrappers = [];
  }

  toString() {
    return '[semantics wrapper for ' + this._node.grammar.name + ']';
  }

  _forgetMemoizedResultFor(attributeName) {
    // Remove the memoized attribute from the cstNode and all its children.
    delete this._node[this._semantics.attributeKeys[attributeName]];
    this.children.forEach(child => {
      child._forgetMemoizedResultFor(attributeName);
    });
  }

  // Returns the wrapper of the specified child node. Child wrappers are created lazily and
  // cached in the parent wrapper's `_childWrappers` instance variable.
  child(idx) {
    if (!(0 <= idx && idx < this._node.numChildren())) {
      // TODO: Consider throwing an exception here.
      return undefined;
    }
    let childWrapper = this._childWrappers[idx];
    if (!childWrapper) {
      const childNode = this._node.childAt(idx);
      const offset = this._node.childOffsets[idx];

      const source = this._baseInterval.subInterval(offset, childNode.matchLength);
      const base = childNode.isNonterminal() ? source : this._baseInterval;
      childWrapper = this._childWrappers[idx] = this._semantics.wrap(childNode, source, base);
    }
    return childWrapper;
  }

  // Returns an array containing the wrappers of all of the children of the node associated
  // with this wrapper.
  _children() {
    // Force the creation of all child wrappers
    for (let idx = 0; idx < this._node.numChildren(); idx++) {
      this.child(idx);
    }
    return this._childWrappers;
  }

  // Returns `true` if the CST node associated with this wrapper corresponds to an iteration
  // expression, i.e., a Kleene-*, Kleene-+, or an optional. Returns `false` otherwise.
  isIteration() {
    return this._node.isIteration();
  }

  // Returns `true` if the CST node associated with this wrapper is a terminal node, `false`
  // otherwise.
  isTerminal() {
    return this._node.isTerminal();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node, `false`
  // otherwise.
  isNonterminal() {
    return this._node.isNonterminal();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node
  // corresponding to a syntactic rule, `false` otherwise.
  isSyntactic() {
    return this.isNonterminal() && this._node.isSyntactic();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node
  // corresponding to a lexical rule, `false` otherwise.
  isLexical() {
    return this.isNonterminal() && this._node.isLexical();
  }

  // Returns `true` if the CST node associated with this wrapper is an iterator node
  // having either one or no child (? operator), `false` otherwise.
  // Otherwise, throws an exception.
  isOptional() {
    return this._node.isOptional();
  }

  // Create a new _iter wrapper in the same semantics as this wrapper.
  iteration(optChildWrappers) {
    const childWrappers = optChildWrappers || [];

    const childNodes = childWrappers.map(c => c._node);
    const iter = new IterationNode(childNodes, [], -1, false);

    const wrapper = this._semantics.wrap(iter, null, null);
    wrapper._childWrappers = childWrappers;
    return wrapper;
  }

  // Returns an array containing the children of this CST node.
  get children() {
    return this._children();
  }

  // Returns the name of grammar rule that created this CST node.
  get ctorName() {
    return this._node.ctorName;
  }

  // TODO: Remove this eventually (deprecated in v0.12).
  get interval() {
    throw new Error('The `interval` property is deprecated -- use `source` instead');
  }

  // Returns the number of children of this CST node.
  get numChildren() {
    return this._node.numChildren();
  }

  // Returns the contents of the input stream consumed by this CST node.
  get sourceString() {
    return this.source.contents;
  }
}

// ----------------- Semantics -----------------

// A Semantics is a container for a family of Operations and Attributes for a given grammar.
// Semantics enable modularity (different clients of a grammar can create their set of operations
// and attributes in isolation) and extensibility even when operations and attributes are mutually-
// recursive. This constructor should not be called directly except from
// `Semantics.createSemantics`. The normal ways to create a Semantics, given a grammar 'g', are
// `g.createSemantics()` and `g.extendSemantics(parentSemantics)`.
function Semantics$2(grammar, superSemantics) {
  const self = this;
  this.grammar = grammar;
  this.checkedActionDicts = false;

  // Constructor for wrapper instances, which are passed as the arguments to the semantic actions
  // of an operation or attribute. Operations and attributes require double dispatch: the semantic
  // action is chosen based on both the node's type and the semantics. Wrappers ensure that
  // the `execute` method is called with the correct (most specific) semantics object as an
  // argument.
  this.Wrapper = class extends (superSemantics ? superSemantics.Wrapper : Wrapper) {
    constructor(node, sourceInterval, baseInterval) {
      super(node, sourceInterval, baseInterval);
      self.checkActionDictsIfHaventAlready();
      this._semantics = self;
    }
  };

  this.super = superSemantics;
  if (superSemantics) {
    if (!(grammar.equals(this.super.grammar) || grammar._inheritsFrom(this.super.grammar))) {
      throw new Error(
          "Cannot extend a semantics for grammar '" +
          this.super.grammar.name +
          "' for use with grammar '" +
          grammar.name +
          "' (not a sub-grammar)"
      );
    }
    this.operations = Object.create(this.super.operations);
    this.attributes = Object.create(this.super.attributes);
    this.attributeKeys = Object.create(null);

    // Assign unique symbols for each of the attributes inherited from the super-semantics so that
    // they are memoized independently.
    // eslint-disable-next-line guard-for-in
    for (const attributeName in this.attributes) {
      Object.defineProperty(this.attributeKeys, attributeName, {
        value: util$2.uniqueId(attributeName),
      });
    }
  } else {
    this.operations = Object.create(null);
    this.attributes = Object.create(null);
    this.attributeKeys = Object.create(null);
  }
}

Semantics$2.prototype.toString = function() {
  return '[semantics for ' + this.grammar.name + ']';
};

Semantics$2.prototype.checkActionDictsIfHaventAlready = function() {
  if (!this.checkedActionDicts) {
    this.checkActionDicts();
    this.checkedActionDicts = true;
  }
};

// Checks that the action dictionaries for all operations and attributes in this semantics,
// including the ones that were inherited from the super-semantics, agree with the grammar.
// Throws an exception if one or more of them doesn't.
Semantics$2.prototype.checkActionDicts = function() {
  let name;
  // eslint-disable-next-line guard-for-in
  for (name in this.operations) {
    this.operations[name].checkActionDict(this.grammar);
  }
  // eslint-disable-next-line guard-for-in
  for (name in this.attributes) {
    this.attributes[name].checkActionDict(this.grammar);
  }
};

Semantics$2.prototype.toRecipe = function(semanticsOnly) {
  function hasSuperSemantics(s) {
    return s.super !== Semantics$2.BuiltInSemantics._getSemantics();
  }

  let str = '(function(g) {\n';
  if (hasSuperSemantics(this)) {
    str += '  var semantics = ' + this.super.toRecipe(true) + '(g';

    const superSemanticsGrammar = this.super.grammar;
    let relatedGrammar = this.grammar;
    while (relatedGrammar !== superSemanticsGrammar) {
      str += '.superGrammar';
      relatedGrammar = relatedGrammar.superGrammar;
    }

    str += ');\n';
    str += '  return g.extendSemantics(semantics)';
  } else {
    str += '  return g.createSemantics()';
  }
  ['Operation', 'Attribute'].forEach(type => {
    const semanticOperations = this[type.toLowerCase() + 's'];
    Object.keys(semanticOperations).forEach(name => {
      const {actionDict, formals, builtInDefault} = semanticOperations[name];

      let signature = name;
      if (formals.length > 0) {
        signature += '(' + formals.join(', ') + ')';
      }

      let method;
      if (hasSuperSemantics(this) && this.super[type.toLowerCase() + 's'][name]) {
        method = 'extend' + type;
      } else {
        method = 'add' + type;
      }
      str += '\n    .' + method + '(' + JSON.stringify(signature) + ', {';

      const srcArray = [];
      Object.keys(actionDict).forEach(actionName => {
        if (actionDict[actionName] !== builtInDefault) {
          let source = actionDict[actionName].toString().trim();

          // Convert method shorthand to plain old function syntax.
          // https://github.com/harc/ohm/issues/263
          source = source.replace(/^.*\(/, 'function(');

          srcArray.push('\n      ' + JSON.stringify(actionName) + ': ' + source);
        }
      });
      str += srcArray.join(',') + '\n    })';
    });
  });
  str += ';\n  })';

  if (!semanticsOnly) {
    str =
      '(function() {\n' +
      '  var grammar = this.fromRecipe(' +
      this.grammar.toRecipe() +
      ');\n' +
      '  var semantics = ' +
      str +
      '(grammar);\n' +
      '  return semantics;\n' +
      '});\n';
  }

  return str;
};

function parseSignature$1(signature, type) {
  if (!Semantics$2.prototypeGrammar) {
    // The Operations and Attributes grammar won't be available while Ohm is loading,
    // but we can get away the following simplification b/c none of the operations
    // that are used while loading take arguments.
    common$3.assert(signature.indexOf('(') === -1);
    return {
      name: signature,
      formals: [],
    };
  }

  const r = Semantics$2.prototypeGrammar.match(
      signature,
    type === 'operation' ? 'OperationSignature' : 'AttributeSignature'
  );
  if (r.failed()) {
    throw new Error(r.message);
  }

  return Semantics$2.prototypeGrammarSemantics(r).parse();
}

function newDefaultAction(type, name, doIt) {
  return function(...children) {
    const thisThing = this._semantics.operations[name] || this._semantics.attributes[name];
    const args = thisThing.formals.map(formal => this.args[formal]);

    if (!this.isIteration() && children.length === 1) {
      // This CST node corresponds to a non-terminal in the grammar (e.g., AddExpr). The fact that
      // we got here means that this action dictionary doesn't have an action for this particular
      // non-terminal or a generic `_nonterminal` action.
      // As a convenience, if this node only has one child, we just return the result of applying
      // this operation / attribute to the child node.
      return doIt.apply(children[0], args);
    } else {
      // Otherwise, we throw an exception to let the programmer know that we don't know what
      // to do with this node.
      throw errors$3.missingSemanticAction(this.ctorName, name, type, globalActionStack);
    }
  };
}

Semantics$2.prototype.addOperationOrAttribute = function(type, signature, actionDict) {
  const typePlural = type + 's';

  const parsedNameAndFormalArgs = parseSignature$1(signature, type);
  const {name} = parsedNameAndFormalArgs;
  const {formals} = parsedNameAndFormalArgs;

  // TODO: check that there are no duplicate formal arguments

  this.assertNewName(name, type);

  // Create the action dictionary for this operation / attribute that contains a `_default` action
  // which defines the default behavior of iteration, terminal, and non-terminal nodes...
  const builtInDefault = newDefaultAction(type, name, doIt);
  const realActionDict = {_default: builtInDefault};
  // ... and add in the actions supplied by the programmer, which may override some or all of the
  // default ones.
  Object.keys(actionDict).forEach(name => {
    realActionDict[name] = actionDict[name];
  });

  const entry =
    type === 'operation' ?
      new Operation(name, formals, realActionDict, builtInDefault) :
      new Attribute(name, realActionDict, builtInDefault);

  // The following check is not strictly necessary (it will happen later anyway) but it's better to
  // catch errors early.
  entry.checkActionDict(this.grammar);

  this[typePlural][name] = entry;

  function doIt(...args) {
    // Dispatch to most specific version of this operation / attribute -- it may have been
    // overridden by a sub-semantics.
    const thisThing = this._semantics[typePlural][name];

    // Check that the caller passed the correct number of arguments.
    if (arguments.length !== thisThing.formals.length) {
      throw new Error(
          'Invalid number of arguments passed to ' +
          name +
          ' ' +
          type +
          ' (expected ' +
          thisThing.formals.length +
          ', got ' +
          arguments.length +
          ')'
      );
    }

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [idx, val] of Object.entries(args)) {
      const formal = thisThing.formals[idx];
      argsObj[formal] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = thisThing.execute(this._semantics, this);
    this.args = oldArgs;
    return ans;
  }

  if (type === 'operation') {
    this.Wrapper.prototype[name] = doIt;
    this.Wrapper.prototype[name].toString = function() {
      return '[' + name + ' operation]';
    };
  } else {
    Object.defineProperty(this.Wrapper.prototype, name, {
      get: doIt,
      configurable: true, // So the property can be deleted.
    });
    Object.defineProperty(this.attributeKeys, name, {
      value: util$2.uniqueId(name),
    });
  }
};

Semantics$2.prototype.extendOperationOrAttribute = function(type, name, actionDict) {
  const typePlural = type + 's';

  // Make sure that `name` really is just a name, i.e., that it doesn't also contain formals.
  parseSignature$1(name, 'attribute');

  if (!(this.super && name in this.super[typePlural])) {
    throw new Error(
        'Cannot extend ' +
        type +
        " '" +
        name +
        "': did not inherit an " +
        type +
        ' with that name'
    );
  }
  if (hasOwnProperty(this[typePlural], name)) {
    throw new Error('Cannot extend ' + type + " '" + name + "' again");
  }

  // Create a new operation / attribute whose actionDict delegates to the super operation /
  // attribute's actionDict, and which has all the keys from `inheritedActionDict`.
  const inheritedFormals = this[typePlural][name].formals;
  const inheritedActionDict = this[typePlural][name].actionDict;
  const newActionDict = Object.create(inheritedActionDict);
  Object.keys(actionDict).forEach(name => {
    newActionDict[name] = actionDict[name];
  });

  this[typePlural][name] =
    type === 'operation' ?
      new Operation(name, inheritedFormals, newActionDict) :
      new Attribute(name, newActionDict);

  // The following check is not strictly necessary (it will happen later anyway) but it's better to
  // catch errors early.
  this[typePlural][name].checkActionDict(this.grammar);
};

Semantics$2.prototype.assertNewName = function(name, type) {
  if (hasOwnProperty(Wrapper.prototype, name)) {
    throw new Error('Cannot add ' + type + " '" + name + "': that's a reserved name");
  }
  if (name in this.operations) {
    throw new Error(
        'Cannot add ' + type + " '" + name + "': an operation with that name already exists"
    );
  }
  if (name in this.attributes) {
    throw new Error(
        'Cannot add ' + type + " '" + name + "': an attribute with that name already exists"
    );
  }
};

// Returns a wrapper for the given CST `node` in this semantics.
// If `node` is already a wrapper, returns `node` itself.  // TODO: why is this needed?
Semantics$2.prototype.wrap = function(node, source, optBaseInterval) {
  const baseInterval = optBaseInterval || source;
  return node instanceof this.Wrapper ? node : new this.Wrapper(node, source, baseInterval);
};

// Creates a new Semantics instance for `grammar`, inheriting operations and attributes from
// `optSuperSemantics`, if it is specified. Returns a function that acts as a proxy for the new
// Semantics instance. When that function is invoked with a CST node as an argument, it returns
// a wrapper for that node which gives access to the operations and attributes provided by this
// semantics.
Semantics$2.createSemantics = function(grammar, optSuperSemantics) {
  const s = new Semantics$2(
      grammar,
    optSuperSemantics !== undefined ?
      optSuperSemantics :
      Semantics$2.BuiltInSemantics._getSemantics()
  );

  // To enable clients to invoke a semantics like a function, return a function that acts as a proxy
  // for `s`, which is the real `Semantics` instance.
  const proxy = function ASemantics(matchResult) {
    if (!(matchResult instanceof MatchResult)) {
      throw new TypeError(
          'Semantics expected a MatchResult, but got ' +
          common$3.unexpectedObjToString(matchResult)
      );
    }
    if (matchResult.failed()) {
      throw new TypeError('cannot apply Semantics to ' + matchResult.toString());
    }

    const cst = matchResult._cst;
    if (cst.grammar !== grammar) {
      throw new Error(
          "Cannot use a MatchResult from grammar '" +
          cst.grammar.name +
          "' with a semantics for '" +
          grammar.name +
          "'"
      );
    }
    const inputStream = new InputStream$1(matchResult.input);
    return s.wrap(cst, inputStream.interval(matchResult._cstOffset, matchResult.input.length));
  };

  // Forward public methods from the proxy to the semantics instance.
  proxy.addOperation = function(signature, actionDict) {
    s.addOperationOrAttribute('operation', signature, actionDict);
    return proxy;
  };
  proxy.extendOperation = function(name, actionDict) {
    s.extendOperationOrAttribute('operation', name, actionDict);
    return proxy;
  };
  proxy.addAttribute = function(name, actionDict) {
    s.addOperationOrAttribute('attribute', name, actionDict);
    return proxy;
  };
  proxy.extendAttribute = function(name, actionDict) {
    s.extendOperationOrAttribute('attribute', name, actionDict);
    return proxy;
  };
  proxy._getActionDict = function(operationOrAttributeName) {
    const action =
      s.operations[operationOrAttributeName] || s.attributes[operationOrAttributeName];
    if (!action) {
      throw new Error(
          '"' +
          operationOrAttributeName +
          '" is not a valid operation or attribute ' +
          'name in this semantics for "' +
          grammar.name +
          '"'
      );
    }
    return action.actionDict;
  };
  proxy._remove = function(operationOrAttributeName) {
    let semantic;
    if (operationOrAttributeName in s.operations) {
      semantic = s.operations[operationOrAttributeName];
      delete s.operations[operationOrAttributeName];
    } else if (operationOrAttributeName in s.attributes) {
      semantic = s.attributes[operationOrAttributeName];
      delete s.attributes[operationOrAttributeName];
    }
    delete s.Wrapper.prototype[operationOrAttributeName];
    return semantic;
  };
  proxy.getOperationNames = function() {
    return Object.keys(s.operations);
  };
  proxy.getAttributeNames = function() {
    return Object.keys(s.attributes);
  };
  proxy.getGrammar = function() {
    return s.grammar;
  };
  proxy.toRecipe = function(semanticsOnly) {
    return s.toRecipe(semanticsOnly);
  };

  // Make the proxy's toString() work.
  proxy.toString = s.toString.bind(s);

  // Returns the semantics for the proxy.
  proxy._getSemantics = function() {
    return s;
  };

  return proxy;
};

// ----------------- Operation -----------------

// An Operation represents a function to be applied to a concrete syntax tree (CST) -- it's very
// similar to a Visitor (http://en.wikipedia.org/wiki/Visitor_pattern). An operation is executed by
// recursively walking the CST, and at each node, invoking the matching semantic action from
// `actionDict`. See `Operation.prototype.execute` for details of how a CST node's matching semantic
// action is found.
class Operation {
  constructor(name, formals, actionDict, builtInDefault) {
    this.name = name;
    this.formals = formals;
    this.actionDict = actionDict;
    this.builtInDefault = builtInDefault;
  }

  checkActionDict(grammar) {
    grammar._checkTopDownActionDict(this.typeName, this.name, this.actionDict);
  }

  // Execute this operation on the CST node associated with `nodeWrapper` in the context of the
  // given Semantics instance.
  execute(semantics, nodeWrapper) {
    try {
      // Look for a semantic action whose name matches the node's constructor name, which is either
      // the name of a rule in the grammar, or '_terminal' (for a terminal node), or '_iter' (for an
      // iteration node).
      const {ctorName} = nodeWrapper._node;
      let actionFn = this.actionDict[ctorName];
      if (actionFn) {
        globalActionStack.push([this, ctorName]);
        return actionFn.apply(nodeWrapper, nodeWrapper._children());
      }

      // The action dictionary does not contain a semantic action for this specific type of node.
      // If this is a nonterminal node and the programmer has provided a `_nonterminal` semantic
      // action, we invoke it:
      if (nodeWrapper.isNonterminal()) {
        actionFn = this.actionDict._nonterminal;
        if (actionFn) {
          globalActionStack.push([this, '_nonterminal', ctorName]);
          return actionFn.apply(nodeWrapper, nodeWrapper._children());
        }
      }

      // Otherwise, we invoke the '_default' semantic action.
      globalActionStack.push([this, 'default action', ctorName]);
      return this.actionDict._default.apply(nodeWrapper, nodeWrapper._children());
    } finally {
      globalActionStack.pop();
    }
  }
}

Operation.prototype.typeName = 'operation';

// ----------------- Attribute -----------------

// Attributes are Operations whose results are memoized. This means that, for any given semantics,
// the semantic action for a CST node will be invoked no more than once.
class Attribute extends Operation {
  constructor(name, actionDict, builtInDefault) {
    super(name, [], actionDict, builtInDefault);
  }

  execute(semantics, nodeWrapper) {
    const node = nodeWrapper._node;
    const key = semantics.attributeKeys[this.name];
    if (!hasOwnProperty(node, key)) {
      // The following is a super-send -- isn't JS beautiful? :/
      node[key] = Operation.prototype.execute.call(this, semantics, nodeWrapper);
    }
    return node[key];
  }
}

Attribute.prototype.typeName = 'attribute';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Semantics_1 = Semantics$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const CaseInsensitiveTerminal = CaseInsensitiveTerminal_1;
const Matcher = Matcher_1;
const Semantics$1 = Semantics_1;
const common$2 = common$l;
const errors$2 = errors$9;
const pexprs$3 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

const SPECIAL_ACTION_NAMES = ['_iter', '_terminal', '_nonterminal', '_default'];

function getSortedRuleValues(grammar) {
  return Object.keys(grammar.rules)
      .sort()
      .map(name => grammar.rules[name]);
}

// Until ES2019, JSON was not a valid subset of JavaScript because U+2028 (line separator)
// and U+2029 (paragraph separator) are allowed in JSON string literals, but not in JS.
// This function properly encodes those two characters so that the resulting string is
// represents both valid JSON, and valid JavaScript (for ES2018 and below).
// See https://v8.dev/features/subsume-json for more details.
const jsonToJS = str => str.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');

function Grammar$4(name, superGrammar, rules, optDefaultStartRule) {
  this.name = name;
  this.superGrammar = superGrammar;
  this.rules = rules;
  if (optDefaultStartRule) {
    if (!(optDefaultStartRule in rules)) {
      throw new Error(
          "Invalid start rule: '" +
          optDefaultStartRule +
          "' is not a rule in grammar '" +
          name +
          "'"
      );
    }
    this.defaultStartRule = optDefaultStartRule;
  }
}

let ohmGrammar$2;
let buildGrammar$1;

// This method is called from main.js once Ohm has loaded.
Grammar$4.initApplicationParser = function(grammar, builderFn) {
  ohmGrammar$2 = grammar;
  buildGrammar$1 = builderFn;
};

Grammar$4.prototype = {
  matcher() {
    return new Matcher(this);
  },

  // Return true if the grammar is a built-in grammar, otherwise false.
  // NOTE: This might give an unexpected result if called before BuiltInRules is defined!
  isBuiltIn() {
    return this === Grammar$4.ProtoBuiltInRules || this === Grammar$4.BuiltInRules;
  },

  equals(g) {
    if (this === g) {
      return true;
    }
    // Do the cheapest comparisons first.
    if (
      g == null ||
      this.name !== g.name ||
      this.defaultStartRule !== g.defaultStartRule ||
      !(this.superGrammar === g.superGrammar || this.superGrammar.equals(g.superGrammar))
    ) {
      return false;
    }
    const myRules = getSortedRuleValues(this);
    const otherRules = getSortedRuleValues(g);
    return (
      myRules.length === otherRules.length &&
      myRules.every((rule, i) => {
        return (
          rule.description === otherRules[i].description &&
          rule.formals.join(',') === otherRules[i].formals.join(',') &&
          rule.body.toString() === otherRules[i].body.toString()
        );
      })
    );
  },

  match(input, optStartApplication) {
    const m = this.matcher();
    m.replaceInputRange(0, 0, input);
    return m.match(optStartApplication);
  },

  trace(input, optStartApplication) {
    const m = this.matcher();
    m.replaceInputRange(0, 0, input);
    return m.trace(optStartApplication);
  },

  createSemantics() {
    return Semantics$1.createSemantics(this);
  },

  extendSemantics(superSemantics) {
    return Semantics$1.createSemantics(this, superSemantics._getSemantics());
  },

  // Check that every key in `actionDict` corresponds to a semantic action, and that it maps to
  // a function of the correct arity. If not, throw an exception.
  _checkTopDownActionDict(what, name, actionDict) {
    const problems = [];

    // eslint-disable-next-line guard-for-in
    for (const k in actionDict) {
      const v = actionDict[k];
      const isSpecialAction = SPECIAL_ACTION_NAMES.includes(k);

      if (!isSpecialAction && !(k in this.rules)) {
        problems.push(`'${k}' is not a valid semantic action for '${this.name}'`);
        continue;
      }
      if (typeof v !== 'function') {
        problems.push(`'${k}' must be a function in an action dictionary for '${this.name}'`);
        continue;
      }
      const actual = v.length;
      const expected = this._topDownActionArity(k);
      if (actual !== expected) {
        let details;
        if (k === '_iter' || k === '_nonterminal') {
          details =
            `it should use a rest parameter, e.g. \`${k}(...children) {}\`. ` +
            'NOTE: this is new in Ohm v16 — see https://ohmjs.org/d/ati for details.';
        } else {
          details = `expected ${expected}, got ${actual}`;
        }
        problems.push(`Semantic action '${k}' has the wrong arity: ${details}`);
      }
    }
    if (problems.length > 0) {
      const prettyProblems = problems.map(problem => '- ' + problem);
      const error = new Error(
          [
            `Found errors in the action dictionary of the '${name}' ${what}:`,
            ...prettyProblems,
          ].join('\n')
      );
      error.problems = problems;
      throw error;
    }
  },

  // Return the expected arity for a semantic action named `actionName`, which
  // is either a rule name or a special action name like '_nonterminal'.
  _topDownActionArity(actionName) {
    // All special actions have an expected arity of 0, though all but _terminal
    // are expected to use the rest parameter syntax (e.g. `_iter(...children)`).
    // This is considered to have arity 0, i.e. `((...args) => {}).length` is 0.
    return SPECIAL_ACTION_NAMES.includes(actionName) ?
      0 :
      this.rules[actionName].body.getArity();
  },

  _inheritsFrom(grammar) {
    let g = this.superGrammar;
    while (g) {
      if (g.equals(grammar, true)) {
        return true;
      }
      g = g.superGrammar;
    }
    return false;
  },

  toRecipe(superGrammarExpr = undefined) {
    const metaInfo = {};
    // Include the grammar source if it is available.
    if (this.source) {
      metaInfo.source = this.source.contents;
    }

    let startRule = null;
    if (this.defaultStartRule) {
      startRule = this.defaultStartRule;
    }

    const rules = {};
    Object.keys(this.rules).forEach(ruleName => {
      const ruleInfo = this.rules[ruleName];
      const {body} = ruleInfo;
      const isDefinition = !this.superGrammar || !this.superGrammar.rules[ruleName];

      let operation;
      if (isDefinition) {
        operation = 'define';
      } else {
        operation = body instanceof pexprs$3.Extend ? 'extend' : 'override';
      }

      const metaInfo = {};
      if (ruleInfo.source && this.source) {
        const adjusted = ruleInfo.source.relativeTo(this.source);
        metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];
      }

      const description = isDefinition ? ruleInfo.description : null;
      const bodyRecipe = body.outputRecipe(ruleInfo.formals, this.source);

      rules[ruleName] = [
        operation, // "define"/"extend"/"override"
        metaInfo,
        description,
        ruleInfo.formals,
        bodyRecipe,
      ];
    });

    // If the caller provided an expression to use for the supergrammar, use that.
    // Otherwise, if the supergrammar is a user grammar, use its recipe inline.
    let superGrammarOutput = 'null';
    if (superGrammarExpr) {
      superGrammarOutput = superGrammarExpr;
    } else if (this.superGrammar && !this.superGrammar.isBuiltIn()) {
      superGrammarOutput = this.superGrammar.toRecipe();
    }

    const recipeElements = [
      ...['grammar', metaInfo, this.name].map(JSON.stringify),
      superGrammarOutput,
      ...[startRule, rules].map(JSON.stringify),
    ];
    return jsonToJS(`[${recipeElements.join(',')}]`);
  },

  // TODO: Come up with better names for these methods.
  // TODO: Write the analog of these methods for inherited attributes.
  toOperationActionDictionaryTemplate() {
    return this._toOperationOrAttributeActionDictionaryTemplate();
  },
  toAttributeActionDictionaryTemplate() {
    return this._toOperationOrAttributeActionDictionaryTemplate();
  },

  _toOperationOrAttributeActionDictionaryTemplate() {
    // TODO: add the super-grammar's templates at the right place, e.g., a case for AddExpr_plus
    // should appear next to other cases of AddExpr.

    const sb = new common$2.StringBuffer();
    sb.append('{');

    let first = true;
    // eslint-disable-next-line guard-for-in
    for (const ruleName in this.rules) {
      const {body} = this.rules[ruleName];
      if (first) {
        first = false;
      } else {
        sb.append(',');
      }
      sb.append('\n');
      sb.append('  ');
      this.addSemanticActionTemplate(ruleName, body, sb);
    }

    sb.append('\n}');
    return sb.contents();
  },

  addSemanticActionTemplate(ruleName, body, sb) {
    sb.append(ruleName);
    sb.append(': function(');
    const arity = this._topDownActionArity(ruleName);
    sb.append(common$2.repeat('_', arity).join(', '));
    sb.append(') {\n');
    sb.append('  }');
  },

  // Parse a string which expresses a rule application in this grammar, and return the
  // resulting Apply node.
  parseApplication(str) {
    let app;
    if (str.indexOf('<') === -1) {
      // simple application
      app = new pexprs$3.Apply(str);
    } else {
      // parameterized application
      const cst = ohmGrammar$2.match(str, 'Base_application');
      app = buildGrammar$1(cst, {});
    }

    // Ensure that the application is valid.
    if (!(app.ruleName in this.rules)) {
      throw errors$2.undeclaredRule(app.ruleName, this.name);
    }
    const {formals} = this.rules[app.ruleName];
    if (formals.length !== app.args.length) {
      const {source} = this.rules[app.ruleName];
      throw errors$2.wrongNumberOfParameters(
          app.ruleName,
          formals.length,
          app.args.length,
          source
      );
    }
    return app;
  },
};

// The following grammar contains a few rules that couldn't be written  in "userland".
// At the bottom of src/main.js, we create a sub-grammar of this grammar that's called
// `BuiltInRules`. That grammar contains several convenience rules, e.g., `letter` and
// `digit`, and is implicitly the super-grammar of any grammar whose super-grammar
// isn't specified.
Grammar$4.ProtoBuiltInRules = new Grammar$4(
    'ProtoBuiltInRules', // name
    undefined, // supergrammar
    {
      any: {
        body: pexprs$3.any,
        formals: [],
        description: 'any character',
        primitive: true,
      },
      end: {
        body: pexprs$3.end,
        formals: [],
        description: 'end of input',
        primitive: true,
      },

      caseInsensitive: {
        body: new CaseInsensitiveTerminal(new pexprs$3.Param(0)),
        formals: ['str'],
        primitive: true,
      },
      lower: {
        body: new pexprs$3.UnicodeChar('Ll'),
        formals: [],
        description: 'a lowercase letter',
        primitive: true,
      },
      upper: {
        body: new pexprs$3.UnicodeChar('Lu'),
        formals: [],
        description: 'an uppercase letter',
        primitive: true,
      },
      // Union of Lt (titlecase), Lm (modifier), and Lo (other), i.e. any letter not in Ll or Lu.
      unicodeLtmo: {
        body: new pexprs$3.UnicodeChar('Ltmo'),
        formals: [],
        description: 'a Unicode character in Lt, Lm, or Lo',
        primitive: true,
      },

      // These rules are not truly primitive (they could be written in userland) but are defined
      // here for bootstrapping purposes.
      spaces: {
        body: new pexprs$3.Star(new pexprs$3.Apply('space')),
        formals: [],
      },
      space: {
        body: new pexprs$3.Range('\x00', ' '),
        formals: [],
        description: 'a space',
      },
    }
);

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Grammar_1 = Grammar$4;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$3 = Grammar_1;
const InputStream = InputStream_1;
const common$1 = common$l;
const errors$1 = errors$9;
const pexprs$2 = pexprs$6;

// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Constructors

function GrammarDecl$1(name) {
  this.name = name;
}

// Helpers

GrammarDecl$1.prototype.sourceInterval = function(startIdx, endIdx) {
  return this.source.subInterval(startIdx, endIdx - startIdx);
};

GrammarDecl$1.prototype.ensureSuperGrammar = function() {
  if (!this.superGrammar) {
    this.withSuperGrammar(
      // TODO: The conditional expression below is an ugly hack. It's kind of ok because
      // I doubt anyone will ever try to declare a grammar called `BuiltInRules`. Still,
      // we should try to find a better way to do this.
      this.name === 'BuiltInRules' ? Grammar$3.ProtoBuiltInRules : Grammar$3.BuiltInRules
    );
  }
  return this.superGrammar;
};

GrammarDecl$1.prototype.ensureSuperGrammarRuleForOverriding = function(name, source) {
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  if (!ruleInfo) {
    throw errors$1.cannotOverrideUndeclaredRule(name, this.superGrammar.name, source);
  }
  return ruleInfo;
};

GrammarDecl$1.prototype.installOverriddenOrExtendedRule = function(
    name,
    formals,
    body,
    source
) {
  const duplicateParameterNames = common$1.getDuplicates(formals);
  if (duplicateParameterNames.length > 0) {
    throw errors$1.duplicateParameterNames(name, duplicateParameterNames, source);
  }
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  const expectedFormals = ruleInfo.formals;
  const expectedNumFormals = expectedFormals ? expectedFormals.length : 0;
  if (formals.length !== expectedNumFormals) {
    throw errors$1.wrongNumberOfParameters(name, expectedNumFormals, formals.length, source);
  }
  return this.install(name, formals, body, ruleInfo.description, source);
};

GrammarDecl$1.prototype.install = function(name, formals, body, description, source) {
  this.rules[name] = {
    body: body.introduceParams(formals),
    formals,
    description,
    source,
  };
  return this;
};

// Stuff that you should only do once

GrammarDecl$1.prototype.withSuperGrammar = function(superGrammar) {
  if (this.superGrammar) {
    throw new Error('the super grammar of a GrammarDecl cannot be set more than once');
  }
  this.superGrammar = superGrammar;
  this.rules = Object.create(superGrammar.rules);

  // Grammars with an explicit supergrammar inherit a default start rule.
  if (!superGrammar.isBuiltIn()) {
    this.defaultStartRule = superGrammar.defaultStartRule;
  }
  return this;
};

GrammarDecl$1.prototype.withDefaultStartRule = function(ruleName) {
  this.defaultStartRule = ruleName;
  return this;
};

GrammarDecl$1.prototype.withSource = function(source) {
  this.source = new InputStream(source).interval(0, source.length);
  return this;
};

// Creates a Grammar instance, and if it passes the sanity checks, returns it.
GrammarDecl$1.prototype.build = function() {
  const grammar = new Grammar$3(
      this.name,
      this.ensureSuperGrammar(),
      this.rules,
      this.defaultStartRule
  );

  // TODO: change the pexpr.prototype.assert... methods to make them add
  // exceptions to an array that's provided as an arg. Then we'll be able to
  // show more than one error of the same type at a time.
  // TODO: include the offending pexpr in the errors, that way we can show
  // the part of the source that caused it.
  const grammarErrors = [];
  let grammarHasInvalidApplications = false;
  Object.keys(grammar.rules).forEach(ruleName => {
    const {body} = grammar.rules[ruleName];
    try {
      body.assertChoicesHaveUniformArity(ruleName);
    } catch (e) {
      grammarErrors.push(e);
    }
    try {
      body.assertAllApplicationsAreValid(ruleName, grammar);
    } catch (e) {
      grammarErrors.push(e);
      grammarHasInvalidApplications = true;
    }
  });
  if (!grammarHasInvalidApplications) {
    // The following check can only be done if the grammar has no invalid applications.
    Object.keys(grammar.rules).forEach(ruleName => {
      const {body} = grammar.rules[ruleName];
      try {
        body.assertIteratedExprsAreNotNullable(grammar, []);
      } catch (e) {
        grammarErrors.push(e);
      }
    });
  }
  if (grammarErrors.length > 0) {
    errors$1.throwErrors(grammarErrors);
  }
  if (this.source) {
    grammar.source = this.source;
  }

  return grammar;
};

// Rule declarations

GrammarDecl$1.prototype.define = function(name, formals, body, description, source) {
  this.ensureSuperGrammar();
  if (this.superGrammar.rules[name]) {
    throw errors$1.duplicateRuleDeclaration(name, this.name, this.superGrammar.name, source);
  } else if (this.rules[name]) {
    throw errors$1.duplicateRuleDeclaration(name, this.name, this.name, source);
  }
  const duplicateParameterNames = common$1.getDuplicates(formals);
  if (duplicateParameterNames.length > 0) {
    throw errors$1.duplicateParameterNames(name, duplicateParameterNames, source);
  }
  return this.install(name, formals, body, description, source);
};

GrammarDecl$1.prototype.override = function(name, formals, body, descIgnored, source) {
  this.ensureSuperGrammarRuleForOverriding(name, source);
  this.installOverriddenOrExtendedRule(name, formals, body, source);
  return this;
};

GrammarDecl$1.prototype.extend = function(name, formals, fragment, descIgnored, source) {
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  if (!ruleInfo) {
    throw errors$1.cannotExtendUndeclaredRule(name, this.superGrammar.name, source);
  }
  const body = new pexprs$2.Extend(this.superGrammar, name, fragment);
  body.source = fragment.source;
  this.installOverriddenOrExtendedRule(name, formals, body, source);
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var GrammarDecl_1 = GrammarDecl$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$2 = Grammar_1;
const GrammarDecl = GrammarDecl_1;
const pexprs$1 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Builder$2() {}

Builder$2.prototype = {
  currentDecl: null,
  currentRuleName: null,

  newGrammar(name) {
    return new GrammarDecl(name);
  },

  grammar(metaInfo, name, superGrammar, defaultStartRule, rules) {
    const gDecl = new GrammarDecl(name);
    if (superGrammar) {
      // `superGrammar` may be a recipe (i.e. an Array), or an actual grammar instance.
      gDecl.withSuperGrammar(
        superGrammar instanceof Grammar$2 ? superGrammar : this.fromRecipe(superGrammar)
      );
    }
    if (defaultStartRule) {
      gDecl.withDefaultStartRule(defaultStartRule);
    }
    if (metaInfo && metaInfo.source) {
      gDecl.withSource(metaInfo.source);
    }

    this.currentDecl = gDecl;
    Object.keys(rules).forEach(ruleName => {
      this.currentRuleName = ruleName;
      const ruleRecipe = rules[ruleName];

      const action = ruleRecipe[0]; // define/extend/override
      const metaInfo = ruleRecipe[1];
      const description = ruleRecipe[2];
      const formals = ruleRecipe[3];
      const body = this.fromRecipe(ruleRecipe[4]);

      let source;
      if (gDecl.source && metaInfo && metaInfo.sourceInterval) {
        source = gDecl.source.subInterval(
            metaInfo.sourceInterval[0],
            metaInfo.sourceInterval[1] - metaInfo.sourceInterval[0]
        );
      }
      gDecl[action](ruleName, formals, body, description, source);
    });
    this.currentRuleName = this.currentDecl = null;
    return gDecl.build();
  },

  terminal(x) {
    return new pexprs$1.Terminal(x);
  },

  range(from, to) {
    return new pexprs$1.Range(from, to);
  },

  param(index) {
    return new pexprs$1.Param(index);
  },

  alt(...termArgs) {
    let terms = [];
    for (let arg of termArgs) {
      if (!(arg instanceof pexprs$1.PExpr)) {
        arg = this.fromRecipe(arg);
      }
      if (arg instanceof pexprs$1.Alt) {
        terms = terms.concat(arg.terms);
      } else {
        terms.push(arg);
      }
    }
    return terms.length === 1 ? terms[0] : new pexprs$1.Alt(terms);
  },

  seq(...factorArgs) {
    let factors = [];
    for (let arg of factorArgs) {
      if (!(arg instanceof pexprs$1.PExpr)) {
        arg = this.fromRecipe(arg);
      }
      if (arg instanceof pexprs$1.Seq) {
        factors = factors.concat(arg.factors);
      } else {
        factors.push(arg);
      }
    }
    return factors.length === 1 ? factors[0] : new pexprs$1.Seq(factors);
  },

  star(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Star(expr);
  },

  plus(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Plus(expr);
  },

  opt(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Opt(expr);
  },

  not(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Not(expr);
  },

  la(expr) {
    // TODO: temporary to still be able to read old recipes
    return this.lookahead(expr);
  },

  lookahead(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Lookahead(expr);
  },

  lex(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Lex(expr);
  },

  app(ruleName, optParams) {
    if (optParams && optParams.length > 0) {
      optParams = optParams.map(function(param) {
        return param instanceof pexprs$1.PExpr ? param : this.fromRecipe(param);
      }, this);
    }
    return new pexprs$1.Apply(ruleName, optParams);
  },

  // Note that unlike other methods in this class, this method cannot be used as a
  // convenience constructor. It only works with recipes, because it relies on
  // `this.currentDecl` and `this.currentRuleName` being set.
  splice(beforeTerms, afterTerms) {
    return new pexprs$1.Splice(
        this.currentDecl.superGrammar,
        this.currentRuleName,
        beforeTerms.map(term => this.fromRecipe(term)),
        afterTerms.map(term => this.fromRecipe(term))
    );
  },

  fromRecipe(recipe) {
    // the meta-info of 'grammar' is processed in Builder.grammar
    const args = recipe[0] === 'grammar' ? recipe.slice(1) : recipe.slice(2);
    const result = this[recipe[0]](...args);

    const metaInfo = recipe[1];
    if (metaInfo) {
      if (metaInfo.sourceInterval && this.currentDecl) {
        result.withSource(this.currentDecl.sourceInterval(...metaInfo.sourceInterval));
      }
    }
    return result;
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Builder_1 = Builder$2;

var name = "ohm-js";
var version$2 = "16.6.0";
var description = "An object-oriented language for parsing and pattern matching";
var repository = "https://github.com/harc/ohm";
var keywords = [
	"parser",
	"compiler",
	"pattern matching",
	"pattern-matching",
	"ometa",
	"ometa/js",
	"ometa-js",
	"ometajs",
	"rapid",
	"prototyping"
];
var homepage = "https://ohmjs.org";
var bugs = "https://github.com/harc/ohm/issues";
var main = "index.js";
var module = "dist/ohm.esm.js";
var files = [
	"src",
	"dist",
	"extras",
	"third_party",
	"index.d.ts"
];
var types = "index.d.ts";
var scripts = {
	prebootstrap: "bash scripts/prebootstrap",
	bootstrap: "bash scripts/bootstrap --test || (echo 'Bootstrap failed.' && mv -v dist/ohm-grammar.js.old dist/ohm-grammar.js && mv -v dist/built-in-rules.js.old dist/built-in-rules.js && mv -v dist/operations-and-attributes.js.old dist/operations-and-attributes.js)",
	build: "yarn build-debug && webpack --mode=production",
	"build-debug": "webpack --mode=development && yarn build-esm && node scripts/generate-types.mjs",
	"build-esm": "rollup -c rollup.config.mjs",
	clean: "rm -f dist/ohm.js dist/ohm.min.js",
	lint: "eslint . --ignore-path ../.eslintignore",
	format: "prettier . --write --ignore-path ../.prettierignore --config ../.prettierrc && eslint . --ignore-path ../.eslintignore --fix",
	test: "ava && ava --config ava-ts.config.js test/test-typings.ts",
	"test-watch": "ava --watch",
	"pre-commit": "yarn run lint && yarn run build && yarn run test",
	prepublishOnly: "bash scripts/prepublishOnly",
	prepack: "cp ../../README.md . && yarn build",
	postpack: "rm README.md",
	postpublish: "echo '👉  Now go to https://github.com/harc/ohm/releases and create a release.'",
	"unsafe-bootstrap": "bash scripts/bootstrap",
	"update-contributors": "bash scripts/update-contributors",
	watch: "webpack --mode=development --watch"
};
var license = "MIT";
var author = "Alex Warth <alexwarth@gmail.com> (http://tinlizzie.org/~awarth)";
var contributors = [
	"Patrick Dubroy <pdubroy@gmail.com>",
	"Meixian Li <lmeixian@gmail.com>",
	"Marko Röder <m.roeder@photon-software.de>",
	"Tony Garnock-Jones <tonygarnockjones@gmail.com>",
	"Saketh Kasibatla <sake.kasi@gmail.com>",
	"Lionel Landwerlin <llandwerlin@gmail.com>",
	"Jason Merrill <jwmerrill@gmail.com>",
	"Ray Toal <rtoal@lmu.edu>",
	"Yoshiki Ohshima <Yoshiki.Ohshima@acm.org>",
	"megabuz <3299889+megabuz@users.noreply.github.com>",
	"Jonathan Edwards <JonathanMEdwards@gmail.com>",
	"Milan Lajtoš <milan.lajtos@me.com>",
	"Neil Jewers <njjewers@uwaterloo.ca>",
	"stagas <gstagas@gmail.com>",
	"AngryPowman <angrypowman@qq.com>",
	"Arthur Carabott <arthurc@gmail.com>",
	"Casey Olson <casey.m.olson@gmail.com>",
	"Daniel Tomlinson <DanielTomlinson@me.com>",
	"Ian Harris <ian@fofgof.xyz>",
	"Justin Chase <justin.m.chase@gmail.com>",
	"Leslie Ying <acetophore@users.noreply.github.com>",
	"Luca Guzzon <luca.guzzon@gmail.com>",
	"Mike Niebling <(none)>",
	"Patrick Dubroy <patrick@sourcegraph.com>",
	"Pierre Donias <pierre.donias@gmail.com>",
	"Stan Rozenraukh <stan@stanistan.com>",
	"Stephan Seidt <stephan.seidt@gmail.com>",
	"Steve Phillips <steve@tryingtobeawesome.com>",
	"Szymon Kaliski <kaliskiszymon@gmail.com>",
	"Thomas Nyberg <tomnyberg@gmail.com>",
	"Vse Mozhet Byt <vsemozhetbyt@gmail.com>",
	"Wil Chung <10446+iamwilhelm@users.noreply.github.com>",
	"Zachary Sakowitz <zsakowitz@gmail.com>",
	"abego <ub@abego-software.de>",
	"acslk <d_vd415@hotmail.com>",
	"codeZeilen <codeZeilen@users.noreply.github.com>",
	"kassadin <kassadin@foxmail.com>",
	"owch <bowenrainyday@gmail.com>",
	"sfinnie <scott.finnie@gmail.com>"
];
var dependencies = {
};
var devDependencies = {
	"@ohm-js/cli": "^1.0.0",
	"@rollup/plugin-commonjs": "^21.0.1",
	"@rollup/plugin-json": "^4.1.0",
	"@rollup/plugin-node-resolve": "^13.1.3",
	ava: "^3.15.0",
	"ava-spec": "^1.1.1",
	dedent: "^0.7.0",
	eslint: "^7.9.0",
	"eslint-config-google": "^0.14.0",
	"eslint-plugin-ava": "^11.0.0",
	"eslint-plugin-camelcase-ohm": "^0.2.1",
	"eslint-plugin-no-extension-in-require": "^0.2.0",
	husky: "^4.2.5",
	jsdom: "^9.9.1",
	json: "^9.0.6",
	markscript: "^0.5.0",
	"node-static": "^0.7.11",
	"ohm-grammar-ecmascript": "^1.0.0",
	rollup: "^2.63.0",
	"ts-loader": "^8.0.4",
	"ts-node": "^9.0.0",
	typescript: "^4.0.3",
	"walk-sync": "^2.2.0",
	webpack: "^4.44.2",
	"webpack-cli": "^3.3.12"
};
var engines = {
	node: ">=0.12.1"
};
var require$$0 = {
	name: name,
	version: version$2,
	description: description,
	repository: repository,
	keywords: keywords,
	homepage: homepage,
	bugs: bugs,
	main: main,
	module: module,
	files: files,
	types: types,
	scripts: scripts,
	license: license,
	author: author,
	contributors: contributors,
	dependencies: dependencies,
	devDependencies: devDependencies,
	engines: engines
};

/* global __GLOBAL_OHM_VERSION__ */

// When running under Node, read the version from package.json. For the browser,
// use a special global variable defined in the build process (see webpack.config.js).
var version$1 =
  typeof __GLOBAL_OHM_VERSION__ === 'string' ?
    __GLOBAL_OHM_VERSION__ :
    require$$0.version;

var makeRecipe$5 = {};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Builder$1 = Builder_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function makeRecipe$4(recipe) {
  if (typeof recipe === 'function') {
    return recipe.call(new Builder$1());
  } else {
    if (typeof recipe === 'string') {
      // stringified JSON recipe
      recipe = JSON.parse(recipe);
    }
    return new Builder$1().fromRecipe(recipe);
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

makeRecipe$5.makeRecipe = makeRecipe$4;

var {makeRecipe: makeRecipe$3} = makeRecipe$5;
var builtInRules = makeRecipe$3(["grammar",{"source":"BuiltInRules {\n\n  alnum  (an alpha-numeric character)\n    = letter\n    | digit\n\n  letter  (a letter)\n    = lower\n    | upper\n    | unicodeLtmo\n\n  digit  (a digit)\n    = \"0\"..\"9\"\n\n  hexDigit  (a hexadecimal digit)\n    = digit\n    | \"a\"..\"f\"\n    | \"A\"..\"F\"\n\n  ListOf<elem, sep>\n    = NonemptyListOf<elem, sep>\n    | EmptyListOf<elem, sep>\n\n  NonemptyListOf<elem, sep>\n    = elem (sep elem)*\n\n  EmptyListOf<elem, sep>\n    = /* nothing */\n\n  listOf<elem, sep>\n    = nonemptyListOf<elem, sep>\n    | emptyListOf<elem, sep>\n\n  nonemptyListOf<elem, sep>\n    = elem (sep elem)*\n\n  emptyListOf<elem, sep>\n    = /* nothing */\n\n  // Allows a syntactic rule application within a lexical context.\n  applySyntactic<app> = app\n}"},"BuiltInRules",null,null,{"alnum":["define",{"sourceInterval":[18,78]},"an alpha-numeric character",[],["alt",{"sourceInterval":[60,78]},["app",{"sourceInterval":[60,66]},"letter",[]],["app",{"sourceInterval":[73,78]},"digit",[]]]],"letter":["define",{"sourceInterval":[82,142]},"a letter",[],["alt",{"sourceInterval":[107,142]},["app",{"sourceInterval":[107,112]},"lower",[]],["app",{"sourceInterval":[119,124]},"upper",[]],["app",{"sourceInterval":[131,142]},"unicodeLtmo",[]]]],"digit":["define",{"sourceInterval":[146,177]},"a digit",[],["range",{"sourceInterval":[169,177]},"0","9"]],"hexDigit":["define",{"sourceInterval":[181,254]},"a hexadecimal digit",[],["alt",{"sourceInterval":[219,254]},["app",{"sourceInterval":[219,224]},"digit",[]],["range",{"sourceInterval":[231,239]},"a","f"],["range",{"sourceInterval":[246,254]},"A","F"]]],"ListOf":["define",{"sourceInterval":[258,336]},null,["elem","sep"],["alt",{"sourceInterval":[282,336]},["app",{"sourceInterval":[282,307]},"NonemptyListOf",[["param",{"sourceInterval":[297,301]},0],["param",{"sourceInterval":[303,306]},1]]],["app",{"sourceInterval":[314,336]},"EmptyListOf",[["param",{"sourceInterval":[326,330]},0],["param",{"sourceInterval":[332,335]},1]]]]],"NonemptyListOf":["define",{"sourceInterval":[340,388]},null,["elem","sep"],["seq",{"sourceInterval":[372,388]},["param",{"sourceInterval":[372,376]},0],["star",{"sourceInterval":[377,388]},["seq",{"sourceInterval":[378,386]},["param",{"sourceInterval":[378,381]},1],["param",{"sourceInterval":[382,386]},0]]]]],"EmptyListOf":["define",{"sourceInterval":[392,434]},null,["elem","sep"],["seq",{"sourceInterval":[438,438]}]],"listOf":["define",{"sourceInterval":[438,516]},null,["elem","sep"],["alt",{"sourceInterval":[462,516]},["app",{"sourceInterval":[462,487]},"nonemptyListOf",[["param",{"sourceInterval":[477,481]},0],["param",{"sourceInterval":[483,486]},1]]],["app",{"sourceInterval":[494,516]},"emptyListOf",[["param",{"sourceInterval":[506,510]},0],["param",{"sourceInterval":[512,515]},1]]]]],"nonemptyListOf":["define",{"sourceInterval":[520,568]},null,["elem","sep"],["seq",{"sourceInterval":[552,568]},["param",{"sourceInterval":[552,556]},0],["star",{"sourceInterval":[557,568]},["seq",{"sourceInterval":[558,566]},["param",{"sourceInterval":[558,561]},1],["param",{"sourceInterval":[562,566]},0]]]]],"emptyListOf":["define",{"sourceInterval":[572,682]},null,["elem","sep"],["seq",{"sourceInterval":[685,685]}]],"applySyntactic":["define",{"sourceInterval":[685,710]},null,["app"],["param",{"sourceInterval":[707,710]},0]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$1 = Grammar_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

Grammar$1.BuiltInRules = builtInRules;

var {makeRecipe: makeRecipe$2} = makeRecipe$5;
var operationsAndAttributes = makeRecipe$2(["grammar",{"source":"OperationsAndAttributes {\n\n  AttributeSignature =\n    name\n\n  OperationSignature =\n    name Formals?\n\n  Formals\n    = \"(\" ListOf<name, \",\"> \")\"\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n}"},"OperationsAndAttributes",null,"AttributeSignature",{"AttributeSignature":["define",{"sourceInterval":[29,58]},null,[],["app",{"sourceInterval":[54,58]},"name",[]]],"OperationSignature":["define",{"sourceInterval":[62,100]},null,[],["seq",{"sourceInterval":[87,100]},["app",{"sourceInterval":[87,91]},"name",[]],["opt",{"sourceInterval":[92,100]},["app",{"sourceInterval":[92,99]},"Formals",[]]]]],"Formals":["define",{"sourceInterval":[104,143]},null,[],["seq",{"sourceInterval":[118,143]},["terminal",{"sourceInterval":[118,121]},"("],["app",{"sourceInterval":[122,139]},"ListOf",[["app",{"sourceInterval":[129,133]},"name",[]],["terminal",{"sourceInterval":[135,138]},","]]],["terminal",{"sourceInterval":[140,143]},")"]]],"name":["define",{"sourceInterval":[147,187]},"a name",[],["seq",{"sourceInterval":[168,187]},["app",{"sourceInterval":[168,177]},"nameFirst",[]],["star",{"sourceInterval":[178,187]},["app",{"sourceInterval":[178,186]},"nameRest",[]]]]],"nameFirst":["define",{"sourceInterval":[191,223]},null,[],["alt",{"sourceInterval":[207,223]},["terminal",{"sourceInterval":[207,210]},"_"],["app",{"sourceInterval":[217,223]},"letter",[]]]],"nameRest":["define",{"sourceInterval":[227,257]},null,[],["alt",{"sourceInterval":[242,257]},["terminal",{"sourceInterval":[242,245]},"_"],["app",{"sourceInterval":[252,257]},"alnum",[]]]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Semantics = Semantics_1;
const util$1 = util$7;

// ----------------- Deferred initialization -----------------

util$1.awaitBuiltInRules(builtInRules => {
  const operationsAndAttributesGrammar = operationsAndAttributes;
  initBuiltInSemantics(builtInRules);
  initPrototypeParser(operationsAndAttributesGrammar); // requires BuiltInSemantics
});

function initBuiltInSemantics(builtInRules) {
  const actions = {
    empty() {
      return this.iteration();
    },
    nonEmpty(first, _, rest) {
      return this.iteration([first].concat(rest.children));
    },
  };

  Semantics.BuiltInSemantics = Semantics.createSemantics(builtInRules, null).addOperation(
      'asIteration',
      {
        emptyListOf: actions.empty,
        nonemptyListOf: actions.nonEmpty,
        EmptyListOf: actions.empty,
        NonemptyListOf: actions.nonEmpty,
      }
  );
}

function initPrototypeParser(grammar) {
  Semantics.prototypeGrammarSemantics = grammar.createSemantics().addOperation('parse', {
    AttributeSignature(name) {
      return {
        name: name.parse(),
        formals: [],
      };
    },
    OperationSignature(name, optFormals) {
      return {
        name: name.parse(),
        formals: optFormals.children.map(c => c.parse())[0] || [],
      };
    },
    Formals(oparen, fs, cparen) {
      return fs.asIteration().children.map(c => c.parse());
    },
    name(first, rest) {
      return this.sourceString;
    },
  });
  Semantics.prototypeGrammar = grammar;
}

var {makeRecipe: makeRecipe$1} = makeRecipe$5;
var ohmGrammar$1 = makeRecipe$1(["grammar",{"source":"Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  RuleBody  -- define\n    | ident Formals?            \":=\" OverrideRuleBody  -- override\n    | ident Formals?            \"+=\" RuleBody  -- extend\n\n  RuleBody\n    = \"|\"? NonemptyListOf<TopLevelTerm, \"|\">\n\n  TopLevelTerm\n    = Seq caseName  -- inline\n    | Seq\n\n  OverrideRuleBody\n    = \"|\"? NonemptyListOf<OverrideTopLevelTerm, \"|\">\n\n  OverrideTopLevelTerm\n    = \"...\"  -- superSplice\n    | TopLevelTerm\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = NonemptyListOf<Seq, \"|\">\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | oneCharTerminal \"..\" oneCharTerminal           -- range\n    | terminal                                       -- terminal\n    | \"(\" Alt \")\"                                    -- paren\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = name\n\n  terminal\n    = \"\\\"\" terminalChar* \"\\\"\"\n\n  oneCharTerminal\n    = \"\\\"\" terminalChar \"\\\"\"\n\n  terminalChar\n    = escapeChar\n      | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" \"\\u{0}\"..\"\\u{10FFFF}\"\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u{\" hexDigit hexDigit? hexDigit?\n             hexDigit? hexDigit? hexDigit? \"}\"   -- unicodeCodePoint\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* &(\"\\n\" | end)  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | operator | punctuation | terminal | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}"},"Ohm",null,"Grammars",{"Grammars":["define",{"sourceInterval":[9,32]},null,[],["star",{"sourceInterval":[24,32]},["app",{"sourceInterval":[24,31]},"Grammar",[]]]],"Grammar":["define",{"sourceInterval":[36,83]},null,[],["seq",{"sourceInterval":[50,83]},["app",{"sourceInterval":[50,55]},"ident",[]],["opt",{"sourceInterval":[56,69]},["app",{"sourceInterval":[56,68]},"SuperGrammar",[]]],["terminal",{"sourceInterval":[70,73]},"{"],["star",{"sourceInterval":[74,79]},["app",{"sourceInterval":[74,78]},"Rule",[]]],["terminal",{"sourceInterval":[80,83]},"}"]]],"SuperGrammar":["define",{"sourceInterval":[87,116]},null,[],["seq",{"sourceInterval":[106,116]},["terminal",{"sourceInterval":[106,110]},"<:"],["app",{"sourceInterval":[111,116]},"ident",[]]]],"Rule_define":["define",{"sourceInterval":[131,181]},null,[],["seq",{"sourceInterval":[131,170]},["app",{"sourceInterval":[131,136]},"ident",[]],["opt",{"sourceInterval":[137,145]},["app",{"sourceInterval":[137,144]},"Formals",[]]],["opt",{"sourceInterval":[146,156]},["app",{"sourceInterval":[146,155]},"ruleDescr",[]]],["terminal",{"sourceInterval":[157,160]},"="],["app",{"sourceInterval":[162,170]},"RuleBody",[]]]],"Rule_override":["define",{"sourceInterval":[188,248]},null,[],["seq",{"sourceInterval":[188,235]},["app",{"sourceInterval":[188,193]},"ident",[]],["opt",{"sourceInterval":[194,202]},["app",{"sourceInterval":[194,201]},"Formals",[]]],["terminal",{"sourceInterval":[214,218]},":="],["app",{"sourceInterval":[219,235]},"OverrideRuleBody",[]]]],"Rule_extend":["define",{"sourceInterval":[255,305]},null,[],["seq",{"sourceInterval":[255,294]},["app",{"sourceInterval":[255,260]},"ident",[]],["opt",{"sourceInterval":[261,269]},["app",{"sourceInterval":[261,268]},"Formals",[]]],["terminal",{"sourceInterval":[281,285]},"+="],["app",{"sourceInterval":[286,294]},"RuleBody",[]]]],"Rule":["define",{"sourceInterval":[120,305]},null,[],["alt",{"sourceInterval":[131,305]},["app",{"sourceInterval":[131,170]},"Rule_define",[]],["app",{"sourceInterval":[188,235]},"Rule_override",[]],["app",{"sourceInterval":[255,294]},"Rule_extend",[]]]],"RuleBody":["define",{"sourceInterval":[309,362]},null,[],["seq",{"sourceInterval":[324,362]},["opt",{"sourceInterval":[324,328]},["terminal",{"sourceInterval":[324,327]},"|"]],["app",{"sourceInterval":[329,362]},"NonemptyListOf",[["app",{"sourceInterval":[344,356]},"TopLevelTerm",[]],["terminal",{"sourceInterval":[358,361]},"|"]]]]],"TopLevelTerm_inline":["define",{"sourceInterval":[385,408]},null,[],["seq",{"sourceInterval":[385,397]},["app",{"sourceInterval":[385,388]},"Seq",[]],["app",{"sourceInterval":[389,397]},"caseName",[]]]],"TopLevelTerm":["define",{"sourceInterval":[366,418]},null,[],["alt",{"sourceInterval":[385,418]},["app",{"sourceInterval":[385,397]},"TopLevelTerm_inline",[]],["app",{"sourceInterval":[415,418]},"Seq",[]]]],"OverrideRuleBody":["define",{"sourceInterval":[422,491]},null,[],["seq",{"sourceInterval":[445,491]},["opt",{"sourceInterval":[445,449]},["terminal",{"sourceInterval":[445,448]},"|"]],["app",{"sourceInterval":[450,491]},"NonemptyListOf",[["app",{"sourceInterval":[465,485]},"OverrideTopLevelTerm",[]],["terminal",{"sourceInterval":[487,490]},"|"]]]]],"OverrideTopLevelTerm_superSplice":["define",{"sourceInterval":[522,543]},null,[],["terminal",{"sourceInterval":[522,527]},"..."]],"OverrideTopLevelTerm":["define",{"sourceInterval":[495,562]},null,[],["alt",{"sourceInterval":[522,562]},["app",{"sourceInterval":[522,527]},"OverrideTopLevelTerm_superSplice",[]],["app",{"sourceInterval":[550,562]},"TopLevelTerm",[]]]],"Formals":["define",{"sourceInterval":[566,606]},null,[],["seq",{"sourceInterval":[580,606]},["terminal",{"sourceInterval":[580,583]},"<"],["app",{"sourceInterval":[584,602]},"ListOf",[["app",{"sourceInterval":[591,596]},"ident",[]],["terminal",{"sourceInterval":[598,601]},","]]],["terminal",{"sourceInterval":[603,606]},">"]]],"Params":["define",{"sourceInterval":[610,647]},null,[],["seq",{"sourceInterval":[623,647]},["terminal",{"sourceInterval":[623,626]},"<"],["app",{"sourceInterval":[627,643]},"ListOf",[["app",{"sourceInterval":[634,637]},"Seq",[]],["terminal",{"sourceInterval":[639,642]},","]]],["terminal",{"sourceInterval":[644,647]},">"]]],"Alt":["define",{"sourceInterval":[651,685]},null,[],["app",{"sourceInterval":[661,685]},"NonemptyListOf",[["app",{"sourceInterval":[676,679]},"Seq",[]],["terminal",{"sourceInterval":[681,684]},"|"]]]],"Seq":["define",{"sourceInterval":[689,704]},null,[],["star",{"sourceInterval":[699,704]},["app",{"sourceInterval":[699,703]},"Iter",[]]]],"Iter_star":["define",{"sourceInterval":[719,736]},null,[],["seq",{"sourceInterval":[719,727]},["app",{"sourceInterval":[719,723]},"Pred",[]],["terminal",{"sourceInterval":[724,727]},"*"]]],"Iter_plus":["define",{"sourceInterval":[743,760]},null,[],["seq",{"sourceInterval":[743,751]},["app",{"sourceInterval":[743,747]},"Pred",[]],["terminal",{"sourceInterval":[748,751]},"+"]]],"Iter_opt":["define",{"sourceInterval":[767,783]},null,[],["seq",{"sourceInterval":[767,775]},["app",{"sourceInterval":[767,771]},"Pred",[]],["terminal",{"sourceInterval":[772,775]},"?"]]],"Iter":["define",{"sourceInterval":[708,794]},null,[],["alt",{"sourceInterval":[719,794]},["app",{"sourceInterval":[719,727]},"Iter_star",[]],["app",{"sourceInterval":[743,751]},"Iter_plus",[]],["app",{"sourceInterval":[767,775]},"Iter_opt",[]],["app",{"sourceInterval":[790,794]},"Pred",[]]]],"Pred_not":["define",{"sourceInterval":[809,824]},null,[],["seq",{"sourceInterval":[809,816]},["terminal",{"sourceInterval":[809,812]},"~"],["app",{"sourceInterval":[813,816]},"Lex",[]]]],"Pred_lookahead":["define",{"sourceInterval":[831,852]},null,[],["seq",{"sourceInterval":[831,838]},["terminal",{"sourceInterval":[831,834]},"&"],["app",{"sourceInterval":[835,838]},"Lex",[]]]],"Pred":["define",{"sourceInterval":[798,862]},null,[],["alt",{"sourceInterval":[809,862]},["app",{"sourceInterval":[809,816]},"Pred_not",[]],["app",{"sourceInterval":[831,838]},"Pred_lookahead",[]],["app",{"sourceInterval":[859,862]},"Lex",[]]]],"Lex_lex":["define",{"sourceInterval":[876,892]},null,[],["seq",{"sourceInterval":[876,884]},["terminal",{"sourceInterval":[876,879]},"#"],["app",{"sourceInterval":[880,884]},"Base",[]]]],"Lex":["define",{"sourceInterval":[866,903]},null,[],["alt",{"sourceInterval":[876,903]},["app",{"sourceInterval":[876,884]},"Lex_lex",[]],["app",{"sourceInterval":[899,903]},"Base",[]]]],"Base_application":["define",{"sourceInterval":[918,979]},null,[],["seq",{"sourceInterval":[918,963]},["app",{"sourceInterval":[918,923]},"ident",[]],["opt",{"sourceInterval":[924,931]},["app",{"sourceInterval":[924,930]},"Params",[]]],["not",{"sourceInterval":[932,963]},["alt",{"sourceInterval":[934,962]},["seq",{"sourceInterval":[934,948]},["opt",{"sourceInterval":[934,944]},["app",{"sourceInterval":[934,943]},"ruleDescr",[]]],["terminal",{"sourceInterval":[945,948]},"="]],["terminal",{"sourceInterval":[951,955]},":="],["terminal",{"sourceInterval":[958,962]},"+="]]]]],"Base_range":["define",{"sourceInterval":[986,1041]},null,[],["seq",{"sourceInterval":[986,1022]},["app",{"sourceInterval":[986,1001]},"oneCharTerminal",[]],["terminal",{"sourceInterval":[1002,1006]},".."],["app",{"sourceInterval":[1007,1022]},"oneCharTerminal",[]]]],"Base_terminal":["define",{"sourceInterval":[1048,1106]},null,[],["app",{"sourceInterval":[1048,1056]},"terminal",[]]],"Base_paren":["define",{"sourceInterval":[1113,1168]},null,[],["seq",{"sourceInterval":[1113,1124]},["terminal",{"sourceInterval":[1113,1116]},"("],["app",{"sourceInterval":[1117,1120]},"Alt",[]],["terminal",{"sourceInterval":[1121,1124]},")"]]],"Base":["define",{"sourceInterval":[907,1168]},null,[],["alt",{"sourceInterval":[918,1168]},["app",{"sourceInterval":[918,963]},"Base_application",[]],["app",{"sourceInterval":[986,1022]},"Base_range",[]],["app",{"sourceInterval":[1048,1056]},"Base_terminal",[]],["app",{"sourceInterval":[1113,1124]},"Base_paren",[]]]],"ruleDescr":["define",{"sourceInterval":[1172,1231]},"a rule description",[],["seq",{"sourceInterval":[1210,1231]},["terminal",{"sourceInterval":[1210,1213]},"("],["app",{"sourceInterval":[1214,1227]},"ruleDescrText",[]],["terminal",{"sourceInterval":[1228,1231]},")"]]],"ruleDescrText":["define",{"sourceInterval":[1235,1266]},null,[],["star",{"sourceInterval":[1255,1266]},["seq",{"sourceInterval":[1256,1264]},["not",{"sourceInterval":[1256,1260]},["terminal",{"sourceInterval":[1257,1260]},")"]],["app",{"sourceInterval":[1261,1264]},"any",[]]]]],"caseName":["define",{"sourceInterval":[1270,1338]},null,[],["seq",{"sourceInterval":[1285,1338]},["terminal",{"sourceInterval":[1285,1289]},"--"],["star",{"sourceInterval":[1290,1304]},["seq",{"sourceInterval":[1291,1302]},["not",{"sourceInterval":[1291,1296]},["terminal",{"sourceInterval":[1292,1296]},"\n"]],["app",{"sourceInterval":[1297,1302]},"space",[]]]],["app",{"sourceInterval":[1305,1309]},"name",[]],["star",{"sourceInterval":[1310,1324]},["seq",{"sourceInterval":[1311,1322]},["not",{"sourceInterval":[1311,1316]},["terminal",{"sourceInterval":[1312,1316]},"\n"]],["app",{"sourceInterval":[1317,1322]},"space",[]]]],["alt",{"sourceInterval":[1326,1337]},["terminal",{"sourceInterval":[1326,1330]},"\n"],["lookahead",{"sourceInterval":[1333,1337]},["terminal",{"sourceInterval":[1334,1337]},"}"]]]]],"name":["define",{"sourceInterval":[1342,1382]},"a name",[],["seq",{"sourceInterval":[1363,1382]},["app",{"sourceInterval":[1363,1372]},"nameFirst",[]],["star",{"sourceInterval":[1373,1382]},["app",{"sourceInterval":[1373,1381]},"nameRest",[]]]]],"nameFirst":["define",{"sourceInterval":[1386,1418]},null,[],["alt",{"sourceInterval":[1402,1418]},["terminal",{"sourceInterval":[1402,1405]},"_"],["app",{"sourceInterval":[1412,1418]},"letter",[]]]],"nameRest":["define",{"sourceInterval":[1422,1452]},null,[],["alt",{"sourceInterval":[1437,1452]},["terminal",{"sourceInterval":[1437,1440]},"_"],["app",{"sourceInterval":[1447,1452]},"alnum",[]]]],"ident":["define",{"sourceInterval":[1456,1489]},"an identifier",[],["app",{"sourceInterval":[1485,1489]},"name",[]]],"terminal":["define",{"sourceInterval":[1493,1531]},null,[],["seq",{"sourceInterval":[1508,1531]},["terminal",{"sourceInterval":[1508,1512]},"\""],["star",{"sourceInterval":[1513,1526]},["app",{"sourceInterval":[1513,1525]},"terminalChar",[]]],["terminal",{"sourceInterval":[1527,1531]},"\""]]],"oneCharTerminal":["define",{"sourceInterval":[1535,1579]},null,[],["seq",{"sourceInterval":[1557,1579]},["terminal",{"sourceInterval":[1557,1561]},"\""],["app",{"sourceInterval":[1562,1574]},"terminalChar",[]],["terminal",{"sourceInterval":[1575,1579]},"\""]]],"terminalChar":["define",{"sourceInterval":[1583,1660]},null,[],["alt",{"sourceInterval":[1602,1660]},["app",{"sourceInterval":[1602,1612]},"escapeChar",[]],["seq",{"sourceInterval":[1621,1660]},["not",{"sourceInterval":[1621,1626]},["terminal",{"sourceInterval":[1622,1626]},"\\"]],["not",{"sourceInterval":[1627,1632]},["terminal",{"sourceInterval":[1628,1632]},"\""]],["not",{"sourceInterval":[1633,1638]},["terminal",{"sourceInterval":[1634,1638]},"\n"]],["range",{"sourceInterval":[1639,1660]},"\u0000","􏿿"]]]],"escapeChar_backslash":["define",{"sourceInterval":[1703,1758]},null,[],["terminal",{"sourceInterval":[1703,1709]},"\\\\"]],"escapeChar_doubleQuote":["define",{"sourceInterval":[1765,1822]},null,[],["terminal",{"sourceInterval":[1765,1771]},"\\\""]],"escapeChar_singleQuote":["define",{"sourceInterval":[1829,1886]},null,[],["terminal",{"sourceInterval":[1829,1835]},"\\'"]],"escapeChar_backspace":["define",{"sourceInterval":[1893,1948]},null,[],["terminal",{"sourceInterval":[1893,1898]},"\\b"]],"escapeChar_lineFeed":["define",{"sourceInterval":[1955,2009]},null,[],["terminal",{"sourceInterval":[1955,1960]},"\\n"]],"escapeChar_carriageReturn":["define",{"sourceInterval":[2016,2076]},null,[],["terminal",{"sourceInterval":[2016,2021]},"\\r"]],"escapeChar_tab":["define",{"sourceInterval":[2083,2132]},null,[],["terminal",{"sourceInterval":[2083,2088]},"\\t"]],"escapeChar_unicodeCodePoint":["define",{"sourceInterval":[2139,2243]},null,[],["seq",{"sourceInterval":[2139,2221]},["terminal",{"sourceInterval":[2139,2145]},"\\u{"],["app",{"sourceInterval":[2146,2154]},"hexDigit",[]],["opt",{"sourceInterval":[2155,2164]},["app",{"sourceInterval":[2155,2163]},"hexDigit",[]]],["opt",{"sourceInterval":[2165,2174]},["app",{"sourceInterval":[2165,2173]},"hexDigit",[]]],["opt",{"sourceInterval":[2188,2197]},["app",{"sourceInterval":[2188,2196]},"hexDigit",[]]],["opt",{"sourceInterval":[2198,2207]},["app",{"sourceInterval":[2198,2206]},"hexDigit",[]]],["opt",{"sourceInterval":[2208,2217]},["app",{"sourceInterval":[2208,2216]},"hexDigit",[]]],["terminal",{"sourceInterval":[2218,2221]},"}"]]],"escapeChar_unicodeEscape":["define",{"sourceInterval":[2250,2309]},null,[],["seq",{"sourceInterval":[2250,2291]},["terminal",{"sourceInterval":[2250,2255]},"\\u"],["app",{"sourceInterval":[2256,2264]},"hexDigit",[]],["app",{"sourceInterval":[2265,2273]},"hexDigit",[]],["app",{"sourceInterval":[2274,2282]},"hexDigit",[]],["app",{"sourceInterval":[2283,2291]},"hexDigit",[]]]],"escapeChar_hexEscape":["define",{"sourceInterval":[2316,2371]},null,[],["seq",{"sourceInterval":[2316,2339]},["terminal",{"sourceInterval":[2316,2321]},"\\x"],["app",{"sourceInterval":[2322,2330]},"hexDigit",[]],["app",{"sourceInterval":[2331,2339]},"hexDigit",[]]]],"escapeChar":["define",{"sourceInterval":[1664,2371]},"an escape sequence",[],["alt",{"sourceInterval":[1703,2371]},["app",{"sourceInterval":[1703,1709]},"escapeChar_backslash",[]],["app",{"sourceInterval":[1765,1771]},"escapeChar_doubleQuote",[]],["app",{"sourceInterval":[1829,1835]},"escapeChar_singleQuote",[]],["app",{"sourceInterval":[1893,1898]},"escapeChar_backspace",[]],["app",{"sourceInterval":[1955,1960]},"escapeChar_lineFeed",[]],["app",{"sourceInterval":[2016,2021]},"escapeChar_carriageReturn",[]],["app",{"sourceInterval":[2083,2088]},"escapeChar_tab",[]],["app",{"sourceInterval":[2139,2221]},"escapeChar_unicodeCodePoint",[]],["app",{"sourceInterval":[2250,2291]},"escapeChar_unicodeEscape",[]],["app",{"sourceInterval":[2316,2339]},"escapeChar_hexEscape",[]]]],"space":["extend",{"sourceInterval":[2375,2394]},null,[],["app",{"sourceInterval":[2387,2394]},"comment",[]]],"comment_singleLine":["define",{"sourceInterval":[2412,2458]},null,[],["seq",{"sourceInterval":[2412,2443]},["terminal",{"sourceInterval":[2412,2416]},"//"],["star",{"sourceInterval":[2417,2429]},["seq",{"sourceInterval":[2418,2427]},["not",{"sourceInterval":[2418,2423]},["terminal",{"sourceInterval":[2419,2423]},"\n"]],["app",{"sourceInterval":[2424,2427]},"any",[]]]],["lookahead",{"sourceInterval":[2430,2443]},["alt",{"sourceInterval":[2432,2442]},["terminal",{"sourceInterval":[2432,2436]},"\n"],["app",{"sourceInterval":[2439,2442]},"end",[]]]]]],"comment_multiLine":["define",{"sourceInterval":[2465,2501]},null,[],["seq",{"sourceInterval":[2465,2487]},["terminal",{"sourceInterval":[2465,2469]},"/*"],["star",{"sourceInterval":[2470,2482]},["seq",{"sourceInterval":[2471,2480]},["not",{"sourceInterval":[2471,2476]},["terminal",{"sourceInterval":[2472,2476]},"*/"]],["app",{"sourceInterval":[2477,2480]},"any",[]]]],["terminal",{"sourceInterval":[2483,2487]},"*/"]]],"comment":["define",{"sourceInterval":[2398,2501]},null,[],["alt",{"sourceInterval":[2412,2501]},["app",{"sourceInterval":[2412,2443]},"comment_singleLine",[]],["app",{"sourceInterval":[2465,2487]},"comment_multiLine",[]]]],"tokens":["define",{"sourceInterval":[2505,2520]},null,[],["star",{"sourceInterval":[2514,2520]},["app",{"sourceInterval":[2514,2519]},"token",[]]]],"token":["define",{"sourceInterval":[2524,2600]},null,[],["alt",{"sourceInterval":[2532,2600]},["app",{"sourceInterval":[2532,2540]},"caseName",[]],["app",{"sourceInterval":[2543,2550]},"comment",[]],["app",{"sourceInterval":[2553,2558]},"ident",[]],["app",{"sourceInterval":[2561,2569]},"operator",[]],["app",{"sourceInterval":[2572,2583]},"punctuation",[]],["app",{"sourceInterval":[2586,2594]},"terminal",[]],["app",{"sourceInterval":[2597,2600]},"any",[]]]],"operator":["define",{"sourceInterval":[2604,2669]},null,[],["alt",{"sourceInterval":[2615,2669]},["terminal",{"sourceInterval":[2615,2619]},"<:"],["terminal",{"sourceInterval":[2622,2625]},"="],["terminal",{"sourceInterval":[2628,2632]},":="],["terminal",{"sourceInterval":[2635,2639]},"+="],["terminal",{"sourceInterval":[2642,2645]},"*"],["terminal",{"sourceInterval":[2648,2651]},"+"],["terminal",{"sourceInterval":[2654,2657]},"?"],["terminal",{"sourceInterval":[2660,2663]},"~"],["terminal",{"sourceInterval":[2666,2669]},"&"]]],"punctuation":["define",{"sourceInterval":[2673,2709]},null,[],["alt",{"sourceInterval":[2687,2709]},["terminal",{"sourceInterval":[2687,2690]},"<"],["terminal",{"sourceInterval":[2693,2696]},">"],["terminal",{"sourceInterval":[2699,2702]},","],["terminal",{"sourceInterval":[2705,2709]},"--"]]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Builder = Builder_1;
const Grammar = Grammar_1;
const Namespace = Namespace_1;
const common = common$l;
const errors = errors$9;
const pexprs = pexprs$6;
const util = util$7;
const version = version$1;
const {makeRecipe} = makeRecipe$5;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// The metagrammar, i.e. the grammar for Ohm grammars. Initialized at the
// bottom of this file because loading the grammar requires Ohm itself.
let ohmGrammar;

const superSplicePlaceholder = Object.create(pexprs.PExpr.prototype);

const isBuffer = obj =>
  !!obj.constructor &&
  typeof obj.constructor.isBuffer === 'function' &&
  obj.constructor.isBuffer(obj);

// Returns a Grammar instance (i.e., an object with a `match` method) for
// `tree`, which is the concrete syntax tree of a user-written grammar.
// The grammar will be assigned into `namespace` under the name of the grammar
// as specified in the source.
function buildGrammar(match, namespace, optOhmGrammarForTesting) {
  const builder = new Builder();
  let decl;
  let currentRuleName;
  let currentRuleFormals;
  let overriding = false;
  const metaGrammar = optOhmGrammarForTesting || ohmGrammar;

  // A visitor that produces a Grammar instance from the CST.
  const helpers = metaGrammar.createSemantics().addOperation('visit', {
    Grammars(grammarIter) {
      return grammarIter.children.map(c => c.visit());
    },
    Grammar(id, s, _open, rules, _close) {
      const grammarName = id.visit();
      decl = builder.newGrammar(grammarName, namespace);
      s.child(0) && s.child(0).visit();
      rules.children.map(c => c.visit());
      const g = decl.build();
      g.source = this.source.trimmed();
      if (grammarName in namespace) {
        throw errors.duplicateGrammarDeclaration(g, namespace);
      }
      namespace[grammarName] = g;
      return g;
    },

    SuperGrammar(_, n) {
      const superGrammarName = n.visit();
      if (superGrammarName === 'null') {
        decl.withSuperGrammar(null);
      } else {
        if (!namespace || !(superGrammarName in namespace)) {
          throw errors.undeclaredGrammar(superGrammarName, namespace, n.source);
        }
        decl.withSuperGrammar(namespace[superGrammarName]);
      }
    },

    Rule_define(n, fs, d, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];
      // If there is no default start rule yet, set it now. This must be done before visiting
      // the body, because it might contain an inline rule definition.
      if (!decl.defaultStartRule && decl.ensureSuperGrammar() !== Grammar.ProtoBuiltInRules) {
        decl.withDefaultStartRule(currentRuleName);
      }
      const body = b.visit();
      const description = d.children.map(c => c.visit())[0];
      const source = this.source.trimmed();
      return decl.define(currentRuleName, currentRuleFormals, body, description, source);
    },
    Rule_override(n, fs, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];

      const source = this.source.trimmed();
      decl.ensureSuperGrammarRuleForOverriding(currentRuleName, source);

      overriding = true;
      const body = b.visit();
      overriding = false;
      return decl.override(currentRuleName, currentRuleFormals, body, null, source);
    },
    Rule_extend(n, fs, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];
      const body = b.visit();
      const source = this.source.trimmed();
      return decl.extend(currentRuleName, currentRuleFormals, body, null, source);
    },
    RuleBody(_, terms) {
      return builder.alt(...terms.visit()).withSource(this.source);
    },
    OverrideRuleBody(_, terms) {
      const args = terms.visit();

      // Check if the super-splice operator (`...`) appears in the terms.
      const expansionPos = args.indexOf(superSplicePlaceholder);
      if (expansionPos >= 0) {
        const beforeTerms = args.slice(0, expansionPos);
        const afterTerms = args.slice(expansionPos + 1);

        // Ensure it appears no more than once.
        afterTerms.forEach(t => {
          if (t === superSplicePlaceholder) throw errors.multipleSuperSplices(t);
        });

        return new pexprs.Splice(
            decl.superGrammar,
            currentRuleName,
            beforeTerms,
            afterTerms
        ).withSource(this.source);
      } else {
        return builder.alt(...args).withSource(this.source);
      }
    },
    Formals(opointy, fs, cpointy) {
      return fs.visit();
    },

    Params(opointy, ps, cpointy) {
      return ps.visit();
    },

    Alt(seqs) {
      return builder.alt(...seqs.visit()).withSource(this.source);
    },

    TopLevelTerm_inline(b, n) {
      const inlineRuleName = currentRuleName + '_' + n.visit();
      const body = b.visit();
      const source = this.source.trimmed();
      const isNewRuleDeclaration = !(
        decl.superGrammar && decl.superGrammar.rules[inlineRuleName]
      );
      if (overriding && !isNewRuleDeclaration) {
        decl.override(inlineRuleName, currentRuleFormals, body, null, source);
      } else {
        decl.define(inlineRuleName, currentRuleFormals, body, null, source);
      }
      const params = currentRuleFormals.map(formal => builder.app(formal));
      return builder.app(inlineRuleName, params).withSource(body.source);
    },
    OverrideTopLevelTerm_superSplice(_) {
      return superSplicePlaceholder;
    },

    Seq(expr) {
      return builder.seq(...expr.children.map(c => c.visit())).withSource(this.source);
    },

    Iter_star(x, _) {
      return builder.star(x.visit()).withSource(this.source);
    },
    Iter_plus(x, _) {
      return builder.plus(x.visit()).withSource(this.source);
    },
    Iter_opt(x, _) {
      return builder.opt(x.visit()).withSource(this.source);
    },

    Pred_not(_, x) {
      return builder.not(x.visit()).withSource(this.source);
    },
    Pred_lookahead(_, x) {
      return builder.lookahead(x.visit()).withSource(this.source);
    },

    Lex_lex(_, x) {
      return builder.lex(x.visit()).withSource(this.source);
    },

    Base_application(rule, ps) {
      const params = ps.children.map(c => c.visit())[0] || [];
      return builder.app(rule.visit(), params).withSource(this.source);
    },
    Base_range(from, _, to) {
      return builder.range(from.visit(), to.visit()).withSource(this.source);
    },
    Base_terminal(expr) {
      return builder.terminal(expr.visit()).withSource(this.source);
    },
    Base_paren(open, x, close) {
      return x.visit();
    },

    ruleDescr(open, t, close) {
      return t.visit();
    },
    ruleDescrText(_) {
      return this.sourceString.trim();
    },

    caseName(_, space1, n, space2, end) {
      return n.visit();
    },

    name(first, rest) {
      return this.sourceString;
    },
    nameFirst(expr) {},
    nameRest(expr) {},

    terminal(open, cs, close) {
      return cs.children.map(c => c.visit()).join('');
    },

    oneCharTerminal(open, c, close) {
      return c.visit();
    },

    escapeChar(c) {
      try {
        return common.unescapeCodePoint(this.sourceString);
      } catch (err) {
        if (err instanceof RangeError && err.message.startsWith('Invalid code point ')) {
          throw errors.invalidCodePoint(c);
        }
        throw err; // Rethrow
      }
    },

    NonemptyListOf(x, _, xs) {
      return [x.visit()].concat(xs.children.map(c => c.visit()));
    },
    EmptyListOf() {
      return [];
    },

    _terminal() {
      return this.sourceString;
    },
  });
  return helpers(match).visit();
}

function compileAndLoad(source, namespace) {
  const m = ohmGrammar.match(source, 'Grammars');
  if (m.failed()) {
    throw errors.grammarSyntaxError(m);
  }
  return buildGrammar(m, namespace);
}

function grammar(source, optNamespace) {
  const ns = grammars(source, optNamespace);

  // Ensure that the source contained no more than one grammar definition.
  const grammarNames = Object.keys(ns);
  if (grammarNames.length === 0) {
    throw new Error('Missing grammar definition');
  } else if (grammarNames.length > 1) {
    const secondGrammar = ns[grammarNames[1]];
    const interval = secondGrammar.source;
    throw new Error(
        util.getLineAndColumnMessage(interval.sourceString, interval.startIdx) +
        'Found more than one grammar definition -- use ohm.grammars() instead.'
    );
  }
  return ns[grammarNames[0]]; // Return the one and only grammar.
}

function grammars(source, optNamespace) {
  const ns = Namespace.extend(Namespace.asNamespace(optNamespace));
  if (typeof source !== 'string') {
    // For convenience, detect Node.js Buffer objects and automatically call toString().
    if (isBuffer(source)) {
      source = source.toString();
    } else {
      throw new TypeError(
          'Expected string as first argument, got ' + common.unexpectedObjToString(source)
      );
    }
  }
  compileAndLoad(source, ns);
  return ns;
}

function grammarFromScriptElement(optNode) {
  throw new Error(
      'grammarFromScriptElement was removed in Ohm v16.0. See https://ohmjs.org/d/gfs for more info.'
  );
}

function grammarsFromScriptElements(optNodeOrNodeList) {
  throw new Error(
      'grammarsFromScriptElements was removed in Ohm v16.0. See https://ohmjs.org/d/gfs for more info.'
  );
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

// Stuff that users should know about
main$1.exports = {
  createNamespace: Namespace.createNamespace,
  grammar,
  grammars,
  grammarFromScriptElement,
  grammarsFromScriptElements,
  makeRecipe,
  ohmGrammar: null, // Initialized below, after Grammar.BuiltInRules.
  pexprs,
  util,
  version,
};

// Stuff for testing, etc.
main$1.exports._buildGrammar = buildGrammar;

// Late initialization for stuff that is bootstrapped.


util.announceBuiltInRules(Grammar.BuiltInRules);

main$1.exports.ohmGrammar = ohmGrammar = ohmGrammar$1;
Grammar.initApplicationParser(ohmGrammar, buildGrammar);

var ohm = main$1.exports;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert} = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Helpers

function getProp(name, thing, fn) {
  return fn(thing[name]);
}

function mapProp(name, thing, fn) {
  return thing[name].map(fn);
}

// Returns a function that will walk a single property of a node.
// `descriptor` is a string indicating the property name, optionally ending
// with '[]' (e.g., 'children[]').
function getPropWalkFn(descriptor) {
  const parts = descriptor.split(/ ?\[\]/);
  if (parts.length === 2) {
    return mapProp.bind(null, parts[0]);
  }
  return getProp.bind(null, descriptor);
}

function getProps(walkFns, thing, fn) {
  return walkFns.map(walkFn => walkFn(thing, fn));
}

function getWalkFn(shape) {
  if (typeof shape === 'string') {
    return getProps.bind(null, [getPropWalkFn(shape)]);
  } else if (Array.isArray(shape)) {
    return getProps.bind(null, shape.map(getPropWalkFn));
  } else {
    assert(typeof shape === 'function', 'Expected a string, Array, or function');
    assert(shape.length === 2, 'Expected a function of arity 2, got ' + shape.length);
    return shape;
  }
}

function isRestrictedIdentifier(str) {
  return /^[a-zA-Z_][0-9a-zA-Z_]*$/.test(str);
}

function trim(s) {
  return s.trim();
}

function parseSignature(sig) {
  const parts = sig.split(/[()]/).map(trim);
  if (parts.length === 3 && parts[2] === '') {
    const name = parts[0];
    let params = [];
    if (parts[1].length > 0) {
      params = parts[1].split(',').map(trim);
    }
    if (isRestrictedIdentifier(name) && params.every(isRestrictedIdentifier)) {
      return {name, formals: params};
    }
  }
  throw new Error('Invalid operation signature: ' + sig);
}

/*
  A VisitorFamily contains a set of recursive operations that are defined over some kind of
  tree structure. The `config` parameter specifies how to walk the tree:
  - 'getTag' is function which, given a node in the tree, returns the node's 'tag' (type)
  - 'shapes' an object that maps from a tag to a value that describes how to recursively
    evaluate the operation for nodes of that type. The value can be:
    * a string indicating the property name that holds that node's only child
    * an Array of property names (or an empty array indicating a leaf type), or
    * a function taking two arguments (node, fn), and returning an Array which is the result
      of apply `fn` to each of the node's children.
 */
function VisitorFamily(config) {
  this._shapes = config.shapes;
  this._getTag = config.getTag;

  this.Adapter = function(thing, family) {
    this._adaptee = thing;
    this._family = family;
  };
  this.Adapter.prototype.valueOf = function() {
    throw new Error('heeey!');
  };
  this.operations = {};

  this._arities = Object.create(null);
  this._getChildren = Object.create(null);

  Object.keys(this._shapes).forEach(k => {
    const shape = this._shapes[k];
    this._getChildren[k] = getWalkFn(shape);

    // A function means the arity isn't fixed, so don't put an entry in the arity map.
    if (typeof shape !== 'function') {
      this._arities[k] = Array.isArray(shape) ? shape.length : 1;
    }
  });
  this._wrap = thing => new this.Adapter(thing, this);
}

VisitorFamily.prototype.wrap = function(thing) {
  return this._wrap(thing);
};

VisitorFamily.prototype._checkActionDict = function(dict) {
  Object.keys(dict).forEach(k => {
    assert(k in this._getChildren, "Unrecognized action name '" + k + "'");
    const action = dict[k];
    assert(typeof action === 'function', "Key '" + k + "': expected function, got " + action);
    if (k in this._arities) {
      const expected = this._arities[k];
      const actual = dict[k].length;
      assert(
          actual === expected,
          "Action '" + k + "' has the wrong arity: expected " + expected + ', got ' + actual
      );
    }
  });
};

VisitorFamily.prototype.addOperation = function(signature, actions) {
  const sig = parseSignature(signature);
  const {name} = sig;
  this._checkActionDict(actions);
  this.operations[name] = {
    name,
    formals: sig.formals,
    actions,
  };

  const family = this;
  this.Adapter.prototype[name] = function(...args) {
    const tag = family._getTag(this._adaptee);
    assert(tag in family._getChildren, "getTag returned unrecognized tag '" + tag + "'");
    assert(tag in actions, "No action for '" + tag + "' in operation '" + name + "'");

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [i, val] of Object.entries(args)) {
      argsObj[sig.formals[i]] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = actions[tag].apply(
        this,
        family._getChildren[tag](this._adaptee, family._wrap)
    );
    this.args = oldArgs;
    return ans;
  };
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var VisitorFamily_1 = VisitorFamily;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

const defaultOperation = {
  _terminal() {
    return this.sourceString;
  },

  _nonterminal(...children) {
    const {ctorName} = this._node;
    const {mapping} = this.args;

    // without customization
    if (!Object.prototype.hasOwnProperty.call(mapping, ctorName)) {
      // lexical rule
      if (this.isLexical()) {
        return this.sourceString;
      }

      // singular node (e.g. only surrounded by literals or lookaheads)
      const realChildren = children.filter(child => !child.isTerminal());
      if (realChildren.length === 1) {
        return realChildren[0].toAST(mapping);
      }

      // rest: terms with multiple children
    }

    // direct forward
    if (typeof mapping[ctorName] === 'number') {
      return children[mapping[ctorName]].toAST(mapping);
    }

    // named/mapped children or unnamed children ('0', '1', '2', ...)
    const propMap = mapping[ctorName] || children;
    const node = {
      type: ctorName,
    };
    // eslint-disable-next-line guard-for-in
    for (const prop in propMap) {
      const mappedProp = mapping[ctorName] && mapping[ctorName][prop];
      if (typeof mappedProp === 'number') {
        // direct forward
        node[prop] = children[mappedProp].toAST(mapping);
      } else if (
        typeof mappedProp === 'string' ||
        typeof mappedProp === 'boolean' ||
        mappedProp === null
      ) {
        // primitive value
        node[prop] = mappedProp;
      } else if (typeof mappedProp === 'object' && mappedProp instanceof Number) {
        // primitive number (must be unboxed)
        node[prop] = Number(mappedProp);
      } else if (typeof mappedProp === 'function') {
        // computed value
        node[prop] = mappedProp.call(this, children);
      } else if (mappedProp === undefined) {
        if (children[prop] && !children[prop].isTerminal()) {
          node[prop] = children[prop].toAST(mapping);
        } else {
          // delete predefined 'type' properties, like 'type', if explicitely removed
          delete node[prop];
        }
      }
    }
    return node;
  },

  _iter(...children) {
    if (this._node.isOptional()) {
      if (this.numChildren === 0) {
        return null;
      } else {
        return children[0].toAST(this.args.mapping);
      }
    }

    return children.map(function(child) {
      return child.toAST(this.args.mapping);
    }, this);
  },

  NonemptyListOf(first, sep, rest) {
    return [first.toAST(this.args.mapping)].concat(rest.toAST(this.args.mapping));
  },

  EmptyListOf() {
    return [];
  },
};

// Returns a plain JavaScript object that includes an abstract syntax tree (AST)
// for the given match result `res` containg a concrete syntax tree (CST) and grammar.
// The optional `mapping` parameter can be used to customize how the nodes of the CST
// are mapped to the AST (see /doc/extras.md#toastmatchresult-mapping).
function toAST(res, mapping) {
  if (typeof res.failed !== 'function' || res.failed()) {
    throw new Error('toAST() expects a succesful MatchResult as first parameter');
  }

  mapping = Object.assign({}, mapping);
  const operation = Object.assign({}, defaultOperation);
  for (const termName in mapping) {
    if (typeof mapping[termName] === 'function') {
      operation[termName] = mapping[termName];
      delete mapping[termName];
    }
  }
  const g = res._cst.grammar;
  const s = g.createSemantics().addOperation('toAST(mapping)', operation);
  return s(res).toAST(mapping);
}

// Returns a semantics containg the toAST(mapping) operation for the given grammar g.
function semanticsForToAST(g) {
  if (typeof g.createSemantics !== 'function') {
    throw new Error('semanticsToAST() expects a Grammar as parameter');
  }

  return g.createSemantics().addOperation('toAST(mapping)', defaultOperation);
}

var semanticsToAST = {
  helper: toAST,
  semantics: semanticsForToAST,
};

var extras = {
  VisitorFamily: VisitorFamily_1,
  semanticsForToAST: semanticsToAST.semantics,
  toAST: semanticsToAST.helper,
};




/***/ }),

/***/ 5816:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert} = __webpack_require__(1992);

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Helpers

function getProp(name, thing, fn) {
  return fn(thing[name]);
}

function mapProp(name, thing, fn) {
  return thing[name].map(fn);
}

// Returns a function that will walk a single property of a node.
// `descriptor` is a string indicating the property name, optionally ending
// with '[]' (e.g., 'children[]').
function getPropWalkFn(descriptor) {
  const parts = descriptor.split(/ ?\[\]/);
  if (parts.length === 2) {
    return mapProp.bind(null, parts[0]);
  }
  return getProp.bind(null, descriptor);
}

function getProps(walkFns, thing, fn) {
  return walkFns.map(walkFn => walkFn(thing, fn));
}

function getWalkFn(shape) {
  if (typeof shape === 'string') {
    return getProps.bind(null, [getPropWalkFn(shape)]);
  } else if (Array.isArray(shape)) {
    return getProps.bind(null, shape.map(getPropWalkFn));
  } else {
    assert(typeof shape === 'function', 'Expected a string, Array, or function');
    assert(shape.length === 2, 'Expected a function of arity 2, got ' + shape.length);
    return shape;
  }
}

function isRestrictedIdentifier(str) {
  return /^[a-zA-Z_][0-9a-zA-Z_]*$/.test(str);
}

function trim(s) {
  return s.trim();
}

function parseSignature(sig) {
  const parts = sig.split(/[()]/).map(trim);
  if (parts.length === 3 && parts[2] === '') {
    const name = parts[0];
    let params = [];
    if (parts[1].length > 0) {
      params = parts[1].split(',').map(trim);
    }
    if (isRestrictedIdentifier(name) && params.every(isRestrictedIdentifier)) {
      return {name, formals: params};
    }
  }
  throw new Error('Invalid operation signature: ' + sig);
}

/*
  A VisitorFamily contains a set of recursive operations that are defined over some kind of
  tree structure. The `config` parameter specifies how to walk the tree:
  - 'getTag' is function which, given a node in the tree, returns the node's 'tag' (type)
  - 'shapes' an object that maps from a tag to a value that describes how to recursively
    evaluate the operation for nodes of that type. The value can be:
    * a string indicating the property name that holds that node's only child
    * an Array of property names (or an empty array indicating a leaf type), or
    * a function taking two arguments (node, fn), and returning an Array which is the result
      of apply `fn` to each of the node's children.
 */
function VisitorFamily(config) {
  this._shapes = config.shapes;
  this._getTag = config.getTag;

  this.Adapter = function(thing, family) {
    this._adaptee = thing;
    this._family = family;
  };
  this.Adapter.prototype.valueOf = function() {
    throw new Error('heeey!');
  };
  this.operations = {};

  this._arities = Object.create(null);
  this._getChildren = Object.create(null);

  Object.keys(this._shapes).forEach(k => {
    const shape = this._shapes[k];
    this._getChildren[k] = getWalkFn(shape);

    // A function means the arity isn't fixed, so don't put an entry in the arity map.
    if (typeof shape !== 'function') {
      this._arities[k] = Array.isArray(shape) ? shape.length : 1;
    }
  });
  this._wrap = thing => new this.Adapter(thing, this);
}

VisitorFamily.prototype.wrap = function(thing) {
  return this._wrap(thing);
};

VisitorFamily.prototype._checkActionDict = function(dict) {
  Object.keys(dict).forEach(k => {
    assert(k in this._getChildren, "Unrecognized action name '" + k + "'");
    const action = dict[k];
    assert(typeof action === 'function', "Key '" + k + "': expected function, got " + action);
    if (k in this._arities) {
      const expected = this._arities[k];
      const actual = dict[k].length;
      assert(
          actual === expected,
          "Action '" + k + "' has the wrong arity: expected " + expected + ', got ' + actual
      );
    }
  });
};

VisitorFamily.prototype.addOperation = function(signature, actions) {
  const sig = parseSignature(signature);
  const {name} = sig;
  this._checkActionDict(actions);
  this.operations[name] = {
    name,
    formals: sig.formals,
    actions,
  };

  const family = this;
  this.Adapter.prototype[name] = function(...args) {
    const tag = family._getTag(this._adaptee);
    assert(tag in family._getChildren, "getTag returned unrecognized tag '" + tag + "'");
    assert(tag in actions, "No action for '" + tag + "' in operation '" + name + "'");

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [i, val] of Object.entries(args)) {
      argsObj[sig.formals[i]] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = actions[tag].apply(
        this,
        family._getChildren[tag](this._adaptee, family._wrap)
    );
    this.args = oldArgs;
    return ans;
  };
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

module.exports = VisitorFamily;


/***/ }),

/***/ 1610:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = {
  VisitorFamily: __webpack_require__(5816),
  semanticsForToAST: (__webpack_require__(1833).semantics),
  toAST: (__webpack_require__(1833).helper),
};


/***/ }),

/***/ 1833:
/***/ ((module) => {

"use strict";


// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

const defaultOperation = {
  _terminal() {
    return this.sourceString;
  },

  _nonterminal(...children) {
    const {ctorName} = this._node;
    const {mapping} = this.args;

    // without customization
    if (!Object.prototype.hasOwnProperty.call(mapping, ctorName)) {
      // lexical rule
      if (this.isLexical()) {
        return this.sourceString;
      }

      // singular node (e.g. only surrounded by literals or lookaheads)
      const realChildren = children.filter(child => !child.isTerminal());
      if (realChildren.length === 1) {
        return realChildren[0].toAST(mapping);
      }

      // rest: terms with multiple children
    }

    // direct forward
    if (typeof mapping[ctorName] === 'number') {
      return children[mapping[ctorName]].toAST(mapping);
    }

    // named/mapped children or unnamed children ('0', '1', '2', ...)
    const propMap = mapping[ctorName] || children;
    const node = {
      type: ctorName,
    };
    // eslint-disable-next-line guard-for-in
    for (const prop in propMap) {
      const mappedProp = mapping[ctorName] && mapping[ctorName][prop];
      if (typeof mappedProp === 'number') {
        // direct forward
        node[prop] = children[mappedProp].toAST(mapping);
      } else if (
        typeof mappedProp === 'string' ||
        typeof mappedProp === 'boolean' ||
        mappedProp === null
      ) {
        // primitive value
        node[prop] = mappedProp;
      } else if (typeof mappedProp === 'object' && mappedProp instanceof Number) {
        // primitive number (must be unboxed)
        node[prop] = Number(mappedProp);
      } else if (typeof mappedProp === 'function') {
        // computed value
        node[prop] = mappedProp.call(this, children);
      } else if (mappedProp === undefined) {
        if (children[prop] && !children[prop].isTerminal()) {
          node[prop] = children[prop].toAST(mapping);
        } else {
          // delete predefined 'type' properties, like 'type', if explicitely removed
          delete node[prop];
        }
      }
    }
    return node;
  },

  _iter(...children) {
    if (this._node.isOptional()) {
      if (this.numChildren === 0) {
        return null;
      } else {
        return children[0].toAST(this.args.mapping);
      }
    }

    return children.map(function(child) {
      return child.toAST(this.args.mapping);
    }, this);
  },

  NonemptyListOf(first, sep, rest) {
    return [first.toAST(this.args.mapping)].concat(rest.toAST(this.args.mapping));
  },

  EmptyListOf() {
    return [];
  },
};

// Returns a plain JavaScript object that includes an abstract syntax tree (AST)
// for the given match result `res` containg a concrete syntax tree (CST) and grammar.
// The optional `mapping` parameter can be used to customize how the nodes of the CST
// are mapped to the AST (see /doc/extras.md#toastmatchresult-mapping).
function toAST(res, mapping) {
  if (typeof res.failed !== 'function' || res.failed()) {
    throw new Error('toAST() expects a succesful MatchResult as first parameter');
  }

  mapping = Object.assign({}, mapping);
  const operation = Object.assign({}, defaultOperation);
  for (const termName in mapping) {
    if (typeof mapping[termName] === 'function') {
      operation[termName] = mapping[termName];
      delete mapping[termName];
    }
  }
  const g = res._cst.grammar;
  const s = g.createSemantics().addOperation('toAST(mapping)', operation);
  return s(res).toAST(mapping);
}

// Returns a semantics containg the toAST(mapping) operation for the given grammar g.
function semanticsForToAST(g) {
  if (typeof g.createSemantics !== 'function') {
    throw new Error('semanticsToAST() expects a Grammar as parameter');
  }

  return g.createSemantics().addOperation('toAST(mapping)', defaultOperation);
}

module.exports = {
  helper: toAST,
  semantics: semanticsForToAST,
};


/***/ }),

/***/ 1992:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Helpers

const escapeStringFor = {};
for (let c = 0; c < 128; c++) {
  escapeStringFor[c] = String.fromCharCode(c);
}
escapeStringFor["'".charCodeAt(0)] = "\\'";
escapeStringFor['"'.charCodeAt(0)] = '\\"';
escapeStringFor['\\'.charCodeAt(0)] = '\\\\';
escapeStringFor['\b'.charCodeAt(0)] = '\\b';
escapeStringFor['\f'.charCodeAt(0)] = '\\f';
escapeStringFor['\n'.charCodeAt(0)] = '\\n';
escapeStringFor['\r'.charCodeAt(0)] = '\\r';
escapeStringFor['\t'.charCodeAt(0)] = '\\t';
escapeStringFor['\u000b'.charCodeAt(0)] = '\\v';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

exports.abstract = function(optMethodName) {
  const methodName = optMethodName || '';
  return function() {
    throw new Error(
        'this method ' +
        methodName +
        ' is abstract! ' +
        '(it has no implementation in class ' +
        this.constructor.name +
        ')'
    );
  };
};

exports.assert = function(cond, message) {
  if (!cond) {
    throw new Error(message || 'Assertion failed');
  }
};

// Define a lazily-computed, non-enumerable property named `propName`
// on the object `obj`. `getterFn` will be called to compute the value the
// first time the property is accessed.
exports.defineLazyProperty = function(obj, propName, getterFn) {
  let memo;
  Object.defineProperty(obj, propName, {
    get() {
      if (!memo) {
        memo = getterFn.call(this);
      }
      return memo;
    },
  });
};

exports.clone = function(obj) {
  if (obj) {
    return Object.assign({}, obj);
  }
  return obj;
};

exports.repeatFn = function(fn, n) {
  const arr = [];
  while (n-- > 0) {
    arr.push(fn());
  }
  return arr;
};

exports.repeatStr = function(str, n) {
  return new Array(n + 1).join(str);
};

exports.repeat = function(x, n) {
  return exports.repeatFn(() => x, n);
};

exports.getDuplicates = function(array) {
  const duplicates = [];
  for (let idx = 0; idx < array.length; idx++) {
    const x = array[idx];
    if (array.lastIndexOf(x) !== idx && duplicates.indexOf(x) < 0) {
      duplicates.push(x);
    }
  }
  return duplicates;
};

exports.copyWithoutDuplicates = function(array) {
  const noDuplicates = [];
  array.forEach(entry => {
    if (noDuplicates.indexOf(entry) < 0) {
      noDuplicates.push(entry);
    }
  });
  return noDuplicates;
};

exports.isSyntactic = function(ruleName) {
  const firstChar = ruleName[0];
  return firstChar === firstChar.toUpperCase();
};

exports.isLexical = function(ruleName) {
  return !exports.isSyntactic(ruleName);
};

exports.padLeft = function(str, len, optChar) {
  const ch = optChar || ' ';
  if (str.length < len) {
    return exports.repeatStr(ch, len - str.length) + str;
  }
  return str;
};

// StringBuffer

exports.StringBuffer = function() {
  this.strings = [];
};

exports.StringBuffer.prototype.append = function(str) {
  this.strings.push(str);
};

exports.StringBuffer.prototype.contents = function() {
  return this.strings.join('');
};

const escapeUnicode = str => String.fromCodePoint(parseInt(str, 16));

exports.unescapeCodePoint = function(s) {
  if (s.charAt(0) === '\\') {
    switch (s.charAt(1)) {
      case 'b':
        return '\b';
      case 'f':
        return '\f';
      case 'n':
        return '\n';
      case 'r':
        return '\r';
      case 't':
        return '\t';
      case 'v':
        return '\v';
      case 'x':
        return escapeUnicode(s.slice(2, 4));
      case 'u':
        return s.charAt(2) === '{' ?
          escapeUnicode(s.slice(3, -1)) :
          escapeUnicode(s.slice(2, 6));
      default:
        return s.charAt(1);
    }
  } else {
    return s;
  }
};

// Helper for producing a description of an unknown object in a safe way.
// Especially useful for error messages where an unexpected type of object was encountered.
exports.unexpectedObjToString = function(obj) {
  if (obj == null) {
    return String(obj);
  }
  const baseToString = Object.prototype.toString.call(obj);
  try {
    let typeName;
    if (obj.constructor && obj.constructor.name) {
      typeName = obj.constructor.name;
    } else if (baseToString.indexOf('[object ') === 0) {
      typeName = baseToString.slice(8, -1); // Extract e.g. "Array" from "[object Array]".
    } else {
      typeName = typeof obj;
    }
    return typeName + ': ' + JSON.stringify(String(obj));
  } catch (e) {
    return baseToString;
  }
};


/***/ }),

/***/ 8043:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VsCodeFileSystem = void 0;
const vscode_uri_1 = __webpack_require__(2186);
class VsCodeFileSystem {
    constructor(connection, fileSystems) {
        this.connection = connection;
        this.fileSystems = fileSystems;
    }
    readDirectory(uriString) {
        const uri = vscode_uri_1.URI.parse(uriString);
        const fs = this.fileSystems[uri.scheme];
        if (fs)
            return fs.readDirectory(uriString);
        return this.connection.sendRequest('fs/readDirectory', uriString);
    }
    readFile(uriString) {
        const uri = vscode_uri_1.URI.parse(uriString);
        const fs = this.fileSystems[uri.scheme];
        if (fs)
            return fs.readFile(uriString);
        return this.connection.sendRequest('fs/readFile', uriString);
    }
    stat(uriString) {
        const uri = vscode_uri_1.URI.parse(uriString);
        const fs = this.fileSystems[uri.scheme];
        if (fs)
            return fs.stat(uriString);
        return this.connection.sendRequest('fs/stat', uriString);
    }
}
exports.VsCodeFileSystem = VsCodeFileSystem;


/***/ }),

/***/ 2624:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ClientCapabilities: () => (/* reexport */ ClientCapabilities),
  CodeAction: () => (/* reexport */ CodeAction),
  CodeActionContext: () => (/* reexport */ CodeActionContext),
  CodeActionKind: () => (/* reexport */ CodeActionKind),
  Color: () => (/* reexport */ Color),
  ColorInformation: () => (/* reexport */ ColorInformation),
  ColorPresentation: () => (/* reexport */ ColorPresentation),
  Command: () => (/* reexport */ Command),
  CompletionItem: () => (/* reexport */ CompletionItem),
  CompletionItemKind: () => (/* reexport */ CompletionItemKind),
  CompletionItemTag: () => (/* reexport */ CompletionItemTag),
  CompletionList: () => (/* reexport */ CompletionList),
  Diagnostic: () => (/* reexport */ Diagnostic),
  DiagnosticSeverity: () => (/* reexport */ DiagnosticSeverity),
  DocumentHighlight: () => (/* reexport */ DocumentHighlight),
  DocumentHighlightKind: () => (/* reexport */ DocumentHighlightKind),
  DocumentLink: () => (/* reexport */ DocumentLink),
  DocumentSymbol: () => (/* reexport */ DocumentSymbol),
  DocumentUri: () => (/* reexport */ DocumentUri),
  ErrorCode: () => (/* reexport */ ErrorCode),
  FoldingRange: () => (/* reexport */ FoldingRange),
  FoldingRangeKind: () => (/* reexport */ FoldingRangeKind),
  Hover: () => (/* reexport */ Hover),
  InsertTextFormat: () => (/* reexport */ InsertTextFormat),
  Location: () => (/* reexport */ Location),
  MarkedString: () => (/* reexport */ MarkedString),
  MarkupContent: () => (/* reexport */ MarkupContent),
  MarkupKind: () => (/* reexport */ MarkupKind),
  Position: () => (/* reexport */ Position),
  Range: () => (/* reexport */ Range),
  SchemaDraft: () => (/* reexport */ SchemaDraft),
  SelectionRange: () => (/* reexport */ SelectionRange),
  SymbolInformation: () => (/* reexport */ SymbolInformation),
  SymbolKind: () => (/* reexport */ SymbolKind),
  TextDocument: () => (/* reexport */ esm_main.TextDocument),
  TextDocumentEdit: () => (/* reexport */ TextDocumentEdit),
  TextEdit: () => (/* reexport */ TextEdit),
  VersionedTextDocumentIdentifier: () => (/* reexport */ VersionedTextDocumentIdentifier),
  WorkspaceEdit: () => (/* reexport */ WorkspaceEdit),
  getLanguageService: () => (/* binding */ getLanguageService)
});

// EXTERNAL MODULE: ../../node_modules/jsonc-parser/lib/esm/main.js + 5 modules
var main = __webpack_require__(2328);
;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/objects.js
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
function equals(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === undefined || other === null || other === undefined) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== 'object') {
        return false;
    }
    if ((Array.isArray(one)) !== (Array.isArray(other))) {
        return false;
    }
    let i, key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for (i = 0; i < one.length; i++) {
            if (!equals(one[i], other[i])) {
                return false;
            }
        }
    }
    else {
        const oneKeys = [];
        for (key in one) {
            oneKeys.push(key);
        }
        oneKeys.sort();
        const otherKeys = [];
        for (key in other) {
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals(oneKeys, otherKeys)) {
            return false;
        }
        for (i = 0; i < oneKeys.length; i++) {
            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function isNumber(val) {
    return typeof val === 'number';
}
function isDefined(val) {
    return typeof val !== 'undefined';
}
function isBoolean(val) {
    return typeof val === 'boolean';
}
function isString(val) {
    return typeof val === 'string';
}
function isObject(val) {
    return typeof val === 'object' && val !== null && !Array.isArray(val);
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/strings.js
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
        return false;
    }
    for (let i = 0; i < needle.length; i++) {
        if (haystack[i] !== needle[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Determines if haystack ends with needle.
 */
function endsWith(haystack, needle) {
    const diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.lastIndexOf(needle) === diff;
    }
    else if (diff === 0) {
        return haystack === needle;
    }
    else {
        return false;
    }
}
function convertSimple2RegExpPattern(pattern) {
    return pattern.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, '\\$&').replace(/[\*]/g, '.*');
}
function repeat(value, count) {
    let s = '';
    while (count > 0) {
        if ((count & 1) === 1) {
            s += value;
        }
        value += value;
        count = count >>> 1;
    }
    return s;
}
function extendedRegExp(pattern) {
    let flags = '';
    if (startsWith(pattern, '(?i)')) {
        pattern = pattern.substring(4);
        flags = 'i';
    }
    try {
        return new RegExp(pattern, flags + 'u');
    }
    catch (e) {
        // could be an exception due to the 'u ' flag
        try {
            return new RegExp(pattern, flags);
        }
        catch (e) {
            // invalid pattern
            return undefined;
        }
    }
}
// from https://tanishiking.github.io/posts/count-unicode-codepoint/#work-hard-with-for-statements
function stringLength(str) {
    let count = 0;
    for (let i = 0; i < str.length; i++) {
        count++;
        // obtain the i-th 16-bit
        const code = str.charCodeAt(i);
        if (0xD800 <= code && code <= 0xDBFF) {
            // if the i-th 16bit is an upper surrogate
            // skip the next 16 bits (lower surrogate)
            i++;
        }
    }
    return count;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/node_modules/vscode-languageserver-types/lib/esm/main.js
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var DocumentUri;
(function (DocumentUri) {
    function is(value) {
        return typeof value === 'string';
    }
    DocumentUri.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI;
(function (URI) {
    function is(value) {
        return typeof value === 'string';
    }
    URI.is = is;
})(URI || (URI = {}));
var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
    }
    integer.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
    }
    uinteger.is = is;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line, character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri, range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && Range.is(candidate.targetSelectionRange)
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red,
            green,
            blue,
            alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range,
            color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label,
            textEdit,
            additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * A set of predefined range kinds.
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind.Comment = 'comment';
    /**
     * Folding range for an import or include
     */
    FoldingRangeKind.Imports = 'imports';
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind.Region = 'region';
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        const result = {
            startLine,
            endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location,
            message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        let result = { range, message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */
    function is(value) {
        var _a;
        let candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command, ...args) {
        let result = { title, command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range, newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        const result = { label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range, newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        const candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument, edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        let candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        let result = {
            kind: 'create',
            uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        let result = {
            kind: 'rename',
            oldUri,
            newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        let result = {
            kind: 'delete',
            uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        let candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
class TextEditChangeImpl {
    constructor(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    insert(position, newText, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    replace(range, newText, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    delete(range, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    add(edit) {
        this.edits.push(edit);
    }
    all() {
        return this.edits;
    }
    clear() {
        this.edits.splice(0, this.edits.length);
    }
    assertChangeAnnotations(value) {
        if (value === undefined) {
            throw new Error(`Text edit change is not configured to manage change annotations.`);
        }
    }
}
/**
 * A helper class
 */
class ChangeAnnotations {
    constructor(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    all() {
        return this._annotations;
    }
    get size() {
        return this._size;
    }
    manage(idOrAnnotation, annotation) {
        let id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error(`Id ${id} is already in use.`);
        }
        if (annotation === undefined) {
            throw new Error(`No annotation provided for id ${id}`);
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    }
    nextId() {
        this._counter++;
        return this._counter.toString();
    }
}
/**
 * A workspace change helps constructing changes to a workspace.
 */
class WorkspaceChange {
    constructor(workspaceEdit) {
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach((change) => {
                    if (TextDocumentEdit.is(change)) {
                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);
                        this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach((key) => {
                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    /**
     * Returns the underlying {@link WorkspaceEdit} literal
     * use to be returned from a workspace edit operation like rename.
     */
    get edit() {
        this.initDocumentChanges();
        if (this._changeAnnotations !== undefined) {
            if (this._changeAnnotations.size === 0) {
                this._workspaceEdit.changeAnnotations = undefined;
            }
            else {
                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            }
        }
        return this._workspaceEdit;
    }
    getTextEditChange(key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            const textDocument = { uri: key.uri, version: key.version };
            let result = this._textEditChanges[textDocument.uri];
            if (!result) {
                const edits = [];
                const textDocumentEdit = {
                    textDocument,
                    edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            let result = this._textEditChanges[key];
            if (!result) {
                let edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    }
    initDocumentChanges() {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    }
    initChanges() {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    }
    createFile(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
    renameFile(oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
    deleteFile(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
}
/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri, version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri, version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri, languageId, version, text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */
    function is(value) {
        const candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText, insert, replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */
    function is(value) {
        const candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails) {
    function is(value) {
        const candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    CompletionItemLabelDetails.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */
    function is(value) {
        const candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */
    function is(value) {
        let candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label, documentation } : { label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation, ...parameters) {
        let result = { label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */
    function create(range, kind) {
        let result = { range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        let result = {
            name,
            kind,
            location: { uri, range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol) {
    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */
    function create(name, kind, uri, range) {
        return range !== undefined
            ? { name, kind, location: { uri, range } }
            : { name, kind, location: { uri } };
    }
    WorkspaceSymbol.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        let result = {
            name,
            detail,
            kind,
            range,
            selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */
    function is(value) {
        let candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */
var CodeActionTriggerKind;
(function (CodeActionTriggerKind) {
    /**
     * Code actions were explicitly requested by the user or by an extension.
     */
    CodeActionTriggerKind.Invoked = 1;
    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */
    CodeActionTriggerKind.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only, triggerKind) {
        let result = { diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        if (triggerKind !== undefined && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        let result = { title };
        let checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        let candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        let result = { range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize, insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range, target, data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range, parent };
    }
    SelectionRange.create = create;
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
    /**
     * @since 3.17.0
     */
    SemanticTokenTypes["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens || (SemanticTokens = {}));
/**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */
var InlineValueText;
(function (InlineValueText) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, text) {
        return { range, text };
    }
    InlineValueText.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText.is = is;
})(InlineValueText || (InlineValueText = {}));
/**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */
var InlineValueVariableLookup;
(function (InlineValueVariableLookup) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, variableName, caseSensitiveLookup) {
        return { range, variableName, caseSensitiveLookup };
    }
    InlineValueVariableLookup.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
            && (Is.string(candidate.variableName) || candidate.variableName === undefined);
    }
    InlineValueVariableLookup.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
/**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression) {
    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */
    function create(range, expression) {
        return { range, expression };
    }
    InlineValueEvaluatableExpression.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range)
            && (Is.string(candidate.expression) || candidate.expression === undefined);
    }
    InlineValueEvaluatableExpression.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
/**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */
var InlineValueContext;
(function (InlineValueContext) {
    /**
     * Creates a new InlineValueContext literal.
     */
    function create(frameId, stoppedLocation) {
        return { frameId, stoppedLocation };
    }
    InlineValueContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext.is = is;
})(InlineValueContext || (InlineValueContext = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind.Type = 1;
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart) {
    function create(value) {
        return { value };
    }
    InlayHintLabelPart.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.location === undefined || Location.is(candidate.location))
            && (candidate.command === undefined || Command.is(candidate.command));
    }
    InlayHintLabelPart.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint) {
    function create(position, label, kind) {
        const result = { position, label };
        if (kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position)
            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
    }
    InlayHint.is = is;
})(InlayHint || (InlayHint = {}));
var StringValue;
(function (StringValue) {
    function createSnippet(value) {
        return { kind: 'snippet', value };
    }
    StringValue.createSnippet = createSnippet;
})(StringValue || (StringValue = {}));
var InlineCompletionItem;
(function (InlineCompletionItem) {
    function create(insertText, filterText, range, command) {
        return { insertText, filterText, range, command };
    }
    InlineCompletionItem.create = create;
})(InlineCompletionItem || (InlineCompletionItem = {}));
var InlineCompletionList;
(function (InlineCompletionList) {
    function create(items) {
        return { items };
    }
    InlineCompletionList.create = create;
})(InlineCompletionList || (InlineCompletionList = {}));
/**
 * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.
 *
 * @since 3.18.0
 * @proposed
 */
var InlineCompletionTriggerKind;
(function (InlineCompletionTriggerKind) {
    /**
     * Completion was triggered explicitly by a user gesture.
     */
    InlineCompletionTriggerKind.Invoked = 0;
    /**
     * Completion was triggered automatically while editing.
     */
    InlineCompletionTriggerKind.Automatic = 1;
})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
var SelectedCompletionInfo;
(function (SelectedCompletionInfo) {
    function create(range, text) {
        return { range, text };
    }
    SelectedCompletionInfo.create = create;
})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));
var InlineCompletionContext;
(function (InlineCompletionContext) {
    function create(triggerKind, selectedCompletionInfo) {
        return { triggerKind, selectedCompletionInfo };
    }
    InlineCompletionContext.create = create;
})(InlineCompletionContext || (InlineCompletionContext = {}));
var WorkspaceFolder;
(function (WorkspaceFolder) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
const EOL = (/* unused pure expression or super */ null && (['\n', '\r\n', '\r']));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        let text = document.getText();
        let sortedEdits = mergeSort(edits, (a, b) => {
            let diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        let lastModifiedOffset = text.length;
        for (let i = sortedEdits.length - 1; i >= 0; i--) {
            let e = sortedEdits[i];
            let startOffset = document.offsetAt(e.range.start);
            let endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        const p = (data.length / 2) | 0;
        const left = data.slice(0, p);
        const right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        let leftIdx = 0;
        let rightIdx = 0;
        let i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            let ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
class FullTextDocument {
    constructor(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    get uri() {
        return this._uri;
    }
    get languageId() {
        return this._languageId;
    }
    get version() {
        return this._version;
    }
    getText(range) {
        if (range) {
            let start = this.offsetAt(range.start);
            let end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    }
    update(event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    }
    getLineOffsets() {
        if (this._lineOffsets === undefined) {
            let lineOffsets = [];
            let text = this._content;
            let isLineStart = true;
            for (let i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                let ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    }
    positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        let lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            let mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        let line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    }
    offsetAt(position) {
        let lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        let lineOffset = lineOffsets[position.line];
        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    }
    get lineCount() {
        return this.getLineOffsets().length;
    }
}
var Is;
(function (Is) {
    const toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));

// EXTERNAL MODULE: ../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js
var esm_main = __webpack_require__(8041);
;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/jsonLanguageTypes.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



/**
 * Error codes used by diagnostics
 */
var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["Undefined"] = 0] = "Undefined";
    ErrorCode[ErrorCode["EnumValueMismatch"] = 1] = "EnumValueMismatch";
    ErrorCode[ErrorCode["Deprecated"] = 2] = "Deprecated";
    ErrorCode[ErrorCode["UnexpectedEndOfComment"] = 257] = "UnexpectedEndOfComment";
    ErrorCode[ErrorCode["UnexpectedEndOfString"] = 258] = "UnexpectedEndOfString";
    ErrorCode[ErrorCode["UnexpectedEndOfNumber"] = 259] = "UnexpectedEndOfNumber";
    ErrorCode[ErrorCode["InvalidUnicode"] = 260] = "InvalidUnicode";
    ErrorCode[ErrorCode["InvalidEscapeCharacter"] = 261] = "InvalidEscapeCharacter";
    ErrorCode[ErrorCode["InvalidCharacter"] = 262] = "InvalidCharacter";
    ErrorCode[ErrorCode["PropertyExpected"] = 513] = "PropertyExpected";
    ErrorCode[ErrorCode["CommaExpected"] = 514] = "CommaExpected";
    ErrorCode[ErrorCode["ColonExpected"] = 515] = "ColonExpected";
    ErrorCode[ErrorCode["ValueExpected"] = 516] = "ValueExpected";
    ErrorCode[ErrorCode["CommaOrCloseBacketExpected"] = 517] = "CommaOrCloseBacketExpected";
    ErrorCode[ErrorCode["CommaOrCloseBraceExpected"] = 518] = "CommaOrCloseBraceExpected";
    ErrorCode[ErrorCode["TrailingComma"] = 519] = "TrailingComma";
    ErrorCode[ErrorCode["DuplicateKey"] = 520] = "DuplicateKey";
    ErrorCode[ErrorCode["CommentNotPermitted"] = 521] = "CommentNotPermitted";
    ErrorCode[ErrorCode["PropertyKeysMustBeDoublequoted"] = 528] = "PropertyKeysMustBeDoublequoted";
    ErrorCode[ErrorCode["SchemaResolveError"] = 768] = "SchemaResolveError";
    ErrorCode[ErrorCode["SchemaUnsupportedFeature"] = 769] = "SchemaUnsupportedFeature";
})(ErrorCode || (ErrorCode = {}));
var SchemaDraft;
(function (SchemaDraft) {
    SchemaDraft[SchemaDraft["v3"] = 3] = "v3";
    SchemaDraft[SchemaDraft["v4"] = 4] = "v4";
    SchemaDraft[SchemaDraft["v6"] = 6] = "v6";
    SchemaDraft[SchemaDraft["v7"] = 7] = "v7";
    SchemaDraft[SchemaDraft["v2019_09"] = 19] = "v2019_09";
    SchemaDraft[SchemaDraft["v2020_12"] = 20] = "v2020_12";
})(SchemaDraft || (SchemaDraft = {}));
var ClientCapabilities;
(function (ClientCapabilities) {
    ClientCapabilities.LATEST = {
        textDocument: {
            completion: {
                completionItem: {
                    documentationFormat: [MarkupKind.Markdown, MarkupKind.PlainText],
                    commitCharactersSupport: true,
                    labelDetailsSupport: true
                }
            }
        }
    };
})(ClientCapabilities || (ClientCapabilities = {}));

;// CONCATENATED MODULE: ../../node_modules/@vscode/l10n/dist/browser.js
// src/browser/reader.ts
async function readFileFromUri(uri) {
  if (uri.protocol === "http:" || uri.protocol === "https:") {
    const res = await fetch(uri);
    return await res.text();
  }
  throw new Error("Unsupported protocol");
}
function readFileFromFsPath(_) {
  throw new Error("Unsupported in browser");
}

// src/main.ts
var bundle;
function config(config2) {
  if ("contents" in config2) {
    if (typeof config2.contents === "string") {
      bundle = JSON.parse(config2.contents);
    } else {
      bundle = config2.contents;
    }
    return;
  }
  if ("fsPath" in config2) {
    const fileContent = readFileFromFsPath(config2.fsPath);
    const content = JSON.parse(fileContent);
    bundle = isBuiltinExtension(content) ? content.contents.bundle : content;
    return;
  }
  if (config2.uri) {
    let uri = config2.uri;
    if (typeof config2.uri === "string") {
      uri = new URL(config2.uri);
    }
    return new Promise((resolve, reject) => {
      readFileFromUri(uri).then((uriContent) => {
        try {
          const content = JSON.parse(uriContent);
          bundle = isBuiltinExtension(content) ? content.contents.bundle : content;
          resolve();
        } catch (err) {
          reject(err);
        }
      }).catch((err) => {
        reject(err);
      });
    });
  }
}
function t(...args) {
  const firstArg = args[0];
  let key;
  let message;
  let formatArgs;
  if (typeof firstArg === "string") {
    key = firstArg;
    message = firstArg;
    args.splice(0, 1);
    formatArgs = !args || typeof args[0] !== "object" ? args : args[0];
  } else if (firstArg instanceof Array) {
    const replacements = args.slice(1);
    if (firstArg.length !== replacements.length + 1) {
      throw new Error("expected a string as the first argument to l10n.t");
    }
    let str = firstArg[0];
    for (let i = 1; i < firstArg.length; i++) {
      str += `{${i - 1}}` + firstArg[i];
    }
    return t(str, ...replacements);
  } else {
    message = firstArg.message;
    key = message;
    if (firstArg.comment && firstArg.comment.length > 0) {
      key += `/${Array.isArray(firstArg.comment) ? firstArg.comment.join("") : firstArg.comment}`;
    }
    formatArgs = firstArg.args ?? {};
  }
  const messageFromBundle = bundle?.[key];
  if (!messageFromBundle) {
    return format(message, formatArgs);
  }
  if (typeof messageFromBundle === "string") {
    return format(messageFromBundle, formatArgs);
  }
  if (messageFromBundle.comment) {
    return format(messageFromBundle.message, formatArgs);
  }
  return format(message, formatArgs);
}
var _format2Regexp = /{([^}]+)}/g;
function format(template, values) {
  if (Object.keys(values).length === 0) {
    return template;
  }
  return template.replace(_format2Regexp, (match, group) => values[group] ?? match);
}
function isBuiltinExtension(json) {
  return !!(typeof json?.contents?.bundle === "object" && typeof json?.version === "string");
}


;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/parser/jsonParser.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





const formats = {
    'color-hex': { errorMessage: t('Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.'), pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/ },
    'date-time': { errorMessage: t('String is not a RFC3339 date-time.'), pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },
    'date': { errorMessage: t('String is not a RFC3339 date.'), pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i },
    'time': { errorMessage: t('String is not a RFC3339 time.'), pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },
    'email': { errorMessage: t('String is not an e-mail address.'), pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}))$/ },
    'hostname': { errorMessage: t('String is not a hostname.'), pattern: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i },
    'ipv4': { errorMessage: t('String is not an IPv4 address.'), pattern: /^(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$/ },
    'ipv6': { errorMessage: t('String is not an IPv6 address.'), pattern: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i },
};
class ASTNodeImpl {
    constructor(parent, offset, length = 0) {
        this.offset = offset;
        this.length = length;
        this.parent = parent;
    }
    get children() {
        return [];
    }
    toString() {
        return 'type: ' + this.type + ' (' + this.offset + '/' + this.length + ')' + (this.parent ? ' parent: {' + this.parent.toString() + '}' : '');
    }
}
class NullASTNodeImpl extends ASTNodeImpl {
    constructor(parent, offset) {
        super(parent, offset);
        this.type = 'null';
        this.value = null;
    }
}
class BooleanASTNodeImpl extends ASTNodeImpl {
    constructor(parent, boolValue, offset) {
        super(parent, offset);
        this.type = 'boolean';
        this.value = boolValue;
    }
}
class ArrayASTNodeImpl extends ASTNodeImpl {
    constructor(parent, offset) {
        super(parent, offset);
        this.type = 'array';
        this.items = [];
    }
    get children() {
        return this.items;
    }
}
class NumberASTNodeImpl extends ASTNodeImpl {
    constructor(parent, offset) {
        super(parent, offset);
        this.type = 'number';
        this.isInteger = true;
        this.value = Number.NaN;
    }
}
class StringASTNodeImpl extends ASTNodeImpl {
    constructor(parent, offset, length) {
        super(parent, offset, length);
        this.type = 'string';
        this.value = '';
    }
}
class PropertyASTNodeImpl extends ASTNodeImpl {
    constructor(parent, offset, keyNode) {
        super(parent, offset);
        this.type = 'property';
        this.colonOffset = -1;
        this.keyNode = keyNode;
    }
    get children() {
        return this.valueNode ? [this.keyNode, this.valueNode] : [this.keyNode];
    }
}
class ObjectASTNodeImpl extends ASTNodeImpl {
    constructor(parent, offset) {
        super(parent, offset);
        this.type = 'object';
        this.properties = [];
    }
    get children() {
        return this.properties;
    }
}
function asSchema(schema) {
    if (isBoolean(schema)) {
        return schema ? {} : { "not": {} };
    }
    return schema;
}
var EnumMatch;
(function (EnumMatch) {
    EnumMatch[EnumMatch["Key"] = 0] = "Key";
    EnumMatch[EnumMatch["Enum"] = 1] = "Enum";
})(EnumMatch || (EnumMatch = {}));
const schemaDraftFromId = {
    'http://json-schema.org/draft-03/schema#': SchemaDraft.v3,
    'http://json-schema.org/draft-04/schema#': SchemaDraft.v4,
    'http://json-schema.org/draft-06/schema#': SchemaDraft.v6,
    'http://json-schema.org/draft-07/schema#': SchemaDraft.v7,
    'https://json-schema.org/draft/2019-09/schema': SchemaDraft.v2019_09,
    'https://json-schema.org/draft/2020-12/schema': SchemaDraft.v2020_12
};
class EvaluationContext {
    constructor(schemaDraft) {
        this.schemaDraft = schemaDraft;
    }
}
class SchemaCollector {
    constructor(focusOffset = -1, exclude) {
        this.focusOffset = focusOffset;
        this.exclude = exclude;
        this.schemas = [];
    }
    add(schema) {
        this.schemas.push(schema);
    }
    merge(other) {
        Array.prototype.push.apply(this.schemas, other.schemas);
    }
    include(node) {
        return (this.focusOffset === -1 || contains(node, this.focusOffset)) && (node !== this.exclude);
    }
    newSub() {
        return new SchemaCollector(-1, this.exclude);
    }
}
class NoOpSchemaCollector {
    constructor() { }
    get schemas() { return []; }
    add(_schema) { }
    merge(_other) { }
    include(_node) { return true; }
    newSub() { return this; }
}
NoOpSchemaCollector.instance = new NoOpSchemaCollector();
class ValidationResult {
    constructor() {
        this.problems = [];
        this.propertiesMatches = 0;
        this.processedProperties = new Set();
        this.propertiesValueMatches = 0;
        this.primaryValueMatches = 0;
        this.enumValueMatch = false;
        this.enumValues = undefined;
    }
    hasProblems() {
        return !!this.problems.length;
    }
    merge(validationResult) {
        this.problems = this.problems.concat(validationResult.problems);
        this.propertiesMatches += validationResult.propertiesMatches;
        this.propertiesValueMatches += validationResult.propertiesValueMatches;
        this.mergeProcessedProperties(validationResult);
    }
    mergeEnumValues(validationResult) {
        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
            this.enumValues = this.enumValues.concat(validationResult.enumValues);
            for (const error of this.problems) {
                if (error.code === ErrorCode.EnumValueMismatch) {
                    error.message = t('Value is not accepted. Valid values: {0}.', this.enumValues.map(v => JSON.stringify(v)).join(', '));
                }
            }
        }
    }
    mergePropertyMatch(propertyValidationResult) {
        this.problems = this.problems.concat(propertyValidationResult.problems);
        this.propertiesMatches++;
        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
            this.propertiesValueMatches++;
        }
        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {
            this.primaryValueMatches++;
        }
    }
    mergeProcessedProperties(validationResult) {
        validationResult.processedProperties.forEach(p => this.processedProperties.add(p));
    }
    compare(other) {
        const hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        return this.propertiesMatches - other.propertiesMatches;
    }
}
function newJSONDocument(root, diagnostics = []) {
    return new JSONDocument(root, diagnostics, []);
}
function getNodeValue(node) {
    return main.getNodeValue(node);
}
function getNodePath(node) {
    return main.getNodePath(node);
}
function contains(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset < (node.offset + node.length) || includeRightBound && offset === (node.offset + node.length);
}
class JSONDocument {
    constructor(root, syntaxErrors = [], comments = []) {
        this.root = root;
        this.syntaxErrors = syntaxErrors;
        this.comments = comments;
    }
    getNodeFromOffset(offset, includeRightBound = false) {
        if (this.root) {
            return main.findNodeAtOffset(this.root, offset, includeRightBound);
        }
        return undefined;
    }
    visit(visitor) {
        if (this.root) {
            const doVisit = (node) => {
                let ctn = visitor(node);
                const children = node.children;
                if (Array.isArray(children)) {
                    for (let i = 0; i < children.length && ctn; i++) {
                        ctn = doVisit(children[i]);
                    }
                }
                return ctn;
            };
            doVisit(this.root);
        }
    }
    validate(textDocument, schema, severity = DiagnosticSeverity.Warning, schemaDraft) {
        if (this.root && schema) {
            const validationResult = new ValidationResult();
            validate(this.root, schema, validationResult, NoOpSchemaCollector.instance, new EvaluationContext(schemaDraft ?? getSchemaDraft(schema)));
            return validationResult.problems.map(p => {
                const range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
                return Diagnostic.create(range, p.message, p.severity ?? severity, p.code);
            });
        }
        return undefined;
    }
    getMatchingSchemas(schema, focusOffset = -1, exclude) {
        if (this.root && schema) {
            const matchingSchemas = new SchemaCollector(focusOffset, exclude);
            const schemaDraft = getSchemaDraft(schema);
            const context = new EvaluationContext(schemaDraft);
            validate(this.root, schema, new ValidationResult(), matchingSchemas, context);
            return matchingSchemas.schemas;
        }
        return [];
    }
}
function getSchemaDraft(schema, fallBack = SchemaDraft.v2020_12) {
    let schemaId = schema.$schema;
    if (schemaId) {
        return schemaDraftFromId[schemaId] ?? fallBack;
    }
    return fallBack;
}
function validate(n, schema, validationResult, matchingSchemas, context) {
    if (!n || !matchingSchemas.include(n)) {
        return;
    }
    if (n.type === 'property') {
        return validate(n.valueNode, schema, validationResult, matchingSchemas, context);
    }
    const node = n;
    _validateNode();
    switch (node.type) {
        case 'object':
            _validateObjectNode(node);
            break;
        case 'array':
            _validateArrayNode(node);
            break;
        case 'string':
            _validateStringNode(node);
            break;
        case 'number':
            _validateNumberNode(node);
            break;
    }
    matchingSchemas.add({ node: node, schema: schema });
    function _validateNode() {
        function matchesType(type) {
            return node.type === type || (type === 'integer' && node.type === 'number' && node.isInteger);
        }
        if (Array.isArray(schema.type)) {
            if (!schema.type.some(matchesType)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: schema.errorMessage || t('Incorrect type. Expected one of {0}.', schema.type.join(', '))
                });
            }
        }
        else if (schema.type) {
            if (!matchesType(schema.type)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: schema.errorMessage || t('Incorrect type. Expected "{0}".', schema.type)
                });
            }
        }
        if (Array.isArray(schema.allOf)) {
            for (const subSchemaRef of schema.allOf) {
                const subValidationResult = new ValidationResult();
                const subMatchingSchemas = matchingSchemas.newSub();
                validate(node, asSchema(subSchemaRef), subValidationResult, subMatchingSchemas, context);
                validationResult.merge(subValidationResult);
                matchingSchemas.merge(subMatchingSchemas);
            }
        }
        const notSchema = asSchema(schema.not);
        if (notSchema) {
            const subValidationResult = new ValidationResult();
            const subMatchingSchemas = matchingSchemas.newSub();
            validate(node, notSchema, subValidationResult, subMatchingSchemas, context);
            if (!subValidationResult.hasProblems()) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: schema.errorMessage || t("Matches a schema that is not allowed.")
                });
            }
            for (const ms of subMatchingSchemas.schemas) {
                ms.inverted = !ms.inverted;
                matchingSchemas.add(ms);
            }
        }
        const testAlternatives = (alternatives, maxOneMatch) => {
            const matches = [];
            // remember the best match that is used for error messages
            let bestMatch = undefined;
            for (const subSchemaRef of alternatives) {
                const subSchema = asSchema(subSchemaRef);
                const subValidationResult = new ValidationResult();
                const subMatchingSchemas = matchingSchemas.newSub();
                validate(node, subSchema, subValidationResult, subMatchingSchemas, context);
                if (!subValidationResult.hasProblems()) {
                    matches.push(subSchema);
                }
                if (!bestMatch) {
                    bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };
                }
                else {
                    if (!maxOneMatch && !subValidationResult.hasProblems() && !bestMatch.validationResult.hasProblems()) {
                        // no errors, both are equally good matches
                        bestMatch.matchingSchemas.merge(subMatchingSchemas);
                        bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;
                        bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
                        bestMatch.validationResult.mergeProcessedProperties(subValidationResult);
                    }
                    else {
                        const compareResult = subValidationResult.compare(bestMatch.validationResult);
                        if (compareResult > 0) {
                            // our node is the best matching so far
                            bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };
                        }
                        else if (compareResult === 0) {
                            // there's already a best matching but we are as good
                            bestMatch.matchingSchemas.merge(subMatchingSchemas);
                            bestMatch.validationResult.mergeEnumValues(subValidationResult);
                        }
                    }
                }
            }
            if (matches.length > 1 && maxOneMatch) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: 1 },
                    message: t("Matches multiple schemas when only one must validate.")
                });
            }
            if (bestMatch) {
                validationResult.merge(bestMatch.validationResult);
                matchingSchemas.merge(bestMatch.matchingSchemas);
            }
            return matches.length;
        };
        if (Array.isArray(schema.anyOf)) {
            testAlternatives(schema.anyOf, false);
        }
        if (Array.isArray(schema.oneOf)) {
            testAlternatives(schema.oneOf, true);
        }
        const testBranch = (schema) => {
            const subValidationResult = new ValidationResult();
            const subMatchingSchemas = matchingSchemas.newSub();
            validate(node, asSchema(schema), subValidationResult, subMatchingSchemas, context);
            validationResult.merge(subValidationResult);
            matchingSchemas.merge(subMatchingSchemas);
        };
        const testCondition = (ifSchema, thenSchema, elseSchema) => {
            const subSchema = asSchema(ifSchema);
            const subValidationResult = new ValidationResult();
            const subMatchingSchemas = matchingSchemas.newSub();
            validate(node, subSchema, subValidationResult, subMatchingSchemas, context);
            matchingSchemas.merge(subMatchingSchemas);
            validationResult.mergeProcessedProperties(subValidationResult);
            if (!subValidationResult.hasProblems()) {
                if (thenSchema) {
                    testBranch(thenSchema);
                }
            }
            else if (elseSchema) {
                testBranch(elseSchema);
            }
        };
        const ifSchema = asSchema(schema.if);
        if (ifSchema) {
            testCondition(ifSchema, asSchema(schema.then), asSchema(schema.else));
        }
        if (Array.isArray(schema.enum)) {
            const val = getNodeValue(node);
            let enumValueMatch = false;
            for (const e of schema.enum) {
                if (equals(val, e)) {
                    enumValueMatch = true;
                    break;
                }
            }
            validationResult.enumValues = schema.enum;
            validationResult.enumValueMatch = enumValueMatch;
            if (!enumValueMatch) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema.errorMessage || t('Value is not accepted. Valid values: {0}.', schema.enum.map(v => JSON.stringify(v)).join(', '))
                });
            }
        }
        if (isDefined(schema.const)) {
            const val = getNodeValue(node);
            if (!equals(val, schema.const)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema.errorMessage || t('Value must be {0}.', JSON.stringify(schema.const))
                });
                validationResult.enumValueMatch = false;
            }
            else {
                validationResult.enumValueMatch = true;
            }
            validationResult.enumValues = [schema.const];
        }
        let deprecationMessage = schema.deprecationMessage;
        if (deprecationMessage || schema.deprecated) {
            deprecationMessage = deprecationMessage || t('Value is deprecated');
            let targetNode = node.parent?.type === 'property' ? node.parent : node;
            validationResult.problems.push({
                location: { offset: targetNode.offset, length: targetNode.length },
                severity: DiagnosticSeverity.Warning,
                message: deprecationMessage,
                code: ErrorCode.Deprecated
            });
        }
    }
    function _validateNumberNode(node) {
        const val = node.value;
        function normalizeFloats(float) {
            const parts = /^(-?\d+)(?:\.(\d+))?(?:e([-+]\d+))?$/.exec(float.toString());
            return parts && {
                value: Number(parts[1] + (parts[2] || '')),
                multiplier: (parts[2]?.length || 0) - (parseInt(parts[3]) || 0)
            };
        }
        ;
        if (isNumber(schema.multipleOf)) {
            let remainder = -1;
            if (Number.isInteger(schema.multipleOf)) {
                remainder = val % schema.multipleOf;
            }
            else {
                let normMultipleOf = normalizeFloats(schema.multipleOf);
                let normValue = normalizeFloats(val);
                if (normMultipleOf && normValue) {
                    const multiplier = 10 ** Math.abs(normValue.multiplier - normMultipleOf.multiplier);
                    if (normValue.multiplier < normMultipleOf.multiplier) {
                        normValue.value *= multiplier;
                    }
                    else {
                        normMultipleOf.value *= multiplier;
                    }
                    remainder = normValue.value % normMultipleOf.value;
                }
            }
            if (remainder !== 0) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: t('Value is not divisible by {0}.', schema.multipleOf)
                });
            }
        }
        function getExclusiveLimit(limit, exclusive) {
            if (isNumber(exclusive)) {
                return exclusive;
            }
            if (isBoolean(exclusive) && exclusive) {
                return limit;
            }
            return undefined;
        }
        function getLimit(limit, exclusive) {
            if (!isBoolean(exclusive) || !exclusive) {
                return limit;
            }
            return undefined;
        }
        const exclusiveMinimum = getExclusiveLimit(schema.minimum, schema.exclusiveMinimum);
        if (isNumber(exclusiveMinimum) && val <= exclusiveMinimum) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('Value is below the exclusive minimum of {0}.', exclusiveMinimum)
            });
        }
        const exclusiveMaximum = getExclusiveLimit(schema.maximum, schema.exclusiveMaximum);
        if (isNumber(exclusiveMaximum) && val >= exclusiveMaximum) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('Value is above the exclusive maximum of {0}.', exclusiveMaximum)
            });
        }
        const minimum = getLimit(schema.minimum, schema.exclusiveMinimum);
        if (isNumber(minimum) && val < minimum) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('Value is below the minimum of {0}.', minimum)
            });
        }
        const maximum = getLimit(schema.maximum, schema.exclusiveMaximum);
        if (isNumber(maximum) && val > maximum) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('Value is above the maximum of {0}.', maximum)
            });
        }
    }
    function _validateStringNode(node) {
        if (isNumber(schema.minLength) && stringLength(node.value) < schema.minLength) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('String is shorter than the minimum length of {0}.', schema.minLength)
            });
        }
        if (isNumber(schema.maxLength) && stringLength(node.value) > schema.maxLength) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('String is longer than the maximum length of {0}.', schema.maxLength)
            });
        }
        if (isString(schema.pattern)) {
            const regex = extendedRegExp(schema.pattern);
            if (!(regex?.test(node.value))) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: schema.patternErrorMessage || schema.errorMessage || t('String does not match the pattern of "{0}".', schema.pattern)
                });
            }
        }
        if (schema.format) {
            switch (schema.format) {
                case 'uri':
                case 'uri-reference':
                    {
                        let errorMessage;
                        if (!node.value) {
                            errorMessage = t('URI expected.');
                        }
                        else {
                            const match = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/.exec(node.value);
                            if (!match) {
                                errorMessage = t('URI is expected.');
                            }
                            else if (!match[2] && schema.format === 'uri') {
                                errorMessage = t('URI with a scheme is expected.');
                            }
                        }
                        if (errorMessage) {
                            validationResult.problems.push({
                                location: { offset: node.offset, length: node.length },
                                message: schema.patternErrorMessage || schema.errorMessage || t('String is not a URI: {0}', errorMessage)
                            });
                        }
                    }
                    break;
                case 'color-hex':
                case 'date-time':
                case 'date':
                case 'time':
                case 'email':
                case 'hostname':
                case 'ipv4':
                case 'ipv6':
                    const format = formats[schema.format];
                    if (!node.value || !format.pattern.exec(node.value)) {
                        validationResult.problems.push({
                            location: { offset: node.offset, length: node.length },
                            message: schema.patternErrorMessage || schema.errorMessage || format.errorMessage
                        });
                    }
                default:
            }
        }
    }
    function _validateArrayNode(node) {
        let prefixItemsSchemas;
        let additionalItemSchema;
        if (context.schemaDraft >= SchemaDraft.v2020_12) {
            prefixItemsSchemas = schema.prefixItems;
            additionalItemSchema = !Array.isArray(schema.items) ? schema.items : undefined;
        }
        else {
            prefixItemsSchemas = Array.isArray(schema.items) ? schema.items : undefined;
            additionalItemSchema = !Array.isArray(schema.items) ? schema.items : schema.additionalItems;
        }
        let index = 0;
        if (prefixItemsSchemas !== undefined) {
            const max = Math.min(prefixItemsSchemas.length, node.items.length);
            for (; index < max; index++) {
                const subSchemaRef = prefixItemsSchemas[index];
                const subSchema = asSchema(subSchemaRef);
                const itemValidationResult = new ValidationResult();
                const item = node.items[index];
                if (item) {
                    validate(item, subSchema, itemValidationResult, matchingSchemas, context);
                    validationResult.mergePropertyMatch(itemValidationResult);
                }
                validationResult.processedProperties.add(String(index));
            }
        }
        if (additionalItemSchema !== undefined && index < node.items.length) {
            if (typeof additionalItemSchema === 'boolean') {
                if (additionalItemSchema === false) {
                    validationResult.problems.push({
                        location: { offset: node.offset, length: node.length },
                        message: t('Array has too many items according to schema. Expected {0} or fewer.', index)
                    });
                }
                for (; index < node.items.length; index++) {
                    validationResult.processedProperties.add(String(index));
                    validationResult.propertiesValueMatches++;
                }
            }
            else {
                for (; index < node.items.length; index++) {
                    const itemValidationResult = new ValidationResult();
                    validate(node.items[index], additionalItemSchema, itemValidationResult, matchingSchemas, context);
                    validationResult.mergePropertyMatch(itemValidationResult);
                    validationResult.processedProperties.add(String(index));
                }
            }
        }
        const containsSchema = asSchema(schema.contains);
        if (containsSchema) {
            let containsCount = 0;
            for (let index = 0; index < node.items.length; index++) {
                const item = node.items[index];
                const itemValidationResult = new ValidationResult();
                validate(item, containsSchema, itemValidationResult, NoOpSchemaCollector.instance, context);
                if (!itemValidationResult.hasProblems()) {
                    containsCount++;
                    if (context.schemaDraft >= SchemaDraft.v2020_12) {
                        validationResult.processedProperties.add(String(index));
                    }
                }
            }
            if (containsCount === 0 && !isNumber(schema.minContains)) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: schema.errorMessage || t('Array does not contain required item.')
                });
            }
            if (isNumber(schema.minContains) && containsCount < schema.minContains) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: t('Array has too few items that match the contains contraint. Expected {0} or more.', schema.minContains)
                });
            }
            if (isNumber(schema.maxContains) && containsCount > schema.maxContains) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: t('Array has too many items that match the contains contraint. Expected {0} or less.', schema.maxContains)
                });
            }
        }
        const unevaluatedItems = schema.unevaluatedItems;
        if (unevaluatedItems !== undefined) {
            for (let i = 0; i < node.items.length; i++) {
                if (!validationResult.processedProperties.has(String(i))) {
                    if (unevaluatedItems === false) {
                        validationResult.problems.push({
                            location: { offset: node.offset, length: node.length },
                            message: t('Item does not match any validation rule from the array.')
                        });
                    }
                    else {
                        const itemValidationResult = new ValidationResult();
                        validate(node.items[i], schema.unevaluatedItems, itemValidationResult, matchingSchemas, context);
                        validationResult.mergePropertyMatch(itemValidationResult);
                    }
                }
                validationResult.processedProperties.add(String(i));
                validationResult.propertiesValueMatches++;
            }
        }
        if (isNumber(schema.minItems) && node.items.length < schema.minItems) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('Array has too few items. Expected {0} or more.', schema.minItems)
            });
        }
        if (isNumber(schema.maxItems) && node.items.length > schema.maxItems) {
            validationResult.problems.push({
                location: { offset: node.offset, length: node.length },
                message: t('Array has too many items. Expected {0} or fewer.', schema.maxItems)
            });
        }
        if (schema.uniqueItems === true) {
            const values = getNodeValue(node);
            function hasDuplicates() {
                for (let i = 0; i < values.length - 1; i++) {
                    const value = values[i];
                    for (let j = i + 1; j < values.length; j++) {
                        if (equals(value, values[j])) {
                            return true;
                        }
                    }
                }
                return false;
            }
            if (hasDuplicates()) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: t('Array has duplicate items.')
                });
            }
        }
    }
    function _validateObjectNode(node) {
        const seenKeys = Object.create(null);
        const unprocessedProperties = new Set();
        for (const propertyNode of node.properties) {
            const key = propertyNode.keyNode.value;
            seenKeys[key] = propertyNode.valueNode;
            unprocessedProperties.add(key);
        }
        if (Array.isArray(schema.required)) {
            for (const propertyName of schema.required) {
                if (!seenKeys[propertyName]) {
                    const keyNode = node.parent && node.parent.type === 'property' && node.parent.keyNode;
                    const location = keyNode ? { offset: keyNode.offset, length: keyNode.length } : { offset: node.offset, length: 1 };
                    validationResult.problems.push({
                        location: location,
                        message: t('Missing property "{0}".', propertyName)
                    });
                }
            }
        }
        const propertyProcessed = (prop) => {
            unprocessedProperties.delete(prop);
            validationResult.processedProperties.add(prop);
        };
        if (schema.properties) {
            for (const propertyName of Object.keys(schema.properties)) {
                propertyProcessed(propertyName);
                const propertySchema = schema.properties[propertyName];
                const child = seenKeys[propertyName];
                if (child) {
                    if (isBoolean(propertySchema)) {
                        if (!propertySchema) {
                            const propertyNode = child.parent;
                            validationResult.problems.push({
                                location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                                message: schema.errorMessage || t('Property {0} is not allowed.', propertyName)
                            });
                        }
                        else {
                            validationResult.propertiesMatches++;
                            validationResult.propertiesValueMatches++;
                        }
                    }
                    else {
                        const propertyValidationResult = new ValidationResult();
                        validate(child, propertySchema, propertyValidationResult, matchingSchemas, context);
                        validationResult.mergePropertyMatch(propertyValidationResult);
                    }
                }
            }
        }
        if (schema.patternProperties) {
            for (const propertyPattern of Object.keys(schema.patternProperties)) {
                const regex = extendedRegExp(propertyPattern);
                if (regex) {
                    const processed = [];
                    for (const propertyName of unprocessedProperties) {
                        if (regex.test(propertyName)) {
                            processed.push(propertyName);
                            const child = seenKeys[propertyName];
                            if (child) {
                                const propertySchema = schema.patternProperties[propertyPattern];
                                if (isBoolean(propertySchema)) {
                                    if (!propertySchema) {
                                        const propertyNode = child.parent;
                                        validationResult.problems.push({
                                            location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                                            message: schema.errorMessage || t('Property {0} is not allowed.', propertyName)
                                        });
                                    }
                                    else {
                                        validationResult.propertiesMatches++;
                                        validationResult.propertiesValueMatches++;
                                    }
                                }
                                else {
                                    const propertyValidationResult = new ValidationResult();
                                    validate(child, propertySchema, propertyValidationResult, matchingSchemas, context);
                                    validationResult.mergePropertyMatch(propertyValidationResult);
                                }
                            }
                        }
                    }
                    processed.forEach(propertyProcessed);
                }
            }
        }
        const additionalProperties = schema.additionalProperties;
        if (additionalProperties !== undefined) {
            for (const propertyName of unprocessedProperties) {
                propertyProcessed(propertyName);
                const child = seenKeys[propertyName];
                if (child) {
                    if (additionalProperties === false) {
                        const propertyNode = child.parent;
                        validationResult.problems.push({
                            location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                            message: schema.errorMessage || t('Property {0} is not allowed.', propertyName)
                        });
                    }
                    else if (additionalProperties !== true) {
                        const propertyValidationResult = new ValidationResult();
                        validate(child, additionalProperties, propertyValidationResult, matchingSchemas, context);
                        validationResult.mergePropertyMatch(propertyValidationResult);
                    }
                }
            }
        }
        const unevaluatedProperties = schema.unevaluatedProperties;
        if (unevaluatedProperties !== undefined) {
            const processed = [];
            for (const propertyName of unprocessedProperties) {
                if (!validationResult.processedProperties.has(propertyName)) {
                    processed.push(propertyName);
                    const child = seenKeys[propertyName];
                    if (child) {
                        if (unevaluatedProperties === false) {
                            const propertyNode = child.parent;
                            validationResult.problems.push({
                                location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },
                                message: schema.errorMessage || t('Property {0} is not allowed.', propertyName)
                            });
                        }
                        else if (unevaluatedProperties !== true) {
                            const propertyValidationResult = new ValidationResult();
                            validate(child, unevaluatedProperties, propertyValidationResult, matchingSchemas, context);
                            validationResult.mergePropertyMatch(propertyValidationResult);
                        }
                    }
                }
            }
            processed.forEach(propertyProcessed);
        }
        if (isNumber(schema.maxProperties)) {
            if (node.properties.length > schema.maxProperties) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: t('Object has more properties than limit of {0}.', schema.maxProperties)
                });
            }
        }
        if (isNumber(schema.minProperties)) {
            if (node.properties.length < schema.minProperties) {
                validationResult.problems.push({
                    location: { offset: node.offset, length: node.length },
                    message: t('Object has fewer properties than the required number of {0}', schema.minProperties)
                });
            }
        }
        if (schema.dependentRequired) {
            for (const key in schema.dependentRequired) {
                const prop = seenKeys[key];
                const propertyDeps = schema.dependentRequired[key];
                if (prop && Array.isArray(propertyDeps)) {
                    _validatePropertyDependencies(key, propertyDeps);
                }
            }
        }
        if (schema.dependentSchemas) {
            for (const key in schema.dependentSchemas) {
                const prop = seenKeys[key];
                const propertyDeps = schema.dependentSchemas[key];
                if (prop && isObject(propertyDeps)) {
                    _validatePropertyDependencies(key, propertyDeps);
                }
            }
        }
        if (schema.dependencies) {
            for (const key in schema.dependencies) {
                const prop = seenKeys[key];
                if (prop) {
                    _validatePropertyDependencies(key, schema.dependencies[key]);
                }
            }
        }
        const propertyNames = asSchema(schema.propertyNames);
        if (propertyNames) {
            for (const f of node.properties) {
                const key = f.keyNode;
                if (key) {
                    validate(key, propertyNames, validationResult, NoOpSchemaCollector.instance, context);
                }
            }
        }
        function _validatePropertyDependencies(key, propertyDep) {
            if (Array.isArray(propertyDep)) {
                for (const requiredProp of propertyDep) {
                    if (!seenKeys[requiredProp]) {
                        validationResult.problems.push({
                            location: { offset: node.offset, length: node.length },
                            message: t('Object is missing property {0} required by property {1}.', requiredProp, key)
                        });
                    }
                    else {
                        validationResult.propertiesValueMatches++;
                    }
                }
            }
            else {
                const propertySchema = asSchema(propertyDep);
                if (propertySchema) {
                    const propertyValidationResult = new ValidationResult();
                    validate(node, propertySchema, propertyValidationResult, matchingSchemas, context);
                    validationResult.mergePropertyMatch(propertyValidationResult);
                }
            }
        }
    }
}
function parse(textDocument, config) {
    const problems = [];
    let lastProblemOffset = -1;
    const text = textDocument.getText();
    const scanner = main.createScanner(text, false);
    const commentRanges = config && config.collectComments ? [] : undefined;
    function _scanNext() {
        while (true) {
            const token = scanner.scan();
            _checkScanError();
            switch (token) {
                case 12 /* Json.SyntaxKind.LineCommentTrivia */:
                case 13 /* Json.SyntaxKind.BlockCommentTrivia */:
                    if (Array.isArray(commentRanges)) {
                        commentRanges.push(Range.create(textDocument.positionAt(scanner.getTokenOffset()), textDocument.positionAt(scanner.getTokenOffset() + scanner.getTokenLength())));
                    }
                    break;
                case 15 /* Json.SyntaxKind.Trivia */:
                case 14 /* Json.SyntaxKind.LineBreakTrivia */:
                    break;
                default:
                    return token;
            }
        }
    }
    function _accept(token) {
        if (scanner.getToken() === token) {
            _scanNext();
            return true;
        }
        return false;
    }
    function _errorAtRange(message, code, startOffset, endOffset, severity = DiagnosticSeverity.Error) {
        if (problems.length === 0 || startOffset !== lastProblemOffset) {
            const range = Range.create(textDocument.positionAt(startOffset), textDocument.positionAt(endOffset));
            problems.push(Diagnostic.create(range, message, severity, code, textDocument.languageId));
            lastProblemOffset = startOffset;
        }
    }
    function _error(message, code, node = undefined, skipUntilAfter = [], skipUntil = []) {
        let start = scanner.getTokenOffset();
        let end = scanner.getTokenOffset() + scanner.getTokenLength();
        if (start === end && start > 0) {
            start--;
            while (start > 0 && /\s/.test(text.charAt(start))) {
                start--;
            }
            end = start + 1;
        }
        _errorAtRange(message, code, start, end);
        if (node) {
            _finalize(node, false);
        }
        if (skipUntilAfter.length + skipUntil.length > 0) {
            let token = scanner.getToken();
            while (token !== 17 /* Json.SyntaxKind.EOF */) {
                if (skipUntilAfter.indexOf(token) !== -1) {
                    _scanNext();
                    break;
                }
                else if (skipUntil.indexOf(token) !== -1) {
                    break;
                }
                token = _scanNext();
            }
        }
        return node;
    }
    function _checkScanError() {
        switch (scanner.getTokenError()) {
            case 4 /* Json.ScanError.InvalidUnicode */:
                _error(t('Invalid unicode sequence in string.'), ErrorCode.InvalidUnicode);
                return true;
            case 5 /* Json.ScanError.InvalidEscapeCharacter */:
                _error(t('Invalid escape character in string.'), ErrorCode.InvalidEscapeCharacter);
                return true;
            case 3 /* Json.ScanError.UnexpectedEndOfNumber */:
                _error(t('Unexpected end of number.'), ErrorCode.UnexpectedEndOfNumber);
                return true;
            case 1 /* Json.ScanError.UnexpectedEndOfComment */:
                _error(t('Unexpected end of comment.'), ErrorCode.UnexpectedEndOfComment);
                return true;
            case 2 /* Json.ScanError.UnexpectedEndOfString */:
                _error(t('Unexpected end of string.'), ErrorCode.UnexpectedEndOfString);
                return true;
            case 6 /* Json.ScanError.InvalidCharacter */:
                _error(t('Invalid characters in string. Control characters must be escaped.'), ErrorCode.InvalidCharacter);
                return true;
        }
        return false;
    }
    function _finalize(node, scanNext) {
        node.length = scanner.getTokenOffset() + scanner.getTokenLength() - node.offset;
        if (scanNext) {
            _scanNext();
        }
        return node;
    }
    function _parseArray(parent) {
        if (scanner.getToken() !== 3 /* Json.SyntaxKind.OpenBracketToken */) {
            return undefined;
        }
        const node = new ArrayASTNodeImpl(parent, scanner.getTokenOffset());
        _scanNext(); // consume OpenBracketToken
        const count = 0;
        let needsComma = false;
        while (scanner.getToken() !== 4 /* Json.SyntaxKind.CloseBracketToken */ && scanner.getToken() !== 17 /* Json.SyntaxKind.EOF */) {
            if (scanner.getToken() === 5 /* Json.SyntaxKind.CommaToken */) {
                if (!needsComma) {
                    _error(t('Value expected'), ErrorCode.ValueExpected);
                }
                const commaOffset = scanner.getTokenOffset();
                _scanNext(); // consume comma
                if (scanner.getToken() === 4 /* Json.SyntaxKind.CloseBracketToken */) {
                    if (needsComma) {
                        _errorAtRange(t('Trailing comma'), ErrorCode.TrailingComma, commaOffset, commaOffset + 1);
                    }
                    continue;
                }
            }
            else if (needsComma) {
                _error(t('Expected comma'), ErrorCode.CommaExpected);
            }
            const item = _parseValue(node);
            if (!item) {
                _error(t('Value expected'), ErrorCode.ValueExpected, undefined, [], [4 /* Json.SyntaxKind.CloseBracketToken */, 5 /* Json.SyntaxKind.CommaToken */]);
            }
            else {
                node.items.push(item);
            }
            needsComma = true;
        }
        if (scanner.getToken() !== 4 /* Json.SyntaxKind.CloseBracketToken */) {
            return _error(t('Expected comma or closing bracket'), ErrorCode.CommaOrCloseBacketExpected, node);
        }
        return _finalize(node, true);
    }
    const keyPlaceholder = new StringASTNodeImpl(undefined, 0, 0);
    function _parseProperty(parent, keysSeen) {
        const node = new PropertyASTNodeImpl(parent, scanner.getTokenOffset(), keyPlaceholder);
        let key = _parseString(node);
        if (!key) {
            if (scanner.getToken() === 16 /* Json.SyntaxKind.Unknown */) {
                // give a more helpful error message
                _error(t('Property keys must be doublequoted'), ErrorCode.PropertyKeysMustBeDoublequoted);
                const keyNode = new StringASTNodeImpl(node, scanner.getTokenOffset(), scanner.getTokenLength());
                keyNode.value = scanner.getTokenValue();
                key = keyNode;
                _scanNext(); // consume Unknown
            }
            else {
                return undefined;
            }
        }
        node.keyNode = key;
        // For JSON files that forbid code comments, there is a convention to use the key name "//" to add comments.
        // Multiple instances of "//" are okay.
        if (key.value !== "//") {
            const seen = keysSeen[key.value];
            if (seen) {
                _errorAtRange(t("Duplicate object key"), ErrorCode.DuplicateKey, node.keyNode.offset, node.keyNode.offset + node.keyNode.length, DiagnosticSeverity.Warning);
                if (isObject(seen)) {
                    _errorAtRange(t("Duplicate object key"), ErrorCode.DuplicateKey, seen.keyNode.offset, seen.keyNode.offset + seen.keyNode.length, DiagnosticSeverity.Warning);
                }
                keysSeen[key.value] = true; // if the same key is duplicate again, avoid duplicate error reporting
            }
            else {
                keysSeen[key.value] = node;
            }
        }
        if (scanner.getToken() === 6 /* Json.SyntaxKind.ColonToken */) {
            node.colonOffset = scanner.getTokenOffset();
            _scanNext(); // consume ColonToken
        }
        else {
            _error(t('Colon expected'), ErrorCode.ColonExpected);
            if (scanner.getToken() === 10 /* Json.SyntaxKind.StringLiteral */ && textDocument.positionAt(key.offset + key.length).line < textDocument.positionAt(scanner.getTokenOffset()).line) {
                node.length = key.length;
                return node;
            }
        }
        const value = _parseValue(node);
        if (!value) {
            return _error(t('Value expected'), ErrorCode.ValueExpected, node, [], [2 /* Json.SyntaxKind.CloseBraceToken */, 5 /* Json.SyntaxKind.CommaToken */]);
        }
        node.valueNode = value;
        node.length = value.offset + value.length - node.offset;
        return node;
    }
    function _parseObject(parent) {
        if (scanner.getToken() !== 1 /* Json.SyntaxKind.OpenBraceToken */) {
            return undefined;
        }
        const node = new ObjectASTNodeImpl(parent, scanner.getTokenOffset());
        const keysSeen = Object.create(null);
        _scanNext(); // consume OpenBraceToken
        let needsComma = false;
        while (scanner.getToken() !== 2 /* Json.SyntaxKind.CloseBraceToken */ && scanner.getToken() !== 17 /* Json.SyntaxKind.EOF */) {
            if (scanner.getToken() === 5 /* Json.SyntaxKind.CommaToken */) {
                if (!needsComma) {
                    _error(t('Property expected'), ErrorCode.PropertyExpected);
                }
                const commaOffset = scanner.getTokenOffset();
                _scanNext(); // consume comma
                if (scanner.getToken() === 2 /* Json.SyntaxKind.CloseBraceToken */) {
                    if (needsComma) {
                        _errorAtRange(t('Trailing comma'), ErrorCode.TrailingComma, commaOffset, commaOffset + 1);
                    }
                    continue;
                }
            }
            else if (needsComma) {
                _error(t('Expected comma'), ErrorCode.CommaExpected);
            }
            const property = _parseProperty(node, keysSeen);
            if (!property) {
                _error(t('Property expected'), ErrorCode.PropertyExpected, undefined, [], [2 /* Json.SyntaxKind.CloseBraceToken */, 5 /* Json.SyntaxKind.CommaToken */]);
            }
            else {
                node.properties.push(property);
            }
            needsComma = true;
        }
        if (scanner.getToken() !== 2 /* Json.SyntaxKind.CloseBraceToken */) {
            return _error(t('Expected comma or closing brace'), ErrorCode.CommaOrCloseBraceExpected, node);
        }
        return _finalize(node, true);
    }
    function _parseString(parent) {
        if (scanner.getToken() !== 10 /* Json.SyntaxKind.StringLiteral */) {
            return undefined;
        }
        const node = new StringASTNodeImpl(parent, scanner.getTokenOffset());
        node.value = scanner.getTokenValue();
        return _finalize(node, true);
    }
    function _parseNumber(parent) {
        if (scanner.getToken() !== 11 /* Json.SyntaxKind.NumericLiteral */) {
            return undefined;
        }
        const node = new NumberASTNodeImpl(parent, scanner.getTokenOffset());
        if (scanner.getTokenError() === 0 /* Json.ScanError.None */) {
            const tokenValue = scanner.getTokenValue();
            try {
                const numberValue = JSON.parse(tokenValue);
                if (!isNumber(numberValue)) {
                    return _error(t('Invalid number format.'), ErrorCode.Undefined, node);
                }
                node.value = numberValue;
            }
            catch (e) {
                return _error(t('Invalid number format.'), ErrorCode.Undefined, node);
            }
            node.isInteger = tokenValue.indexOf('.') === -1;
        }
        return _finalize(node, true);
    }
    function _parseLiteral(parent) {
        let node;
        switch (scanner.getToken()) {
            case 7 /* Json.SyntaxKind.NullKeyword */:
                return _finalize(new NullASTNodeImpl(parent, scanner.getTokenOffset()), true);
            case 8 /* Json.SyntaxKind.TrueKeyword */:
                return _finalize(new BooleanASTNodeImpl(parent, true, scanner.getTokenOffset()), true);
            case 9 /* Json.SyntaxKind.FalseKeyword */:
                return _finalize(new BooleanASTNodeImpl(parent, false, scanner.getTokenOffset()), true);
            default:
                return undefined;
        }
    }
    function _parseValue(parent) {
        return _parseArray(parent) || _parseObject(parent) || _parseString(parent) || _parseNumber(parent) || _parseLiteral(parent);
    }
    let _root = undefined;
    const token = _scanNext();
    if (token !== 17 /* Json.SyntaxKind.EOF */) {
        _root = _parseValue(_root);
        if (!_root) {
            _error(t('Expected a JSON object, array or literal.'), ErrorCode.Undefined);
        }
        else if (scanner.getToken() !== 17 /* Json.SyntaxKind.EOF */) {
            _error(t('End of file expected.'), ErrorCode.Undefined);
        }
    }
    return new JSONDocument(_root, problems, commentRanges);
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/json.js
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
function stringifyObject(obj, indent, stringifyLiteral) {
    if (obj !== null && typeof obj === 'object') {
        const newIndent = indent + '\t';
        if (Array.isArray(obj)) {
            if (obj.length === 0) {
                return '[]';
            }
            let result = '[\n';
            for (let i = 0; i < obj.length; i++) {
                result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);
                if (i < obj.length - 1) {
                    result += ',';
                }
                result += '\n';
            }
            result += indent + ']';
            return result;
        }
        else {
            const keys = Object.keys(obj);
            if (keys.length === 0) {
                return '{}';
            }
            let result = '{\n';
            for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                result += newIndent + JSON.stringify(key) + ': ' + stringifyObject(obj[key], newIndent, stringifyLiteral);
                if (i < keys.length - 1) {
                    result += ',';
                }
                result += '\n';
            }
            result += indent + '}';
            return result;
        }
    }
    return stringifyLiteral(obj);
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonCompletion.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







const valueCommitCharacters = [',', '}', ']'];
const propertyCommitCharacters = [':'];
class JSONCompletion {
    constructor(schemaService, contributions = [], promiseConstructor = Promise, clientCapabilities = {}) {
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promiseConstructor = promiseConstructor;
        this.clientCapabilities = clientCapabilities;
    }
    doResolve(item) {
        for (let i = this.contributions.length - 1; i >= 0; i--) {
            const resolveCompletion = this.contributions[i].resolveCompletion;
            if (resolveCompletion) {
                const resolver = resolveCompletion(item);
                if (resolver) {
                    return resolver;
                }
            }
        }
        return this.promiseConstructor.resolve(item);
    }
    doComplete(document, position, doc) {
        const result = {
            items: [],
            isIncomplete: false
        };
        const text = document.getText();
        const offset = document.offsetAt(position);
        let node = doc.getNodeFromOffset(offset, true);
        if (this.isInComment(document, node ? node.offset : 0, offset)) {
            return Promise.resolve(result);
        }
        if (node && (offset === node.offset + node.length) && offset > 0) {
            const ch = text[offset - 1];
            if (node.type === 'object' && ch === '}' || node.type === 'array' && ch === ']') {
                // after ] or }
                node = node.parent;
            }
        }
        const currentWord = this.getCurrentWord(document, offset);
        let overwriteRange;
        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {
            overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
        }
        else {
            let overwriteStart = offset - currentWord.length;
            if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
                overwriteStart--;
            }
            overwriteRange = Range.create(document.positionAt(overwriteStart), position);
        }
        const supportsCommitCharacters = false; //this.doesSupportsCommitCharacters(); disabled for now, waiting for new API: https://github.com/microsoft/vscode/issues/42544
        const proposed = new Map();
        const collector = {
            add: (suggestion) => {
                let label = suggestion.label;
                const existing = proposed.get(label);
                if (!existing) {
                    label = label.replace(/[\n]/g, '↵');
                    if (label.length > 60) {
                        const shortendedLabel = label.substr(0, 57).trim() + '...';
                        if (!proposed.has(shortendedLabel)) {
                            label = shortendedLabel;
                        }
                    }
                    suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);
                    if (supportsCommitCharacters) {
                        suggestion.commitCharacters = suggestion.kind === CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;
                    }
                    suggestion.label = label;
                    proposed.set(label, suggestion);
                    result.items.push(suggestion);
                }
                else {
                    if (!existing.documentation) {
                        existing.documentation = suggestion.documentation;
                    }
                    if (!existing.detail) {
                        existing.detail = suggestion.detail;
                    }
                    if (!existing.labelDetails) {
                        existing.labelDetails = suggestion.labelDetails;
                    }
                }
            },
            setAsIncomplete: () => {
                result.isIncomplete = true;
            },
            error: (message) => {
                console.error(message);
            },
            getNumberOfProposals: () => {
                return result.items.length;
            }
        };
        return this.schemaService.getSchemaForResource(document.uri, doc).then((schema) => {
            const collectionPromises = [];
            let addValue = true;
            let currentKey = '';
            let currentProperty = undefined;
            if (node) {
                if (node.type === 'string') {
                    const parent = node.parent;
                    if (parent && parent.type === 'property' && parent.keyNode === node) {
                        addValue = !parent.valueNode;
                        currentProperty = parent;
                        currentKey = text.substr(node.offset + 1, node.length - 2);
                        if (parent) {
                            node = parent.parent;
                        }
                    }
                }
            }
            // proposals for properties
            if (node && node.type === 'object') {
                // don't suggest keys when the cursor is just before the opening curly brace
                if (node.offset === offset) {
                    return result;
                }
                // don't suggest properties that are already present
                const properties = node.properties;
                properties.forEach(p => {
                    if (!currentProperty || currentProperty !== p) {
                        proposed.set(p.keyNode.value, CompletionItem.create('__'));
                    }
                });
                let separatorAfter = '';
                if (addValue) {
                    separatorAfter = this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));
                }
                if (schema) {
                    // property proposals with schema
                    this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter, collector);
                }
                else {
                    // property proposals without schema
                    this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);
                }
                const location = getNodePath(node);
                this.contributions.forEach((contribution) => {
                    const collectPromise = contribution.collectPropertyCompletions(document.uri, location, currentWord, addValue, separatorAfter === '', collector);
                    if (collectPromise) {
                        collectionPromises.push(collectPromise);
                    }
                });
                if ((!schema && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"')) {
                    collector.add({
                        kind: CompletionItemKind.Property,
                        label: this.getLabelForValue(currentWord),
                        insertText: this.getInsertTextForProperty(currentWord, undefined, false, separatorAfter),
                        insertTextFormat: InsertTextFormat.Snippet, documentation: '',
                    });
                    collector.setAsIncomplete();
                }
            }
            // proposals for values
            const types = {};
            if (schema) {
                // value proposals with schema
                this.getValueCompletions(schema, doc, node, offset, document, collector, types);
            }
            else {
                // value proposals without schema
                this.getSchemaLessValueCompletions(doc, node, offset, document, collector);
            }
            if (this.contributions.length > 0) {
                this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);
            }
            return this.promiseConstructor.all(collectionPromises).then(() => {
                if (collector.getNumberOfProposals() === 0) {
                    let offsetForSeparator = offset;
                    if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {
                        offsetForSeparator = node.offset + node.length;
                    }
                    const separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
                    this.addFillerValueCompletions(types, separatorAfter, collector);
                }
                return result;
            });
        });
    }
    getPropertyCompletions(schema, doc, node, addValue, separatorAfter, collector) {
        const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);
        matchingSchemas.forEach((s) => {
            if (s.node === node && !s.inverted) {
                const schemaProperties = s.schema.properties;
                if (schemaProperties) {
                    Object.keys(schemaProperties).forEach((key) => {
                        const propertySchema = schemaProperties[key];
                        if (typeof propertySchema === 'object' && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {
                            const proposal = {
                                kind: CompletionItemKind.Property,
                                label: key,
                                insertText: this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),
                                insertTextFormat: InsertTextFormat.Snippet,
                                filterText: this.getFilterTextForValue(key),
                                documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || '',
                            };
                            if (propertySchema.suggestSortText !== undefined) {
                                proposal.sortText = propertySchema.suggestSortText;
                            }
                            if (proposal.insertText && endsWith(proposal.insertText, `$1${separatorAfter}`)) {
                                proposal.command = {
                                    title: 'Suggest',
                                    command: 'editor.action.triggerSuggest'
                                };
                            }
                            collector.add(proposal);
                        }
                    });
                }
                const schemaPropertyNames = s.schema.propertyNames;
                if (typeof schemaPropertyNames === 'object' && !schemaPropertyNames.deprecationMessage && !schemaPropertyNames.doNotSuggest) {
                    const propertyNameCompletionItem = (name, enumDescription = undefined) => {
                        const proposal = {
                            kind: CompletionItemKind.Property,
                            label: name,
                            insertText: this.getInsertTextForProperty(name, undefined, addValue, separatorAfter),
                            insertTextFormat: InsertTextFormat.Snippet,
                            filterText: this.getFilterTextForValue(name),
                            documentation: enumDescription || this.fromMarkup(schemaPropertyNames.markdownDescription) || schemaPropertyNames.description || '',
                        };
                        if (schemaPropertyNames.suggestSortText !== undefined) {
                            proposal.sortText = schemaPropertyNames.suggestSortText;
                        }
                        if (proposal.insertText && endsWith(proposal.insertText, `$1${separatorAfter}`)) {
                            proposal.command = {
                                title: 'Suggest',
                                command: 'editor.action.triggerSuggest'
                            };
                        }
                        collector.add(proposal);
                    };
                    if (schemaPropertyNames.enum) {
                        for (let i = 0; i < schemaPropertyNames.enum.length; i++) {
                            let enumDescription = undefined;
                            if (schemaPropertyNames.markdownEnumDescriptions && i < schemaPropertyNames.markdownEnumDescriptions.length) {
                                enumDescription = this.fromMarkup(schemaPropertyNames.markdownEnumDescriptions[i]);
                            }
                            else if (schemaPropertyNames.enumDescriptions && i < schemaPropertyNames.enumDescriptions.length) {
                                enumDescription = schemaPropertyNames.enumDescriptions[i];
                            }
                            propertyNameCompletionItem(schemaPropertyNames.enum[i], enumDescription);
                        }
                    }
                    if (schemaPropertyNames.const) {
                        propertyNameCompletionItem(schemaPropertyNames.const);
                    }
                }
            }
        });
    }
    getSchemaLessPropertyCompletions(doc, node, currentKey, collector) {
        const collectCompletionsForSimilarObject = (obj) => {
            obj.properties.forEach((p) => {
                const key = p.keyNode.value;
                collector.add({
                    kind: CompletionItemKind.Property,
                    label: key,
                    insertText: this.getInsertTextForValue(key, ''),
                    insertTextFormat: InsertTextFormat.Snippet,
                    filterText: this.getFilterTextForValue(key),
                    documentation: ''
                });
            });
        };
        if (node.parent) {
            if (node.parent.type === 'property') {
                // if the object is a property value, check the tree for other objects that hang under a property of the same name
                const parentKey = node.parent.keyNode.value;
                doc.visit(n => {
                    if (n.type === 'property' && n !== node.parent && n.keyNode.value === parentKey && n.valueNode && n.valueNode.type === 'object') {
                        collectCompletionsForSimilarObject(n.valueNode);
                    }
                    return true;
                });
            }
            else if (node.parent.type === 'array') {
                // if the object is in an array, use all other array elements as similar objects
                node.parent.items.forEach(n => {
                    if (n.type === 'object' && n !== node) {
                        collectCompletionsForSimilarObject(n);
                    }
                });
            }
        }
        else if (node.type === 'object') {
            collector.add({
                kind: CompletionItemKind.Property,
                label: '$schema',
                insertText: this.getInsertTextForProperty('$schema', undefined, true, ''),
                insertTextFormat: InsertTextFormat.Snippet, documentation: '',
                filterText: this.getFilterTextForValue("$schema")
            });
        }
    }
    getSchemaLessValueCompletions(doc, node, offset, document, collector) {
        let offsetForSeparator = offset;
        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {
            offsetForSeparator = node.offset + node.length;
            node = node.parent;
        }
        if (!node) {
            collector.add({
                kind: this.getSuggestionKind('object'),
                label: 'Empty object',
                insertText: this.getInsertTextForValue({}, ''),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: ''
            });
            collector.add({
                kind: this.getSuggestionKind('array'),
                label: 'Empty array',
                insertText: this.getInsertTextForValue([], ''),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: ''
            });
            return;
        }
        const separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
        const collectSuggestionsForValues = (value) => {
            if (value.parent && !contains(value.parent, offset, true)) {
                collector.add({
                    kind: this.getSuggestionKind(value.type),
                    label: this.getLabelTextForMatchingNode(value, document),
                    insertText: this.getInsertTextForMatchingNode(value, document, separatorAfter),
                    insertTextFormat: InsertTextFormat.Snippet, documentation: ''
                });
            }
            if (value.type === 'boolean') {
                this.addBooleanValueCompletion(!value.value, separatorAfter, collector);
            }
        };
        if (node.type === 'property') {
            if (offset > (node.colonOffset || 0)) {
                const valueNode = node.valueNode;
                if (valueNode && (offset > (valueNode.offset + valueNode.length) || valueNode.type === 'object' || valueNode.type === 'array')) {
                    return;
                }
                // suggest values at the same key
                const parentKey = node.keyNode.value;
                doc.visit(n => {
                    if (n.type === 'property' && n.keyNode.value === parentKey && n.valueNode) {
                        collectSuggestionsForValues(n.valueNode);
                    }
                    return true;
                });
                if (parentKey === '$schema' && node.parent && !node.parent.parent) {
                    this.addDollarSchemaCompletions(separatorAfter, collector);
                }
            }
        }
        if (node.type === 'array') {
            if (node.parent && node.parent.type === 'property') {
                // suggest items of an array at the same key
                const parentKey = node.parent.keyNode.value;
                doc.visit((n) => {
                    if (n.type === 'property' && n.keyNode.value === parentKey && n.valueNode && n.valueNode.type === 'array') {
                        n.valueNode.items.forEach(collectSuggestionsForValues);
                    }
                    return true;
                });
            }
            else {
                // suggest items in the same array
                node.items.forEach(collectSuggestionsForValues);
            }
        }
    }
    getValueCompletions(schema, doc, node, offset, document, collector, types) {
        let offsetForSeparator = offset;
        let parentKey = undefined;
        let valueNode = undefined;
        if (node && (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null')) {
            offsetForSeparator = node.offset + node.length;
            valueNode = node;
            node = node.parent;
        }
        if (!node) {
            this.addSchemaValueCompletions(schema.schema, '', collector, types);
            return;
        }
        if ((node.type === 'property') && offset > (node.colonOffset || 0)) {
            const valueNode = node.valueNode;
            if (valueNode && offset > (valueNode.offset + valueNode.length)) {
                return; // we are past the value node
            }
            parentKey = node.keyNode.value;
            node = node.parent;
        }
        if (node && (parentKey !== undefined || node.type === 'array')) {
            const separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
            const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);
            for (const s of matchingSchemas) {
                if (s.node === node && !s.inverted && s.schema) {
                    if (node.type === 'array' && s.schema.items) {
                        let c = collector;
                        if (s.schema.uniqueItems) {
                            const existingValues = new Set();
                            node.children.forEach(n => {
                                if (n.type !== 'array' && n.type !== 'object') {
                                    existingValues.add(this.getLabelForValue(getNodeValue(n)));
                                }
                            });
                            c = {
                                ...collector,
                                add(suggestion) {
                                    if (!existingValues.has(suggestion.label)) {
                                        collector.add(suggestion);
                                    }
                                }
                            };
                        }
                        if (Array.isArray(s.schema.items)) {
                            const index = this.findItemAtOffset(node, document, offset);
                            if (index < s.schema.items.length) {
                                this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, c, types);
                            }
                        }
                        else {
                            this.addSchemaValueCompletions(s.schema.items, separatorAfter, c, types);
                        }
                    }
                    if (parentKey !== undefined) {
                        let propertyMatched = false;
                        if (s.schema.properties) {
                            const propertySchema = s.schema.properties[parentKey];
                            if (propertySchema) {
                                propertyMatched = true;
                                this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                            }
                        }
                        if (s.schema.patternProperties && !propertyMatched) {
                            for (const pattern of Object.keys(s.schema.patternProperties)) {
                                const regex = extendedRegExp(pattern);
                                if (regex?.test(parentKey)) {
                                    propertyMatched = true;
                                    const propertySchema = s.schema.patternProperties[pattern];
                                    this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                                }
                            }
                        }
                        if (s.schema.additionalProperties && !propertyMatched) {
                            const propertySchema = s.schema.additionalProperties;
                            this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                        }
                    }
                }
            }
            if (parentKey === '$schema' && !node.parent) {
                this.addDollarSchemaCompletions(separatorAfter, collector);
            }
            if (types['boolean']) {
                this.addBooleanValueCompletion(true, separatorAfter, collector);
                this.addBooleanValueCompletion(false, separatorAfter, collector);
            }
            if (types['null']) {
                this.addNullValueCompletion(separatorAfter, collector);
            }
        }
    }
    getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises) {
        if (!node) {
            this.contributions.forEach((contribution) => {
                const collectPromise = contribution.collectDefaultCompletions(document.uri, collector);
                if (collectPromise) {
                    collectionPromises.push(collectPromise);
                }
            });
        }
        else {
            if (node.type === 'string' || node.type === 'number' || node.type === 'boolean' || node.type === 'null') {
                node = node.parent;
            }
            if (node && (node.type === 'property') && offset > (node.colonOffset || 0)) {
                const parentKey = node.keyNode.value;
                const valueNode = node.valueNode;
                if ((!valueNode || offset <= (valueNode.offset + valueNode.length)) && node.parent) {
                    const location = getNodePath(node.parent);
                    this.contributions.forEach((contribution) => {
                        const collectPromise = contribution.collectValueCompletions(document.uri, location, parentKey, collector);
                        if (collectPromise) {
                            collectionPromises.push(collectPromise);
                        }
                    });
                }
            }
        }
    }
    addSchemaValueCompletions(schema, separatorAfter, collector, types) {
        if (typeof schema === 'object') {
            this.addEnumValueCompletions(schema, separatorAfter, collector);
            this.addDefaultValueCompletions(schema, separatorAfter, collector);
            this.collectTypes(schema, types);
            if (Array.isArray(schema.allOf)) {
                schema.allOf.forEach(s => this.addSchemaValueCompletions(s, separatorAfter, collector, types));
            }
            if (Array.isArray(schema.anyOf)) {
                schema.anyOf.forEach(s => this.addSchemaValueCompletions(s, separatorAfter, collector, types));
            }
            if (Array.isArray(schema.oneOf)) {
                schema.oneOf.forEach(s => this.addSchemaValueCompletions(s, separatorAfter, collector, types));
            }
        }
    }
    addDefaultValueCompletions(schema, separatorAfter, collector, arrayDepth = 0) {
        let hasProposals = false;
        if (isDefined(schema.default)) {
            let type = schema.type;
            let value = schema.default;
            for (let i = arrayDepth; i > 0; i--) {
                value = [value];
                type = 'array';
            }
            const completionItem = {
                kind: this.getSuggestionKind(type),
                label: this.getLabelForValue(value),
                insertText: this.getInsertTextForValue(value, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet
            };
            if (this.doesSupportsLabelDetails()) {
                completionItem.labelDetails = { description: t('Default value') };
            }
            else {
                completionItem.detail = t('Default value');
            }
            collector.add(completionItem);
            hasProposals = true;
        }
        if (Array.isArray(schema.examples)) {
            schema.examples.forEach(example => {
                let type = schema.type;
                let value = example;
                for (let i = arrayDepth; i > 0; i--) {
                    value = [value];
                    type = 'array';
                }
                collector.add({
                    kind: this.getSuggestionKind(type),
                    label: this.getLabelForValue(value),
                    insertText: this.getInsertTextForValue(value, separatorAfter),
                    insertTextFormat: InsertTextFormat.Snippet
                });
                hasProposals = true;
            });
        }
        if (Array.isArray(schema.defaultSnippets)) {
            schema.defaultSnippets.forEach(s => {
                let type = schema.type;
                let value = s.body;
                let label = s.label;
                let insertText;
                let filterText;
                if (isDefined(value)) {
                    let type = schema.type;
                    for (let i = arrayDepth; i > 0; i--) {
                        value = [value];
                        type = 'array';
                    }
                    insertText = this.getInsertTextForSnippetValue(value, separatorAfter);
                    filterText = this.getFilterTextForSnippetValue(value);
                    label = label || this.getLabelForSnippetValue(value);
                }
                else if (typeof s.bodyText === 'string') {
                    let prefix = '', suffix = '', indent = '';
                    for (let i = arrayDepth; i > 0; i--) {
                        prefix = prefix + indent + '[\n';
                        suffix = suffix + '\n' + indent + ']';
                        indent += '\t';
                        type = 'array';
                    }
                    insertText = prefix + indent + s.bodyText.split('\n').join('\n' + indent) + suffix + separatorAfter;
                    label = label || insertText,
                        filterText = insertText.replace(/[\n]/g, ''); // remove new lines
                }
                else {
                    return;
                }
                collector.add({
                    kind: this.getSuggestionKind(type),
                    label,
                    documentation: this.fromMarkup(s.markdownDescription) || s.description,
                    insertText,
                    insertTextFormat: InsertTextFormat.Snippet,
                    filterText
                });
                hasProposals = true;
            });
        }
        if (!hasProposals && typeof schema.items === 'object' && !Array.isArray(schema.items) && arrayDepth < 5 /* beware of recursion */) {
            this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);
        }
    }
    addEnumValueCompletions(schema, separatorAfter, collector) {
        if (isDefined(schema.const)) {
            collector.add({
                kind: this.getSuggestionKind(schema.type),
                label: this.getLabelForValue(schema.const),
                insertText: this.getInsertTextForValue(schema.const, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                documentation: this.fromMarkup(schema.markdownDescription) || schema.description
            });
        }
        if (Array.isArray(schema.enum)) {
            for (let i = 0, length = schema.enum.length; i < length; i++) {
                const enm = schema.enum[i];
                let documentation = this.fromMarkup(schema.markdownDescription) || schema.description;
                if (schema.markdownEnumDescriptions && i < schema.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
                    documentation = this.fromMarkup(schema.markdownEnumDescriptions[i]);
                }
                else if (schema.enumDescriptions && i < schema.enumDescriptions.length) {
                    documentation = schema.enumDescriptions[i];
                }
                collector.add({
                    kind: this.getSuggestionKind(schema.type),
                    label: this.getLabelForValue(enm),
                    insertText: this.getInsertTextForValue(enm, separatorAfter),
                    insertTextFormat: InsertTextFormat.Snippet,
                    documentation
                });
            }
        }
    }
    collectTypes(schema, types) {
        if (Array.isArray(schema.enum) || isDefined(schema.const)) {
            return;
        }
        const type = schema.type;
        if (Array.isArray(type)) {
            type.forEach(t => types[t] = true);
        }
        else if (type) {
            types[type] = true;
        }
    }
    addFillerValueCompletions(types, separatorAfter, collector) {
        if (types['object']) {
            collector.add({
                kind: this.getSuggestionKind('object'),
                label: '{}',
                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                detail: t('New object'),
                documentation: ''
            });
        }
        if (types['array']) {
            collector.add({
                kind: this.getSuggestionKind('array'),
                label: '[]',
                insertText: this.getInsertTextForGuessedValue([], separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet,
                detail: t('New array'),
                documentation: ''
            });
        }
    }
    addBooleanValueCompletion(value, separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind('boolean'),
            label: value ? 'true' : 'false',
            insertText: this.getInsertTextForValue(value, separatorAfter),
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ''
        });
    }
    addNullValueCompletion(separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind('null'),
            label: 'null',
            insertText: 'null' + separatorAfter,
            insertTextFormat: InsertTextFormat.Snippet,
            documentation: ''
        });
    }
    addDollarSchemaCompletions(separatorAfter, collector) {
        const schemaIds = this.schemaService.getRegisteredSchemaIds(schema => schema === 'http' || schema === 'https');
        schemaIds.forEach(schemaId => {
            if (schemaId.startsWith('http://json-schema.org/draft-')) {
                schemaId = schemaId + '#';
            }
            collector.add({
                kind: CompletionItemKind.Module,
                label: this.getLabelForValue(schemaId),
                filterText: this.getFilterTextForValue(schemaId),
                insertText: this.getInsertTextForValue(schemaId, separatorAfter),
                insertTextFormat: InsertTextFormat.Snippet, documentation: ''
            });
        });
    }
    getLabelForValue(value) {
        return JSON.stringify(value);
    }
    getValueFromLabel(value) {
        return JSON.parse(value);
    }
    getFilterTextForValue(value) {
        return JSON.stringify(value);
    }
    getFilterTextForSnippetValue(value) {
        return JSON.stringify(value).replace(/\$\{\d+:([^}]+)\}|\$\d+/g, '$1');
    }
    getLabelForSnippetValue(value) {
        const label = JSON.stringify(value);
        return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, '$1');
    }
    getInsertTextForPlainText(text) {
        return text.replace(/[\\\$\}]/g, '\\$&'); // escape $, \ and }
    }
    getInsertTextForValue(value, separatorAfter) {
        const text = JSON.stringify(value, null, '\t');
        if (text === '{}') {
            return '{$1}' + separatorAfter;
        }
        else if (text === '[]') {
            return '[$1]' + separatorAfter;
        }
        return this.getInsertTextForPlainText(text + separatorAfter);
    }
    getInsertTextForSnippetValue(value, separatorAfter) {
        const replacer = (value) => {
            if (typeof value === 'string') {
                if (value[0] === '^') {
                    return value.substr(1);
                }
            }
            return JSON.stringify(value);
        };
        return stringifyObject(value, '', replacer) + separatorAfter;
    }
    getInsertTextForGuessedValue(value, separatorAfter) {
        switch (typeof value) {
            case 'object':
                if (value === null) {
                    return '${1:null}' + separatorAfter;
                }
                return this.getInsertTextForValue(value, separatorAfter);
            case 'string':
                let snippetValue = JSON.stringify(value);
                snippetValue = snippetValue.substr(1, snippetValue.length - 2); // remove quotes
                snippetValue = this.getInsertTextForPlainText(snippetValue); // escape \ and }
                return '"${1:' + snippetValue + '}"' + separatorAfter;
            case 'number':
            case 'boolean':
                return '${1:' + JSON.stringify(value) + '}' + separatorAfter;
        }
        return this.getInsertTextForValue(value, separatorAfter);
    }
    getSuggestionKind(type) {
        if (Array.isArray(type)) {
            const array = type;
            type = array.length > 0 ? array[0] : undefined;
        }
        if (!type) {
            return CompletionItemKind.Value;
        }
        switch (type) {
            case 'string': return CompletionItemKind.Value;
            case 'object': return CompletionItemKind.Module;
            case 'property': return CompletionItemKind.Property;
            default: return CompletionItemKind.Value;
        }
    }
    getLabelTextForMatchingNode(node, document) {
        switch (node.type) {
            case 'array':
                return '[]';
            case 'object':
                return '{}';
            default:
                const content = document.getText().substr(node.offset, node.length);
                return content;
        }
    }
    getInsertTextForMatchingNode(node, document, separatorAfter) {
        switch (node.type) {
            case 'array':
                return this.getInsertTextForValue([], separatorAfter);
            case 'object':
                return this.getInsertTextForValue({}, separatorAfter);
            default:
                const content = document.getText().substr(node.offset, node.length) + separatorAfter;
                return this.getInsertTextForPlainText(content);
        }
    }
    getInsertTextForProperty(key, propertySchema, addValue, separatorAfter) {
        const propertyText = this.getInsertTextForValue(key, '');
        if (!addValue) {
            return propertyText;
        }
        const resultText = propertyText + ': ';
        let value;
        let nValueProposals = 0;
        if (propertySchema) {
            if (Array.isArray(propertySchema.defaultSnippets)) {
                if (propertySchema.defaultSnippets.length === 1) {
                    const body = propertySchema.defaultSnippets[0].body;
                    if (isDefined(body)) {
                        value = this.getInsertTextForSnippetValue(body, '');
                    }
                }
                nValueProposals += propertySchema.defaultSnippets.length;
            }
            if (propertySchema.enum) {
                if (!value && propertySchema.enum.length === 1) {
                    value = this.getInsertTextForGuessedValue(propertySchema.enum[0], '');
                }
                nValueProposals += propertySchema.enum.length;
            }
            if (isDefined(propertySchema.const)) {
                if (!value) {
                    value = this.getInsertTextForGuessedValue(propertySchema.const, '');
                }
                nValueProposals++;
            }
            if (isDefined(propertySchema.default)) {
                if (!value) {
                    value = this.getInsertTextForGuessedValue(propertySchema.default, '');
                }
                nValueProposals++;
            }
            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
                if (!value) {
                    value = this.getInsertTextForGuessedValue(propertySchema.examples[0], '');
                }
                nValueProposals += propertySchema.examples.length;
            }
            if (nValueProposals === 0) {
                let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
                if (!type) {
                    if (propertySchema.properties) {
                        type = 'object';
                    }
                    else if (propertySchema.items) {
                        type = 'array';
                    }
                }
                switch (type) {
                    case 'boolean':
                        value = '$1';
                        break;
                    case 'string':
                        value = '"$1"';
                        break;
                    case 'object':
                        value = '{$1}';
                        break;
                    case 'array':
                        value = '[$1]';
                        break;
                    case 'number':
                    case 'integer':
                        value = '${1:0}';
                        break;
                    case 'null':
                        value = '${1:null}';
                        break;
                    default:
                        return propertyText;
                }
            }
        }
        if (!value || nValueProposals > 1) {
            value = '$1';
        }
        return resultText + value + separatorAfter;
    }
    getCurrentWord(document, offset) {
        let i = offset - 1;
        const text = document.getText();
        while (i >= 0 && ' \t\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1) {
            i--;
        }
        return text.substring(i + 1, offset);
    }
    evaluateSeparatorAfter(document, offset) {
        const scanner = main.createScanner(document.getText(), true);
        scanner.setPosition(offset);
        const token = scanner.scan();
        switch (token) {
            case 5 /* Json.SyntaxKind.CommaToken */:
            case 2 /* Json.SyntaxKind.CloseBraceToken */:
            case 4 /* Json.SyntaxKind.CloseBracketToken */:
            case 17 /* Json.SyntaxKind.EOF */:
                return '';
            default:
                return ',';
        }
    }
    findItemAtOffset(node, document, offset) {
        const scanner = main.createScanner(document.getText(), true);
        const children = node.items;
        for (let i = children.length - 1; i >= 0; i--) {
            const child = children[i];
            if (offset > child.offset + child.length) {
                scanner.setPosition(child.offset + child.length);
                const token = scanner.scan();
                if (token === 5 /* Json.SyntaxKind.CommaToken */ && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {
                    return i + 1;
                }
                return i;
            }
            else if (offset >= child.offset) {
                return i;
            }
        }
        return 0;
    }
    isInComment(document, start, offset) {
        const scanner = main.createScanner(document.getText(), false);
        scanner.setPosition(start);
        let token = scanner.scan();
        while (token !== 17 /* Json.SyntaxKind.EOF */ && (scanner.getTokenOffset() + scanner.getTokenLength() < offset)) {
            token = scanner.scan();
        }
        return (token === 12 /* Json.SyntaxKind.LineCommentTrivia */ || token === 13 /* Json.SyntaxKind.BlockCommentTrivia */) && scanner.getTokenOffset() <= offset;
    }
    fromMarkup(markupString) {
        if (markupString && this.doesSupportMarkdown()) {
            return {
                kind: MarkupKind.Markdown,
                value: markupString
            };
        }
        return undefined;
    }
    doesSupportMarkdown() {
        if (!isDefined(this.supportsMarkdown)) {
            const documentationFormat = this.clientCapabilities.textDocument?.completion?.completionItem?.documentationFormat;
            this.supportsMarkdown = Array.isArray(documentationFormat) && documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
    doesSupportsCommitCharacters() {
        if (!isDefined(this.supportsCommitCharacters)) {
            this.labelDetailsSupport = this.clientCapabilities.textDocument?.completion?.completionItem?.commitCharactersSupport;
        }
        return this.supportsCommitCharacters;
    }
    doesSupportsLabelDetails() {
        if (!isDefined(this.labelDetailsSupport)) {
            this.labelDetailsSupport = this.clientCapabilities.textDocument?.completion?.completionItem?.labelDetailsSupport;
        }
        return this.labelDetailsSupport;
    }
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonHover.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class JSONHover {
    constructor(schemaService, contributions = [], promiseConstructor) {
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promise = promiseConstructor || Promise;
    }
    doHover(document, position, doc) {
        const offset = document.offsetAt(position);
        let node = doc.getNodeFromOffset(offset);
        if (!node || (node.type === 'object' || node.type === 'array') && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
            return this.promise.resolve(null);
        }
        const hoverRangeNode = node;
        // use the property description when hovering over an object key
        if (node.type === 'string') {
            const parent = node.parent;
            if (parent && parent.type === 'property' && parent.keyNode === node) {
                node = parent.valueNode;
                if (!node) {
                    return this.promise.resolve(null);
                }
            }
        }
        const hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
        const createHover = (contents) => {
            const result = {
                contents: contents,
                range: hoverRange
            };
            return result;
        };
        const location = getNodePath(node);
        for (let i = this.contributions.length - 1; i >= 0; i--) {
            const contribution = this.contributions[i];
            const promise = contribution.getInfoContribution(document.uri, location);
            if (promise) {
                return promise.then(htmlContent => createHover(htmlContent));
            }
        }
        return this.schemaService.getSchemaForResource(document.uri, doc).then((schema) => {
            if (schema && node) {
                const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);
                let title = undefined;
                let markdownDescription = undefined;
                let markdownEnumValueDescription = undefined, enumValue = undefined;
                matchingSchemas.every((s) => {
                    if (s.node === node && !s.inverted && s.schema) {
                        title = title || s.schema.title;
                        markdownDescription = markdownDescription || s.schema.markdownDescription || toMarkdown(s.schema.description);
                        if (s.schema.enum) {
                            const idx = s.schema.enum.indexOf(getNodeValue(node));
                            if (s.schema.markdownEnumDescriptions) {
                                markdownEnumValueDescription = s.schema.markdownEnumDescriptions[idx];
                            }
                            else if (s.schema.enumDescriptions) {
                                markdownEnumValueDescription = toMarkdown(s.schema.enumDescriptions[idx]);
                            }
                            if (markdownEnumValueDescription) {
                                enumValue = s.schema.enum[idx];
                                if (typeof enumValue !== 'string') {
                                    enumValue = JSON.stringify(enumValue);
                                }
                            }
                        }
                    }
                    return true;
                });
                let result = '';
                if (title) {
                    result = toMarkdown(title);
                }
                if (markdownDescription) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += markdownDescription;
                }
                if (markdownEnumValueDescription) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += `\`${toMarkdownCodeBlock(enumValue)}\`: ${markdownEnumValueDescription}`;
                }
                return createHover([result]);
            }
            return null;
        });
    }
}
function toMarkdown(plain) {
    if (plain) {
        const res = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, '$1\n\n$3'); // single new lines to \n\n (Markdown paragraph)
        return res.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    return undefined;
}
function toMarkdownCodeBlock(content) {
    // see https://daringfireball.net/projects/markdown/syntax#precode
    if (content.indexOf('`') !== -1) {
        return '`` ' + content + ' ``';
    }
    return content;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonValidation.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



class JSONValidation {
    constructor(jsonSchemaService, promiseConstructor) {
        this.jsonSchemaService = jsonSchemaService;
        this.promise = promiseConstructor;
        this.validationEnabled = true;
    }
    configure(raw) {
        if (raw) {
            this.validationEnabled = raw.validate !== false;
            this.commentSeverity = raw.allowComments ? undefined : DiagnosticSeverity.Error;
        }
    }
    doValidation(textDocument, jsonDocument, documentSettings, schema) {
        if (!this.validationEnabled) {
            return this.promise.resolve([]);
        }
        const diagnostics = [];
        const added = {};
        const addProblem = (problem) => {
            // remove duplicated messages
            const signature = problem.range.start.line + ' ' + problem.range.start.character + ' ' + problem.message;
            if (!added[signature]) {
                added[signature] = true;
                diagnostics.push(problem);
            }
        };
        const getDiagnostics = (schema) => {
            let trailingCommaSeverity = documentSettings?.trailingCommas ? toDiagnosticSeverity(documentSettings.trailingCommas) : DiagnosticSeverity.Error;
            let commentSeverity = documentSettings?.comments ? toDiagnosticSeverity(documentSettings.comments) : this.commentSeverity;
            let schemaValidation = documentSettings?.schemaValidation ? toDiagnosticSeverity(documentSettings.schemaValidation) : DiagnosticSeverity.Warning;
            let schemaRequest = documentSettings?.schemaRequest ? toDiagnosticSeverity(documentSettings.schemaRequest) : DiagnosticSeverity.Warning;
            if (schema) {
                const addSchemaProblem = (errorMessage, errorCode) => {
                    if (jsonDocument.root && schemaRequest) {
                        const astRoot = jsonDocument.root;
                        const property = astRoot.type === 'object' ? astRoot.properties[0] : undefined;
                        if (property && property.keyNode.value === '$schema') {
                            const node = property.valueNode || property;
                            const range = Range.create(textDocument.positionAt(node.offset), textDocument.positionAt(node.offset + node.length));
                            addProblem(Diagnostic.create(range, errorMessage, schemaRequest, errorCode));
                        }
                        else {
                            const range = Range.create(textDocument.positionAt(astRoot.offset), textDocument.positionAt(astRoot.offset + 1));
                            addProblem(Diagnostic.create(range, errorMessage, schemaRequest, errorCode));
                        }
                    }
                };
                if (schema.errors.length) {
                    addSchemaProblem(schema.errors[0], ErrorCode.SchemaResolveError);
                }
                else if (schemaValidation) {
                    for (const warning of schema.warnings) {
                        addSchemaProblem(warning, ErrorCode.SchemaUnsupportedFeature);
                    }
                    const semanticErrors = jsonDocument.validate(textDocument, schema.schema, schemaValidation, documentSettings?.schemaDraft);
                    if (semanticErrors) {
                        semanticErrors.forEach(addProblem);
                    }
                }
                if (schemaAllowsComments(schema.schema)) {
                    commentSeverity = undefined;
                }
                if (schemaAllowsTrailingCommas(schema.schema)) {
                    trailingCommaSeverity = undefined;
                }
            }
            for (const p of jsonDocument.syntaxErrors) {
                if (p.code === ErrorCode.TrailingComma) {
                    if (typeof trailingCommaSeverity !== 'number') {
                        continue;
                    }
                    p.severity = trailingCommaSeverity;
                }
                addProblem(p);
            }
            if (typeof commentSeverity === 'number') {
                const message = t('Comments are not permitted in JSON.');
                jsonDocument.comments.forEach(c => {
                    addProblem(Diagnostic.create(c, message, commentSeverity, ErrorCode.CommentNotPermitted));
                });
            }
            return diagnostics;
        };
        if (schema) {
            const uri = schema.id || ('schemaservice://untitled/' + idCounter++);
            const handle = this.jsonSchemaService.registerExternalSchema({ uri, schema });
            return handle.getResolvedSchema().then(resolvedSchema => {
                return getDiagnostics(resolvedSchema);
            });
        }
        return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then(schema => {
            return getDiagnostics(schema);
        });
    }
    getLanguageStatus(textDocument, jsonDocument) {
        return { schemas: this.jsonSchemaService.getSchemaURIsForResource(textDocument.uri, jsonDocument) };
    }
}
let idCounter = 0;
function schemaAllowsComments(schemaRef) {
    if (schemaRef && typeof schemaRef === 'object') {
        if (isBoolean(schemaRef.allowComments)) {
            return schemaRef.allowComments;
        }
        if (schemaRef.allOf) {
            for (const schema of schemaRef.allOf) {
                const allow = schemaAllowsComments(schema);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return undefined;
}
function schemaAllowsTrailingCommas(schemaRef) {
    if (schemaRef && typeof schemaRef === 'object') {
        if (isBoolean(schemaRef.allowTrailingCommas)) {
            return schemaRef.allowTrailingCommas;
        }
        const deprSchemaRef = schemaRef;
        if (isBoolean(deprSchemaRef['allowsTrailingCommas'])) { // deprecated
            return deprSchemaRef['allowsTrailingCommas'];
        }
        if (schemaRef.allOf) {
            for (const schema of schemaRef.allOf) {
                const allow = schemaAllowsTrailingCommas(schema);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return undefined;
}
function toDiagnosticSeverity(severityLevel) {
    switch (severityLevel) {
        case 'error': return DiagnosticSeverity.Error;
        case 'warning': return DiagnosticSeverity.Warning;
        case 'ignore': return undefined;
    }
    return undefined;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/colors.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const Digit0 = 48;
const Digit9 = 57;
const A = 65;
const a = 97;
const f = 102;
function hexDigit(charCode) {
    if (charCode < Digit0) {
        return 0;
    }
    if (charCode <= Digit9) {
        return charCode - Digit0;
    }
    if (charCode < a) {
        charCode += (a - A);
    }
    if (charCode >= a && charCode <= f) {
        return charCode - a + 10;
    }
    return 0;
}
function colorFromHex(text) {
    if (text[0] !== '#') {
        return undefined;
    }
    switch (text.length) {
        case 4:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: 1
            };
        case 5:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,
            };
        case 7:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: 1
            };
        case 9:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0
            };
    }
    return undefined;
}
function colorFrom256RGB(red, green, blue, alpha = 1.0) {
    return {
        red: red / 255.0,
        green: green / 255.0,
        blue: blue / 255.0,
        alpha
    };
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonDocumentSymbols.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class JSONDocumentSymbols {
    constructor(schemaService) {
        this.schemaService = schemaService;
    }
    findDocumentSymbols(document, doc, context = { resultLimit: Number.MAX_VALUE }) {
        const root = doc.root;
        if (!root) {
            return [];
        }
        let limit = context.resultLimit || Number.MAX_VALUE;
        // special handling for key bindings
        const resourceString = document.uri;
        if ((resourceString === 'vscode://defaultsettings/keybindings.json') || endsWith(resourceString.toLowerCase(), '/user/keybindings.json')) {
            if (root.type === 'array') {
                const result = [];
                for (const item of root.items) {
                    if (item.type === 'object') {
                        for (const property of item.properties) {
                            if (property.keyNode.value === 'key' && property.valueNode) {
                                const location = Location.create(document.uri, getRange(document, item));
                                result.push({ name: getName(property.valueNode), kind: SymbolKind.Function, location: location });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result;
                                }
                            }
                        }
                    }
                }
                return result;
            }
        }
        const toVisit = [
            { node: root, containerName: '' }
        ];
        let nextToVisit = 0;
        let limitExceeded = false;
        const result = [];
        const collectOutlineEntries = (node, containerName) => {
            if (node.type === 'array') {
                node.items.forEach(node => {
                    if (node) {
                        toVisit.push({ node, containerName });
                    }
                });
            }
            else if (node.type === 'object') {
                node.properties.forEach((property) => {
                    const valueNode = property.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            const location = Location.create(document.uri, getRange(document, property));
                            const childContainerName = containerName ? containerName + '.' + property.keyNode.value : property.keyNode.value;
                            result.push({ name: this.getKeyLabel(property), kind: this.getSymbolKind(valueNode.type), location: location, containerName: containerName });
                            toVisit.push({ node: valueNode, containerName: childContainerName });
                        }
                        else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        // breath first traversal
        while (nextToVisit < toVisit.length) {
            const next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.containerName);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    }
    findDocumentSymbols2(document, doc, context = { resultLimit: Number.MAX_VALUE }) {
        const root = doc.root;
        if (!root) {
            return [];
        }
        let limit = context.resultLimit || Number.MAX_VALUE;
        // special handling for key bindings
        const resourceString = document.uri;
        if ((resourceString === 'vscode://defaultsettings/keybindings.json') || endsWith(resourceString.toLowerCase(), '/user/keybindings.json')) {
            if (root.type === 'array') {
                const result = [];
                for (const item of root.items) {
                    if (item.type === 'object') {
                        for (const property of item.properties) {
                            if (property.keyNode.value === 'key' && property.valueNode) {
                                const range = getRange(document, item);
                                const selectionRange = getRange(document, property.keyNode);
                                result.push({ name: getName(property.valueNode), kind: SymbolKind.Function, range, selectionRange });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result;
                                }
                            }
                        }
                    }
                }
                return result;
            }
        }
        const result = [];
        const toVisit = [
            { node: root, result }
        ];
        let nextToVisit = 0;
        let limitExceeded = false;
        const collectOutlineEntries = (node, result) => {
            if (node.type === 'array') {
                node.items.forEach((node, index) => {
                    if (node) {
                        if (limit > 0) {
                            limit--;
                            const range = getRange(document, node);
                            const selectionRange = range;
                            const name = String(index);
                            const symbol = { name, kind: this.getSymbolKind(node.type), range, selectionRange, children: [] };
                            result.push(symbol);
                            toVisit.push({ result: symbol.children, node });
                        }
                        else {
                            limitExceeded = true;
                        }
                    }
                });
            }
            else if (node.type === 'object') {
                node.properties.forEach((property) => {
                    const valueNode = property.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            const range = getRange(document, property);
                            const selectionRange = getRange(document, property.keyNode);
                            const children = [];
                            const symbol = { name: this.getKeyLabel(property), kind: this.getSymbolKind(valueNode.type), range, selectionRange, children, detail: this.getDetail(valueNode) };
                            result.push(symbol);
                            toVisit.push({ result: children, node: valueNode });
                        }
                        else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        // breath first traversal
        while (nextToVisit < toVisit.length) {
            const next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.result);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    }
    getSymbolKind(nodeType) {
        switch (nodeType) {
            case 'object':
                return SymbolKind.Module;
            case 'string':
                return SymbolKind.String;
            case 'number':
                return SymbolKind.Number;
            case 'array':
                return SymbolKind.Array;
            case 'boolean':
                return SymbolKind.Boolean;
            default: // 'null'
                return SymbolKind.Variable;
        }
    }
    getKeyLabel(property) {
        let name = property.keyNode.value;
        if (name) {
            name = name.replace(/[\n]/g, '↵');
        }
        if (name && name.trim()) {
            return name;
        }
        return `"${name}"`;
    }
    getDetail(node) {
        if (!node) {
            return undefined;
        }
        if (node.type === 'boolean' || node.type === 'number' || node.type === 'null' || node.type === 'string') {
            return String(node.value);
        }
        else {
            if (node.type === 'array') {
                return node.children.length ? undefined : '[]';
            }
            else if (node.type === 'object') {
                return node.children.length ? undefined : '{}';
            }
        }
        return undefined;
    }
    findDocumentColors(document, doc, context) {
        return this.schemaService.getSchemaForResource(document.uri, doc).then(schema => {
            const result = [];
            if (schema) {
                let limit = context && typeof context.resultLimit === 'number' ? context.resultLimit : Number.MAX_VALUE;
                const matchingSchemas = doc.getMatchingSchemas(schema.schema);
                const visitedNode = {};
                for (const s of matchingSchemas) {
                    if (!s.inverted && s.schema && (s.schema.format === 'color' || s.schema.format === 'color-hex') && s.node && s.node.type === 'string') {
                        const nodeId = String(s.node.offset);
                        if (!visitedNode[nodeId]) {
                            const color = colorFromHex(getNodeValue(s.node));
                            if (color) {
                                const range = getRange(document, s.node);
                                result.push({ color, range });
                            }
                            visitedNode[nodeId] = true;
                            limit--;
                            if (limit <= 0) {
                                if (context && context.onResultLimitExceeded) {
                                    context.onResultLimitExceeded(document.uri);
                                }
                                return result;
                            }
                        }
                    }
                }
            }
            return result;
        });
    }
    getColorPresentations(document, doc, color, range) {
        const result = [];
        const red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
        function toTwoDigitHex(n) {
            const r = n.toString(16);
            return r.length !== 2 ? '0' + r : r;
        }
        let label;
        if (color.alpha === 1) {
            label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}`;
        }
        else {
            label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}${toTwoDigitHex(Math.round(color.alpha * 255))}`;
        }
        result.push({ label: label, textEdit: TextEdit.replace(range, JSON.stringify(label)) });
        return result;
    }
}
function getRange(document, node) {
    return Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
}
function getName(node) {
    return getNodeValue(node) || t('<empty>');
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/configuration.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

const schemaContributions = {
    schemaAssociations: [],
    schemas: {
        // bundle the schema-schema to include (localized) descriptions
        'http://json-schema.org/draft-04/schema#': {
            '$schema': 'http://json-schema.org/draft-04/schema#',
            'definitions': {
                'schemaArray': {
                    'type': 'array',
                    'minItems': 1,
                    'items': {
                        '$ref': '#'
                    }
                },
                'positiveInteger': {
                    'type': 'integer',
                    'minimum': 0
                },
                'positiveIntegerDefault0': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/positiveInteger'
                        },
                        {
                            'default': 0
                        }
                    ]
                },
                'simpleTypes': {
                    'type': 'string',
                    'enum': [
                        'array',
                        'boolean',
                        'integer',
                        'null',
                        'number',
                        'object',
                        'string'
                    ]
                },
                'stringArray': {
                    'type': 'array',
                    'items': {
                        'type': 'string'
                    },
                    'minItems': 1,
                    'uniqueItems': true
                }
            },
            'type': 'object',
            'properties': {
                'id': {
                    'type': 'string',
                    'format': 'uri'
                },
                '$schema': {
                    'type': 'string',
                    'format': 'uri'
                },
                'title': {
                    'type': 'string'
                },
                'description': {
                    'type': 'string'
                },
                'default': {},
                'multipleOf': {
                    'type': 'number',
                    'minimum': 0,
                    'exclusiveMinimum': true
                },
                'maximum': {
                    'type': 'number'
                },
                'exclusiveMaximum': {
                    'type': 'boolean',
                    'default': false
                },
                'minimum': {
                    'type': 'number'
                },
                'exclusiveMinimum': {
                    'type': 'boolean',
                    'default': false
                },
                'maxLength': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/positiveInteger'
                        }
                    ]
                },
                'minLength': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/positiveIntegerDefault0'
                        }
                    ]
                },
                'pattern': {
                    'type': 'string',
                    'format': 'regex'
                },
                'additionalItems': {
                    'anyOf': [
                        {
                            'type': 'boolean'
                        },
                        {
                            '$ref': '#'
                        }
                    ],
                    'default': {}
                },
                'items': {
                    'anyOf': [
                        {
                            '$ref': '#'
                        },
                        {
                            '$ref': '#/definitions/schemaArray'
                        }
                    ],
                    'default': {}
                },
                'maxItems': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/positiveInteger'
                        }
                    ]
                },
                'minItems': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/positiveIntegerDefault0'
                        }
                    ]
                },
                'uniqueItems': {
                    'type': 'boolean',
                    'default': false
                },
                'maxProperties': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/positiveInteger'
                        }
                    ]
                },
                'minProperties': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/positiveIntegerDefault0'
                        }
                    ]
                },
                'required': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/stringArray'
                        }
                    ]
                },
                'additionalProperties': {
                    'anyOf': [
                        {
                            'type': 'boolean'
                        },
                        {
                            '$ref': '#'
                        }
                    ],
                    'default': {}
                },
                'definitions': {
                    'type': 'object',
                    'additionalProperties': {
                        '$ref': '#'
                    },
                    'default': {}
                },
                'properties': {
                    'type': 'object',
                    'additionalProperties': {
                        '$ref': '#'
                    },
                    'default': {}
                },
                'patternProperties': {
                    'type': 'object',
                    'additionalProperties': {
                        '$ref': '#'
                    },
                    'default': {}
                },
                'dependencies': {
                    'type': 'object',
                    'additionalProperties': {
                        'anyOf': [
                            {
                                '$ref': '#'
                            },
                            {
                                '$ref': '#/definitions/stringArray'
                            }
                        ]
                    }
                },
                'enum': {
                    'type': 'array',
                    'minItems': 1,
                    'uniqueItems': true
                },
                'type': {
                    'anyOf': [
                        {
                            '$ref': '#/definitions/simpleTypes'
                        },
                        {
                            'type': 'array',
                            'items': {
                                '$ref': '#/definitions/simpleTypes'
                            },
                            'minItems': 1,
                            'uniqueItems': true
                        }
                    ]
                },
                'format': {
                    'anyOf': [
                        {
                            'type': 'string',
                            'enum': [
                                'date-time',
                                'uri',
                                'email',
                                'hostname',
                                'ipv4',
                                'ipv6',
                                'regex'
                            ]
                        },
                        {
                            'type': 'string'
                        }
                    ]
                },
                'allOf': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/schemaArray'
                        }
                    ]
                },
                'anyOf': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/schemaArray'
                        }
                    ]
                },
                'oneOf': {
                    'allOf': [
                        {
                            '$ref': '#/definitions/schemaArray'
                        }
                    ]
                },
                'not': {
                    'allOf': [
                        {
                            '$ref': '#'
                        }
                    ]
                }
            },
            'dependencies': {
                'exclusiveMaximum': [
                    'maximum'
                ],
                'exclusiveMinimum': [
                    'minimum'
                ]
            },
            'default': {}
        },
        'http://json-schema.org/draft-07/schema#': {
            'definitions': {
                'schemaArray': {
                    'type': 'array',
                    'minItems': 1,
                    'items': { '$ref': '#' }
                },
                'nonNegativeInteger': {
                    'type': 'integer',
                    'minimum': 0
                },
                'nonNegativeIntegerDefault0': {
                    'allOf': [
                        { '$ref': '#/definitions/nonNegativeInteger' },
                        { 'default': 0 }
                    ]
                },
                'simpleTypes': {
                    'enum': [
                        'array',
                        'boolean',
                        'integer',
                        'null',
                        'number',
                        'object',
                        'string'
                    ]
                },
                'stringArray': {
                    'type': 'array',
                    'items': { 'type': 'string' },
                    'uniqueItems': true,
                    'default': []
                }
            },
            'type': ['object', 'boolean'],
            'properties': {
                '$id': {
                    'type': 'string',
                    'format': 'uri-reference'
                },
                '$schema': {
                    'type': 'string',
                    'format': 'uri'
                },
                '$ref': {
                    'type': 'string',
                    'format': 'uri-reference'
                },
                '$comment': {
                    'type': 'string'
                },
                'title': {
                    'type': 'string'
                },
                'description': {
                    'type': 'string'
                },
                'default': true,
                'readOnly': {
                    'type': 'boolean',
                    'default': false
                },
                'examples': {
                    'type': 'array',
                    'items': true
                },
                'multipleOf': {
                    'type': 'number',
                    'exclusiveMinimum': 0
                },
                'maximum': {
                    'type': 'number'
                },
                'exclusiveMaximum': {
                    'type': 'number'
                },
                'minimum': {
                    'type': 'number'
                },
                'exclusiveMinimum': {
                    'type': 'number'
                },
                'maxLength': { '$ref': '#/definitions/nonNegativeInteger' },
                'minLength': { '$ref': '#/definitions/nonNegativeIntegerDefault0' },
                'pattern': {
                    'type': 'string',
                    'format': 'regex'
                },
                'additionalItems': { '$ref': '#' },
                'items': {
                    'anyOf': [
                        { '$ref': '#' },
                        { '$ref': '#/definitions/schemaArray' }
                    ],
                    'default': true
                },
                'maxItems': { '$ref': '#/definitions/nonNegativeInteger' },
                'minItems': { '$ref': '#/definitions/nonNegativeIntegerDefault0' },
                'uniqueItems': {
                    'type': 'boolean',
                    'default': false
                },
                'contains': { '$ref': '#' },
                'maxProperties': { '$ref': '#/definitions/nonNegativeInteger' },
                'minProperties': { '$ref': '#/definitions/nonNegativeIntegerDefault0' },
                'required': { '$ref': '#/definitions/stringArray' },
                'additionalProperties': { '$ref': '#' },
                'definitions': {
                    'type': 'object',
                    'additionalProperties': { '$ref': '#' },
                    'default': {}
                },
                'properties': {
                    'type': 'object',
                    'additionalProperties': { '$ref': '#' },
                    'default': {}
                },
                'patternProperties': {
                    'type': 'object',
                    'additionalProperties': { '$ref': '#' },
                    'propertyNames': { 'format': 'regex' },
                    'default': {}
                },
                'dependencies': {
                    'type': 'object',
                    'additionalProperties': {
                        'anyOf': [
                            { '$ref': '#' },
                            { '$ref': '#/definitions/stringArray' }
                        ]
                    }
                },
                'propertyNames': { '$ref': '#' },
                'const': true,
                'enum': {
                    'type': 'array',
                    'items': true,
                    'minItems': 1,
                    'uniqueItems': true
                },
                'type': {
                    'anyOf': [
                        { '$ref': '#/definitions/simpleTypes' },
                        {
                            'type': 'array',
                            'items': { '$ref': '#/definitions/simpleTypes' },
                            'minItems': 1,
                            'uniqueItems': true
                        }
                    ]
                },
                'format': { 'type': 'string' },
                'contentMediaType': { 'type': 'string' },
                'contentEncoding': { 'type': 'string' },
                'if': { '$ref': '#' },
                'then': { '$ref': '#' },
                'else': { '$ref': '#' },
                'allOf': { '$ref': '#/definitions/schemaArray' },
                'anyOf': { '$ref': '#/definitions/schemaArray' },
                'oneOf': { '$ref': '#/definitions/schemaArray' },
                'not': { '$ref': '#' }
            },
            'default': true
        }
    }
};
const descriptions = {
    id: t("A unique identifier for the schema."),
    $schema: t("The schema to verify this document against."),
    title: t("A descriptive title of the element."),
    description: t("A long description of the element. Used in hover menus and suggestions."),
    default: t("A default value. Used by suggestions."),
    multipleOf: t("A number that should cleanly divide the current value (i.e. have no remainder)."),
    maximum: t("The maximum numerical value, inclusive by default."),
    exclusiveMaximum: t("Makes the maximum property exclusive."),
    minimum: t("The minimum numerical value, inclusive by default."),
    exclusiveMinimum: t("Makes the minimum property exclusive."),
    maxLength: t("The maximum length of a string."),
    minLength: t("The minimum length of a string."),
    pattern: t("A regular expression to match the string against. It is not implicitly anchored."),
    additionalItems: t("For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail."),
    items: t("For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on."),
    maxItems: t("The maximum number of items that can be inside an array. Inclusive."),
    minItems: t("The minimum number of items that can be inside an array. Inclusive."),
    uniqueItems: t("If all of the items in the array must be unique. Defaults to false."),
    maxProperties: t("The maximum number of properties an object can have. Inclusive."),
    minProperties: t("The minimum number of properties an object can have. Inclusive."),
    required: t("An array of strings that lists the names of all properties required on this object."),
    additionalProperties: t("Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail."),
    definitions: t("Not used for validation. Place subschemas here that you wish to reference inline with $ref."),
    properties: t("A map of property names to schemas for each property."),
    patternProperties: t("A map of regular expressions on property names to schemas for matching properties."),
    dependencies: t("A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object."),
    enum: t("The set of literal values that are valid."),
    type: t("Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types."),
    format: t("Describes the format expected for the value."),
    allOf: t("An array of schemas, all of which must match."),
    anyOf: t("An array of schemas, where at least one must match."),
    oneOf: t("An array of schemas, exactly one of which must match."),
    not: t("A schema which must not match."),
    $id: t("A unique identifier for the schema."),
    $ref: t("Reference a definition hosted on any location."),
    $comment: t("Comments from schema authors to readers or maintainers of the schema."),
    readOnly: t("Indicates that the value of the instance is managed exclusively by the owning authority."),
    examples: t("Sample JSON values associated with a particular schema, for the purpose of illustrating usage."),
    contains: t("An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema."),
    propertyNames: t("If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema."),
    const: t("An instance validates successfully against this keyword if its value is equal to the value of the keyword."),
    contentMediaType: t("Describes the media type of a string property."),
    contentEncoding: t("Describes the content encoding of a string property."),
    if: t("The validation outcome of the \"if\" subschema controls which of the \"then\" or \"else\" keywords are evaluated."),
    then: t("The \"if\" subschema is used for validation when the \"if\" subschema succeeds."),
    else: t("The \"else\" subschema is used for validation when the \"if\" subschema fails.")
};
for (const schemaName in schemaContributions.schemas) {
    const schema = schemaContributions.schemas[schemaName];
    for (const property in schema.properties) {
        let propertyObject = schema.properties[property];
        if (typeof propertyObject === 'boolean') {
            propertyObject = schema.properties[property] = {};
        }
        const description = descriptions[property];
        if (description) {
            propertyObject['description'] = description;
        }
    }
}

;// CONCATENATED MODULE: ../../node_modules/vscode-uri/lib/esm/index.mjs
var LIB;(()=>{"use strict";var t={470:t=>{function e(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}function r(t,e){for(var r,n="",i=0,o=-1,s=0,h=0;h<=t.length;++h){if(h<t.length)r=t.charCodeAt(h);else{if(47===r)break;r=47}if(47===r){if(o===h-1||1===s);else if(o!==h-1&&2===s){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var a=n.lastIndexOf("/");if(a!==n.length-1){-1===a?(n="",i=0):i=(n=n.slice(0,a)).length-1-n.lastIndexOf("/"),o=h,s=0;continue}}else if(2===n.length||1===n.length){n="",i=0,o=h,s=0;continue}e&&(n.length>0?n+="/..":n="..",i=2)}else n.length>0?n+="/"+t.slice(o+1,h):n=t.slice(o+1,h),i=h-o-1;o=h,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var t,n="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var s;o>=0?s=arguments[o]:(void 0===t&&(t=process.cwd()),s=t),e(s),0!==s.length&&(n=s+"/"+n,i=47===s.charCodeAt(0))}return n=r(n,!i),i?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(t){if(e(t),0===t.length)return".";var n=47===t.charCodeAt(0),i=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t="."),t.length>0&&i&&(t+="/"),n?"/"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var t,r=0;r<arguments.length;++r){var i=arguments[r];e(i),i.length>0&&(void 0===t?t=i:t+="/"+i)}return void 0===t?".":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return"";if((t=n.resolve(t))===(r=n.resolve(r)))return"";for(var i=1;i<t.length&&47===t.charCodeAt(i);++i);for(var o=t.length,s=o-i,h=1;h<r.length&&47===r.charCodeAt(h);++h);for(var a=r.length-h,c=s<a?s:a,f=-1,u=0;u<=c;++u){if(u===c){if(a>c){if(47===r.charCodeAt(h+u))return r.slice(h+u+1);if(0===u)return r.slice(h+u)}else s>c&&(47===t.charCodeAt(i+u)?f=u:0===u&&(f=0));break}var l=t.charCodeAt(i+u);if(l!==r.charCodeAt(h+u))break;47===l&&(f=u)}var g="";for(u=i+f+1;u<=o;++u)u!==o&&47!==t.charCodeAt(u)||(0===g.length?g+="..":g+="/..");return g.length>0?g+r.slice(h+f):(h+=f,47===r.charCodeAt(h)&&++h,r.slice(h))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return".";for(var r=t.charCodeAt(0),n=47===r,i=-1,o=!0,s=t.length-1;s>=1;--s)if(47===(r=t.charCodeAt(s))){if(!o){i=s;break}}else o=!1;return-1===i?n?"/":".":n&&1===i?"//":t.slice(0,i)},basename:function(t,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError('"ext" argument must be a string');e(t);var n,i=0,o=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return"";var h=r.length-1,a=-1;for(n=t.length-1;n>=0;--n){var c=t.charCodeAt(n);if(47===c){if(!s){i=n+1;break}}else-1===a&&(s=!1,a=n+1),h>=0&&(c===r.charCodeAt(h)?-1==--h&&(o=n):(h=-1,o=a))}return i===o?o=a:-1===o&&(o=t.length),t.slice(i,o)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){i=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?"":t.slice(i,o)},extname:function(t){e(t);for(var r=-1,n=0,i=-1,o=!0,s=0,h=t.length-1;h>=0;--h){var a=t.charCodeAt(h);if(47!==a)-1===i&&(o=!1,i=h+1),46===a?-1===r?r=h:1!==s&&(s=1):-1!==r&&(s=-1);else if(!o){n=h+1;break}}return-1===r||-1===i||0===s||1===s&&r===i-1&&r===n+1?"":t.slice(r,i)},format:function(t){if(null===t||"object"!=typeof t)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||"")+(e.ext||"");return r?r===e.root?r+n:r+"/"+n:n}(0,t)},parse:function(t){e(t);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return r;var n,i=t.charCodeAt(0),o=47===i;o?(r.root="/",n=1):n=0;for(var s=-1,h=0,a=-1,c=!0,f=t.length-1,u=0;f>=n;--f)if(47!==(i=t.charCodeAt(f)))-1===a&&(c=!1,a=f+1),46===i?-1===s?s=f:1!==u&&(u=1):-1!==s&&(u=-1);else if(!c){h=f+1;break}return-1===s||-1===a||0===u||1===u&&s===a-1&&s===h+1?-1!==a&&(r.base=r.name=0===h&&o?t.slice(1,a):t.slice(h,a)):(0===h&&o?(r.name=t.slice(1,s),r.base=t.slice(1,a)):(r.name=t.slice(h,s),r.base=t.slice(h,a)),r.ext=t.slice(s,a)),h>0?r.dir=t.slice(0,h-1):o&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,t.exports=n}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{let t;if(r.r(n),r.d(n,{URI:()=>f,Utils:()=>P}),"object"==typeof process)t="win32"===process.platform;else if("object"==typeof navigator){let e=navigator.userAgent;t=e.indexOf("Windows")>=0}const e=/^\w[\w\d+.-]*$/,i=/^\//,o=/^\/\//;function s(t,r){if(!t.scheme&&r)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${t.authority}", path: "${t.path}", query: "${t.query}", fragment: "${t.fragment}"}`);if(t.scheme&&!e.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!i.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(o.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}const h="",a="/",c=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class f{static isUri(t){return t instanceof f||!!t&&"string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme&&"string"==typeof t.fsPath&&"function"==typeof t.with&&"function"==typeof t.toString}scheme;authority;path;query;fragment;constructor(t,e,r,n,i,o=!1){"object"==typeof t?(this.scheme=t.scheme||h,this.authority=t.authority||h,this.path=t.path||h,this.query=t.query||h,this.fragment=t.fragment||h):(this.scheme=function(t,e){return t||e?t:"file"}(t,o),this.authority=e||h,this.path=function(t,e){switch(t){case"https":case"http":case"file":e?e[0]!==a&&(e=a+e):e=a}return e}(this.scheme,r||h),this.query=n||h,this.fragment=i||h,s(this,o))}get fsPath(){return m(this,!1)}with(t){if(!t)return this;let{scheme:e,authority:r,path:n,query:i,fragment:o}=t;return void 0===e?e=this.scheme:null===e&&(e=h),void 0===r?r=this.authority:null===r&&(r=h),void 0===n?n=this.path:null===n&&(n=h),void 0===i?i=this.query:null===i&&(i=h),void 0===o?o=this.fragment:null===o&&(o=h),e===this.scheme&&r===this.authority&&n===this.path&&i===this.query&&o===this.fragment?this:new l(e,r,n,i,o)}static parse(t,e=!1){const r=c.exec(t);return r?new l(r[2]||h,C(r[4]||h),C(r[5]||h),C(r[7]||h),C(r[9]||h),e):new l(h,h,h,h,h)}static file(e){let r=h;if(t&&(e=e.replace(/\\/g,a)),e[0]===a&&e[1]===a){const t=e.indexOf(a,2);-1===t?(r=e.substring(2),e=a):(r=e.substring(2,t),e=e.substring(t)||a)}return new l("file",r,e,h,h)}static from(t){const e=new l(t.scheme,t.authority,t.path,t.query,t.fragment);return s(e,!0),e}toString(t=!1){return y(this,t)}toJSON(){return this}static revive(t){if(t){if(t instanceof f)return t;{const e=new l(t);return e._formatted=t.external,e._fsPath=t._sep===u?t.fsPath:null,e}}return t}}const u=t?1:void 0;class l extends f{_formatted=null;_fsPath=null;get fsPath(){return this._fsPath||(this._fsPath=m(this,!1)),this._fsPath}toString(t=!1){return t?y(this,!0):(this._formatted||(this._formatted=y(this,!1)),this._formatted)}toJSON(){const t={$mid:1};return this._fsPath&&(t.fsPath=this._fsPath,t._sep=u),this._formatted&&(t.external=this._formatted),this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t}}const g={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function d(t,e,r){let n,i=-1;for(let o=0;o<t.length;o++){const s=t.charCodeAt(o);if(s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||45===s||46===s||95===s||126===s||e&&47===s||r&&91===s||r&&93===s||r&&58===s)-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),void 0!==n&&(n+=t.charAt(o));else{void 0===n&&(n=t.substr(0,o));const e=g[s];void 0!==e?(-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),n+=e):-1===i&&(i=o)}}return-1!==i&&(n+=encodeURIComponent(t.substring(i))),void 0!==n?n:t}function p(t){let e;for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);35===n||63===n?(void 0===e&&(e=t.substr(0,r)),e+=g[n]):void 0!==e&&(e+=t[r])}return void 0!==e?e:t}function m(e,r){let n;return n=e.authority&&e.path.length>1&&"file"===e.scheme?`//${e.authority}${e.path}`:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?r?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,t&&(n=n.replace(/\//g,"\\")),n}function y(t,e){const r=e?p:d;let n="",{scheme:i,authority:o,path:s,query:h,fragment:c}=t;if(i&&(n+=i,n+=":"),(o||"file"===i)&&(n+=a,n+=a),o){let t=o.indexOf("@");if(-1!==t){const e=o.substr(0,t);o=o.substr(t+1),t=e.lastIndexOf(":"),-1===t?n+=r(e,!1,!1):(n+=r(e.substr(0,t),!1,!1),n+=":",n+=r(e.substr(t+1),!1,!0)),n+="@"}o=o.toLowerCase(),t=o.lastIndexOf(":"),-1===t?n+=r(o,!1,!0):(n+=r(o.substr(0,t),!1,!0),n+=o.substr(t))}if(s){if(s.length>=3&&47===s.charCodeAt(0)&&58===s.charCodeAt(2)){const t=s.charCodeAt(1);t>=65&&t<=90&&(s=`/${String.fromCharCode(t+32)}:${s.substr(3)}`)}else if(s.length>=2&&58===s.charCodeAt(1)){const t=s.charCodeAt(0);t>=65&&t<=90&&(s=`${String.fromCharCode(t+32)}:${s.substr(2)}`)}n+=r(s,!0,!1)}return h&&(n+="?",n+=r(h,!1,!1)),c&&(n+="#",n+=e?c:d(c,!1,!1)),n}function v(t){try{return decodeURIComponent(t)}catch{return t.length>3?t.substr(0,3)+v(t.substr(3)):t}}const b=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function C(t){return t.match(b)?t.replace(b,(t=>v(t))):t}var A=r(470);const w=A.posix||A,x="/";var P;!function(t){t.joinPath=function(t,...e){return t.with({path:w.join(t.path,...e)})},t.resolvePath=function(t,...e){let r=t.path,n=!1;r[0]!==x&&(r=x+r,n=!0);let i=w.resolve(r,...e);return n&&i[0]===x&&!t.authority&&(i=i.substring(1)),t.with({path:i})},t.dirname=function(t){if(0===t.path.length||t.path===x)return t;let e=w.dirname(t.path);return 1===e.length&&46===e.charCodeAt(0)&&(e=""),t.with({path:e})},t.basename=function(t){return w.basename(t.path)},t.extname=function(t){return w.extname(t.path)}}(P||(P={}))})(),LIB=n})();const{URI: esm_URI,Utils}=LIB;
//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/glob.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Copyright (c) 2013, Nick Fitzgerald
 *  Licensed under the MIT License. See LICENCE.md in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function createRegex(glob, opts) {
    if (typeof glob !== 'string') {
        throw new TypeError('Expected a string');
    }
    const str = String(glob);
    // The regexp we are building, as a string.
    let reStr = "";
    // Whether we are matching so called "extended" globs (like bash) and should
    // support single character matching, matching ranges of characters, group
    // matching, etc.
    const extended = opts ? !!opts.extended : false;
    // When globstar is _false_ (default), '/foo/*' is translated a regexp like
    // '^\/foo\/.*$' which will match any string beginning with '/foo/'
    // When globstar is _true_, '/foo/*' is translated to regexp like
    // '^\/foo\/[^/]*$' which will match any string beginning with '/foo/' BUT
    // which does not have a '/' to the right of it.
    // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but
    // these will not '/foo/bar/baz', '/foo/bar/baz.txt'
    // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when
    // globstar is _false_
    const globstar = opts ? !!opts.globstar : false;
    // If we are doing extended matching, this boolean is true when we are inside
    // a group (eg {*.html,*.js}), and false otherwise.
    let inGroup = false;
    // RegExp flags (eg "i" ) to pass in to RegExp constructor.
    const flags = opts && typeof (opts.flags) === "string" ? opts.flags : "";
    let c;
    for (let i = 0, len = str.length; i < len; i++) {
        c = str[i];
        switch (c) {
            case "/":
            case "$":
            case "^":
            case "+":
            case ".":
            case "(":
            case ")":
            case "=":
            case "!":
            case "|":
                reStr += "\\" + c;
                break;
            case "?":
                if (extended) {
                    reStr += ".";
                    break;
                }
            case "[":
            case "]":
                if (extended) {
                    reStr += c;
                    break;
                }
            case "{":
                if (extended) {
                    inGroup = true;
                    reStr += "(";
                    break;
                }
            case "}":
                if (extended) {
                    inGroup = false;
                    reStr += ")";
                    break;
                }
            case ",":
                if (inGroup) {
                    reStr += "|";
                    break;
                }
                reStr += "\\" + c;
                break;
            case "*":
                // Move over all consecutive "*"'s.
                // Also store the previous and next characters
                const prevChar = str[i - 1];
                let starCount = 1;
                while (str[i + 1] === "*") {
                    starCount++;
                    i++;
                }
                const nextChar = str[i + 1];
                if (!globstar) {
                    // globstar is disabled, so treat any number of "*" as one
                    reStr += ".*";
                }
                else {
                    // globstar is enabled, so determine if this is a globstar segment
                    const isGlobstar = starCount > 1 // multiple "*"'s
                        && (prevChar === "/" || prevChar === undefined || prevChar === '{' || prevChar === ',') // from the start of the segment
                        && (nextChar === "/" || nextChar === undefined || nextChar === ',' || nextChar === '}'); // to the end of the segment
                    if (isGlobstar) {
                        if (nextChar === "/") {
                            i++; // move over the "/"
                        }
                        else if (prevChar === '/' && reStr.endsWith('\\/')) {
                            reStr = reStr.substr(0, reStr.length - 2);
                        }
                        // it's a globstar, so match zero or more path segments
                        reStr += "((?:[^/]*(?:\/|$))*)";
                    }
                    else {
                        // it's not a globstar, so only match one path segment
                        reStr += "([^/]*)";
                    }
                }
                break;
            default:
                reStr += c;
        }
    }
    // When regexp 'g' flag is specified don't
    // constrain the regular expression with ^ & $
    if (!flags || !~flags.indexOf('g')) {
        reStr = "^" + reStr + "$";
    }
    return new RegExp(reStr, flags);
}
;

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonSchemaService.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







const BANG = '!';
const PATH_SEP = '/';
class FilePatternAssociation {
    constructor(pattern, folderUri, uris) {
        this.folderUri = folderUri;
        this.uris = uris;
        this.globWrappers = [];
        try {
            for (let patternString of pattern) {
                const include = patternString[0] !== BANG;
                if (!include) {
                    patternString = patternString.substring(1);
                }
                if (patternString.length > 0) {
                    if (patternString[0] === PATH_SEP) {
                        patternString = patternString.substring(1);
                    }
                    this.globWrappers.push({
                        regexp: createRegex('**/' + patternString, { extended: true, globstar: true }),
                        include: include,
                    });
                }
            }
            ;
            if (folderUri) {
                folderUri = normalizeResourceForMatching(folderUri);
                if (!folderUri.endsWith('/')) {
                    folderUri = folderUri + '/';
                }
                this.folderUri = folderUri;
            }
        }
        catch (e) {
            this.globWrappers.length = 0;
            this.uris = [];
        }
    }
    matchesPattern(fileName) {
        if (this.folderUri && !fileName.startsWith(this.folderUri)) {
            return false;
        }
        let match = false;
        for (const { regexp, include } of this.globWrappers) {
            if (regexp.test(fileName)) {
                match = include;
            }
        }
        return match;
    }
    getURIs() {
        return this.uris;
    }
}
class SchemaHandle {
    constructor(service, uri, unresolvedSchemaContent) {
        this.service = service;
        this.uri = uri;
        this.dependencies = new Set();
        this.anchors = undefined;
        if (unresolvedSchemaContent) {
            this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));
        }
    }
    getUnresolvedSchema() {
        if (!this.unresolvedSchema) {
            this.unresolvedSchema = this.service.loadSchema(this.uri);
        }
        return this.unresolvedSchema;
    }
    getResolvedSchema() {
        if (!this.resolvedSchema) {
            this.resolvedSchema = this.getUnresolvedSchema().then(unresolved => {
                return this.service.resolveSchemaContent(unresolved, this);
            });
        }
        return this.resolvedSchema;
    }
    clearSchema() {
        const hasChanges = !!this.unresolvedSchema;
        this.resolvedSchema = undefined;
        this.unresolvedSchema = undefined;
        this.dependencies.clear();
        this.anchors = undefined;
        return hasChanges;
    }
}
class UnresolvedSchema {
    constructor(schema, errors = []) {
        this.schema = schema;
        this.errors = errors;
    }
}
class ResolvedSchema {
    constructor(schema, errors = [], warnings = [], schemaDraft) {
        this.schema = schema;
        this.errors = errors;
        this.warnings = warnings;
        this.schemaDraft = schemaDraft;
    }
    getSection(path) {
        const schemaRef = this.getSectionRecursive(path, this.schema);
        if (schemaRef) {
            return asSchema(schemaRef);
        }
        return undefined;
    }
    getSectionRecursive(path, schema) {
        if (!schema || typeof schema === 'boolean' || path.length === 0) {
            return schema;
        }
        const next = path.shift();
        if (schema.properties && typeof schema.properties[next]) {
            return this.getSectionRecursive(path, schema.properties[next]);
        }
        else if (schema.patternProperties) {
            for (const pattern of Object.keys(schema.patternProperties)) {
                const regex = extendedRegExp(pattern);
                if (regex?.test(next)) {
                    return this.getSectionRecursive(path, schema.patternProperties[pattern]);
                }
            }
        }
        else if (typeof schema.additionalProperties === 'object') {
            return this.getSectionRecursive(path, schema.additionalProperties);
        }
        else if (next.match('[0-9]+')) {
            if (Array.isArray(schema.items)) {
                const index = parseInt(next, 10);
                if (!isNaN(index) && schema.items[index]) {
                    return this.getSectionRecursive(path, schema.items[index]);
                }
            }
            else if (schema.items) {
                return this.getSectionRecursive(path, schema.items);
            }
        }
        return undefined;
    }
}
class JSONSchemaService {
    constructor(requestService, contextService, promiseConstructor) {
        this.contextService = contextService;
        this.requestService = requestService;
        this.promiseConstructor = promiseConstructor || Promise;
        this.callOnDispose = [];
        this.contributionSchemas = {};
        this.contributionAssociations = [];
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
    }
    getRegisteredSchemaIds(filter) {
        return Object.keys(this.registeredSchemasIds).filter(id => {
            const scheme = esm_URI.parse(id).scheme;
            return scheme !== 'schemaservice' && (!filter || filter(scheme));
        });
    }
    get promise() {
        return this.promiseConstructor;
    }
    dispose() {
        while (this.callOnDispose.length > 0) {
            this.callOnDispose.pop()();
        }
    }
    onResourceChange(uri) {
        // always clear this local cache when a resource changes
        this.cachedSchemaForResource = undefined;
        let hasChanges = false;
        uri = normalizeId(uri);
        const toWalk = [uri];
        const all = Object.keys(this.schemasById).map(key => this.schemasById[key]);
        while (toWalk.length) {
            const curr = toWalk.pop();
            for (let i = 0; i < all.length; i++) {
                const handle = all[i];
                if (handle && (handle.uri === curr || handle.dependencies.has(curr))) {
                    if (handle.uri !== curr) {
                        toWalk.push(handle.uri);
                    }
                    if (handle.clearSchema()) {
                        hasChanges = true;
                    }
                    all[i] = undefined;
                }
            }
        }
        return hasChanges;
    }
    setSchemaContributions(schemaContributions) {
        if (schemaContributions.schemas) {
            const schemas = schemaContributions.schemas;
            for (const id in schemas) {
                const normalizedId = normalizeId(id);
                this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas[id]);
            }
        }
        if (Array.isArray(schemaContributions.schemaAssociations)) {
            const schemaAssociations = schemaContributions.schemaAssociations;
            for (let schemaAssociation of schemaAssociations) {
                const uris = schemaAssociation.uris.map(normalizeId);
                const association = this.addFilePatternAssociation(schemaAssociation.pattern, schemaAssociation.folderUri, uris);
                this.contributionAssociations.push(association);
            }
        }
    }
    addSchemaHandle(id, unresolvedSchemaContent) {
        const schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);
        this.schemasById[id] = schemaHandle;
        return schemaHandle;
    }
    getOrAddSchemaHandle(id, unresolvedSchemaContent) {
        return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);
    }
    addFilePatternAssociation(pattern, folderUri, uris) {
        const fpa = new FilePatternAssociation(pattern, folderUri, uris);
        this.filePatternAssociations.push(fpa);
        return fpa;
    }
    registerExternalSchema(config) {
        const id = normalizeId(config.uri);
        this.registeredSchemasIds[id] = true;
        this.cachedSchemaForResource = undefined;
        if (config.fileMatch && config.fileMatch.length) {
            this.addFilePatternAssociation(config.fileMatch, config.folderUri, [id]);
        }
        return config.schema ? this.addSchemaHandle(id, config.schema) : this.getOrAddSchemaHandle(id);
    }
    clearExternalSchemas() {
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
        this.cachedSchemaForResource = undefined;
        for (const id in this.contributionSchemas) {
            this.schemasById[id] = this.contributionSchemas[id];
            this.registeredSchemasIds[id] = true;
        }
        for (const contributionAssociation of this.contributionAssociations) {
            this.filePatternAssociations.push(contributionAssociation);
        }
    }
    getResolvedSchema(schemaId) {
        const id = normalizeId(schemaId);
        const schemaHandle = this.schemasById[id];
        if (schemaHandle) {
            return schemaHandle.getResolvedSchema();
        }
        return this.promise.resolve(undefined);
    }
    loadSchema(url) {
        if (!this.requestService) {
            const errorMessage = t('Unable to load schema from \'{0}\'. No schema request service available', toDisplayString(url));
            return this.promise.resolve(new UnresolvedSchema({}, [errorMessage]));
        }
        if (url.startsWith('http://json-schema.org/')) {
            url = 'https' + url.substring(4); // always access json-schema.org with https. See https://github.com/microsoft/vscode/issues/195189
        }
        return this.requestService(url).then(content => {
            if (!content) {
                const errorMessage = t('Unable to load schema from \'{0}\': No content.', toDisplayString(url));
                return new UnresolvedSchema({}, [errorMessage]);
            }
            const errors = [];
            if (content.charCodeAt(0) === 65279) {
                errors.push(t('Problem reading content from \'{0}\': UTF-8 with BOM detected, only UTF 8 is allowed.', toDisplayString(url)));
                content = content.trimStart();
            }
            let schemaContent = {};
            const jsonErrors = [];
            schemaContent = main.parse(content, jsonErrors);
            if (jsonErrors.length) {
                errors.push(t('Unable to parse content from \'{0}\': Parse error at offset {1}.', toDisplayString(url), jsonErrors[0].offset));
            }
            return new UnresolvedSchema(schemaContent, errors);
        }, (error) => {
            let errorMessage = error.toString();
            const errorSplit = error.toString().split('Error: ');
            if (errorSplit.length > 1) {
                // more concise error message, URL and context are attached by caller anyways
                errorMessage = errorSplit[1];
            }
            if (endsWith(errorMessage, '.')) {
                errorMessage = errorMessage.substr(0, errorMessage.length - 1);
            }
            return new UnresolvedSchema({}, [t('Unable to load schema from \'{0}\': {1}.', toDisplayString(url), errorMessage)]);
        });
    }
    resolveSchemaContent(schemaToResolve, handle) {
        const resolveErrors = schemaToResolve.errors.slice(0);
        const schema = schemaToResolve.schema;
        let schemaDraft = schema.$schema ? normalizeId(schema.$schema) : undefined;
        if (schemaDraft === 'http://json-schema.org/draft-03/schema') {
            return this.promise.resolve(new ResolvedSchema({}, [t("Draft-03 schemas are not supported.")], [], schemaDraft));
        }
        let usesUnsupportedFeatures = new Set();
        const contextService = this.contextService;
        const findSectionByJSONPointer = (schema, path) => {
            path = decodeURIComponent(path);
            let current = schema;
            if (path[0] === '/') {
                path = path.substring(1);
            }
            path.split('/').some((part) => {
                part = part.replace(/~1/g, '/').replace(/~0/g, '~');
                current = current[part];
                return !current;
            });
            return current;
        };
        const findSchemaById = (schema, handle, id) => {
            if (!handle.anchors) {
                handle.anchors = collectAnchors(schema);
            }
            return handle.anchors.get(id);
        };
        const merge = (target, section) => {
            for (const key in section) {
                if (section.hasOwnProperty(key) && key !== 'id' && key !== '$id') {
                    target[key] = section[key];
                }
            }
        };
        const mergeRef = (target, sourceRoot, sourceHandle, refSegment) => {
            let section;
            if (refSegment === undefined || refSegment.length === 0) {
                section = sourceRoot;
            }
            else if (refSegment.charAt(0) === '/') {
                // A $ref to a JSON Pointer (i.e #/definitions/foo)
                section = findSectionByJSONPointer(sourceRoot, refSegment);
            }
            else {
                // A $ref to a sub-schema with an $id (i.e #hello)
                section = findSchemaById(sourceRoot, sourceHandle, refSegment);
            }
            if (section) {
                merge(target, section);
            }
            else {
                resolveErrors.push(t('$ref \'{0}\' in \'{1}\' can not be resolved.', refSegment || '', sourceHandle.uri));
            }
        };
        const resolveExternalLink = (node, uri, refSegment, parentHandle) => {
            if (contextService && !/^[A-Za-z][A-Za-z0-9+\-.+]*:\/\/.*/.test(uri)) {
                uri = contextService.resolveRelativePath(uri, parentHandle.uri);
            }
            uri = normalizeId(uri);
            const referencedHandle = this.getOrAddSchemaHandle(uri);
            return referencedHandle.getUnresolvedSchema().then(unresolvedSchema => {
                parentHandle.dependencies.add(uri);
                if (unresolvedSchema.errors.length) {
                    const loc = refSegment ? uri + '#' + refSegment : uri;
                    resolveErrors.push(t('Problems loading reference \'{0}\': {1}', loc, unresolvedSchema.errors[0]));
                }
                mergeRef(node, unresolvedSchema.schema, referencedHandle, refSegment);
                return resolveRefs(node, unresolvedSchema.schema, referencedHandle);
            });
        };
        const resolveRefs = (node, parentSchema, parentHandle) => {
            const openPromises = [];
            this.traverseNodes(node, next => {
                const seenRefs = new Set();
                while (next.$ref) {
                    const ref = next.$ref;
                    const segments = ref.split('#', 2);
                    delete next.$ref;
                    if (segments[0].length > 0) {
                        // This is a reference to an external schema
                        openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentHandle));
                        return;
                    }
                    else {
                        // This is a reference inside the current schema
                        if (!seenRefs.has(ref)) {
                            const id = segments[1];
                            mergeRef(next, parentSchema, parentHandle, id);
                            seenRefs.add(ref);
                        }
                    }
                }
                if (next.$recursiveRef) {
                    usesUnsupportedFeatures.add('$recursiveRef');
                }
                if (next.$dynamicRef) {
                    usesUnsupportedFeatures.add('$dynamicRef');
                }
            });
            return this.promise.all(openPromises);
        };
        const collectAnchors = (root) => {
            const result = new Map();
            this.traverseNodes(root, next => {
                const id = next.$id || next.id;
                const anchor = isString(id) && id.charAt(0) === '#' ? id.substring(1) : next.$anchor;
                if (anchor) {
                    if (result.has(anchor)) {
                        resolveErrors.push(t('Duplicate anchor declaration: \'{0}\'', anchor));
                    }
                    else {
                        result.set(anchor, next);
                    }
                }
                if (next.$recursiveAnchor) {
                    usesUnsupportedFeatures.add('$recursiveAnchor');
                }
                if (next.$dynamicAnchor) {
                    usesUnsupportedFeatures.add('$dynamicAnchor');
                }
            });
            return result;
        };
        return resolveRefs(schema, schema, handle).then(_ => {
            let resolveWarnings = [];
            if (usesUnsupportedFeatures.size) {
                resolveWarnings.push(t('The schema uses meta-schema features ({0}) that are not yet supported by the validator.', Array.from(usesUnsupportedFeatures.keys()).join(', ')));
            }
            return new ResolvedSchema(schema, resolveErrors, resolveWarnings, schemaDraft);
        });
    }
    traverseNodes(root, handle) {
        if (!root || typeof root !== 'object') {
            return Promise.resolve(null);
        }
        const seen = new Set();
        const collectEntries = (...entries) => {
            for (const entry of entries) {
                if (isObject(entry)) {
                    toWalk.push(entry);
                }
            }
        };
        const collectMapEntries = (...maps) => {
            for (const map of maps) {
                if (isObject(map)) {
                    for (const k in map) {
                        const key = k;
                        const entry = map[key];
                        if (isObject(entry)) {
                            toWalk.push(entry);
                        }
                    }
                }
            }
        };
        const collectArrayEntries = (...arrays) => {
            for (const array of arrays) {
                if (Array.isArray(array)) {
                    for (const entry of array) {
                        if (isObject(entry)) {
                            toWalk.push(entry);
                        }
                    }
                }
            }
        };
        const collectEntryOrArrayEntries = (items) => {
            if (Array.isArray(items)) {
                for (const entry of items) {
                    if (isObject(entry)) {
                        toWalk.push(entry);
                    }
                }
            }
            else if (isObject(items)) {
                toWalk.push(items);
            }
        };
        const toWalk = [root];
        let next = toWalk.pop();
        while (next) {
            if (!seen.has(next)) {
                seen.add(next);
                handle(next);
                collectEntries(next.additionalItems, next.additionalProperties, next.not, next.contains, next.propertyNames, next.if, next.then, next.else, next.unevaluatedItems, next.unevaluatedProperties);
                collectMapEntries(next.definitions, next.$defs, next.properties, next.patternProperties, next.dependencies, next.dependentSchemas);
                collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.prefixItems);
                collectEntryOrArrayEntries(next.items);
            }
            next = toWalk.pop();
        }
    }
    ;
    getSchemaFromProperty(resource, document) {
        if (document.root?.type === 'object') {
            for (const p of document.root.properties) {
                if (p.keyNode.value === '$schema' && p.valueNode?.type === 'string') {
                    let schemaId = p.valueNode.value;
                    if (this.contextService && !/^\w[\w\d+.-]*:/.test(schemaId)) { // has scheme
                        schemaId = this.contextService.resolveRelativePath(schemaId, resource);
                    }
                    return schemaId;
                }
            }
        }
        return undefined;
    }
    getAssociatedSchemas(resource) {
        const seen = Object.create(null);
        const schemas = [];
        const normalizedResource = normalizeResourceForMatching(resource);
        for (const entry of this.filePatternAssociations) {
            if (entry.matchesPattern(normalizedResource)) {
                for (const schemaId of entry.getURIs()) {
                    if (!seen[schemaId]) {
                        schemas.push(schemaId);
                        seen[schemaId] = true;
                    }
                }
            }
        }
        return schemas;
    }
    getSchemaURIsForResource(resource, document) {
        let schemeId = document && this.getSchemaFromProperty(resource, document);
        if (schemeId) {
            return [schemeId];
        }
        return this.getAssociatedSchemas(resource);
    }
    getSchemaForResource(resource, document) {
        if (document) {
            // first use $schema if present
            let schemeId = this.getSchemaFromProperty(resource, document);
            if (schemeId) {
                const id = normalizeId(schemeId);
                return this.getOrAddSchemaHandle(id).getResolvedSchema();
            }
        }
        if (this.cachedSchemaForResource && this.cachedSchemaForResource.resource === resource) {
            return this.cachedSchemaForResource.resolvedSchema;
        }
        const schemas = this.getAssociatedSchemas(resource);
        const resolvedSchema = schemas.length > 0 ? this.createCombinedSchema(resource, schemas).getResolvedSchema() : this.promise.resolve(undefined);
        this.cachedSchemaForResource = { resource, resolvedSchema };
        return resolvedSchema;
    }
    createCombinedSchema(resource, schemaIds) {
        if (schemaIds.length === 1) {
            return this.getOrAddSchemaHandle(schemaIds[0]);
        }
        else {
            const combinedSchemaId = 'schemaservice://combinedSchema/' + encodeURIComponent(resource);
            const combinedSchema = {
                allOf: schemaIds.map(schemaId => ({ $ref: schemaId }))
            };
            return this.addSchemaHandle(combinedSchemaId, combinedSchema);
        }
    }
    getMatchingSchemas(document, jsonDocument, schema) {
        if (schema) {
            const id = schema.id || ('schemaservice://untitled/matchingSchemas/' + jsonSchemaService_idCounter++);
            const handle = this.addSchemaHandle(id, schema);
            return handle.getResolvedSchema().then(resolvedSchema => {
                return jsonDocument.getMatchingSchemas(resolvedSchema.schema).filter(s => !s.inverted);
            });
        }
        return this.getSchemaForResource(document.uri, jsonDocument).then(schema => {
            if (schema) {
                return jsonDocument.getMatchingSchemas(schema.schema).filter(s => !s.inverted);
            }
            return [];
        });
    }
}
let jsonSchemaService_idCounter = 0;
function normalizeId(id) {
    // remove trailing '#', normalize drive capitalization
    try {
        return esm_URI.parse(id).toString(true);
    }
    catch (e) {
        return id;
    }
}
function normalizeResourceForMatching(resource) {
    // remove queries and fragments, normalize drive capitalization
    try {
        return esm_URI.parse(resource).with({ fragment: null, query: null }).toString(true);
    }
    catch (e) {
        return resource;
    }
}
function toDisplayString(url) {
    try {
        const uri = esm_URI.parse(url);
        if (uri.scheme === 'file') {
            return uri.fsPath;
        }
    }
    catch (e) {
        // ignore
    }
    return url;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonFolding.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


function getFoldingRanges(document, context) {
    const ranges = [];
    const nestingLevels = [];
    const stack = [];
    let prevStart = -1;
    const scanner = (0,main.createScanner)(document.getText(), false);
    let token = scanner.scan();
    function addRange(range) {
        ranges.push(range);
        nestingLevels.push(stack.length);
    }
    while (token !== 17 /* SyntaxKind.EOF */) {
        switch (token) {
            case 1 /* SyntaxKind.OpenBraceToken */:
            case 3 /* SyntaxKind.OpenBracketToken */: {
                const startLine = document.positionAt(scanner.getTokenOffset()).line;
                const range = { startLine, endLine: startLine, kind: token === 1 /* SyntaxKind.OpenBraceToken */ ? 'object' : 'array' };
                stack.push(range);
                break;
            }
            case 2 /* SyntaxKind.CloseBraceToken */:
            case 4 /* SyntaxKind.CloseBracketToken */: {
                const kind = token === 2 /* SyntaxKind.CloseBraceToken */ ? 'object' : 'array';
                if (stack.length > 0 && stack[stack.length - 1].kind === kind) {
                    const range = stack.pop();
                    const line = document.positionAt(scanner.getTokenOffset()).line;
                    if (range && line > range.startLine + 1 && prevStart !== range.startLine) {
                        range.endLine = line - 1;
                        addRange(range);
                        prevStart = range.startLine;
                    }
                }
                break;
            }
            case 13 /* SyntaxKind.BlockCommentTrivia */: {
                const startLine = document.positionAt(scanner.getTokenOffset()).line;
                const endLine = document.positionAt(scanner.getTokenOffset() + scanner.getTokenLength()).line;
                if (scanner.getTokenError() === 1 /* ScanError.UnexpectedEndOfComment */ && startLine + 1 < document.lineCount) {
                    scanner.setPosition(document.offsetAt(Position.create(startLine + 1, 0)));
                }
                else {
                    if (startLine < endLine) {
                        addRange({ startLine, endLine, kind: FoldingRangeKind.Comment });
                        prevStart = startLine;
                    }
                }
                break;
            }
            case 12 /* SyntaxKind.LineCommentTrivia */: {
                const text = document.getText().substr(scanner.getTokenOffset(), scanner.getTokenLength());
                const m = text.match(/^\/\/\s*#(region\b)|(endregion\b)/);
                if (m) {
                    const line = document.positionAt(scanner.getTokenOffset()).line;
                    if (m[1]) { // start pattern match
                        const range = { startLine: line, endLine: line, kind: FoldingRangeKind.Region };
                        stack.push(range);
                    }
                    else {
                        let i = stack.length - 1;
                        while (i >= 0 && stack[i].kind !== FoldingRangeKind.Region) {
                            i--;
                        }
                        if (i >= 0) {
                            const range = stack[i];
                            stack.length = i;
                            if (line > range.startLine && prevStart !== range.startLine) {
                                range.endLine = line;
                                addRange(range);
                                prevStart = range.startLine;
                            }
                        }
                    }
                }
                break;
            }
        }
        token = scanner.scan();
    }
    const rangeLimit = context && context.rangeLimit;
    if (typeof rangeLimit !== 'number' || ranges.length <= rangeLimit) {
        return ranges;
    }
    if (context && context.onRangeLimitExceeded) {
        context.onRangeLimitExceeded(document.uri);
    }
    const counts = [];
    for (let level of nestingLevels) {
        if (level < 30) {
            counts[level] = (counts[level] || 0) + 1;
        }
    }
    let entries = 0;
    let maxLevel = 0;
    for (let i = 0; i < counts.length; i++) {
        const n = counts[i];
        if (n) {
            if (n + entries > rangeLimit) {
                maxLevel = i;
                break;
            }
            entries += n;
        }
    }
    const result = [];
    for (let i = 0; i < ranges.length; i++) {
        const level = nestingLevels[i];
        if (typeof level === 'number') {
            if (level < maxLevel || (level === maxLevel && entries++ < rangeLimit)) {
                result.push(ranges[i]);
            }
        }
    }
    return result;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonSelectionRanges.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


function getSelectionRanges(document, positions, doc) {
    function getSelectionRange(position) {
        let offset = document.offsetAt(position);
        let node = doc.getNodeFromOffset(offset, true);
        const result = [];
        while (node) {
            switch (node.type) {
                case 'string':
                case 'object':
                case 'array':
                    // range without ", [ or {
                    const cStart = node.offset + 1, cEnd = node.offset + node.length - 1;
                    if (cStart < cEnd && offset >= cStart && offset <= cEnd) {
                        result.push(newRange(cStart, cEnd));
                    }
                    result.push(newRange(node.offset, node.offset + node.length));
                    break;
                case 'number':
                case 'boolean':
                case 'null':
                case 'property':
                    result.push(newRange(node.offset, node.offset + node.length));
                    break;
            }
            if (node.type === 'property' || node.parent && node.parent.type === 'array') {
                const afterCommaOffset = getOffsetAfterNextToken(node.offset + node.length, 5 /* SyntaxKind.CommaToken */);
                if (afterCommaOffset !== -1) {
                    result.push(newRange(node.offset, afterCommaOffset));
                }
            }
            node = node.parent;
        }
        let current = undefined;
        for (let index = result.length - 1; index >= 0; index--) {
            current = SelectionRange.create(result[index], current);
        }
        if (!current) {
            current = SelectionRange.create(Range.create(position, position));
        }
        return current;
    }
    function newRange(start, end) {
        return Range.create(document.positionAt(start), document.positionAt(end));
    }
    const scanner = (0,main.createScanner)(document.getText(), true);
    function getOffsetAfterNextToken(offset, expectedToken) {
        scanner.setPosition(offset);
        let token = scanner.scan();
        if (token === expectedToken) {
            return scanner.getTokenOffset() + scanner.getTokenLength();
        }
        return -1;
    }
    return positions.map(getSelectionRange);
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/format.js


function format_format(documentToFormat, formattingOptions, formattingRange) {
    let range = undefined;
    if (formattingRange) {
        const offset = documentToFormat.offsetAt(formattingRange.start);
        const length = documentToFormat.offsetAt(formattingRange.end) - offset;
        range = { offset, length };
    }
    const options = {
        tabSize: formattingOptions ? formattingOptions.tabSize : 4,
        insertSpaces: formattingOptions?.insertSpaces === true,
        insertFinalNewline: formattingOptions?.insertFinalNewline === true,
        eol: '\n',
        keepLines: formattingOptions?.keepLines === true
    };
    return (0,main.format)(documentToFormat.getText(), range, options).map(edit => {
        return TextEdit.replace(Range.create(documentToFormat.positionAt(edit.offset), documentToFormat.positionAt(edit.offset + edit.length)), edit.content);
    });
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/propertyTree.js
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
var Container;
(function (Container) {
    Container[Container["Object"] = 0] = "Object";
    Container[Container["Array"] = 1] = "Array";
})(Container || (Container = {}));
class PropertyTree {
    constructor(propertyName, beginningLineNumber) {
        this.propertyName = propertyName ?? '';
        this.beginningLineNumber = beginningLineNumber;
        this.childrenProperties = [];
        this.lastProperty = false;
        this.noKeyName = false;
    }
    addChildProperty(childProperty) {
        childProperty.parent = this;
        if (this.childrenProperties.length > 0) {
            let insertionIndex = 0;
            if (childProperty.noKeyName) {
                insertionIndex = this.childrenProperties.length;
            }
            else {
                insertionIndex = binarySearchOnPropertyArray(this.childrenProperties, childProperty, compareProperties);
            }
            if (insertionIndex < 0) {
                insertionIndex = (insertionIndex * -1) - 1;
            }
            this.childrenProperties.splice(insertionIndex, 0, childProperty);
        }
        else {
            this.childrenProperties.push(childProperty);
        }
        return childProperty;
    }
}
function compareProperties(propertyTree1, propertyTree2) {
    const propertyName1 = propertyTree1.propertyName.toLowerCase();
    const propertyName2 = propertyTree2.propertyName.toLowerCase();
    if (propertyName1 < propertyName2) {
        return -1;
    }
    else if (propertyName1 > propertyName2) {
        return 1;
    }
    return 0;
}
function binarySearchOnPropertyArray(propertyTreeArray, propertyTree, compare_fn) {
    const propertyName = propertyTree.propertyName.toLowerCase();
    const firstPropertyInArrayName = propertyTreeArray[0].propertyName.toLowerCase();
    const lastPropertyInArrayName = propertyTreeArray[propertyTreeArray.length - 1].propertyName.toLowerCase();
    if (propertyName < firstPropertyInArrayName) {
        return 0;
    }
    if (propertyName > lastPropertyInArrayName) {
        return propertyTreeArray.length;
    }
    let m = 0;
    let n = propertyTreeArray.length - 1;
    while (m <= n) {
        let k = (n + m) >> 1;
        let cmp = compare_fn(propertyTree, propertyTreeArray[k]);
        if (cmp > 0) {
            m = k + 1;
        }
        else if (cmp < 0) {
            n = k - 1;
        }
        else {
            return k;
        }
    }
    return -m - 1;
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/utils/sort.js
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
// import { TextEdit} from 'vscode-languageserver-textdocument';




function sort(documentToSort, formattingOptions) {
    const options = {
        ...formattingOptions,
        keepLines: false, // keepLines must be false so that the properties are on separate lines for the sorting
    };
    const formattedJsonString = esm_main.TextDocument.applyEdits(documentToSort, format_format(documentToSort, options, undefined));
    const formattedJsonDocument = esm_main.TextDocument.create('test://test.json', 'json', 0, formattedJsonString);
    const jsonPropertyTree = findJsoncPropertyTree(formattedJsonDocument);
    const sortedJsonDocument = sortJsoncDocument(formattedJsonDocument, jsonPropertyTree);
    const edits = format_format(sortedJsonDocument, options, undefined);
    const sortedAndFormattedJsonDocument = esm_main.TextDocument.applyEdits(sortedJsonDocument, edits);
    return [TextEdit.replace(Range.create(Position.create(0, 0), documentToSort.positionAt(documentToSort.getText().length)), sortedAndFormattedJsonDocument)];
}
function findJsoncPropertyTree(formattedDocument) {
    const formattedString = formattedDocument.getText();
    const scanner = (0,main.createScanner)(formattedString, false);
    // The tree that will be returned
    let rootTree = new PropertyTree();
    // The tree where the current properties can be added as children
    let currentTree = rootTree;
    // The tree representing the current property analyzed
    let currentProperty = rootTree;
    // The tree representing the previous property analyzed
    let lastProperty = rootTree;
    // The current scanned token
    let token = undefined;
    // Line number of the last token found
    let lastTokenLine = 0;
    // Total number of characters on the lines prior to current line 
    let numberOfCharactersOnPreviousLines = 0;
    // The last token scanned that is not trivial, nor a comment
    let lastNonTriviaNonCommentToken = undefined;
    // The second to last token scanned that is not trivial, nor a comment
    let secondToLastNonTriviaNonCommentToken = undefined;
    // Line number of last token that is not trivial, nor a comment
    let lineOfLastNonTriviaNonCommentToken = -1;
    // End index on its line of last token that is not trivial, nor a comment
    let endIndexOfLastNonTriviaNonCommentToken = -1;
    // Line number of the start of the range of current/next property
    let beginningLineNumber = 0;
    // Line number of the end of the range of current/next property
    let endLineNumber = 0;
    // Stack indicating whether we are inside of an object or an array
    let currentContainerStack = [];
    // Boolean indicating that the current property end line number needs to be updated. Used only when block comments are encountered.
    let updateLastPropertyEndLineNumber = false;
    // Boolean indicating that the beginning line number should be updated. Used only when block comments are encountered. 
    let updateBeginningLineNumber = false;
    while ((token = scanner.scan()) !== 17 /* SyntaxKind.EOF */) {
        // In the case when a block comment has been encountered that starts on the same line as the comma ending a property, update the end line of that
        // property so that it covers the block comment. For example, if we have: 
        // 1. "key" : {}, /* some block
        // 2. comment */
        // Then, the end line of the property "key" should be line 2 not line 1
        if (updateLastPropertyEndLineNumber === true
            && token !== 14 /* SyntaxKind.LineBreakTrivia */
            && token !== 15 /* SyntaxKind.Trivia */
            && token !== 12 /* SyntaxKind.LineCommentTrivia */
            && token !== 13 /* SyntaxKind.BlockCommentTrivia */
            && currentProperty.endLineNumber === undefined) {
            let endLineNumber = scanner.getTokenStartLine();
            // Update the end line number in the case when the last property visited is a container (object or array)
            if (secondToLastNonTriviaNonCommentToken === 2 /* SyntaxKind.CloseBraceToken */
                || secondToLastNonTriviaNonCommentToken === 4 /* SyntaxKind.CloseBracketToken */) {
                lastProperty.endLineNumber = endLineNumber - 1;
            }
            // Update the end line number in the case when the last property visited is a simple property 
            else {
                currentProperty.endLineNumber = endLineNumber - 1;
            }
            beginningLineNumber = endLineNumber;
            updateLastPropertyEndLineNumber = false;
        }
        // When a block comment follows an open brace or an open bracket, that block comment should be associated to that brace or bracket, not the property below it. For example, for:
        // 1. { /*
        // 2. ... */
        // 3. "key" : {}
        // 4. }
        // Instead of associating the block comment to the property on line 3, it is associate to the property on line 1
        if (updateBeginningLineNumber === true
            && token !== 14 /* SyntaxKind.LineBreakTrivia */
            && token !== 15 /* SyntaxKind.Trivia */
            && token !== 12 /* SyntaxKind.LineCommentTrivia */
            && token !== 13 /* SyntaxKind.BlockCommentTrivia */) {
            beginningLineNumber = scanner.getTokenStartLine();
            updateBeginningLineNumber = false;
        }
        // Update the number of characters on all the previous lines each time the new token is on a different line to the previous token
        if (scanner.getTokenStartLine() !== lastTokenLine) {
            for (let i = lastTokenLine; i < scanner.getTokenStartLine(); i++) {
                const lengthOfLine = formattedDocument.getText(Range.create(Position.create(i, 0), Position.create(i + 1, 0))).length;
                numberOfCharactersOnPreviousLines = numberOfCharactersOnPreviousLines + lengthOfLine;
            }
            lastTokenLine = scanner.getTokenStartLine();
        }
        switch (token) {
            // When a string is found, if it follows an open brace or a comma token and it is within an object, then it corresponds to a key name, not a simple string
            case 10 /* SyntaxKind.StringLiteral */: {
                if ((lastNonTriviaNonCommentToken === undefined
                    || lastNonTriviaNonCommentToken === 1 /* SyntaxKind.OpenBraceToken */
                    || (lastNonTriviaNonCommentToken === 5 /* SyntaxKind.CommaToken */
                        && currentContainerStack[currentContainerStack.length - 1] === Container.Object))) {
                    // In that case create the child property which starts at beginningLineNumber, add it to the current tree
                    const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);
                    lastProperty = currentProperty;
                    currentProperty = currentTree.addChildProperty(childProperty);
                }
                break;
            }
            // When the token is an open bracket, then we enter into an array
            case 3 /* SyntaxKind.OpenBracketToken */: {
                // If the root tree beginning line number is not defined, then this open bracket is the first open bracket in the document
                if (rootTree.beginningLineNumber === undefined) {
                    rootTree.beginningLineNumber = scanner.getTokenStartLine();
                }
                // Suppose we are inside of an object, then the current array is associated to a key, and has already been created
                // We have the following configuration: {"a": "val", "array": [...], "b": "val"}
                // In that case navigate down to the child property
                if (currentContainerStack[currentContainerStack.length - 1] === Container.Object) {
                    currentTree = currentProperty;
                }
                // Suppose we are inside of an array, then since the current array is not associated to a key, it has not been created yet
                // We have the following configuration: ["a", [...], "b"]
                // In that case create the property and navigate down
                else if (currentContainerStack[currentContainerStack.length - 1] === Container.Array) {
                    const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);
                    childProperty.noKeyName = true;
                    lastProperty = currentProperty;
                    currentProperty = currentTree.addChildProperty(childProperty);
                    currentTree = currentProperty;
                }
                currentContainerStack.push(Container.Array);
                currentProperty.type = Container.Array;
                beginningLineNumber = scanner.getTokenStartLine();
                beginningLineNumber++;
                break;
            }
            // When the token is an open brace, then we enter into an object
            case 1 /* SyntaxKind.OpenBraceToken */: {
                // If the root tree beginning line number is not defined, then this open brace is the first open brace in the document
                if (rootTree.beginningLineNumber === undefined) {
                    rootTree.beginningLineNumber = scanner.getTokenStartLine();
                }
                // 1. If we are inside of an objet, the current object is associated to a key and has already been created
                // We have the following configuration: {"a": "val", "object": {...}, "b": "val"}
                // 2. Otherwise the current object property is inside of an array, not associated to a key name and the property has not yet been created
                // We have the following configuration: ["a", {...}, "b"]
                else if (currentContainerStack[currentContainerStack.length - 1] === Container.Array) {
                    const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);
                    childProperty.noKeyName = true;
                    lastProperty = currentProperty;
                    currentProperty = currentTree.addChildProperty(childProperty);
                }
                currentProperty.type = Container.Object;
                currentContainerStack.push(Container.Object);
                currentTree = currentProperty;
                beginningLineNumber = scanner.getTokenStartLine();
                beginningLineNumber++;
                break;
            }
            case 4 /* SyntaxKind.CloseBracketToken */: {
                endLineNumber = scanner.getTokenStartLine();
                currentContainerStack.pop();
                // If the last non-trivial non-comment token is a closing brace or bracket, then the currentProperty end line number has not been set yet so set it
                // The configuration considered is: [..., {}] or [..., []]
                if (currentProperty.endLineNumber === undefined
                    && (lastNonTriviaNonCommentToken === 2 /* SyntaxKind.CloseBraceToken */
                        || lastNonTriviaNonCommentToken === 4 /* SyntaxKind.CloseBracketToken */)) {
                    currentProperty.endLineNumber = endLineNumber - 1;
                    currentProperty.lastProperty = true;
                    currentProperty.lineWhereToAddComma = lineOfLastNonTriviaNonCommentToken;
                    currentProperty.indexWhereToAddComa = endIndexOfLastNonTriviaNonCommentToken;
                    lastProperty = currentProperty;
                    currentProperty = currentProperty ? currentProperty.parent : undefined;
                    currentTree = currentProperty;
                }
                rootTree.endLineNumber = endLineNumber;
                beginningLineNumber = endLineNumber + 1;
                break;
            }
            case 2 /* SyntaxKind.CloseBraceToken */: {
                endLineNumber = scanner.getTokenStartLine();
                currentContainerStack.pop();
                // If we are not inside of an empty object
                if (lastNonTriviaNonCommentToken !== 1 /* SyntaxKind.OpenBraceToken */) {
                    // If current property end line number has not yet been defined, define it
                    if (currentProperty.endLineNumber === undefined) {
                        currentProperty.endLineNumber = endLineNumber - 1;
                        // The current property is also the last property
                        currentProperty.lastProperty = true;
                        // The last property of an object is associated with the line and index of where to add the comma, in case after sorting, it is no longer the last property
                        currentProperty.lineWhereToAddComma = lineOfLastNonTriviaNonCommentToken;
                        currentProperty.indexWhereToAddComa = endIndexOfLastNonTriviaNonCommentToken;
                    }
                    lastProperty = currentProperty;
                    currentProperty = currentProperty ? currentProperty.parent : undefined;
                    currentTree = currentProperty;
                }
                rootTree.endLineNumber = scanner.getTokenStartLine();
                beginningLineNumber = endLineNumber + 1;
                break;
            }
            case 5 /* SyntaxKind.CommaToken */: {
                endLineNumber = scanner.getTokenStartLine();
                // If the current container is an object or the current container is an array and the last non-trivia non-comment token is a closing brace or a closing bracket
                // Then update the end line number of the current property
                if (currentProperty.endLineNumber === undefined
                    && (currentContainerStack[currentContainerStack.length - 1] === Container.Object
                        || (currentContainerStack[currentContainerStack.length - 1] === Container.Array
                            && (lastNonTriviaNonCommentToken === 2 /* SyntaxKind.CloseBraceToken */
                                || lastNonTriviaNonCommentToken === 4 /* SyntaxKind.CloseBracketToken */)))) {
                    currentProperty.endLineNumber = endLineNumber;
                    // Store the line and the index of the comma in case it needs to be removed during the sorting
                    currentProperty.commaIndex = scanner.getTokenOffset() - numberOfCharactersOnPreviousLines;
                    currentProperty.commaLine = endLineNumber;
                }
                if (lastNonTriviaNonCommentToken === 2 /* SyntaxKind.CloseBraceToken */
                    || lastNonTriviaNonCommentToken === 4 /* SyntaxKind.CloseBracketToken */) {
                    lastProperty = currentProperty;
                    currentProperty = currentProperty ? currentProperty.parent : undefined;
                    currentTree = currentProperty;
                }
                beginningLineNumber = endLineNumber + 1;
                break;
            }
            case 13 /* SyntaxKind.BlockCommentTrivia */: {
                // If the last non trivia non-comment token is a comma and the block comment starts on the same line as the comma, then update the end line number of the current property. For example if:
                // 1. {}, /* ...
                // 2. ..*/
                // The the property on line 1 shoud end on line 2, not line 1
                // In the case we are in an array we update the end line number only if the second to last non-trivia non-comment token is a closing brace or bracket
                if (lastNonTriviaNonCommentToken === 5 /* SyntaxKind.CommaToken */
                    && lineOfLastNonTriviaNonCommentToken === scanner.getTokenStartLine()
                    && (currentContainerStack[currentContainerStack.length - 1] === Container.Array
                        && (secondToLastNonTriviaNonCommentToken === 2 /* SyntaxKind.CloseBraceToken */
                            || secondToLastNonTriviaNonCommentToken === 4 /* SyntaxKind.CloseBracketToken */)
                        || currentContainerStack[currentContainerStack.length - 1] === Container.Object)) {
                    if (currentContainerStack[currentContainerStack.length - 1] === Container.Array && (secondToLastNonTriviaNonCommentToken === 2 /* SyntaxKind.CloseBraceToken */ || secondToLastNonTriviaNonCommentToken === 4 /* SyntaxKind.CloseBracketToken */) || currentContainerStack[currentContainerStack.length - 1] === Container.Object) {
                        currentProperty.endLineNumber = undefined;
                        updateLastPropertyEndLineNumber = true;
                    }
                }
                // When the block comment follows an open brace or an open token, we have the following scenario:
                // { /**
                // ../
                // }
                // The block comment should be assigned to the open brace not the first property below it
                if ((lastNonTriviaNonCommentToken === 1 /* SyntaxKind.OpenBraceToken */
                    || lastNonTriviaNonCommentToken === 3 /* SyntaxKind.OpenBracketToken */)
                    && lineOfLastNonTriviaNonCommentToken === scanner.getTokenStartLine()) {
                    updateBeginningLineNumber = true;
                }
                break;
            }
        }
        // Update the last and second to last non-trivia non-comment tokens
        if (token !== 14 /* SyntaxKind.LineBreakTrivia */
            && token !== 13 /* SyntaxKind.BlockCommentTrivia */
            && token !== 12 /* SyntaxKind.LineCommentTrivia */
            && token !== 15 /* SyntaxKind.Trivia */) {
            secondToLastNonTriviaNonCommentToken = lastNonTriviaNonCommentToken;
            lastNonTriviaNonCommentToken = token;
            lineOfLastNonTriviaNonCommentToken = scanner.getTokenStartLine();
            endIndexOfLastNonTriviaNonCommentToken = scanner.getTokenOffset() + scanner.getTokenLength() - numberOfCharactersOnPreviousLines;
        }
    }
    return rootTree;
}
function sortJsoncDocument(jsonDocument, propertyTree) {
    if (propertyTree.childrenProperties.length === 0) {
        return jsonDocument;
    }
    const sortedJsonDocument = esm_main.TextDocument.create('test://test.json', 'json', 0, jsonDocument.getText());
    const queueToSort = [];
    updateSortingQueue(queueToSort, propertyTree, propertyTree.beginningLineNumber);
    while (queueToSort.length > 0) {
        const dataToSort = queueToSort.shift();
        const propertyTreeArray = dataToSort.propertyTreeArray;
        let beginningLineNumber = dataToSort.beginningLineNumber;
        for (let i = 0; i < propertyTreeArray.length; i++) {
            const propertyTree = propertyTreeArray[i];
            const range = Range.create(Position.create(propertyTree.beginningLineNumber, 0), Position.create(propertyTree.endLineNumber + 1, 0));
            const jsonContentToReplace = jsonDocument.getText(range);
            const jsonDocumentToReplace = esm_main.TextDocument.create('test://test.json', 'json', 0, jsonContentToReplace);
            if (propertyTree.lastProperty === true && i !== propertyTreeArray.length - 1) {
                const lineWhereToAddComma = propertyTree.lineWhereToAddComma - propertyTree.beginningLineNumber;
                const indexWhereToAddComma = propertyTree.indexWhereToAddComa;
                const edit = {
                    range: Range.create(Position.create(lineWhereToAddComma, indexWhereToAddComma), Position.create(lineWhereToAddComma, indexWhereToAddComma)),
                    text: ','
                };
                esm_main.TextDocument.update(jsonDocumentToReplace, [edit], 1);
            }
            else if (propertyTree.lastProperty === false && i === propertyTreeArray.length - 1) {
                const commaIndex = propertyTree.commaIndex;
                const commaLine = propertyTree.commaLine;
                const lineWhereToRemoveComma = commaLine - propertyTree.beginningLineNumber;
                const edit = {
                    range: Range.create(Position.create(lineWhereToRemoveComma, commaIndex), Position.create(lineWhereToRemoveComma, commaIndex + 1)),
                    text: ''
                };
                esm_main.TextDocument.update(jsonDocumentToReplace, [edit], 1);
            }
            const length = propertyTree.endLineNumber - propertyTree.beginningLineNumber + 1;
            const edit = {
                range: Range.create(Position.create(beginningLineNumber, 0), Position.create(beginningLineNumber + length, 0)),
                text: jsonDocumentToReplace.getText()
            };
            esm_main.TextDocument.update(sortedJsonDocument, [edit], 1);
            updateSortingQueue(queueToSort, propertyTree, beginningLineNumber);
            beginningLineNumber = beginningLineNumber + length;
        }
    }
    return sortedJsonDocument;
}
function updateSortingQueue(queue, propertyTree, beginningLineNumber) {
    if (propertyTree.childrenProperties.length === 0) {
        return;
    }
    if (propertyTree.type === Container.Object) {
        let minimumBeginningLineNumber = Infinity;
        for (const childProperty of propertyTree.childrenProperties) {
            if (childProperty.beginningLineNumber < minimumBeginningLineNumber) {
                minimumBeginningLineNumber = childProperty.beginningLineNumber;
            }
        }
        const diff = minimumBeginningLineNumber - propertyTree.beginningLineNumber;
        beginningLineNumber = beginningLineNumber + diff;
        queue.push(new SortingRange(beginningLineNumber, propertyTree.childrenProperties));
    }
    else if (propertyTree.type === Container.Array) {
        updateSortingQueueForArrayProperties(queue, propertyTree, beginningLineNumber);
    }
}
function updateSortingQueueForArrayProperties(queue, propertyTree, beginningLineNumber) {
    for (const subObject of propertyTree.childrenProperties) {
        // If the child property of the array is an object, then you can sort the properties within this object
        if (subObject.type === Container.Object) {
            let minimumBeginningLineNumber = Infinity;
            for (const childProperty of subObject.childrenProperties) {
                if (childProperty.beginningLineNumber < minimumBeginningLineNumber) {
                    minimumBeginningLineNumber = childProperty.beginningLineNumber;
                }
            }
            const diff = minimumBeginningLineNumber - subObject.beginningLineNumber;
            queue.push(new SortingRange(beginningLineNumber + subObject.beginningLineNumber - propertyTree.beginningLineNumber + diff, subObject.childrenProperties));
        }
        // If the child property of the array is an array, then you need to recurse on the children properties, until you find an object to sort
        if (subObject.type === Container.Array) {
            updateSortingQueueForArrayProperties(queue, subObject, beginningLineNumber + subObject.beginningLineNumber - propertyTree.beginningLineNumber);
        }
    }
}
class SortingRange {
    constructor(beginningLineNumber, propertyTreeArray) {
        this.beginningLineNumber = beginningLineNumber;
        this.propertyTreeArray = propertyTreeArray;
    }
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/services/jsonLinks.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function findLinks(document, doc) {
    const links = [];
    doc.visit(node => {
        if (node.type === "property" && node.keyNode.value === "$ref" && node.valueNode?.type === 'string') {
            const path = node.valueNode.value;
            const targetNode = findTargetNode(doc, path);
            if (targetNode) {
                const targetPos = document.positionAt(targetNode.offset);
                links.push({
                    target: `${document.uri}#${targetPos.line + 1},${targetPos.character + 1}`,
                    range: createRange(document, node.valueNode)
                });
            }
        }
        return true;
    });
    return Promise.resolve(links);
}
function createRange(document, node) {
    return Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + node.length - 1));
}
function findTargetNode(doc, path) {
    const tokens = parseJSONPointer(path);
    if (!tokens) {
        return null;
    }
    return findNode(tokens, doc.root);
}
function findNode(pointer, node) {
    if (!node) {
        return null;
    }
    if (pointer.length === 0) {
        return node;
    }
    const token = pointer.shift();
    if (node && node.type === 'object') {
        const propertyNode = node.properties.find((propertyNode) => propertyNode.keyNode.value === token);
        if (!propertyNode) {
            return null;
        }
        return findNode(pointer, propertyNode.valueNode);
    }
    else if (node && node.type === 'array') {
        if (token.match(/^(0|[1-9][0-9]*)$/)) {
            const index = Number.parseInt(token);
            const arrayItem = node.items[index];
            if (!arrayItem) {
                return null;
            }
            return findNode(pointer, arrayItem);
        }
    }
    return null;
}
function parseJSONPointer(path) {
    if (path === "#") {
        return [];
    }
    if (path[0] !== '#' || path[1] !== '/') {
        return null;
    }
    return path.substring(2).split(/\//).map(jsonLinks_unescape);
}
function jsonLinks_unescape(str) {
    return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

;// CONCATENATED MODULE: ../../node_modules/vscode-json-languageservice/lib/esm/jsonLanguageService.js
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/













function getLanguageService(params) {
    const promise = params.promiseConstructor || Promise;
    const jsonSchemaService = new JSONSchemaService(params.schemaRequestService, params.workspaceContext, promise);
    jsonSchemaService.setSchemaContributions(schemaContributions);
    const jsonCompletion = new JSONCompletion(jsonSchemaService, params.contributions, promise, params.clientCapabilities);
    const jsonHover = new JSONHover(jsonSchemaService, params.contributions, promise);
    const jsonDocumentSymbols = new JSONDocumentSymbols(jsonSchemaService);
    const jsonValidation = new JSONValidation(jsonSchemaService, promise);
    return {
        configure: (settings) => {
            jsonSchemaService.clearExternalSchemas();
            settings.schemas?.forEach(jsonSchemaService.registerExternalSchema.bind(jsonSchemaService));
            jsonValidation.configure(settings);
        },
        resetSchema: (uri) => jsonSchemaService.onResourceChange(uri),
        doValidation: jsonValidation.doValidation.bind(jsonValidation),
        getLanguageStatus: jsonValidation.getLanguageStatus.bind(jsonValidation),
        parseJSONDocument: (document) => parse(document, { collectComments: true }),
        newJSONDocument: (root, diagnostics) => newJSONDocument(root, diagnostics),
        getMatchingSchemas: jsonSchemaService.getMatchingSchemas.bind(jsonSchemaService),
        doResolve: jsonCompletion.doResolve.bind(jsonCompletion),
        doComplete: jsonCompletion.doComplete.bind(jsonCompletion),
        findDocumentSymbols: jsonDocumentSymbols.findDocumentSymbols.bind(jsonDocumentSymbols),
        findDocumentSymbols2: jsonDocumentSymbols.findDocumentSymbols2.bind(jsonDocumentSymbols),
        findDocumentColors: jsonDocumentSymbols.findDocumentColors.bind(jsonDocumentSymbols),
        getColorPresentations: jsonDocumentSymbols.getColorPresentations.bind(jsonDocumentSymbols),
        doHover: jsonHover.doHover.bind(jsonHover),
        getFoldingRanges: getFoldingRanges,
        getSelectionRanges: getSelectionRanges,
        findDefinition: () => Promise.resolve([]),
        findLinks: findLinks,
        format: (document, range, options) => format_format(document, options, range),
        sort: (document, options) => sort(document, options)
    };
}


/***/ }),

/***/ 9208:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(9110);

/***/ }),

/***/ 9110:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
const ril_1 = __webpack_require__(931);
// Install the browser runtime abstract.
ril_1.default.install();
const api_1 = __webpack_require__(7672);
__exportStar(__webpack_require__(7672), exports);
class BrowserMessageReader extends api_1.AbstractMessageReader {
    constructor(port) {
        super();
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            this._onData.fire(event.data);
        };
        port.addEventListener('error', (event) => this.fireError(event));
        port.onmessage = this._messageListener;
    }
    listen(callback) {
        return this._onData.event(callback);
    }
}
exports.BrowserMessageReader = BrowserMessageReader;
class BrowserMessageWriter extends api_1.AbstractMessageWriter {
    constructor(port) {
        super();
        this.port = port;
        this.errorCount = 0;
        port.addEventListener('error', (event) => this.fireError(event));
    }
    write(msg) {
        try {
            this.port.postMessage(msg);
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.BrowserMessageWriter = BrowserMessageWriter;
function createMessageConnection(reader, writer, logger, options) {
    if (logger === undefined) {
        logger = api_1.NullLogger;
    }
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ 931:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_1 = __webpack_require__(7672);
class MessageBuffer extends api_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
        this.asciiDecoder = new TextDecoder('ascii');
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, _encoding) {
        return (new TextEncoder()).encode(value);
    }
    toString(value, encoding) {
        if (encoding === 'ascii') {
            return this.asciiDecoder.decode(value);
        }
        else {
            return (new TextDecoder(encoding)).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer;
        }
        else {
            return buffer.slice(0, length);
        }
    }
    allocNative(length) {
        return new Uint8Array(length);
    }
}
MessageBuffer.emptyBuffer = new Uint8Array(0);
class ReadableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            const blob = event.data;
            blob.arrayBuffer().then((buffer) => {
                this._onData.fire(new Uint8Array(buffer));
            }, () => {
                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
            });
        };
        this.socket.addEventListener('message', this._messageListener);
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    onData(listener) {
        return this._onData.event(listener);
    }
}
class WritableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    write(data, encoding) {
        if (typeof data === 'string') {
            if (encoding !== undefined && encoding !== 'utf-8') {
                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
            }
            this.socket.send(data);
        }
        else {
            this.socket.send(data);
        }
        return Promise.resolve();
    }
    end() {
        this.socket.close();
    }
}
const _textEncoder = new TextEncoder();
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                if (options.charset !== 'utf-8') {
                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                }
                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                if (!(buffer instanceof Uint8Array)) {
                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                }
                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (socket) => new ReadableStreamWrapper(socket),
        asWritableStream: (socket) => new WritableStreamWrapper(socket)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setTimeout(callback, 0, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        },
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        api_1.RAL.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports["default"] = RIL;


/***/ }),

/***/ 7672:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.AbstractMessageBuffer = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = void 0;
const messages_1 = __webpack_require__(7162);
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return messages_1.Message; } }));
Object.defineProperty(exports, "RequestType", ({ enumerable: true, get: function () { return messages_1.RequestType; } }));
Object.defineProperty(exports, "RequestType0", ({ enumerable: true, get: function () { return messages_1.RequestType0; } }));
Object.defineProperty(exports, "RequestType1", ({ enumerable: true, get: function () { return messages_1.RequestType1; } }));
Object.defineProperty(exports, "RequestType2", ({ enumerable: true, get: function () { return messages_1.RequestType2; } }));
Object.defineProperty(exports, "RequestType3", ({ enumerable: true, get: function () { return messages_1.RequestType3; } }));
Object.defineProperty(exports, "RequestType4", ({ enumerable: true, get: function () { return messages_1.RequestType4; } }));
Object.defineProperty(exports, "RequestType5", ({ enumerable: true, get: function () { return messages_1.RequestType5; } }));
Object.defineProperty(exports, "RequestType6", ({ enumerable: true, get: function () { return messages_1.RequestType6; } }));
Object.defineProperty(exports, "RequestType7", ({ enumerable: true, get: function () { return messages_1.RequestType7; } }));
Object.defineProperty(exports, "RequestType8", ({ enumerable: true, get: function () { return messages_1.RequestType8; } }));
Object.defineProperty(exports, "RequestType9", ({ enumerable: true, get: function () { return messages_1.RequestType9; } }));
Object.defineProperty(exports, "ResponseError", ({ enumerable: true, get: function () { return messages_1.ResponseError; } }));
Object.defineProperty(exports, "ErrorCodes", ({ enumerable: true, get: function () { return messages_1.ErrorCodes; } }));
Object.defineProperty(exports, "NotificationType", ({ enumerable: true, get: function () { return messages_1.NotificationType; } }));
Object.defineProperty(exports, "NotificationType0", ({ enumerable: true, get: function () { return messages_1.NotificationType0; } }));
Object.defineProperty(exports, "NotificationType1", ({ enumerable: true, get: function () { return messages_1.NotificationType1; } }));
Object.defineProperty(exports, "NotificationType2", ({ enumerable: true, get: function () { return messages_1.NotificationType2; } }));
Object.defineProperty(exports, "NotificationType3", ({ enumerable: true, get: function () { return messages_1.NotificationType3; } }));
Object.defineProperty(exports, "NotificationType4", ({ enumerable: true, get: function () { return messages_1.NotificationType4; } }));
Object.defineProperty(exports, "NotificationType5", ({ enumerable: true, get: function () { return messages_1.NotificationType5; } }));
Object.defineProperty(exports, "NotificationType6", ({ enumerable: true, get: function () { return messages_1.NotificationType6; } }));
Object.defineProperty(exports, "NotificationType7", ({ enumerable: true, get: function () { return messages_1.NotificationType7; } }));
Object.defineProperty(exports, "NotificationType8", ({ enumerable: true, get: function () { return messages_1.NotificationType8; } }));
Object.defineProperty(exports, "NotificationType9", ({ enumerable: true, get: function () { return messages_1.NotificationType9; } }));
Object.defineProperty(exports, "ParameterStructures", ({ enumerable: true, get: function () { return messages_1.ParameterStructures; } }));
const linkedMap_1 = __webpack_require__(1109);
Object.defineProperty(exports, "LinkedMap", ({ enumerable: true, get: function () { return linkedMap_1.LinkedMap; } }));
Object.defineProperty(exports, "LRUCache", ({ enumerable: true, get: function () { return linkedMap_1.LRUCache; } }));
Object.defineProperty(exports, "Touch", ({ enumerable: true, get: function () { return linkedMap_1.Touch; } }));
const disposable_1 = __webpack_require__(8844);
Object.defineProperty(exports, "Disposable", ({ enumerable: true, get: function () { return disposable_1.Disposable; } }));
const events_1 = __webpack_require__(2479);
Object.defineProperty(exports, "Event", ({ enumerable: true, get: function () { return events_1.Event; } }));
Object.defineProperty(exports, "Emitter", ({ enumerable: true, get: function () { return events_1.Emitter; } }));
const cancellation_1 = __webpack_require__(6957);
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } }));
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return cancellation_1.CancellationToken; } }));
const sharedArrayCancellation_1 = __webpack_require__(3489);
Object.defineProperty(exports, "SharedArraySenderStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArraySenderStrategy; } }));
Object.defineProperty(exports, "SharedArrayReceiverStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArrayReceiverStrategy; } }));
const messageReader_1 = __webpack_require__(8275);
Object.defineProperty(exports, "MessageReader", ({ enumerable: true, get: function () { return messageReader_1.MessageReader; } }));
Object.defineProperty(exports, "AbstractMessageReader", ({ enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } }));
Object.defineProperty(exports, "ReadableStreamMessageReader", ({ enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } }));
const messageWriter_1 = __webpack_require__(9036);
Object.defineProperty(exports, "MessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.MessageWriter; } }));
Object.defineProperty(exports, "AbstractMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } }));
Object.defineProperty(exports, "WriteableStreamMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } }));
const messageBuffer_1 = __webpack_require__(9805);
Object.defineProperty(exports, "AbstractMessageBuffer", ({ enumerable: true, get: function () { return messageBuffer_1.AbstractMessageBuffer; } }));
const connection_1 = __webpack_require__(4054);
Object.defineProperty(exports, "ConnectionStrategy", ({ enumerable: true, get: function () { return connection_1.ConnectionStrategy; } }));
Object.defineProperty(exports, "ConnectionOptions", ({ enumerable: true, get: function () { return connection_1.ConnectionOptions; } }));
Object.defineProperty(exports, "NullLogger", ({ enumerable: true, get: function () { return connection_1.NullLogger; } }));
Object.defineProperty(exports, "createMessageConnection", ({ enumerable: true, get: function () { return connection_1.createMessageConnection; } }));
Object.defineProperty(exports, "ProgressToken", ({ enumerable: true, get: function () { return connection_1.ProgressToken; } }));
Object.defineProperty(exports, "ProgressType", ({ enumerable: true, get: function () { return connection_1.ProgressType; } }));
Object.defineProperty(exports, "Trace", ({ enumerable: true, get: function () { return connection_1.Trace; } }));
Object.defineProperty(exports, "TraceValues", ({ enumerable: true, get: function () { return connection_1.TraceValues; } }));
Object.defineProperty(exports, "TraceFormat", ({ enumerable: true, get: function () { return connection_1.TraceFormat; } }));
Object.defineProperty(exports, "SetTraceNotification", ({ enumerable: true, get: function () { return connection_1.SetTraceNotification; } }));
Object.defineProperty(exports, "LogTraceNotification", ({ enumerable: true, get: function () { return connection_1.LogTraceNotification; } }));
Object.defineProperty(exports, "ConnectionErrors", ({ enumerable: true, get: function () { return connection_1.ConnectionErrors; } }));
Object.defineProperty(exports, "ConnectionError", ({ enumerable: true, get: function () { return connection_1.ConnectionError; } }));
Object.defineProperty(exports, "CancellationReceiverStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } }));
Object.defineProperty(exports, "CancellationSenderStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } }));
Object.defineProperty(exports, "CancellationStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationStrategy; } }));
Object.defineProperty(exports, "MessageStrategy", ({ enumerable: true, get: function () { return connection_1.MessageStrategy; } }));
const ral_1 = __webpack_require__(5091);
exports.RAL = ral_1.default;


/***/ }),

/***/ 6957:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationTokenSource = exports.CancellationToken = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const events_1 = __webpack_require__(2479);
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
    return { dispose() { handle.dispose(); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;


/***/ }),

/***/ 4054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.ConnectionOptions = exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const messages_1 = __webpack_require__(7162);
const linkedMap_1 = __webpack_require__(1109);
const events_1 = __webpack_require__(2479);
const cancellation_1 = __webpack_require__(6957);
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
var ProgressToken;
(function (ProgressToken) {
    function is(value) {
        return typeof value === 'string' || typeof value === 'number';
    }
    ProgressToken.is = is;
})(ProgressToken = exports.ProgressToken || (exports.ProgressToken = {}));
var ProgressNotification;
(function (ProgressNotification) {
    ProgressNotification.type = new messages_1.NotificationType('$/progress');
})(ProgressNotification || (ProgressNotification = {}));
class ProgressType {
    constructor() {
    }
}
exports.ProgressType = ProgressType;
var StarRequestHandler;
(function (StarRequestHandler) {
    function is(value) {
        return Is.func(value);
    }
    StarRequestHandler.is = is;
})(StarRequestHandler || (StarRequestHandler = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Compact"] = 2] = "Compact";
    Trace[Trace["Verbose"] = 3] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceValues;
(function (TraceValues) {
    /**
     * Turn tracing off.
     */
    TraceValues.Off = 'off';
    /**
     * Trace messages only.
     */
    TraceValues.Messages = 'messages';
    /**
     * Compact message tracing.
     */
    TraceValues.Compact = 'compact';
    /**
     * Verbose message tracing.
     */
    TraceValues.Verbose = 'verbose';
})(TraceValues = exports.TraceValues || (exports.TraceValues = {}));
(function (Trace) {
    function fromString(value) {
        if (!Is.string(value)) {
            return Trace.Off;
        }
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'compact':
                return Trace.Compact;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Compact:
                return 'compact';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        if (!Is.string(value)) {
            return TraceFormat.Text;
        }
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat = exports.TraceFormat || (exports.TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var IdCancellationReceiverStrategy;
(function (IdCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    IdCancellationReceiverStrategy.is = is;
})(IdCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy || (exports.IdCancellationReceiverStrategy = {}));
var RequestCancellationReceiverStrategy;
(function (RequestCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    RequestCancellationReceiverStrategy.is = is;
})(RequestCancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy || (exports.RequestCancellationReceiverStrategy = {}));
var CancellationReceiverStrategy;
(function (CancellationReceiverStrategy) {
    CancellationReceiverStrategy.Message = Object.freeze({
        createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
        }
    });
    function is(value) {
        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
    }
    CancellationReceiverStrategy.is = is;
})(CancellationReceiverStrategy = exports.CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = {}));
var CancellationSenderStrategy;
(function (CancellationSenderStrategy) {
    CancellationSenderStrategy.Message = Object.freeze({
        sendCancellation(conn, id) {
            return conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) { }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
    }
    CancellationSenderStrategy.is = is;
})(CancellationSenderStrategy = exports.CancellationSenderStrategy || (exports.CancellationSenderStrategy = {}));
var CancellationStrategy;
(function (CancellationStrategy) {
    CancellationStrategy.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
    });
    function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
    }
    CancellationStrategy.is = is;
})(CancellationStrategy = exports.CancellationStrategy || (exports.CancellationStrategy = {}));
var MessageStrategy;
(function (MessageStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.handleMessage);
    }
    MessageStrategy.is = is;
})(MessageStrategy = exports.MessageStrategy || (exports.MessageStrategy = {}));
var ConnectionOptions;
(function (ConnectionOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
    }
    ConnectionOptions.is = is;
})(ConnectionOptions = exports.ConnectionOptions || (exports.ConnectionOptions = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function createMessageConnection(messageReader, messageWriter, _logger, options) {
    const logger = _logger !== undefined ? _logger : exports.NullLogger;
    let sequenceNumber = 0;
    let notificationSequenceNumber = 0;
    let unknownResponseSequenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    const requestHandlers = new Map();
    let starNotificationHandler = undefined;
    const notificationHandlers = new Map();
    const progressHandlers = new Map();
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = new Map();
    let knownCanceledRequests = new Set();
    let requestTokens = new Map();
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    const errorEmitter = new events_1.Emitter();
    const closeEmitter = new events_1.Emitter();
    const unhandledNotificationEmitter = new events_1.Emitter();
    const unhandledProgressEmitter = new events_1.Emitter();
    const disposeEmitter = new events_1.Emitter();
    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;
    function createRequestQueueKey(id) {
        if (id === null) {
            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSequenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.Message.isResponse(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function handleMessage(message) {
        if (messages_1.Message.isRequest(message)) {
            handleRequest(message);
        }
        else if (messages_1.Message.isNotification(message)) {
            handleNotification(message);
        }
        else if (messages_1.Message.isResponse(message)) {
            handleResponse(message);
        }
        else {
            handleInvalidMessage(message);
        }
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        const message = messageQueue.shift();
        try {
            const messageStrategy = options?.messageStrategy;
            if (MessageStrategy.is(messageStrategy)) {
                messageStrategy.handleMessage(message, handleMessage);
            }
            else {
                handleMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    const callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                const cancelId = message.params.id;
                const key = createRequestQueueKey(cancelId);
                const toCancel = messageQueue.get(key);
                if (messages_1.Message.isRequest(toCancel)) {
                    const strategy = options?.connectionStrategy;
                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== undefined || response.result !== undefined)) {
                        messageQueue.delete(key);
                        requestTokens.delete(cancelId);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                        return;
                    }
                }
                const cancellationToken = requestTokens.get(cancelId);
                // The request is already running. Cancel the token
                if (cancellationToken !== undefined) {
                    cancellationToken.cancel();
                    traceReceivedNotification(message);
                    return;
                }
                else {
                    // Remember the cancel but still queue the message to
                    // clean up state in process message.
                    knownCanceledRequests.add(cancelId);
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === undefined ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === undefined) {
                result = null;
            }
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            const tokenKey = requestMessage.id ?? String(Date.now()); //
            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver)
                ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey)
                : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                cancellationSource.cancel();
            }
            if (requestMessage.id !== null) {
                requestTokens.set(tokenKey, cancellationSource);
            }
            try {
                let handlerResult;
                if (requestHandler) {
                    if (requestMessage.params === undefined) {
                        if (type !== undefined && type.numberOfParams !== 0) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(cancellationSource.token);
                    }
                    else if (Array.isArray(requestMessage.params)) {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                    }
                }
                else if (starRequestHandler) {
                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                const promise = handlerResult;
                if (!handlerResult) {
                    requestTokens.delete(tokenKey);
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        requestTokens.delete(tokenKey);
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        requestTokens.delete(tokenKey);
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    requestTokens.delete(tokenKey);
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            const key = responseMessage.id;
            const responsePromise = responsePromises.get(key);
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise !== undefined) {
                responsePromises.delete(key);
                try {
                    if (responseMessage.error) {
                        const error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== undefined) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            knownCanceledRequests.delete(cancelId);
            traceReceivedNotification(message);
            return;
        }
        else {
            const element = notificationHandlers.get(message.method);
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (notificationHandler) {
                    if (message.params === undefined) {
                        if (type !== undefined) {
                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                            }
                        }
                        notificationHandler();
                    }
                    else if (Array.isArray(message.params)) {
                        // There are JSON-RPC libraries that send progress message as positional params although
                        // specified as named. So convert them if this is the case.
                        const params = message.params;
                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                            notificationHandler({ token: params[0], value: params[1] });
                        }
                        else {
                            if (type !== undefined) {
                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                }
                                if (type.numberOfParams !== message.params.length) {
                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                }
                            }
                            notificationHandler(...params);
                        }
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                        }
                        notificationHandler(message.params);
                    }
                }
                else if (starNotificationHandler) {
                    starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            const key = responseMessage.id;
            const responseHandler = responsePromises.get(key);
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function stringifyTrace(params) {
        if (params === undefined || params === null) {
            return undefined;
        }
        switch (trace) {
            case Trace.Verbose:
                return JSON.stringify(params, null, 4);
            case Trace.Compact:
                return JSON.stringify(params);
            default:
                return undefined;
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === undefined) {
            return null;
        }
        else {
            return param;
        }
    }
    function nullToUndefined(param) {
        if (param === null) {
            return undefined;
        }
        else {
            return param;
        }
    }
    function isNamedParam(param) {
        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
    }
    function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
                if (isNamedParam(param)) {
                    return nullToUndefined(param);
                }
                else {
                    return [undefinedToNull(param)];
                }
            case messages_1.ParameterStructures.byName:
                if (!isNamedParam(param)) {
                    throw new Error(`Received parameters by name but param is not an object literal.`);
                }
                return nullToUndefined(param);
            case messages_1.ParameterStructures.byPosition:
                return [undefinedToNull(param)];
            default:
                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
    }
    function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = undefined;
                break;
            case 1:
                result = computeSingleParam(type.parameterStructures, params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    const connection = {
        sendNotification: (type, ...args) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            const notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            return messageWriter.write(notificationMessage).catch((error) => {
                logger.error(`Sending notification failed.`);
                throw error;
            });
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            let method;
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    method = type;
                    notificationHandlers.set(type, { type: undefined, handler });
                }
                else {
                    method = type.method;
                    notificationHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method !== undefined) {
                        notificationHandlers.delete(method);
                    }
                    else {
                        starNotificationHandler = undefined;
                    }
                }
            };
        },
        onProgress: (_type, token, handler) => {
            if (progressHandlers.has(token)) {
                throw new Error(`Progress handler for token ${token} already registered`);
            }
            progressHandlers.set(token, handler);
            return {
                dispose: () => {
                    progressHandlers.delete(token);
                }
            };
        },
        sendProgress: (_type, token, value) => {
            // This should not await but simple return to ensure that we don't have another
            // async scheduling. Otherwise one send could overtake another send.
            return connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                const last = args[args.length - 1];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                if (cancellation_1.CancellationToken.is(last)) {
                    paramEnd = paramEnd - 1;
                    token = last;
                }
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
                const numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            const id = sequenceNumber++;
            let disposable;
            if (token) {
                disposable = token.onCancellationRequested(() => {
                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                    if (p === undefined) {
                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                        return Promise.resolve();
                    }
                    else {
                        return p.catch(() => {
                            logger.log(`Sending cancellation messages for id ${id} failed`);
                        });
                    }
                });
            }
            const requestMessage = {
                jsonrpc: version,
                id: id,
                method: method,
                params: messageParams
            };
            traceSendingRequest(requestMessage);
            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                cancellationStrategy.sender.enableCancellation(requestMessage);
            }
            return new Promise(async (resolve, reject) => {
                const resolveWithCleanup = (r) => {
                    resolve(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const rejectWithCleanup = (r) => {
                    reject(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                try {
                    await messageWriter.write(requestMessage);
                    responsePromises.set(id, responsePromise);
                }
                catch (error) {
                    logger.error(`Sending request failed.`);
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                    throw error;
                }
            });
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            let method = null;
            if (StarRequestHandler.is(type)) {
                method = undefined;
                starRequestHandler = type;
            }
            else if (Is.string(type)) {
                method = null;
                if (handler !== undefined) {
                    method = type;
                    requestHandlers.set(type, { handler: handler, type: undefined });
                }
            }
            else {
                if (handler !== undefined) {
                    method = type.method;
                    requestHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method === null) {
                        return;
                    }
                    if (method !== undefined) {
                        requestHandlers.delete(method);
                    }
                    else {
                        starRequestHandler = undefined;
                    }
                }
            };
        },
        hasPendingResponse: () => {
            return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== undefined) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                await connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
            messageWriter.end();
        },
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
            for (const promise of responsePromises.values()) {
                promise.reject(error);
            }
            responsePromises = new Map();
            requestTokens = new Map();
            knownCanceledRequests = new Set();
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            // eslint-disable-next-line no-console
            (0, ral_1.default)().console.log('inspect');
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : undefined);
    });
    connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
            handler(params.value);
        }
        else {
            unhandledProgressEmitter.fire(params);
        }
    });
    return connection;
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ 8844:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Disposable = void 0;
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));


/***/ }),

/***/ 2479:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Emitter = exports.Event = void 0;
const ral_1 = __webpack_require__(5091);
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event = exports.Event || (exports.Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                // eslint-disable-next-line no-console
                (0, ral_1.default)().console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const result = {
                    dispose: () => {
                        if (!this._callbacks) {
                            // disposable is disposed after emitter is disposed.
                            return;
                        }
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
exports.Emitter = Emitter;
Emitter._noop = function () { };


/***/ }),

/***/ 6618:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;


/***/ }),

/***/ 1109:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.AsOld = Touch.First;
    Touch.Last = 2;
    Touch.AsNew = Touch.Last;
})(Touch = exports.Touch || (exports.Touch = {}));
class LinkedMap {
    constructor() {
        this[_a] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        return this._head?.value;
    }
    get last() {
        return this._tail?.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== Touch.None) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
exports.LinkedMap = LinkedMap;
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get ratio() {
        return this._ratio;
    }
    set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
    }
    get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, Touch.None);
    }
    set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
exports.LRUCache = LRUCache;


/***/ }),

/***/ 9805:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMessageBuffer = void 0;
const CR = 13;
const LF = 10;
const CRLF = '\r\n';
class AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
    }
    get encoding() {
        return this._encoding;
    }
    append(chunk) {
        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders(lowerCaseKeys = false) {
        if (this._chunks.length === 0) {
            return undefined;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column: while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                    case CR:
                        switch (state) {
                            case 0:
                                state = 1;
                                break;
                            case 2:
                                state = 3;
                                break;
                            default:
                                state = 0;
                        }
                        break;
                    case LF:
                        switch (state) {
                            case 1:
                                state = 2;
                                break;
                            case 3:
                                state = 4;
                                offset++;
                                break row;
                            default:
                                state = 0;
                        }
                        break;
                    default:
                        state = 0;
                }
                offset++;
            }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
        }
        if (state !== 4) {
            return undefined;
        }
        // The buffer contains the two CRLF at the end. So we will
        // have two empty lines after the split at the end as well.
        const buffer = this._read(chunkBytesRead + offset);
        const result = new Map();
        const headers = this.toString(buffer, 'ascii').split(CRLF);
        if (headers.length < 2) {
            return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
            const header = headers[i];
            const index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            const key = header.substr(0, index);
            const value = header.substr(index + 1).trim();
            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
        }
        return result;
    }
    tryReadBody(length) {
        if (this._totalLength < length) {
            return undefined;
        }
        return this._read(length);
    }
    get numberOfBytes() {
        return this._totalLength;
    }
    _read(byteCount) {
        if (byteCount === 0) {
            return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
            throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
            // super fast path, precisely first chunk must be returned
            const chunk = this._chunks[0];
            this._chunks.shift();
            this._totalLength -= byteCount;
            return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
            // fast path, the reading is entirely within the first chunk
            const chunk = this._chunks[0];
            const result = this.asNative(chunk, byteCount);
            this._chunks[0] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            return result;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
            const chunk = this._chunks[chunkIndex];
            if (chunk.byteLength > byteCount) {
                // this chunk will survive
                const chunkPart = chunk.slice(0, byteCount);
                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = chunk.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
            }
            else {
                // this chunk will be entirely read
                result.set(chunk, resultOffset);
                resultOffset += chunk.byteLength;
                this._chunks.shift();
                this._totalLength -= chunk.byteLength;
                byteCount -= chunk.byteLength;
            }
        }
        return result;
    }
}
exports.AbstractMessageBuffer = AbstractMessageBuffer;


/***/ }),

/***/ 8275:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const events_1 = __webpack_require__(2479);
const semaphore_1 = __webpack_require__(418);
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
var ResolvedMessageReaderOptions;
(function (ResolvedMessageReaderOptions) {
    function fromOptions(options) {
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = new Map();
        if (options === undefined || typeof options === 'string') {
            charset = options ?? 'utf-8';
        }
        else {
            charset = options.charset ?? 'utf-8';
            if (options.contentDecoder !== undefined) {
                contentDecoder = options.contentDecoder;
                contentDecoders.set(contentDecoder.name, contentDecoder);
            }
            if (options.contentDecoders !== undefined) {
                for (const decoder of options.contentDecoders) {
                    contentDecoders.set(decoder.name, decoder);
                }
            }
            if (options.contentTypeDecoder !== undefined) {
                contentTypeDecoder = options.contentTypeDecoder;
                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }
            if (options.contentTypeDecoders !== undefined) {
                for (const decoder of options.contentTypeDecoders) {
                    contentTypeDecoders.set(decoder.name, decoder);
                }
            }
        }
        if (contentTypeDecoder === undefined) {
            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
    }
    ResolvedMessageReaderOptions.fromOptions = fromOptions;
})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
class ReadableStreamMessageReader extends AbstractMessageReader {
    constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 10000;
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.readSemaphore = new semaphore_1.Semaphore(1);
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        const result = this.readable.onData((data) => {
            this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
    }
    onData(data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                const headers = this.buffer.tryReadHeaders(true);
                if (!headers) {
                    return;
                }
                const contentLength = headers.get('content-length');
                if (!contentLength) {
                    this.fireError(new Error('Header must provide a Content-Length property.'));
                    return;
                }
                const length = parseInt(contentLength);
                if (isNaN(length)) {
                    this.fireError(new Error('Content-Length value must be a number.'));
                    return;
                }
                this.nextMessageLength = length;
            }
            const body = this.buffer.tryReadBody(this.nextMessageLength);
            if (body === undefined) {
                /** We haven't received the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            // Make sure that we convert one received message after the
            // other. Otherwise it could happen that a decoding of a second
            // smaller message finished before the decoding of a first larger
            // message and then we would deliver the second message first.
            this.readSemaphore.lock(async () => {
                const bytes = this.options.contentDecoder !== undefined
                    ? await this.options.contentDecoder.decode(body)
                    : body;
                const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                this.callback(message);
            }).catch((error) => {
                this.fireError(error);
            });
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            this.partialMessageTimer.dispose();
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.ReadableStreamMessageReader = ReadableStreamMessageReader;


/***/ }),

/***/ 9036:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const semaphore_1 = __webpack_require__(418);
const events_1 = __webpack_require__(2479);
const ContentLength = 'Content-Length: ';
const CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
var ResolvedMessageWriterOptions;
(function (ResolvedMessageWriterOptions) {
    function fromOptions(options) {
        if (options === undefined || typeof options === 'string') {
            return { charset: options ?? 'utf-8', contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        }
        else {
            return { charset: options.charset ?? 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
    }
    ResolvedMessageWriterOptions.fromOptions = fromOptions;
})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
class WriteableStreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
    }
    async write(msg) {
        return this.writeSemaphore.lock(async () => {
            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                if (this.options.contentEncoder !== undefined) {
                    return this.options.contentEncoder.encode(buffer);
                }
                else {
                    return buffer;
                }
            });
            return payload.then((buffer) => {
                const headers = [];
                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                headers.push(CRLF);
                return this.doWrite(msg, headers, buffer);
            }, (error) => {
                this.fireError(error);
                throw error;
            });
        });
    }
    async doWrite(msg, headers, data) {
        try {
            await this.writable.write(headers.join(''), 'ascii');
            return this.writable.write(data);
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
        this.writable.end();
    }
}
exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;


/***/ }),

/***/ 7162:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
const is = __webpack_require__(6618);
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
    /** @deprecated use  jsonrpcReservedErrorRangeStart */
    ErrorCodes.serverErrorStart = -32099;
    /**
     * An error occurred when write a message to the transport layer.
     */
    ErrorCodes.MessageWriteError = -32099;
    /**
     * An error occurred when reading a message from the transport layer.
     */
    ErrorCodes.MessageReadError = -32098;
    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */
    ErrorCodes.PendingResponseRejected = -32097;
    /**
     * The connection is inactive and a use of it failed.
     */
    ErrorCodes.ConnectionInactive = -32096;
    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
    /** @deprecated use  jsonrpcReservedErrorRangeEnd */
    ErrorCodes.serverErrorEnd = -32000;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        const result = {
            code: this.code,
            message: this.message
        };
        if (this.data !== undefined) {
            result.data = this.data;
        }
        return result;
    }
}
exports.ResponseError = ResponseError;
class ParameterStructures {
    constructor(kind) {
        this.kind = kind;
    }
    static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
    }
    toString() {
        return this.kind;
    }
}
exports.ParameterStructures = ParameterStructures;
/**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */
ParameterStructures.auto = new ParameterStructures('auto');
/**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */
ParameterStructures.byPosition = new ParameterStructures('byPosition');
/**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */
ParameterStructures.byName = new ParameterStructures('byName');
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageSignature {
    constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
        return ParameterStructures.auto;
    }
}
exports.AbstractMessageSignature = AbstractMessageSignature;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.NotificationType9 = NotificationType9;
var Message;
(function (Message) {
    /**
     * Tests if the given message is a request message
     */
    function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
    }
    Message.isRequest = isRequest;
    /**
     * Tests if the given message is a notification message
     */
    function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
    }
    Message.isNotification = isNotification;
    /**
     * Tests if the given message is a response message
     */
    function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
    }
    Message.isResponse = isResponse;
})(Message = exports.Message || (exports.Message = {}));


/***/ }),

/***/ 5091:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
let _ral;
function RAL() {
    if (_ral === undefined) {
        throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
}
(function (RAL) {
    function install(ral) {
        if (ral === undefined) {
            throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
    }
    RAL.install = install;
})(RAL || (RAL = {}));
exports["default"] = RAL;


/***/ }),

/***/ 418:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semaphore = void 0;
const ral_1 = __webpack_require__(5091);
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;


/***/ }),

/***/ 3489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;
const cancellation_1 = __webpack_require__(6957);
var CancellationState;
(function (CancellationState) {
    CancellationState.Continue = 0;
    CancellationState.Cancelled = 1;
})(CancellationState || (CancellationState = {}));
class SharedArraySenderStrategy {
    constructor() {
        this.buffers = new Map();
    }
    enableCancellation(request) {
        if (request.id === null) {
            return;
        }
        const buffer = new SharedArrayBuffer(4);
        const data = new Int32Array(buffer, 0, 1);
        data[0] = CancellationState.Continue;
        this.buffers.set(request.id, buffer);
        request.$cancellationData = buffer;
    }
    async sendCancellation(_conn, id) {
        const buffer = this.buffers.get(id);
        if (buffer === undefined) {
            return;
        }
        const data = new Int32Array(buffer, 0, 1);
        Atomics.store(data, 0, CancellationState.Cancelled);
    }
    cleanup(id) {
        this.buffers.delete(id);
    }
    dispose() {
        this.buffers.clear();
    }
}
exports.SharedArraySenderStrategy = SharedArraySenderStrategy;
class SharedArrayBufferCancellationToken {
    constructor(buffer) {
        this.data = new Int32Array(buffer, 0, 1);
    }
    get isCancellationRequested() {
        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
    }
    get onCancellationRequested() {
        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
    }
}
class SharedArrayBufferCancellationTokenSource {
    constructor(buffer) {
        this.token = new SharedArrayBufferCancellationToken(buffer);
    }
    cancel() {
    }
    dispose() {
    }
}
class SharedArrayReceiverStrategy {
    constructor() {
        this.kind = 'request';
    }
    createCancellationTokenSource(request) {
        const buffer = request.$cancellationData;
        if (buffer === undefined) {
            return new cancellation_1.CancellationTokenSource();
        }
        return new SharedArrayBufferCancellationTokenSource(buffer);
    }
}
exports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;


/***/ }),

/***/ 8713:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(5501);

/***/ }),

/***/ 5501:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const browser_1 = __webpack_require__(9208);
__exportStar(__webpack_require__(9208), exports);
__exportStar(__webpack_require__(3147), exports);
function createProtocolConnection(reader, writer, logger, options) {
    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ 3147:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
__exportStar(__webpack_require__(9110), exports);
__exportStar(__webpack_require__(7717), exports);
__exportStar(__webpack_require__(8431), exports);
__exportStar(__webpack_require__(1815), exports);
var connection_1 = __webpack_require__(291);
Object.defineProperty(exports, "createProtocolConnection", ({ enumerable: true, get: function () { return connection_1.createProtocolConnection; } }));
var LSPErrorCodes;
(function (LSPErrorCodes) {
    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeStart = -32899;
    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.RequestFailed = -32803;
    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.ServerCancelled = -32802;
    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */
    LSPErrorCodes.ContentModified = -32801;
    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */
    LSPErrorCodes.RequestCancelled = -32800;
    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
})(LSPErrorCodes = exports.LSPErrorCodes || (exports.LSPErrorCodes = {}));


/***/ }),

/***/ 291:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ 8431:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
var MessageDirection;
(function (MessageDirection) {
    MessageDirection["clientToServer"] = "clientToServer";
    MessageDirection["serverToClient"] = "serverToClient";
    MessageDirection["both"] = "both";
})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));
class RegistrationType {
    constructor(method) {
        this.method = method;
    }
}
exports.RegistrationType = RegistrationType;
class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolRequestType0 = ProtocolRequestType0;
class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolRequestType = ProtocolRequestType;
class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolNotificationType0 = ProtocolNotificationType0;
class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolNotificationType = ProtocolNotificationType;


/***/ }),

/***/ 7602:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */
var CallHierarchyPrepareRequest;
(function (CallHierarchyPrepareRequest) {
    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
})(CallHierarchyPrepareRequest = exports.CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = {}));
/**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyIncomingCallsRequest;
(function (CallHierarchyIncomingCallsRequest) {
    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
})(CallHierarchyIncomingCallsRequest = exports.CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = {}));
/**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyOutgoingCallsRequest;
(function (CallHierarchyOutgoingCallsRequest) {
    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
})(CallHierarchyOutgoingCallsRequest = exports.CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = {}));


/***/ }),

/***/ 3747:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
    DocumentColorRequest.method = 'textDocument/documentColor';
    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
})(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
    ColorPresentationRequest.method = 'textDocument/colorPresentation';
    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
})(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));


/***/ }),

/***/ 7639:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationRequest = void 0;
const messages_1 = __webpack_require__(8431);
//---- Get Configuration request ----
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
    ConfigurationRequest.method = 'workspace/configuration';
    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));


/***/ }),

/***/ 5581:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeclarationRequest = void 0;
const messages_1 = __webpack_require__(8431);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Declaration}
 * or a typed array of {@link DeclarationLink} or a Thenable that resolves
 * to such.
 */
var DeclarationRequest;
(function (DeclarationRequest) {
    DeclarationRequest.method = 'textDocument/declaration';
    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
})(DeclarationRequest = exports.DeclarationRequest || (exports.DeclarationRequest = {}));


/***/ }),

/***/ 1494:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
const Is = __webpack_require__(8633);
const messages_1 = __webpack_require__(8431);
/**
 * @since 3.17.0
 */
var DiagnosticServerCancellationData;
(function (DiagnosticServerCancellationData) {
    function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
    }
    DiagnosticServerCancellationData.is = is;
})(DiagnosticServerCancellationData = exports.DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = {}));
/**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticReportKind;
(function (DocumentDiagnosticReportKind) {
    /**
     * A diagnostic report with a full
     * set of problems.
     */
    DocumentDiagnosticReportKind.Full = 'full';
    /**
     * A report indicating that the last
     * returned report is still accurate.
     */
    DocumentDiagnosticReportKind.Unchanged = 'unchanged';
})(DocumentDiagnosticReportKind = exports.DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = {}));
/**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticRequest;
(function (DocumentDiagnosticRequest) {
    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(DocumentDiagnosticRequest = exports.DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = {}));
/**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */
var WorkspaceDiagnosticRequest;
(function (WorkspaceDiagnosticRequest) {
    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(WorkspaceDiagnosticRequest = exports.WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = {}));
/**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */
var DiagnosticRefreshRequest;
(function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
})(DiagnosticRefreshRequest = exports.DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = {}));


/***/ }),

/***/ 4781:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */
var FileOperationPatternKind;
(function (FileOperationPatternKind) {
    /**
     * The pattern matches a file only.
     */
    FileOperationPatternKind.file = 'file';
    /**
     * The pattern matches a folder only.
     */
    FileOperationPatternKind.folder = 'folder';
})(FileOperationPatternKind = exports.FileOperationPatternKind || (exports.FileOperationPatternKind = {}));
/**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */
var WillCreateFilesRequest;
(function (WillCreateFilesRequest) {
    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
})(WillCreateFilesRequest = exports.WillCreateFilesRequest || (exports.WillCreateFilesRequest = {}));
/**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */
var DidCreateFilesNotification;
(function (DidCreateFilesNotification) {
    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
})(DidCreateFilesNotification = exports.DidCreateFilesNotification || (exports.DidCreateFilesNotification = {}));
/**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillRenameFilesRequest;
(function (WillRenameFilesRequest) {
    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
})(WillRenameFilesRequest = exports.WillRenameFilesRequest || (exports.WillRenameFilesRequest = {}));
/**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */
var DidRenameFilesNotification;
(function (DidRenameFilesNotification) {
    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
})(DidRenameFilesNotification = exports.DidRenameFilesNotification || (exports.DidRenameFilesNotification = {}));
/**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */
var DidDeleteFilesNotification;
(function (DidDeleteFilesNotification) {
    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
})(DidDeleteFilesNotification = exports.DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = {}));
/**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */
var WillDeleteFilesRequest;
(function (WillDeleteFilesRequest) {
    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
})(WillDeleteFilesRequest = exports.WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = {}));


/***/ }),

/***/ 1203:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */
var FoldingRangeRequest;
(function (FoldingRangeRequest) {
    FoldingRangeRequest.method = 'textDocument/foldingRange';
    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
})(FoldingRangeRequest = exports.FoldingRangeRequest || (exports.FoldingRangeRequest = {}));


/***/ }),

/***/ 7287:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImplementationRequest = void 0;
const messages_1 = __webpack_require__(8431);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.method = 'textDocument/implementation';
    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));


/***/ }),

/***/ 9383:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintRequest;
(function (InlayHintRequest) {
    InlayHintRequest.method = 'textDocument/inlayHint';
    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
})(InlayHintRequest = exports.InlayHintRequest || (exports.InlayHintRequest = {}));
/**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintResolveRequest;
(function (InlayHintResolveRequest) {
    InlayHintResolveRequest.method = 'inlayHint/resolve';
    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
})(InlayHintResolveRequest = exports.InlayHintResolveRequest || (exports.InlayHintResolveRequest = {}));
/**
 * @since 3.17.0
 */
var InlayHintRefreshRequest;
(function (InlayHintRefreshRequest) {
    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
})(InlayHintRefreshRequest = exports.InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = {}));


/***/ }),

/***/ 3491:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlineValueRequest;
(function (InlineValueRequest) {
    InlineValueRequest.method = 'textDocument/inlineValue';
    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
})(InlineValueRequest = exports.InlineValueRequest || (exports.InlineValueRequest = {}));
/**
 * @since 3.17.0
 */
var InlineValueRefreshRequest;
(function (InlineValueRefreshRequest) {
    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
})(InlineValueRefreshRequest = exports.InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = {}));


/***/ }),

/***/ 1815:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = void 0;
const messages_1 = __webpack_require__(8431);
const vscode_languageserver_types_1 = __webpack_require__(7717);
const Is = __webpack_require__(8633);
const protocol_implementation_1 = __webpack_require__(7287);
Object.defineProperty(exports, "ImplementationRequest", ({ enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } }));
const protocol_typeDefinition_1 = __webpack_require__(9264);
Object.defineProperty(exports, "TypeDefinitionRequest", ({ enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } }));
const protocol_workspaceFolder_1 = __webpack_require__(6860);
Object.defineProperty(exports, "WorkspaceFoldersRequest", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } }));
Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } }));
const protocol_configuration_1 = __webpack_require__(7639);
Object.defineProperty(exports, "ConfigurationRequest", ({ enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } }));
const protocol_colorProvider_1 = __webpack_require__(3747);
Object.defineProperty(exports, "DocumentColorRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } }));
Object.defineProperty(exports, "ColorPresentationRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } }));
const protocol_foldingRange_1 = __webpack_require__(1203);
Object.defineProperty(exports, "FoldingRangeRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } }));
const protocol_declaration_1 = __webpack_require__(5581);
Object.defineProperty(exports, "DeclarationRequest", ({ enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } }));
const protocol_selectionRange_1 = __webpack_require__(1530);
Object.defineProperty(exports, "SelectionRangeRequest", ({ enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } }));
const protocol_progress_1 = __webpack_require__(4166);
Object.defineProperty(exports, "WorkDoneProgress", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } }));
Object.defineProperty(exports, "WorkDoneProgressCreateRequest", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } }));
Object.defineProperty(exports, "WorkDoneProgressCancelNotification", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } }));
const protocol_callHierarchy_1 = __webpack_require__(7602);
Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } }));
const protocol_semanticTokens_1 = __webpack_require__(2067);
Object.defineProperty(exports, "TokenFormat", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } }));
Object.defineProperty(exports, "SemanticTokensRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } }));
Object.defineProperty(exports, "SemanticTokensDeltaRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } }));
Object.defineProperty(exports, "SemanticTokensRangeRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } }));
Object.defineProperty(exports, "SemanticTokensRefreshRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } }));
Object.defineProperty(exports, "SemanticTokensRegistrationType", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } }));
const protocol_showDocument_1 = __webpack_require__(4333);
Object.defineProperty(exports, "ShowDocumentRequest", ({ enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } }));
const protocol_linkedEditingRange_1 = __webpack_require__(2249);
Object.defineProperty(exports, "LinkedEditingRangeRequest", ({ enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } }));
const protocol_fileOperations_1 = __webpack_require__(4781);
Object.defineProperty(exports, "FileOperationPatternKind", ({ enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } }));
Object.defineProperty(exports, "DidCreateFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } }));
Object.defineProperty(exports, "WillCreateFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } }));
Object.defineProperty(exports, "DidRenameFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } }));
Object.defineProperty(exports, "WillRenameFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } }));
Object.defineProperty(exports, "DidDeleteFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } }));
Object.defineProperty(exports, "WillDeleteFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } }));
const protocol_moniker_1 = __webpack_require__(7684);
Object.defineProperty(exports, "UniquenessLevel", ({ enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } }));
Object.defineProperty(exports, "MonikerKind", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } }));
Object.defineProperty(exports, "MonikerRequest", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } }));
const protocol_typeHierarchy_1 = __webpack_require__(7062);
Object.defineProperty(exports, "TypeHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } }));
Object.defineProperty(exports, "TypeHierarchySubtypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } }));
Object.defineProperty(exports, "TypeHierarchySupertypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } }));
const protocol_inlineValue_1 = __webpack_require__(3491);
Object.defineProperty(exports, "InlineValueRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } }));
Object.defineProperty(exports, "InlineValueRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } }));
const protocol_inlayHint_1 = __webpack_require__(9383);
Object.defineProperty(exports, "InlayHintRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } }));
Object.defineProperty(exports, "InlayHintResolveRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } }));
Object.defineProperty(exports, "InlayHintRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } }));
const protocol_diagnostic_1 = __webpack_require__(1494);
Object.defineProperty(exports, "DiagnosticServerCancellationData", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } }));
Object.defineProperty(exports, "DocumentDiagnosticReportKind", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } }));
Object.defineProperty(exports, "DocumentDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } }));
Object.defineProperty(exports, "WorkspaceDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } }));
Object.defineProperty(exports, "DiagnosticRefreshRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } }));
const protocol_notebook_1 = __webpack_require__(4792);
Object.defineProperty(exports, "NotebookCellKind", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } }));
Object.defineProperty(exports, "ExecutionSummary", ({ enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } }));
Object.defineProperty(exports, "NotebookCell", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } }));
Object.defineProperty(exports, "NotebookDocument", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } }));
Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } }));
Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } }));
Object.defineProperty(exports, "NotebookCellArrayChange", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } }));
Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } }));
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var TextDocumentFilter;
(function (TextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
    }
    TextDocumentFilter.is = is;
})(TextDocumentFilter = exports.TextDocumentFilter || (exports.TextDocumentFilter = {}));
/**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookDocumentFilter;
(function (NotebookDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    NotebookDocumentFilter.is = is;
})(NotebookDocumentFilter = exports.NotebookDocumentFilter || (exports.NotebookDocumentFilter = {}));
/**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookCellTextDocumentFilter;
(function (NotebookCellTextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))
            && (candidate.language === undefined || Is.string(candidate.language));
    }
    NotebookCellTextDocumentFilter.is = is;
})(NotebookCellTextDocumentFilter = exports.NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = {}));
/**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */
var DocumentSelector;
(function (DocumentSelector) {
    function is(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        for (let elem of value) {
            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                return false;
            }
        }
        return true;
    }
    DocumentSelector.is = is;
})(DocumentSelector = exports.DocumentSelector || (exports.DocumentSelector = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
    RegistrationRequest.method = 'client/registerCapability';
    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
    UnregistrationRequest.method = 'client/unregisterCapability';
    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind.Create = 'create';
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind.Rename = 'rename';
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind.Delete = 'delete';
})(ResourceOperationKind = exports.ResourceOperationKind || (exports.ResourceOperationKind = {}));
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind.Abort = 'abort';
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind.Transactional = 'transactional';
    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */
    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind.Undo = 'undo';
})(FailureHandlingKind = exports.FailureHandlingKind || (exports.FailureHandlingKind = {}));
/**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */
var PositionEncodingKind;
(function (PositionEncodingKind) {
    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */
    PositionEncodingKind.UTF8 = 'utf-8';
    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */
    PositionEncodingKind.UTF16 = 'utf-16';
    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */
    PositionEncodingKind.UTF32 = 'utf-32';
})(PositionEncodingKind = exports.PositionEncodingKind || (exports.PositionEncodingKind = {}));
/**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */
var StaticRegistrationOptions;
(function (StaticRegistrationOptions) {
    function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
    }
    StaticRegistrationOptions.hasId = hasId;
})(StaticRegistrationOptions = exports.StaticRegistrationOptions || (exports.StaticRegistrationOptions = {}));
/**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */
var TextDocumentRegistrationOptions;
(function (TextDocumentRegistrationOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
    }
    TextDocumentRegistrationOptions.is = is;
})(TextDocumentRegistrationOptions = exports.TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = {}));
/**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */
var WorkDoneProgressOptions;
(function (WorkDoneProgressOptions) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
    }
    WorkDoneProgressOptions.is = is;
    function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
    }
    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
})(WorkDoneProgressOptions = exports.WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.method = 'initialize';
    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
/**
 * Known error codes for an `InitializeErrorCodes`;
 */
var InitializeErrorCodes;
(function (InitializeErrorCodes) {
    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */
    InitializeErrorCodes.unknownProtocolVersion = 1;
})(InitializeErrorCodes = exports.InitializeErrorCodes || (exports.InitializeErrorCodes = {}));
/**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
    InitializedNotification.method = 'initialized';
    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.method = 'shutdown';
    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.method = 'exit';
    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType.Error = 1;
    /**
     * A warning message.
     */
    MessageType.Warning = 2;
    /**
     * An information message.
     */
    MessageType.Info = 3;
    /**
     * A log message.
     */
    MessageType.Log = 4;
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.method = 'window/showMessage';
    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.method = 'window/showMessageRequest';
    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.method = 'window/logMessage';
    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.method = 'telemetry/event';
    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind.None = 0;
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind.Full = 1;
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
var TextDocumentContentChangeEvent;
(function (TextDocumentContentChangeEvent) {
    /**
     * Checks whether the information describes a delta event.
     */
    function isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    TextDocumentContentChangeEvent.isIncremental = isIncremental;
    /**
     * Checks whether the information describes a full replacement event.
     */
    function isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
    TextDocumentContentChangeEvent.isFull = isFull;
})(TextDocumentContentChangeEvent = exports.TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType.Created = 1;
    /**
     * The file got changed.
     */
    FileChangeType.Changed = 2;
    /**
     * The file got deleted.
     */
    FileChangeType.Deleted = 3;
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
var RelativePattern;
(function (RelativePattern) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
    }
    RelativePattern.is = is;
})(RelativePattern = exports.RelativePattern || (exports.RelativePattern = {}));
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind.Create = 1;
    /**
     * Interested in change events
     */
    WatchKind.Change = 2;
    /**
     * Interested in delete events
     */
    WatchKind.Delete = 4;
})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind.Invoked = 1;
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind.TriggerCharacter = 2;
    /**
     * Completion was re-triggered as current completion list is incomplete
     */
    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.method = 'textDocument/completion';
    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.method = 'completionItem/resolve';
    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.method = 'textDocument/hover';
    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind.Invoked = 1;
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind.TriggerCharacter = 2;
    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */
    SignatureHelpTriggerKind.ContentChange = 3;
})(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.method = 'textDocument/signatureHelp';
    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of either type {@link Definition}
 * or a typed array of {@link DefinitionLink} or a Thenable that resolves
 * to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.method = 'textDocument/definition';
    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.method = 'textDocument/references';
    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
/**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.method = 'textDocument/codeAction';
    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
/**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */
var CodeActionResolveRequest;
(function (CodeActionResolveRequest) {
    CodeActionResolveRequest.method = 'codeAction/resolve';
    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
})(CodeActionResolveRequest = exports.CodeActionResolveRequest || (exports.CodeActionResolveRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.method = 'workspace/symbol';
    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
/**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */
var WorkspaceSymbolResolveRequest;
(function (WorkspaceSymbolResolveRequest) {
    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
})(WorkspaceSymbolResolveRequest = exports.WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.method = 'textDocument/codeLens';
    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.method = 'codeLens/resolve';
    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
/**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */
var CodeLensRefreshRequest;
(function (CodeLensRefreshRequest) {
    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
})(CodeLensRefreshRequest = exports.CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.method = 'textDocument/documentLink';
    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.method = 'documentLink/resolve';
    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
/**
 * A request to to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.method = 'textDocument/formatting';
    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
/**
 * A request to to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
//---- Rename ----------------------------------------------
var PrepareSupportDefaultBehavior;
(function (PrepareSupportDefaultBehavior) {
    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */
    PrepareSupportDefaultBehavior.Identifier = 1;
})(PrepareSupportDefaultBehavior = exports.PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.method = 'textDocument/rename';
    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
/**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */
var PrepareRenameRequest;
(function (PrepareRenameRequest) {
    PrepareRenameRequest.method = 'textDocument/prepareRename';
    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
})(PrepareRenameRequest = exports.PrepareRenameRequest || (exports.PrepareRenameRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
    ExecuteCommandRequest.method = 'workspace/executeCommand';
    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));


/***/ }),

/***/ 2249:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */
var LinkedEditingRangeRequest;
(function (LinkedEditingRangeRequest) {
    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
})(LinkedEditingRangeRequest = exports.LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = {}));


/***/ }),

/***/ 7684:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */
var UniquenessLevel;
(function (UniquenessLevel) {
    /**
     * The moniker is only unique inside a document
     */
    UniquenessLevel.document = 'document';
    /**
     * The moniker is unique inside a project for which a dump got created
     */
    UniquenessLevel.project = 'project';
    /**
     * The moniker is unique inside the group to which a project belongs
     */
    UniquenessLevel.group = 'group';
    /**
     * The moniker is unique inside the moniker scheme.
     */
    UniquenessLevel.scheme = 'scheme';
    /**
     * The moniker is globally unique
     */
    UniquenessLevel.global = 'global';
})(UniquenessLevel = exports.UniquenessLevel || (exports.UniquenessLevel = {}));
/**
 * The moniker kind.
 *
 * @since 3.16.0
 */
var MonikerKind;
(function (MonikerKind) {
    /**
     * The moniker represent a symbol that is imported into a project
     */
    MonikerKind.$import = 'import';
    /**
     * The moniker represents a symbol that is exported from a project
     */
    MonikerKind.$export = 'export';
    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */
    MonikerKind.local = 'local';
})(MonikerKind = exports.MonikerKind || (exports.MonikerKind = {}));
/**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */
var MonikerRequest;
(function (MonikerRequest) {
    MonikerRequest.method = 'textDocument/moniker';
    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
})(MonikerRequest = exports.MonikerRequest || (exports.MonikerRequest = {}));


/***/ }),

/***/ 4792:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
const vscode_languageserver_types_1 = __webpack_require__(7717);
const Is = __webpack_require__(8633);
const messages_1 = __webpack_require__(8431);
/**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */
var NotebookCellKind;
(function (NotebookCellKind) {
    /**
     * A markup-cell is formatted source that is used for display.
     */
    NotebookCellKind.Markup = 1;
    /**
     * A code-cell is source code.
     */
    NotebookCellKind.Code = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    NotebookCellKind.is = is;
})(NotebookCellKind = exports.NotebookCellKind || (exports.NotebookCellKind = {}));
var ExecutionSummary;
(function (ExecutionSummary) {
    function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
            result.success = success;
        }
        return result;
    }
    ExecutionSummary.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
    }
    ExecutionSummary.is = is;
    function equals(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
    }
    ExecutionSummary.equals = equals;
})(ExecutionSummary = exports.ExecutionSummary || (exports.ExecutionSummary = {}));
var NotebookCell;
(function (NotebookCell) {
    function create(kind, document) {
        return { kind, document };
    }
    NotebookCell.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&
            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
    }
    NotebookCell.is = is;
    function diff(one, two) {
        const result = new Set();
        if (one.document !== two.document) {
            result.add('document');
        }
        if (one.kind !== two.kind) {
            result.add('kind');
        }
        if (one.executionSummary !== two.executionSummary) {
            result.add('executionSummary');
        }
        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
            result.add('metadata');
        }
        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
            result.add('executionSummary');
        }
        return result;
    }
    NotebookCell.diff = diff;
    function equalsMetadata(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        if (typeof one !== typeof other) {
            return false;
        }
        if (typeof one !== 'object') {
            return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
            return false;
        }
        if (oneArray && otherArray) {
            if (one.length !== other.length) {
                return false;
            }
            for (let i = 0; i < one.length; i++) {
                if (!equalsMetadata(one[i], other[i])) {
                    return false;
                }
            }
        }
        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
            const oneKeys = Object.keys(one);
            const otherKeys = Object.keys(other);
            if (oneKeys.length !== otherKeys.length) {
                return false;
            }
            oneKeys.sort();
            otherKeys.sort();
            if (!equalsMetadata(oneKeys, otherKeys)) {
                return false;
            }
            for (let i = 0; i < oneKeys.length; i++) {
                const prop = oneKeys[i];
                if (!equalsMetadata(one[prop], other[prop])) {
                    return false;
                }
            }
        }
        return true;
    }
})(NotebookCell = exports.NotebookCell || (exports.NotebookCell = {}));
var NotebookDocument;
(function (NotebookDocument) {
    function create(uri, notebookType, version, cells) {
        return { uri, notebookType, version, cells };
    }
    NotebookDocument.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
    }
    NotebookDocument.is = is;
})(NotebookDocument = exports.NotebookDocument || (exports.NotebookDocument = {}));
var NotebookDocumentSyncRegistrationType;
(function (NotebookDocumentSyncRegistrationType) {
    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
})(NotebookDocumentSyncRegistrationType = exports.NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = {}));
/**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */
var DidOpenNotebookDocumentNotification;
(function (DidOpenNotebookDocumentNotification) {
    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidOpenNotebookDocumentNotification = exports.DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = {}));
var NotebookCellArrayChange;
(function (NotebookCellArrayChange) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
    }
    NotebookCellArrayChange.is = is;
    function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== undefined) {
            result.cells = cells;
        }
        return result;
    }
    NotebookCellArrayChange.create = create;
})(NotebookCellArrayChange = exports.NotebookCellArrayChange || (exports.NotebookCellArrayChange = {}));
var DidChangeNotebookDocumentNotification;
(function (DidChangeNotebookDocumentNotification) {
    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidChangeNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */
var DidSaveNotebookDocumentNotification;
(function (DidSaveNotebookDocumentNotification) {
    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidSaveNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */
var DidCloseNotebookDocumentNotification;
(function (DidCloseNotebookDocumentNotification) {
    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidCloseNotebookDocumentNotification = exports.DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = {}));


/***/ }),

/***/ 4166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
const messages_1 = __webpack_require__(8431);
var WorkDoneProgress;
(function (WorkDoneProgress) {
    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
    function is(value) {
        return value === WorkDoneProgress.type;
    }
    WorkDoneProgress.is = is;
})(WorkDoneProgress = exports.WorkDoneProgress || (exports.WorkDoneProgress = {}));
/**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */
var WorkDoneProgressCreateRequest;
(function (WorkDoneProgressCreateRequest) {
    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
})(WorkDoneProgressCreateRequest = exports.WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = {}));
/**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */
var WorkDoneProgressCancelNotification;
(function (WorkDoneProgressCancelNotification) {
    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
})(WorkDoneProgressCancelNotification = exports.WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = {}));


/***/ }),

/***/ 1530:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRangeRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */
var SelectionRangeRequest;
(function (SelectionRangeRequest) {
    SelectionRangeRequest.method = 'textDocument/selectionRange';
    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
})(SelectionRangeRequest = exports.SelectionRangeRequest || (exports.SelectionRangeRequest = {}));


/***/ }),

/***/ 2067:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
const messages_1 = __webpack_require__(8431);
//------- 'textDocument/semanticTokens' -----
var TokenFormat;
(function (TokenFormat) {
    TokenFormat.Relative = 'relative';
})(TokenFormat = exports.TokenFormat || (exports.TokenFormat = {}));
var SemanticTokensRegistrationType;
(function (SemanticTokensRegistrationType) {
    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
})(SemanticTokensRegistrationType = exports.SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRequest;
(function (SemanticTokensRequest) {
    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRequest = exports.SemanticTokensRequest || (exports.SemanticTokensRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensDeltaRequest;
(function (SemanticTokensDeltaRequest) {
    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensDeltaRequest = exports.SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRangeRequest;
(function (SemanticTokensRangeRequest) {
    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRangeRequest = exports.SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRefreshRequest;
(function (SemanticTokensRefreshRequest) {
    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
})(SemanticTokensRefreshRequest = exports.SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = {}));


/***/ }),

/***/ 4333:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/
var ShowDocumentRequest;
(function (ShowDocumentRequest) {
    ShowDocumentRequest.method = 'window/showDocument';
    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
})(ShowDocumentRequest = exports.ShowDocumentRequest || (exports.ShowDocumentRequest = {}));


/***/ }),

/***/ 9264:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDefinitionRequest = void 0;
const messages_1 = __webpack_require__(8431);
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
})(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));


/***/ }),

/***/ 7062:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */
var TypeHierarchyPrepareRequest;
(function (TypeHierarchyPrepareRequest) {
    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
})(TypeHierarchyPrepareRequest = exports.TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = {}));
/**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySupertypesRequest;
(function (TypeHierarchySupertypesRequest) {
    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
})(TypeHierarchySupertypesRequest = exports.TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = {}));
/**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySubtypesRequest;
(function (TypeHierarchySubtypesRequest) {
    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
})(TypeHierarchySubtypesRequest = exports.TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = {}));


/***/ }),

/***/ 6860:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
})(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
})(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));


/***/ }),

/***/ 8633:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function objectLiteral(value) {
    // Strictly speaking class instances pass this check as well. Since the LSP
    // doesn't use classes we ignore this for now. If we do we need to add something
    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
    return value !== null && typeof value === 'object';
}
exports.objectLiteral = objectLiteral;


/***/ }),

/***/ 7717:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnnotatedTextEdit: () => (/* binding */ AnnotatedTextEdit),
/* harmony export */   ChangeAnnotation: () => (/* binding */ ChangeAnnotation),
/* harmony export */   ChangeAnnotationIdentifier: () => (/* binding */ ChangeAnnotationIdentifier),
/* harmony export */   CodeAction: () => (/* binding */ CodeAction),
/* harmony export */   CodeActionContext: () => (/* binding */ CodeActionContext),
/* harmony export */   CodeActionKind: () => (/* binding */ CodeActionKind),
/* harmony export */   CodeActionTriggerKind: () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   CodeDescription: () => (/* binding */ CodeDescription),
/* harmony export */   CodeLens: () => (/* binding */ CodeLens),
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   ColorInformation: () => (/* binding */ ColorInformation),
/* harmony export */   ColorPresentation: () => (/* binding */ ColorPresentation),
/* harmony export */   Command: () => (/* binding */ Command),
/* harmony export */   CompletionItem: () => (/* binding */ CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemLabelDetails: () => (/* binding */ CompletionItemLabelDetails),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionList: () => (/* binding */ CompletionList),
/* harmony export */   CreateFile: () => (/* binding */ CreateFile),
/* harmony export */   DeleteFile: () => (/* binding */ DeleteFile),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   DiagnosticRelatedInformation: () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   DiagnosticSeverity: () => (/* binding */ DiagnosticSeverity),
/* harmony export */   DiagnosticTag: () => (/* binding */ DiagnosticTag),
/* harmony export */   DocumentHighlight: () => (/* binding */ DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* binding */ DocumentLink),
/* harmony export */   DocumentSymbol: () => (/* binding */ DocumentSymbol),
/* harmony export */   DocumentUri: () => (/* binding */ DocumentUri),
/* harmony export */   EOL: () => (/* binding */ EOL),
/* harmony export */   FoldingRange: () => (/* binding */ FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   FormattingOptions: () => (/* binding */ FormattingOptions),
/* harmony export */   Hover: () => (/* binding */ Hover),
/* harmony export */   InlayHint: () => (/* binding */ InlayHint),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlayHintLabelPart: () => (/* binding */ InlayHintLabelPart),
/* harmony export */   InlineValueContext: () => (/* binding */ InlineValueContext),
/* harmony export */   InlineValueEvaluatableExpression: () => (/* binding */ InlineValueEvaluatableExpression),
/* harmony export */   InlineValueText: () => (/* binding */ InlineValueText),
/* harmony export */   InlineValueVariableLookup: () => (/* binding */ InlineValueVariableLookup),
/* harmony export */   InsertReplaceEdit: () => (/* binding */ InsertReplaceEdit),
/* harmony export */   InsertTextFormat: () => (/* binding */ InsertTextFormat),
/* harmony export */   InsertTextMode: () => (/* binding */ InsertTextMode),
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   LocationLink: () => (/* binding */ LocationLink),
/* harmony export */   MarkedString: () => (/* binding */ MarkedString),
/* harmony export */   MarkupContent: () => (/* binding */ MarkupContent),
/* harmony export */   MarkupKind: () => (/* binding */ MarkupKind),
/* harmony export */   OptionalVersionedTextDocumentIdentifier: () => (/* binding */ OptionalVersionedTextDocumentIdentifier),
/* harmony export */   ParameterInformation: () => (/* binding */ ParameterInformation),
/* harmony export */   Position: () => (/* binding */ Position),
/* harmony export */   Range: () => (/* binding */ Range),
/* harmony export */   RenameFile: () => (/* binding */ RenameFile),
/* harmony export */   SelectionRange: () => (/* binding */ SelectionRange),
/* harmony export */   SemanticTokenModifiers: () => (/* binding */ SemanticTokenModifiers),
/* harmony export */   SemanticTokenTypes: () => (/* binding */ SemanticTokenTypes),
/* harmony export */   SemanticTokens: () => (/* binding */ SemanticTokens),
/* harmony export */   SignatureInformation: () => (/* binding */ SignatureInformation),
/* harmony export */   SymbolInformation: () => (/* binding */ SymbolInformation),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   TextDocument: () => (/* binding */ TextDocument),
/* harmony export */   TextDocumentEdit: () => (/* binding */ TextDocumentEdit),
/* harmony export */   TextDocumentIdentifier: () => (/* binding */ TextDocumentIdentifier),
/* harmony export */   TextDocumentItem: () => (/* binding */ TextDocumentItem),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   URI: () => (/* binding */ URI),
/* harmony export */   VersionedTextDocumentIdentifier: () => (/* binding */ VersionedTextDocumentIdentifier),
/* harmony export */   WorkspaceChange: () => (/* binding */ WorkspaceChange),
/* harmony export */   WorkspaceEdit: () => (/* binding */ WorkspaceEdit),
/* harmony export */   WorkspaceFolder: () => (/* binding */ WorkspaceFolder),
/* harmony export */   WorkspaceSymbol: () => (/* binding */ WorkspaceSymbol),
/* harmony export */   integer: () => (/* binding */ integer),
/* harmony export */   uinteger: () => (/* binding */ uinteger)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var DocumentUri;
(function (DocumentUri) {
    function is(value) {
        return typeof value === 'string';
    }
    DocumentUri.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI;
(function (URI) {
    function is(value) {
        return typeof value === 'string';
    }
    URI.is = is;
})(URI || (URI = {}));
var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
    }
    integer.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
    }
    uinteger.is = is;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line: line, character: character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri: uri, range: range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && Range.is(candidate.targetSelectionRange)
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red: red,
            green: green,
            blue: blue,
            alpha: alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range: range,
            color: color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label: label,
            textEdit: textEdit,
            additionalTextEdits: additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * A set of predefined range kinds.
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind.Comment = 'comment';
    /**
     * Folding range for an import or include
     */
    FoldingRangeKind.Imports = 'imports';
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind.Region = 'region';
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        var result = {
            startLine: startLine,
            endLine: endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location: location,
            message: message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range: range, message: message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */
    function is(value) {
        var _a;
        var candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title: title, command: command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range: range, newText: newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText: newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range: range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        var result = { label: label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        var candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range: range, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText: newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range: range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        var candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument: textDocument, edits: edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'create',
            uri: uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        var result = {
            kind: 'rename',
            oldUri: oldUri,
            newUri: newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        var result = {
            kind: 'delete',
            uri: uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        var candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        var candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every(function (change) {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
var TextEditChangeImpl = /** @class */ (function () {
    function TextEditChangeImpl(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.delete = function (range, annotation) {
        var edit;
        var id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    };
    TextEditChangeImpl.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {
        if (value === undefined) {
            throw new Error("Text edit change is not configured to manage change annotations.");
        }
    };
    return TextEditChangeImpl;
}());
/**
 * A helper class
 */
var ChangeAnnotations = /** @class */ (function () {
    function ChangeAnnotations(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    ChangeAnnotations.prototype.all = function () {
        return this._annotations;
    };
    Object.defineProperty(ChangeAnnotations.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: false,
        configurable: true
    });
    ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {
        var id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error("Id ".concat(id, " is already in use."));
        }
        if (annotation === undefined) {
            throw new Error("No annotation provided for id ".concat(id));
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    };
    ChangeAnnotations.prototype.nextId = function () {
        this._counter++;
        return this._counter.toString();
    };
    return ChangeAnnotations;
}());
/**
 * A workspace change helps constructing changes to a workspace.
 */
var WorkspaceChange = /** @class */ (function () {
    function WorkspaceChange(workspaceEdit) {
        var _this = this;
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function (change) {
                    if (TextDocumentEdit.is(change)) {
                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    Object.defineProperty(WorkspaceChange.prototype, "edit", {
        /**
         * Returns the underlying {@link WorkspaceEdit} literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            this.initDocumentChanges();
            if (this._changeAnnotations !== undefined) {
                if (this._changeAnnotations.size === 0) {
                    this._workspaceEdit.changeAnnotations = undefined;
                }
                else {
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            return this._workspaceEdit;
        },
        enumerable: false,
        configurable: true
    });
    WorkspaceChange.prototype.getTextEditChange = function (key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var textDocument = { uri: key.uri, version: key.version };
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument: textDocument,
                    edits: edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    WorkspaceChange.prototype.initDocumentChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    };
    WorkspaceChange.prototype.initChanges = function () {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    };
    WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        var annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        var operation;
        var id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    };
    return WorkspaceChange;
}());

/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri: uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri: uri, languageId: languageId, version: version, text: text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */
    function is(value) {
        var candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText: newText, insert: insert, replace: replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails) {
    function is(value) {
        var candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    CompletionItemLabelDetails.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label: label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */
    function is(value) {
        var candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */
    function is(value) {
        var candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label: label, documentation: documentation } : { label: label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label: label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */
    function create(range, kind) {
        var result = { range: range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        var result = {
            name: name,
            kind: kind,
            location: { uri: uri, range: range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol) {
    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */
    function create(name, kind, uri, range) {
        return range !== undefined
            ? { name: name, kind: kind, location: { uri: uri, range: range } }
            : { name: name, kind: kind, location: { uri: uri } };
    }
    WorkspaceSymbol.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        var result = {
            name: name,
            detail: detail,
            kind: kind,
            range: range,
            selectionRange: selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */
    function is(value) {
        var candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */
var CodeActionTriggerKind;
(function (CodeActionTriggerKind) {
    /**
     * Code actions were explicitly requested by the user or by an extension.
     */
    CodeActionTriggerKind.Invoked = 1;
    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */
    CodeActionTriggerKind.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only, triggerKind) {
        var result = { diagnostics: diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        if (triggerKind !== undefined && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        var result = { title: title };
        var checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        var candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        var result = { range: range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize: tabSize, insertSpaces: insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range: range, target: target, data: data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range: range, parent: parent };
    }
    SelectionRange.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
    /**
     * @since 3.17.0
     */
    SemanticTokenTypes["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens || (SemanticTokens = {}));
/**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */
var InlineValueText;
(function (InlineValueText) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, text) {
        return { range: range, text: text };
    }
    InlineValueText.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText.is = is;
})(InlineValueText || (InlineValueText = {}));
/**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */
var InlineValueVariableLookup;
(function (InlineValueVariableLookup) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, variableName, caseSensitiveLookup) {
        return { range: range, variableName: variableName, caseSensitiveLookup: caseSensitiveLookup };
    }
    InlineValueVariableLookup.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
            && (Is.string(candidate.variableName) || candidate.variableName === undefined);
    }
    InlineValueVariableLookup.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
/**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression) {
    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */
    function create(range, expression) {
        return { range: range, expression: expression };
    }
    InlineValueEvaluatableExpression.create = create;
    function is(value) {
        var candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range)
            && (Is.string(candidate.expression) || candidate.expression === undefined);
    }
    InlineValueEvaluatableExpression.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
/**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */
var InlineValueContext;
(function (InlineValueContext) {
    /**
     * Creates a new InlineValueContext literal.
     */
    function create(frameId, stoppedLocation) {
        return { frameId: frameId, stoppedLocation: stoppedLocation };
    }
    InlineValueContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext.is = is;
})(InlineValueContext || (InlineValueContext = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind.Type = 1;
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart) {
    function create(value) {
        return { value: value };
    }
    InlayHintLabelPart.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.location === undefined || Location.is(candidate.location))
            && (candidate.command === undefined || Command.is(candidate.command));
    }
    InlayHintLabelPart.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint) {
    function create(position, label, kind) {
        var result = { position: position, label: label };
        if (kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint.create = create;
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position)
            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
    }
    InlayHint.is = is;
})(InlayHint || (InlayHint = {}));
var WorkspaceFolder;
(function (WorkspaceFolder) {
    function is(value) {
        var candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
var EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        var p = (data.length / 2) | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var FullTextDocument = /** @class */ (function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: false,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === undefined) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: false,
        configurable: true
    });
    return FullTextDocument;
}());
var Is;
(function (Is) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ }),

/***/ 4794:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(7532);

/***/ }),

/***/ 7532:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConnection = void 0;
const api_1 = __webpack_require__(4202);
__exportStar(__webpack_require__(8713), exports);
__exportStar(__webpack_require__(4202), exports);
let _shutdownReceived = false;
const watchDog = {
    initialize: (_params) => {
    },
    get shutdownReceived() {
        return _shutdownReceived;
    },
    set shutdownReceived(value) {
        _shutdownReceived = value;
    },
    exit: (_code) => {
    }
};
function createConnection(arg1, arg2, arg3, arg4) {
    let factories;
    let reader;
    let writer;
    let options;
    if (arg1 !== void 0 && arg1.__brand === 'features') {
        factories = arg1;
        arg1 = arg2;
        arg2 = arg3;
        arg3 = arg4;
    }
    if (api_1.ConnectionStrategy.is(arg1) || api_1.ConnectionOptions.is(arg1)) {
        options = arg1;
    }
    else {
        reader = arg1;
        writer = arg2;
        options = arg3;
    }
    const connectionFactory = (logger) => {
        return (0, api_1.createProtocolConnection)(reader, writer, logger, options);
    };
    return (0, api_1.createConnection)(connectionFactory, watchDog, factories);
}
exports.createConnection = createConnection;


/***/ }),

/***/ 4202:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProposedFeatures = exports.NotebookDocuments = exports.TextDocuments = exports.SemanticTokensBuilder = void 0;
const semanticTokens_1 = __webpack_require__(9994);
Object.defineProperty(exports, "SemanticTokensBuilder", ({ enumerable: true, get: function () { return semanticTokens_1.SemanticTokensBuilder; } }));
__exportStar(__webpack_require__(5501), exports);
const textDocuments_1 = __webpack_require__(5109);
Object.defineProperty(exports, "TextDocuments", ({ enumerable: true, get: function () { return textDocuments_1.TextDocuments; } }));
const notebook_1 = __webpack_require__(8993);
Object.defineProperty(exports, "NotebookDocuments", ({ enumerable: true, get: function () { return notebook_1.NotebookDocuments; } }));
__exportStar(__webpack_require__(575), exports);
var ProposedFeatures;
(function (ProposedFeatures) {
    ProposedFeatures.all = {
        __brand: 'features',
    };
})(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));


/***/ }),

/***/ 1913:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const CallHierarchyFeature = (Base) => {
    return class extends Base {
        get callHierarchy() {
            return {
                onPrepare: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
                    });
                },
                onIncomingCalls: (handler) => {
                    const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onOutgoingCalls: (handler) => {
                    const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.CallHierarchyFeature = CallHierarchyFeature;


/***/ }),

/***/ 9216:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const Is = __webpack_require__(1930);
const ConfigurationFeature = (Base) => {
    return class extends Base {
        getConfiguration(arg) {
            if (!arg) {
                return this._getConfiguration({});
            }
            else if (Is.string(arg)) {
                return this._getConfiguration({ section: arg });
            }
            else {
                return this._getConfiguration(arg);
            }
        }
        _getConfiguration(arg) {
            let params = {
                items: Array.isArray(arg) ? arg : [arg]
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result) => {
                if (Array.isArray(result)) {
                    return Array.isArray(arg) ? result : result[0];
                }
                else {
                    return Array.isArray(arg) ? [] : null;
                }
            });
        }
    };
};
exports.ConfigurationFeature = ConfigurationFeature;


/***/ }),

/***/ 8671:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const DiagnosticFeature = (Base) => {
    return class extends Base {
        get diagnostics() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.DiagnosticRefreshRequest.type);
                },
                on: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.partialResult, params));
                    });
                },
                onWorkspace: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.partialResult, params));
                    });
                }
            };
        }
    };
};
exports.DiagnosticFeature = DiagnosticFeature;


/***/ }),

/***/ 2636:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileOperationsFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const FileOperationsFeature = (Base) => {
    return class extends Base {
        onDidCreateFiles(handler) {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onDidRenameFiles(handler) {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onDidDeleteFiles(handler) {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onWillCreateFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
        onWillRenameFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
        onWillDeleteFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
    };
};
exports.FileOperationsFeature = FileOperationsFeature;


/***/ }),

/***/ 588:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const InlayHintFeature = (Base) => {
    return class extends Base {
        get inlayHint() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type);
                },
                on: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params));
                    });
                },
                resolve: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, (params, cancel) => {
                        return handler(params, cancel);
                    });
                }
            };
        }
    };
};
exports.InlayHintFeature = InlayHintFeature;


/***/ }),

/***/ 9336:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const InlineValueFeature = (Base) => {
    return class extends Base {
        get inlineValue() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type);
                },
                on: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params));
                    });
                }
            };
        }
    };
};
exports.InlineValueFeature = InlineValueFeature;


/***/ }),

/***/ 7824:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const LinkedEditingRangeFeature = (Base) => {
    return class extends Base {
        onLinkedEditingRange(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
            });
        }
    };
};
exports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;


/***/ }),

/***/ 6475:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const MonikerFeature = (Base) => {
    return class extends Base {
        get moniker() {
            return {
                on: (handler) => {
                    const type = vscode_languageserver_protocol_1.MonikerRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
            };
        }
    };
};
exports.MonikerFeature = MonikerFeature;


/***/ }),

/***/ 8993:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotebookDocuments = exports.NotebookSyncFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const textDocuments_1 = __webpack_require__(5109);
const NotebookSyncFeature = (Base) => {
    return class extends Base {
        get synchronization() {
            return {
                onDidOpenNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidOpenNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                },
                onDidChangeNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                },
                onDidSaveNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidSaveNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                },
                onDidCloseNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidCloseNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                }
            };
        }
    };
};
exports.NotebookSyncFeature = NotebookSyncFeature;
class CellTextDocumentConnection {
    onDidOpenTextDocument(handler) {
        this.openHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => { this.openHandler = undefined; });
    }
    openTextDocument(params) {
        this.openHandler && this.openHandler(params);
    }
    onDidChangeTextDocument(handler) {
        this.changeHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => { this.changeHandler = handler; });
    }
    changeTextDocument(params) {
        this.changeHandler && this.changeHandler(params);
    }
    onDidCloseTextDocument(handler) {
        this.closeHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => { this.closeHandler = undefined; });
    }
    closeTextDocument(params) {
        this.closeHandler && this.closeHandler(params);
    }
    onWillSaveTextDocument() {
        return CellTextDocumentConnection.NULL_DISPOSE;
    }
    onWillSaveTextDocumentWaitUntil() {
        return CellTextDocumentConnection.NULL_DISPOSE;
    }
    onDidSaveTextDocument() {
        return CellTextDocumentConnection.NULL_DISPOSE;
    }
}
CellTextDocumentConnection.NULL_DISPOSE = Object.freeze({ dispose: () => { } });
class NotebookDocuments {
    constructor(configurationOrTextDocuments) {
        if (configurationOrTextDocuments instanceof textDocuments_1.TextDocuments) {
            this._cellTextDocuments = configurationOrTextDocuments;
        }
        else {
            this._cellTextDocuments = new textDocuments_1.TextDocuments(configurationOrTextDocuments);
        }
        this.notebookDocuments = new Map();
        this.notebookCellMap = new Map();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidChange = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
    }
    get cellTextDocuments() {
        return this._cellTextDocuments;
    }
    getCellTextDocument(cell) {
        return this._cellTextDocuments.get(cell.document);
    }
    getNotebookDocument(uri) {
        return this.notebookDocuments.get(uri);
    }
    getNotebookCell(uri) {
        const value = this.notebookCellMap.get(uri);
        return value && value[0];
    }
    findNotebookDocumentForCell(cell) {
        const key = typeof cell === 'string' ? cell : cell.document;
        const value = this.notebookCellMap.get(key);
        return value && value[1];
    }
    get onDidOpen() {
        return this._onDidOpen.event;
    }
    get onDidSave() {
        return this._onDidSave.event;
    }
    get onDidChange() {
        return this._onDidChange.event;
    }
    get onDidClose() {
        return this._onDidClose.event;
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the notebook documents managed by this instance.
     *
     * Please note that the connection only provides handlers not an event model. Therefore
     * listening on a connection will overwrite the following handlers on a connection:
     * `onDidOpenNotebookDocument`, `onDidChangeNotebookDocument`, `onDidSaveNotebookDocument`,
     *  and `onDidCloseNotebookDocument`.
     *
     * @param connection The connection to listen on.
     */
    listen(connection) {
        const cellTextDocumentConnection = new CellTextDocumentConnection();
        const disposables = [];
        disposables.push(this.cellTextDocuments.listen(cellTextDocumentConnection));
        disposables.push(connection.notebooks.synchronization.onDidOpenNotebookDocument((params) => {
            this.notebookDocuments.set(params.notebookDocument.uri, params.notebookDocument);
            for (const cellTextDocument of params.cellTextDocuments) {
                cellTextDocumentConnection.openTextDocument({ textDocument: cellTextDocument });
            }
            this.updateCellMap(params.notebookDocument);
            this._onDidOpen.fire(params.notebookDocument);
        }));
        disposables.push(connection.notebooks.synchronization.onDidChangeNotebookDocument((params) => {
            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
            if (notebookDocument === undefined) {
                return;
            }
            notebookDocument.version = params.notebookDocument.version;
            const oldMetadata = notebookDocument.metadata;
            let metadataChanged = false;
            const change = params.change;
            if (change.metadata !== undefined) {
                metadataChanged = true;
                notebookDocument.metadata = change.metadata;
            }
            const opened = [];
            const closed = [];
            const data = [];
            const text = [];
            if (change.cells !== undefined) {
                const changedCells = change.cells;
                if (changedCells.structure !== undefined) {
                    const array = changedCells.structure.array;
                    notebookDocument.cells.splice(array.start, array.deleteCount, ...(array.cells !== undefined ? array.cells : []));
                    // Additional open cell text documents.
                    if (changedCells.structure.didOpen !== undefined) {
                        for (const open of changedCells.structure.didOpen) {
                            cellTextDocumentConnection.openTextDocument({ textDocument: open });
                            opened.push(open.uri);
                        }
                    }
                    // Additional closed cell test documents.
                    if (changedCells.structure.didClose) {
                        for (const close of changedCells.structure.didClose) {
                            cellTextDocumentConnection.closeTextDocument({ textDocument: close });
                            closed.push(close.uri);
                        }
                    }
                }
                if (changedCells.data !== undefined) {
                    const cellUpdates = new Map(changedCells.data.map(cell => [cell.document, cell]));
                    for (let i = 0; i <= notebookDocument.cells.length; i++) {
                        const change = cellUpdates.get(notebookDocument.cells[i].document);
                        if (change !== undefined) {
                            const old = notebookDocument.cells.splice(i, 1, change);
                            data.push({ old: old[0], new: change });
                            cellUpdates.delete(change.document);
                            if (cellUpdates.size === 0) {
                                break;
                            }
                        }
                    }
                }
                if (changedCells.textContent !== undefined) {
                    for (const cellTextDocument of changedCells.textContent) {
                        cellTextDocumentConnection.changeTextDocument({ textDocument: cellTextDocument.document, contentChanges: cellTextDocument.changes });
                        text.push(cellTextDocument.document.uri);
                    }
                }
            }
            // Update internal data structure.
            this.updateCellMap(notebookDocument);
            const changeEvent = { notebookDocument };
            if (metadataChanged) {
                changeEvent.metadata = { old: oldMetadata, new: notebookDocument.metadata };
            }
            const added = [];
            for (const open of opened) {
                added.push(this.getNotebookCell(open));
            }
            const removed = [];
            for (const close of closed) {
                removed.push(this.getNotebookCell(close));
            }
            const textContent = [];
            for (const change of text) {
                textContent.push(this.getNotebookCell(change));
            }
            if (added.length > 0 || removed.length > 0 || data.length > 0 || textContent.length > 0) {
                changeEvent.cells = { added, removed, changed: { data, textContent } };
            }
            if (changeEvent.metadata !== undefined || changeEvent.cells !== undefined) {
                this._onDidChange.fire(changeEvent);
            }
        }));
        disposables.push(connection.notebooks.synchronization.onDidSaveNotebookDocument((params) => {
            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
            if (notebookDocument === undefined) {
                return;
            }
            this._onDidSave.fire(notebookDocument);
        }));
        disposables.push(connection.notebooks.synchronization.onDidCloseNotebookDocument((params) => {
            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
            if (notebookDocument === undefined) {
                return;
            }
            this._onDidClose.fire(notebookDocument);
            for (const cellTextDocument of params.cellTextDocuments) {
                cellTextDocumentConnection.closeTextDocument({ textDocument: cellTextDocument });
            }
            this.notebookDocuments.delete(params.notebookDocument.uri);
            for (const cell of notebookDocument.cells) {
                this.notebookCellMap.delete(cell.document);
            }
        }));
        return vscode_languageserver_protocol_1.Disposable.create(() => { disposables.forEach(disposable => disposable.dispose()); });
    }
    updateCellMap(notebookDocument) {
        for (const cell of notebookDocument.cells) {
            this.notebookCellMap.set(cell.document, [cell, notebookDocument]);
        }
    }
}
exports.NotebookDocuments = NotebookDocuments;


/***/ }),

/***/ 7091:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const uuid_1 = __webpack_require__(8329);
class WorkDoneProgressReporterImpl {
    constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
        WorkDoneProgressReporterImpl.Instances.set(this._token, this);
    }
    begin(title, percentage, message, cancellable) {
        let param = {
            kind: 'begin',
            title,
            percentage,
            message,
            cancellable
        };
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    report(arg0, arg1) {
        let param = {
            kind: 'report'
        };
        if (typeof arg0 === 'number') {
            param.percentage = arg0;
            if (arg1 !== undefined) {
                param.message = arg1;
            }
        }
        else {
            param.message = arg0;
        }
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    done() {
        WorkDoneProgressReporterImpl.Instances.delete(this._token);
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, { kind: 'end' });
    }
}
WorkDoneProgressReporterImpl.Instances = new Map();
class WorkDoneProgressServerReporterImpl extends WorkDoneProgressReporterImpl {
    constructor(connection, token) {
        super(connection, token);
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
        return this._source.token;
    }
    done() {
        this._source.dispose();
        super.done();
    }
    cancel() {
        this._source.cancel();
    }
}
class NullProgressReporter {
    constructor() {
    }
    begin() {
    }
    report() {
    }
    done() {
    }
}
class NullProgressServerReporter extends NullProgressReporter {
    constructor() {
        super();
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
        return this._source.token;
    }
    done() {
        this._source.dispose();
    }
    cancel() {
        this._source.cancel();
    }
}
function attachWorkDone(connection, params) {
    if (params === undefined || params.workDoneToken === undefined) {
        return new NullProgressReporter();
    }
    const token = params.workDoneToken;
    delete params.workDoneToken;
    return new WorkDoneProgressReporterImpl(connection, token);
}
exports.attachWorkDone = attachWorkDone;
const ProgressFeature = (Base) => {
    return class extends Base {
        constructor() {
            super();
            this._progressSupported = false;
        }
        initialize(capabilities) {
            super.initialize(capabilities);
            if (capabilities?.window?.workDoneProgress === true) {
                this._progressSupported = true;
                this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params) => {
                    let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);
                    if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                        progress.cancel();
                    }
                });
            }
        }
        attachWorkDoneProgress(token) {
            if (token === undefined) {
                return new NullProgressReporter();
            }
            else {
                return new WorkDoneProgressReporterImpl(this.connection, token);
            }
        }
        createWorkDoneProgress() {
            if (this._progressSupported) {
                const token = (0, uuid_1.generateUuid)();
                return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, { token }).then(() => {
                    const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
                    return result;
                });
            }
            else {
                return Promise.resolve(new NullProgressServerReporter());
            }
        }
    };
};
exports.ProgressFeature = ProgressFeature;
var ResultProgress;
(function (ResultProgress) {
    ResultProgress.type = new vscode_languageserver_protocol_1.ProgressType();
})(ResultProgress || (ResultProgress = {}));
class ResultProgressReporterImpl {
    constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
    }
    report(data) {
        this._connection.sendProgress(ResultProgress.type, this._token, data);
    }
}
function attachPartialResult(connection, params) {
    if (params === undefined || params.partialResultToken === undefined) {
        return undefined;
    }
    const token = params.partialResultToken;
    delete params.partialResultToken;
    return new ResultProgressReporterImpl(connection, token);
}
exports.attachPartialResult = attachPartialResult;


/***/ }),

/***/ 9994:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensBuilder = exports.SemanticTokensDiff = exports.SemanticTokensFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const SemanticTokensFeature = (Base) => {
    return class extends Base {
        get semanticTokens() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type);
                },
                on: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onDelta: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onRange: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.SemanticTokensFeature = SemanticTokensFeature;
class SemanticTokensDiff {
    constructor(originalSequence, modifiedSequence) {
        this.originalSequence = originalSequence;
        this.modifiedSequence = modifiedSequence;
    }
    computeDiff() {
        const originalLength = this.originalSequence.length;
        const modifiedLength = this.modifiedSequence.length;
        let startIndex = 0;
        while (startIndex < modifiedLength && startIndex < originalLength && this.originalSequence[startIndex] === this.modifiedSequence[startIndex]) {
            startIndex++;
        }
        if (startIndex < modifiedLength && startIndex < originalLength) {
            let originalEndIndex = originalLength - 1;
            let modifiedEndIndex = modifiedLength - 1;
            while (originalEndIndex >= startIndex && modifiedEndIndex >= startIndex && this.originalSequence[originalEndIndex] === this.modifiedSequence[modifiedEndIndex]) {
                originalEndIndex--;
                modifiedEndIndex--;
            }
            // if one moved behind the start index move them forward again
            if (originalEndIndex < startIndex || modifiedEndIndex < startIndex) {
                originalEndIndex++;
                modifiedEndIndex++;
            }
            const deleteCount = originalEndIndex - startIndex + 1;
            const newData = this.modifiedSequence.slice(startIndex, modifiedEndIndex + 1);
            // If we moved behind the start index we could have missed a simple delete.
            if (newData.length === 1 && newData[0] === this.originalSequence[originalEndIndex]) {
                return [
                    { start: startIndex, deleteCount: deleteCount - 1 }
                ];
            }
            else {
                return [
                    { start: startIndex, deleteCount, data: newData }
                ];
            }
        }
        else if (startIndex < modifiedLength) {
            return [
                { start: startIndex, deleteCount: 0, data: this.modifiedSequence.slice(startIndex) }
            ];
        }
        else if (startIndex < originalLength) {
            return [
                { start: startIndex, deleteCount: originalLength - startIndex }
            ];
        }
        else {
            // The two arrays are the same.
            return [];
        }
    }
}
exports.SemanticTokensDiff = SemanticTokensDiff;
class SemanticTokensBuilder {
    constructor() {
        this._prevData = undefined;
        this.initialize();
    }
    initialize() {
        this._id = Date.now();
        this._prevLine = 0;
        this._prevChar = 0;
        this._data = [];
        this._dataLen = 0;
    }
    push(line, char, length, tokenType, tokenModifiers) {
        let pushLine = line;
        let pushChar = char;
        if (this._dataLen > 0) {
            pushLine -= this._prevLine;
            if (pushLine === 0) {
                pushChar -= this._prevChar;
            }
        }
        this._data[this._dataLen++] = pushLine;
        this._data[this._dataLen++] = pushChar;
        this._data[this._dataLen++] = length;
        this._data[this._dataLen++] = tokenType;
        this._data[this._dataLen++] = tokenModifiers;
        this._prevLine = line;
        this._prevChar = char;
    }
    get id() {
        return this._id.toString();
    }
    previousResult(id) {
        if (this.id === id) {
            this._prevData = this._data;
        }
        this.initialize();
    }
    build() {
        this._prevData = undefined;
        return {
            resultId: this.id,
            data: this._data
        };
    }
    canBuildEdits() {
        return this._prevData !== undefined;
    }
    buildEdits() {
        if (this._prevData !== undefined) {
            return {
                resultId: this.id,
                edits: (new SemanticTokensDiff(this._prevData, this._data)).computeDiff()
            };
        }
        else {
            return this.build();
        }
    }
}
exports.SemanticTokensBuilder = SemanticTokensBuilder;


/***/ }),

/***/ 575:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConnection = exports.combineFeatures = exports.combineNotebooksFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._NotebooksImpl = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const Is = __webpack_require__(1930);
const UUID = __webpack_require__(8329);
const progress_1 = __webpack_require__(7091);
const configuration_1 = __webpack_require__(9216);
const workspaceFolder_1 = __webpack_require__(7187);
const callHierarchy_1 = __webpack_require__(1913);
const semanticTokens_1 = __webpack_require__(9994);
const showDocument_1 = __webpack_require__(992);
const fileOperations_1 = __webpack_require__(2636);
const linkedEditingRange_1 = __webpack_require__(7824);
const typeHierarchy_1 = __webpack_require__(657);
const inlineValue_1 = __webpack_require__(9336);
const inlayHint_1 = __webpack_require__(588);
const diagnostic_1 = __webpack_require__(8671);
const notebook_1 = __webpack_require__(8993);
const moniker_1 = __webpack_require__(6475);
function null2Undefined(value) {
    if (value === null) {
        return undefined;
    }
    return value;
}
/**
 * Helps tracking error message. Equal occurrences of the same
 * message are only stored once. This class is for example
 * useful if text documents are validated in a loop and equal
 * error message should be folded into one.
 */
class ErrorMessageTracker {
    constructor() {
        this._messages = Object.create(null);
    }
    /**
     * Add a message to the tracker.
     *
     * @param message The message to add.
     */
    add(message) {
        let count = this._messages[message];
        if (!count) {
            count = 0;
        }
        count++;
        this._messages[message] = count;
    }
    /**
     * Send all tracked messages to the connection's window.
     *
     * @param connection The connection established between client and server.
     */
    sendErrors(connection) {
        Object.keys(this._messages).forEach(message => {
            connection.window.showErrorMessage(message);
        });
    }
}
exports.ErrorMessageTracker = ErrorMessageTracker;
class RemoteConsoleImpl {
    constructor() {
    }
    rawAttach(connection) {
        this._rawConnection = connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    fillServerCapabilities(_capabilities) {
    }
    initialize(_capabilities) {
    }
    error(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
    }
    warn(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
    }
    info(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
    }
    log(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
    }
    send(type, message) {
        if (this._rawConnection) {
            this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message }).catch(() => {
                (0, vscode_languageserver_protocol_1.RAL)().console.error(`Sending log message failed`);
            });
        }
    }
}
class _RemoteWindowImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    showErrorMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showWarningMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showInformationMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
}
const RemoteWindowImpl = (0, showDocument_1.ShowDocumentFeature)((0, progress_1.ProgressFeature)(_RemoteWindowImpl));
var BulkRegistration;
(function (BulkRegistration) {
    /**
     * Creates a new bulk registration.
     * @return an empty bulk registration.
     */
    function create() {
        return new BulkRegistrationImpl();
    }
    BulkRegistration.create = create;
})(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));
class BulkRegistrationImpl {
    constructor() {
        this._registrations = [];
        this._registered = new Set();
    }
    add(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        if (this._registered.has(method)) {
            throw new Error(`${method} is already added to this registration`);
        }
        const id = UUID.generateUuid();
        this._registrations.push({
            id: id,
            method: method,
            registerOptions: registerOptions || {}
        });
        this._registered.add(method);
    }
    asRegistrationParams() {
        return {
            registrations: this._registrations
        };
    }
}
var BulkUnregistration;
(function (BulkUnregistration) {
    function create() {
        return new BulkUnregistrationImpl(undefined, []);
    }
    BulkUnregistration.create = create;
})(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));
class BulkUnregistrationImpl {
    constructor(_connection, unregistrations) {
        this._connection = _connection;
        this._unregistrations = new Map();
        unregistrations.forEach(unregistration => {
            this._unregistrations.set(unregistration.method, unregistration);
        });
    }
    get isAttached() {
        return !!this._connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    add(unregistration) {
        this._unregistrations.set(unregistration.method, unregistration);
    }
    dispose() {
        let unregistrations = [];
        for (let unregistration of this._unregistrations.values()) {
            unregistrations.push(unregistration);
        }
        let params = {
            unregisterations: unregistrations
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
            this._connection.console.info(`Bulk unregistration failed.`);
        });
    }
    disposeSingle(arg) {
        const method = Is.string(arg) ? arg : arg.method;
        const unregistration = this._unregistrations.get(method);
        if (!unregistration) {
            return false;
        }
        let params = {
            unregisterations: [unregistration]
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {
            this._unregistrations.delete(method);
        }, (_error) => {
            this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
        });
        return true;
    }
}
class RemoteClientImpl {
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
        if (typeOrRegistrations instanceof BulkRegistrationImpl) {
            return this.registerMany(typeOrRegistrations);
        }
        else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
            return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
        }
        else {
            return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
        }
    }
    registerSingle1(unregistration, type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        if (!unregistration.isAttached) {
            unregistration.attach(this.connection);
        }
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
            unregistration.add({ id: id, method: method });
            return unregistration;
        }, (_error) => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    registerSingle2(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
            return vscode_languageserver_protocol_1.Disposable.create(() => {
                this.unregisterSingle(id, method).catch(() => { this.connection.console.info(`Un-registering capability with id ${id} failed.`); });
            });
        }, (_error) => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    unregisterSingle(id, method) {
        let params = {
            unregisterations: [{ id, method }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
            this.connection.console.info(`Un-registering request handler for ${id} failed.`);
        });
    }
    registerMany(registrations) {
        let params = registrations.asRegistrationParams();
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {
            return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => { return { id: registration.id, method: registration.method }; }));
        }, (_error) => {
            this.connection.console.info(`Bulk registration failed.`);
            return Promise.reject(_error);
        });
    }
}
class _RemoteWorkspaceImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    applyEdit(paramOrEdit) {
        function isApplyWorkspaceEditParams(value) {
            return value && !!value.edit;
        }
        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
    }
}
const RemoteWorkspaceImpl = (0, fileOperations_1.FileOperationsFeature)((0, workspaceFolder_1.WorkspaceFoldersFeature)((0, configuration_1.ConfigurationFeature)(_RemoteWorkspaceImpl)));
class TracerImpl {
    constructor() {
        this._trace = vscode_languageserver_protocol_1.Trace.Off;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    set trace(value) {
        this._trace = value;
    }
    log(message, verbose) {
        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
            return;
        }
        this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
            message: message,
            verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined
        }).catch(() => {
            // Very hard to decide what to do. We tried to send a log
            // message which failed so we can't simply send another :-(.
        });
    }
}
class TelemetryImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    logEvent(data) {
        this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data).catch(() => {
            this.connection.console.log(`Sending TelemetryEventNotification failed`);
        });
    }
}
class _LanguagesImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
    }
    attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
    }
}
exports._LanguagesImpl = _LanguagesImpl;
const LanguagesImpl = (0, moniker_1.MonikerFeature)((0, diagnostic_1.DiagnosticFeature)((0, inlayHint_1.InlayHintFeature)((0, inlineValue_1.InlineValueFeature)((0, typeHierarchy_1.TypeHierarchyFeature)((0, linkedEditingRange_1.LinkedEditingRangeFeature)((0, semanticTokens_1.SemanticTokensFeature)((0, callHierarchy_1.CallHierarchyFeature)(_LanguagesImpl))))))));
class _NotebooksImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
    }
    attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
    }
}
exports._NotebooksImpl = _NotebooksImpl;
const NotebooksImpl = (0, notebook_1.NotebookSyncFeature)(_NotebooksImpl);
function combineConsoleFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineConsoleFeatures = combineConsoleFeatures;
function combineTelemetryFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTelemetryFeatures = combineTelemetryFeatures;
function combineTracerFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTracerFeatures = combineTracerFeatures;
function combineClientFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineClientFeatures = combineClientFeatures;
function combineWindowFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWindowFeatures = combineWindowFeatures;
function combineWorkspaceFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
function combineLanguagesFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineLanguagesFeatures = combineLanguagesFeatures;
function combineNotebooksFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineNotebooksFeatures = combineNotebooksFeatures;
function combineFeatures(one, two) {
    function combine(one, two, func) {
        if (one && two) {
            return func(one, two);
        }
        else if (one) {
            return one;
        }
        else {
            return two;
        }
    }
    let result = {
        __brand: 'features',
        console: combine(one.console, two.console, combineConsoleFeatures),
        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
        client: combine(one.client, two.client, combineClientFeatures),
        window: combine(one.window, two.window, combineWindowFeatures),
        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures),
        languages: combine(one.languages, two.languages, combineLanguagesFeatures),
        notebooks: combine(one.notebooks, two.notebooks, combineNotebooksFeatures)
    };
    return result;
}
exports.combineFeatures = combineFeatures;
function createConnection(connectionFactory, watchDog, factories) {
    const logger = (factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl());
    const connection = connectionFactory(logger);
    logger.rawAttach(connection);
    const tracer = (factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl());
    const telemetry = (factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl());
    const client = (factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl());
    const remoteWindow = (factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl());
    const workspace = (factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl());
    const languages = (factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl());
    const notebooks = (factories && factories.notebooks ? new (factories.notebooks(NotebooksImpl))() : new NotebooksImpl());
    const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages, notebooks];
    function asPromise(value) {
        if (value instanceof Promise) {
            return value;
        }
        else if (Is.thenable(value)) {
            return new Promise((resolve, reject) => {
                value.then((resolved) => resolve(resolved), (error) => reject(error));
            });
        }
        else {
            return Promise.resolve(value);
        }
    }
    let shutdownHandler = undefined;
    let initializeHandler = undefined;
    let exitHandler = undefined;
    let protocolConnection = {
        listen: () => connection.listen(),
        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),
        onRequest: (type, handler) => connection.onRequest(type, handler),
        sendNotification: (type, param) => {
            const method = Is.string(type) ? type : type.method;
            if (arguments.length === 1) {
                return connection.sendNotification(method);
            }
            else {
                return connection.sendNotification(method, param);
            }
        },
        onNotification: (type, handler) => connection.onNotification(type, handler),
        onProgress: connection.onProgress,
        sendProgress: connection.sendProgress,
        onInitialize: (handler) => {
            initializeHandler = handler;
            return {
                dispose: () => {
                    initializeHandler = undefined;
                }
            };
        },
        onInitialized: (handler) => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
        onShutdown: (handler) => {
            shutdownHandler = handler;
            return {
                dispose: () => {
                    shutdownHandler = undefined;
                }
            };
        },
        onExit: (handler) => {
            exitHandler = handler;
            return {
                dispose: () => {
                    exitHandler = undefined;
                }
            };
        },
        get console() { return logger; },
        get telemetry() { return telemetry; },
        get tracer() { return tracer; },
        get client() { return client; },
        get window() { return remoteWindow; },
        get workspace() { return workspace; },
        get languages() { return languages; },
        get notebooks() { return notebooks; },
        onDidChangeConfiguration: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
        onDidChangeWatchedFiles: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
        __textDocumentSync: undefined,
        onDidOpenTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
        onDidChangeTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
        onDidCloseTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
        onWillSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
        onWillSaveTextDocumentWaitUntil: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
        onDidSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
        sendDiagnostics: (params) => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
        onHover: (handler) => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onCompletion: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onCompletionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
        onSignatureHelp: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onDeclaration: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onTypeDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onImplementation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onReferences: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDocumentHighlight: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDocumentSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onWorkspaceSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onWorkspaceSymbolResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, handler),
        onCodeAction: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onCodeActionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onCodeLens: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onCodeLensResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onDocumentRangeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onDocumentOnTypeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onRenameRequest: (handler) => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onPrepareRename: (handler) => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentLinks: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDocumentLinkResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentColor: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onColorPresentation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onFoldingRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onSelectionRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onExecuteCommand: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        dispose: () => connection.dispose()
    };
    for (let remote of allRemotes) {
        remote.attach(protocolConnection);
    }
    connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {
        watchDog.initialize(params);
        if (Is.string(params.trace)) {
            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
        }
        for (let remote of allRemotes) {
            remote.initialize(params.capabilities);
        }
        if (initializeHandler) {
            let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, (0, progress_1.attachWorkDone)(connection, params), undefined);
            return asPromise(result).then((value) => {
                if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
                    return value;
                }
                let result = value;
                if (!result) {
                    result = { capabilities: {} };
                }
                let capabilities = result.capabilities;
                if (!capabilities) {
                    capabilities = {};
                    result.capabilities = capabilities;
                }
                if (capabilities.textDocumentSync === undefined || capabilities.textDocumentSync === null) {
                    capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                }
                else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {
                    capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                }
                for (let remote of allRemotes) {
                    remote.fillServerCapabilities(capabilities);
                }
                return result;
            });
        }
        else {
            let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };
            for (let remote of allRemotes) {
                remote.fillServerCapabilities(result.capabilities);
            }
            return result;
        }
    });
    connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {
        watchDog.shutdownReceived = true;
        if (shutdownHandler) {
            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
        }
        else {
            return undefined;
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {
        try {
            if (exitHandler) {
                exitHandler();
            }
        }
        finally {
            if (watchDog.shutdownReceived) {
                watchDog.exit(0);
            }
            else {
                watchDog.exit(1);
            }
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {
        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
    });
    return protocolConnection;
}
exports.createConnection = createConnection;


/***/ }),

/***/ 992:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const ShowDocumentFeature = (Base) => {
    return class extends Base {
        showDocument(params) {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
        }
    };
};
exports.ShowDocumentFeature = ShowDocumentFeature;


/***/ }),

/***/ 5109:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextDocuments = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
/**
 * A manager for simple text documents. The manager requires at a minimum that
 * the server registered for the following text document sync events in the
 * initialize handler or via dynamic registration:
 *
 * - open and close events.
 * - change events.
 *
 * Registering for save and will save events is optional.
 */
class TextDocuments {
    /**
     * Create a new text document manager.
     */
    constructor(configuration) {
        this._configuration = configuration;
        this._syncedDocuments = new Map();
        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened.
     */
    get onDidOpen() {
        return this._onDidOpen.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened or the content changes.
     */
    get onDidChangeContent() {
        return this._onDidChangeContent.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * will be saved.
     */
    get onWillSave() {
        return this._onWillSave.event;
    }
    /**
     * Sets a handler that will be called if a participant wants to provide
     * edits during a text document save.
     */
    onWillSaveWaitUntil(handler) {
        this._willSaveWaitUntil = handler;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been saved.
     */
    get onDidSave() {
        return this._onDidSave.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been closed.
     */
    get onDidClose() {
        return this._onDidClose.event;
    }
    /**
     * Returns the document for the given URI. Returns undefined if
     * the document is not managed by this instance.
     *
     * @param uri The text document's URI to retrieve.
     * @return the text document or `undefined`.
     */
    get(uri) {
        return this._syncedDocuments.get(uri);
    }
    /**
     * Returns all text documents managed by this instance.
     *
     * @return all text documents.
     */
    all() {
        return Array.from(this._syncedDocuments.values());
    }
    /**
     * Returns the URIs of all text documents managed by this instance.
     *
     * @return the URI's of all text documents.
     */
    keys() {
        return Array.from(this._syncedDocuments.keys());
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the text documents managed by this instance.
     *
     * Please note that the connection only provides handlers not an event model. Therefore
     * listening on a connection will overwrite the following handlers on a connection:
     * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
     * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
     *
     * Use the corresponding events on the TextDocuments instance instead.
     *
     * @param connection The connection to listen on.
     */
    listen(connection) {
        connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;
        const disposables = [];
        disposables.push(connection.onDidOpenTextDocument((event) => {
            const td = event.textDocument;
            const document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
            this._syncedDocuments.set(td.uri, document);
            const toFire = Object.freeze({ document });
            this._onDidOpen.fire(toFire);
            this._onDidChangeContent.fire(toFire);
        }));
        disposables.push(connection.onDidChangeTextDocument((event) => {
            const td = event.textDocument;
            const changes = event.contentChanges;
            if (changes.length === 0) {
                return;
            }
            const { version } = td;
            if (version === null || version === undefined) {
                throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
            }
            let syncedDocument = this._syncedDocuments.get(td.uri);
            if (syncedDocument !== undefined) {
                syncedDocument = this._configuration.update(syncedDocument, changes, version);
                this._syncedDocuments.set(td.uri, syncedDocument);
                this._onDidChangeContent.fire(Object.freeze({ document: syncedDocument }));
            }
        }));
        disposables.push(connection.onDidCloseTextDocument((event) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined) {
                this._syncedDocuments.delete(event.textDocument.uri);
                this._onDidClose.fire(Object.freeze({ document: syncedDocument }));
            }
        }));
        disposables.push(connection.onWillSaveTextDocument((event) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined) {
                this._onWillSave.fire(Object.freeze({ document: syncedDocument, reason: event.reason }));
            }
        }));
        disposables.push(connection.onWillSaveTextDocumentWaitUntil((event, token) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined && this._willSaveWaitUntil) {
                return this._willSaveWaitUntil(Object.freeze({ document: syncedDocument, reason: event.reason }), token);
            }
            else {
                return [];
            }
        }));
        disposables.push(connection.onDidSaveTextDocument((event) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined) {
                this._onDidSave.fire(Object.freeze({ document: syncedDocument }));
            }
        }));
        return vscode_languageserver_protocol_1.Disposable.create(() => { disposables.forEach(disposable => disposable.dispose()); });
    }
}
exports.TextDocuments = TextDocuments;


/***/ }),

/***/ 657:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchyFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const TypeHierarchyFeature = (Base) => {
    return class extends Base {
        get typeHierarchy() {
            return {
                onPrepare: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
                    });
                },
                onSupertypes: (handler) => {
                    const type = vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onSubtypes: (handler) => {
                    const type = vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.TypeHierarchyFeature = TypeHierarchyFeature;


/***/ }),

/***/ 1930:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function thenable(value) {
    return value && func(value.then);
}
exports.thenable = thenable;


/***/ }),

/***/ 8329:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
class ValueUUID {
    constructor(_value) {
        this._value = _value;
        // empty
    }
    asHex() {
        return this._value;
    }
    equals(other) {
        return this.asHex() === other.asHex();
    }
}
class V4UUID extends ValueUUID {
    constructor() {
        super([
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            '4',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._oneOf(V4UUID._timeHighBits),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
        ].join(''));
    }
    static _oneOf(array) {
        return array[Math.floor(array.length * Math.random())];
    }
    static _randomHex() {
        return V4UUID._oneOf(V4UUID._chars);
    }
}
V4UUID._chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
V4UUID._timeHighBits = ['8', '9', 'a', 'b'];
/**
 * An empty UUID that contains only zeros.
 */
exports.empty = new ValueUUID('00000000-0000-0000-0000-000000000000');
function v4() {
    return new V4UUID();
}
exports.v4 = v4;
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
exports.isUUID = isUUID;
/**
 * Parses a UUID that is of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
 * @param value A uuid string.
 */
function parse(value) {
    if (!isUUID(value)) {
        throw new Error('invalid uuid');
    }
    return new ValueUUID(value);
}
exports.parse = parse;
function generateUuid() {
    return v4().asHex();
}
exports.generateUuid = generateUuid;


/***/ }),

/***/ 7187:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceFoldersFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const WorkspaceFoldersFeature = (Base) => {
    return class extends Base {
        constructor() {
            super();
            this._notificationIsAutoRegistered = false;
        }
        initialize(capabilities) {
            super.initialize(capabilities);
            let workspaceCapabilities = capabilities.workspace;
            if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {
                    this._onDidChangeWorkspaceFolders.fire(params.event);
                });
            }
        }
        fillServerCapabilities(capabilities) {
            super.fillServerCapabilities(capabilities);
            const changeNotifications = capabilities.workspace?.workspaceFolders?.changeNotifications;
            this._notificationIsAutoRegistered = changeNotifications === true || typeof changeNotifications === 'string';
        }
        getWorkspaceFolders() {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
        }
        get onDidChangeWorkspaceFolders() {
            if (!this._onDidChangeWorkspaceFolders) {
                throw new Error('Client doesn\'t support sending workspace folder change events.');
            }
            if (!this._notificationIsAutoRegistered && !this._unregistration) {
                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
            }
            return this._onDidChangeWorkspaceFolders.event;
        }
    };
};
exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;


/***/ }),

/***/ 2186:
/***/ (function(module) {

!function(t,e){if(true)module.exports=e();else { var n, r; }}(this,(()=>(()=>{"use strict";var t={470:t=>{function e(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}function r(t,e){for(var r,n="",i=0,o=-1,s=0,a=0;a<=t.length;++a){if(a<t.length)r=t.charCodeAt(a);else{if(47===r)break;r=47}if(47===r){if(o===a-1||1===s);else if(o!==a-1&&2===s){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var h=n.lastIndexOf("/");if(h!==n.length-1){-1===h?(n="",i=0):i=(n=n.slice(0,h)).length-1-n.lastIndexOf("/"),o=a,s=0;continue}}else if(2===n.length||1===n.length){n="",i=0,o=a,s=0;continue}e&&(n.length>0?n+="/..":n="..",i=2)}else n.length>0?n+="/"+t.slice(o+1,a):n=t.slice(o+1,a),i=a-o-1;o=a,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var t,n="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var s;o>=0?s=arguments[o]:(void 0===t&&(t=process.cwd()),s=t),e(s),0!==s.length&&(n=s+"/"+n,i=47===s.charCodeAt(0))}return n=r(n,!i),i?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(t){if(e(t),0===t.length)return".";var n=47===t.charCodeAt(0),i=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t="."),t.length>0&&i&&(t+="/"),n?"/"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var t,r=0;r<arguments.length;++r){var i=arguments[r];e(i),i.length>0&&(void 0===t?t=i:t+="/"+i)}return void 0===t?".":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return"";if((t=n.resolve(t))===(r=n.resolve(r)))return"";for(var i=1;i<t.length&&47===t.charCodeAt(i);++i);for(var o=t.length,s=o-i,a=1;a<r.length&&47===r.charCodeAt(a);++a);for(var h=r.length-a,c=s<h?s:h,f=-1,u=0;u<=c;++u){if(u===c){if(h>c){if(47===r.charCodeAt(a+u))return r.slice(a+u+1);if(0===u)return r.slice(a+u)}else s>c&&(47===t.charCodeAt(i+u)?f=u:0===u&&(f=0));break}var l=t.charCodeAt(i+u);if(l!==r.charCodeAt(a+u))break;47===l&&(f=u)}var d="";for(u=i+f+1;u<=o;++u)u!==o&&47!==t.charCodeAt(u)||(0===d.length?d+="..":d+="/..");return d.length>0?d+r.slice(a+f):(a+=f,47===r.charCodeAt(a)&&++a,r.slice(a))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return".";for(var r=t.charCodeAt(0),n=47===r,i=-1,o=!0,s=t.length-1;s>=1;--s)if(47===(r=t.charCodeAt(s))){if(!o){i=s;break}}else o=!1;return-1===i?n?"/":".":n&&1===i?"//":t.slice(0,i)},basename:function(t,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError('"ext" argument must be a string');e(t);var n,i=0,o=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return"";var a=r.length-1,h=-1;for(n=t.length-1;n>=0;--n){var c=t.charCodeAt(n);if(47===c){if(!s){i=n+1;break}}else-1===h&&(s=!1,h=n+1),a>=0&&(c===r.charCodeAt(a)?-1==--a&&(o=n):(a=-1,o=h))}return i===o?o=h:-1===o&&(o=t.length),t.slice(i,o)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){i=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?"":t.slice(i,o)},extname:function(t){e(t);for(var r=-1,n=0,i=-1,o=!0,s=0,a=t.length-1;a>=0;--a){var h=t.charCodeAt(a);if(47!==h)-1===i&&(o=!1,i=a+1),46===h?-1===r?r=a:1!==s&&(s=1):-1!==r&&(s=-1);else if(!o){n=a+1;break}}return-1===r||-1===i||0===s||1===s&&r===i-1&&r===n+1?"":t.slice(r,i)},format:function(t){if(null===t||"object"!=typeof t)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||"")+(e.ext||"");return r?r===e.root?r+n:r+"/"+n:n}(0,t)},parse:function(t){e(t);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return r;var n,i=t.charCodeAt(0),o=47===i;o?(r.root="/",n=1):n=0;for(var s=-1,a=0,h=-1,c=!0,f=t.length-1,u=0;f>=n;--f)if(47!==(i=t.charCodeAt(f)))-1===h&&(c=!1,h=f+1),46===i?-1===s?s=f:1!==u&&(u=1):-1!==s&&(u=-1);else if(!c){a=f+1;break}return-1===s||-1===h||0===u||1===u&&s===h-1&&s===a+1?-1!==h&&(r.base=r.name=0===a&&o?t.slice(1,h):t.slice(a,h)):(0===a&&o?(r.name=t.slice(1,s),r.base=t.slice(1,h)):(r.name=t.slice(a,s),r.base=t.slice(a,h)),r.ext=t.slice(s,h)),a>0?r.dir=t.slice(0,a-1):o&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,t.exports=n},674:(t,e)=>{if(Object.defineProperty(e,"__esModule",{value:!0}),e.isWindows=void 0,"object"==typeof process)e.isWindows="win32"===process.platform;else if("object"==typeof navigator){let t=navigator.userAgent;e.isWindows=t.indexOf("Windows")>=0}},796:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.uriToFsPath=e.URI=void 0;const n=r(674),i=/^\w[\w\d+.-]*$/,o=/^\//,s=/^\/\//;function a(t,e){if(!t.scheme&&e)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${t.authority}", path: "${t.path}", query: "${t.query}", fragment: "${t.fragment}"}`);if(t.scheme&&!i.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!o.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(s.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}const h="",c="/",f=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class u{static isUri(t){return t instanceof u||!!t&&"string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme&&"string"==typeof t.fsPath&&"function"==typeof t.with&&"function"==typeof t.toString}scheme;authority;path;query;fragment;constructor(t,e,r,n,i,o=!1){"object"==typeof t?(this.scheme=t.scheme||h,this.authority=t.authority||h,this.path=t.path||h,this.query=t.query||h,this.fragment=t.fragment||h):(this.scheme=function(t,e){return t||e?t:"file"}(t,o),this.authority=e||h,this.path=function(t,e){switch(t){case"https":case"http":case"file":e?e[0]!==c&&(e=c+e):e=c}return e}(this.scheme,r||h),this.query=n||h,this.fragment=i||h,a(this,o))}get fsPath(){return v(this,!1)}with(t){if(!t)return this;let{scheme:e,authority:r,path:n,query:i,fragment:o}=t;return void 0===e?e=this.scheme:null===e&&(e=h),void 0===r?r=this.authority:null===r&&(r=h),void 0===n?n=this.path:null===n&&(n=h),void 0===i?i=this.query:null===i&&(i=h),void 0===o?o=this.fragment:null===o&&(o=h),e===this.scheme&&r===this.authority&&n===this.path&&i===this.query&&o===this.fragment?this:new d(e,r,n,i,o)}static parse(t,e=!1){const r=f.exec(t);return r?new d(r[2]||h,w(r[4]||h),w(r[5]||h),w(r[7]||h),w(r[9]||h),e):new d(h,h,h,h,h)}static file(t){let e=h;if(n.isWindows&&(t=t.replace(/\\/g,c)),t[0]===c&&t[1]===c){const r=t.indexOf(c,2);-1===r?(e=t.substring(2),t=c):(e=t.substring(2,r),t=t.substring(r)||c)}return new d("file",e,t,h,h)}static from(t){const e=new d(t.scheme,t.authority,t.path,t.query,t.fragment);return a(e,!0),e}toString(t=!1){return y(this,t)}toJSON(){return this}static revive(t){if(t){if(t instanceof u)return t;{const e=new d(t);return e._formatted=t.external,e._fsPath=t._sep===l?t.fsPath:null,e}}return t}}e.URI=u;const l=n.isWindows?1:void 0;class d extends u{_formatted=null;_fsPath=null;get fsPath(){return this._fsPath||(this._fsPath=v(this,!1)),this._fsPath}toString(t=!1){return t?y(this,!0):(this._formatted||(this._formatted=y(this,!1)),this._formatted)}toJSON(){const t={$mid:1};return this._fsPath&&(t.fsPath=this._fsPath,t._sep=l),this._formatted&&(t.external=this._formatted),this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t}}const p={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function g(t,e,r){let n,i=-1;for(let o=0;o<t.length;o++){const s=t.charCodeAt(o);if(s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||45===s||46===s||95===s||126===s||e&&47===s||r&&91===s||r&&93===s||r&&58===s)-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),void 0!==n&&(n+=t.charAt(o));else{void 0===n&&(n=t.substr(0,o));const e=p[s];void 0!==e?(-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),n+=e):-1===i&&(i=o)}}return-1!==i&&(n+=encodeURIComponent(t.substring(i))),void 0!==n?n:t}function m(t){let e;for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);35===n||63===n?(void 0===e&&(e=t.substr(0,r)),e+=p[n]):void 0!==e&&(e+=t[r])}return void 0!==e?e:t}function v(t,e){let r;return r=t.authority&&t.path.length>1&&"file"===t.scheme?`//${t.authority}${t.path}`:47===t.path.charCodeAt(0)&&(t.path.charCodeAt(1)>=65&&t.path.charCodeAt(1)<=90||t.path.charCodeAt(1)>=97&&t.path.charCodeAt(1)<=122)&&58===t.path.charCodeAt(2)?e?t.path.substr(1):t.path[1].toLowerCase()+t.path.substr(2):t.path,n.isWindows&&(r=r.replace(/\//g,"\\")),r}function y(t,e){const r=e?m:g;let n="",{scheme:i,authority:o,path:s,query:a,fragment:h}=t;if(i&&(n+=i,n+=":"),(o||"file"===i)&&(n+=c,n+=c),o){let t=o.indexOf("@");if(-1!==t){const e=o.substr(0,t);o=o.substr(t+1),t=e.lastIndexOf(":"),-1===t?n+=r(e,!1,!1):(n+=r(e.substr(0,t),!1,!1),n+=":",n+=r(e.substr(t+1),!1,!0)),n+="@"}o=o.toLowerCase(),t=o.lastIndexOf(":"),-1===t?n+=r(o,!1,!0):(n+=r(o.substr(0,t),!1,!0),n+=o.substr(t))}if(s){if(s.length>=3&&47===s.charCodeAt(0)&&58===s.charCodeAt(2)){const t=s.charCodeAt(1);t>=65&&t<=90&&(s=`/${String.fromCharCode(t+32)}:${s.substr(3)}`)}else if(s.length>=2&&58===s.charCodeAt(1)){const t=s.charCodeAt(0);t>=65&&t<=90&&(s=`${String.fromCharCode(t+32)}:${s.substr(2)}`)}n+=r(s,!0,!1)}return a&&(n+="?",n+=r(a,!1,!1)),h&&(n+="#",n+=e?h:g(h,!1,!1)),n}function b(t){try{return decodeURIComponent(t)}catch{return t.length>3?t.substr(0,3)+b(t.substr(3)):t}}e.uriToFsPath=v;const C=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function w(t){return t.match(C)?t.replace(C,(t=>b(t))):t}},679:function(t,e,r){var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Utils=void 0;const s=o(r(470)),a=s.posix||s,h="/";var c;!function(t){t.joinPath=function(t,...e){return t.with({path:a.join(t.path,...e)})},t.resolvePath=function(t,...e){let r=t.path,n=!1;r[0]!==h&&(r=h+r,n=!0);let i=a.resolve(r,...e);return n&&i[0]===h&&!t.authority&&(i=i.substring(1)),t.with({path:i})},t.dirname=function(t){if(0===t.path.length||t.path===h)return t;let e=a.dirname(t.path);return 1===e.length&&46===e.charCodeAt(0)&&(e=""),t.with({path:e})},t.basename=function(t){return a.basename(t.path)},t.extname=function(t){return a.extname(t.path)}}(c||(e.Utils=c={}))}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}var n={};return(()=>{var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=t.URI=void 0;const e=r(796);Object.defineProperty(t,"URI",{enumerable:!0,get:function(){return e.URI}});const i=r(679);Object.defineProperty(t,"Utils",{enumerable:!0,get:function(){return i.Utils}})})(),n})()));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8369:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getConditionalComment = void 0;
const commentRegex = /(<!--\[if[^\]]*]>)((.|\n)*)(<!\[endif\]-->)$/;
const getConditionalComment = (comment) => {
    const matches = comment.match(commentRegex);
    if (matches) {
        return {
            startTag: matches[1],
            body: matches[2].trim(),
            endTag: matches[4],
        };
    }
};
exports.getConditionalComment = getConditionalComment;
//# sourceMappingURL=conditional-comment.js.map

/***/ }),

/***/ 5062:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidHTMLASTParsingError = exports.LiquidHTMLCSTParsingError = void 0;
const line_column_1 = __importDefault(__webpack_require__(4638));
class LiquidHTMLCSTParsingError extends SyntaxError {
    constructor(ohm) {
        super(ohm.shortMessage);
        this.name = 'LiquidHTMLParsingError';
        const input = ohm.input;
        const errorPos = ohm._rightmostFailurePosition;
        const lineCol = (0, line_column_1.default)(input).fromIndex(Math.min(errorPos, input.length - 1));
        // Plugging ourselves into @babel/code-frame since this is how
        // the babel parser can print where the parsing error occured.
        // https://github.com/prettier/prettier/blob/cd4a57b113177c105a7ceb94e71f3a5a53535b81/src/main/parser.js
        if (lineCol) {
            this.loc = {
                start: {
                    line: lineCol.line,
                    column: lineCol.col,
                },
                end: {
                    line: lineCol.line,
                    column: lineCol.col,
                },
            };
        }
    }
}
exports.LiquidHTMLCSTParsingError = LiquidHTMLCSTParsingError;
class LiquidHTMLASTParsingError extends SyntaxError {
    constructor(message, source, startIndex, endIndex, unclosed) {
        super(message);
        this.name = 'LiquidHTMLParsingError';
        this.unclosed = unclosed !== null && unclosed !== void 0 ? unclosed : null;
        const lc = (0, line_column_1.default)(source);
        const start = lc.fromIndex(startIndex);
        const end = lc.fromIndex(Math.min(endIndex, source.length - 1));
        // Plugging ourselves into @babel/code-frame since this is how
        // the babel parser can print where the parsing error occured.
        // https://github.com/prettier/prettier/blob/cd4a57b113177c105a7ceb94e71f3a5a53535b81/src/main/parser.js
        this.loc = {
            start: {
                line: start.line,
                column: start.col,
            },
            end: {
                line: end.line,
                column: end.col,
            },
        };
    }
}
exports.LiquidHTMLASTParsingError = LiquidHTMLASTParsingError;
//# sourceMappingURL=errors.js.map

/***/ }),

/***/ 6504:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TAGS_WITHOUT_MARKUP = exports.VOID_ELEMENTS = exports.RAW_TAGS = exports.BLOCKS = exports.placeholderGrammars = exports.tolerantGrammars = exports.strictGrammars = exports.LiquidDocGrammar = exports.TextNodeGrammar = exports.liquidHtmlGrammars = void 0;
const ohm_js_1 = __importDefault(__webpack_require__(350));
exports.liquidHtmlGrammars = ohm_js_1.default.grammars(__webpack_require__(5512));
exports.TextNodeGrammar = exports.liquidHtmlGrammars['Helpers'];
exports.LiquidDocGrammar = exports.liquidHtmlGrammars['LiquidDoc'];
exports.strictGrammars = {
    Liquid: exports.liquidHtmlGrammars['StrictLiquid'],
    LiquidHTML: exports.liquidHtmlGrammars['StrictLiquidHTML'],
    LiquidStatement: exports.liquidHtmlGrammars['StrictLiquidStatement'],
};
exports.tolerantGrammars = {
    Liquid: exports.liquidHtmlGrammars['Liquid'],
    LiquidHTML: exports.liquidHtmlGrammars['LiquidHTML'],
    LiquidStatement: exports.liquidHtmlGrammars['LiquidStatement'],
};
exports.placeholderGrammars = {
    Liquid: exports.liquidHtmlGrammars['WithPlaceholderLiquid'],
    LiquidHTML: exports.liquidHtmlGrammars['WithPlaceholderLiquidHTML'],
    LiquidStatement: exports.liquidHtmlGrammars['WithPlaceholderLiquidStatement'],
};
// see ../../grammar/liquid-html.ohm for full list
exports.BLOCKS = exports.strictGrammars.LiquidHTML.rules.blockName.body.factors[0].terms.map((x) => x.obj);
// see ../../grammar/liquid-html.ohm for full list
exports.RAW_TAGS = exports.strictGrammars.LiquidHTML.rules.liquidRawTag.body.terms
    .map((term) => term.args[0].obj)
    .concat('comment');
// see ../../grammar/liquid-html.ohm for full list
exports.VOID_ELEMENTS = exports.strictGrammars.LiquidHTML.rules.voidElementName.body.factors[0].terms.map((x) => x.args[0].obj);
exports.TAGS_WITHOUT_MARKUP = [
    'style',
    'schema',
    'javascript',
    'else',
    'break',
    'continue',
    'comment',
    'raw',
    'doc',
];
//# sourceMappingURL=grammar.js.map

/***/ }),

/***/ 4849:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getConditionalComment = exports.BLOCKS = exports.VOID_ELEMENTS = exports.RAW_TAGS = exports.TAGS_WITHOUT_MARKUP = void 0;
__exportStar(__webpack_require__(6265), exports);
__exportStar(__webpack_require__(6336), exports);
__exportStar(__webpack_require__(5062), exports);
var grammar_1 = __webpack_require__(6504);
Object.defineProperty(exports, "TAGS_WITHOUT_MARKUP", ({ enumerable: true, get: function () { return grammar_1.TAGS_WITHOUT_MARKUP; } }));
Object.defineProperty(exports, "RAW_TAGS", ({ enumerable: true, get: function () { return grammar_1.RAW_TAGS; } }));
Object.defineProperty(exports, "VOID_ELEMENTS", ({ enumerable: true, get: function () { return grammar_1.VOID_ELEMENTS; } }));
Object.defineProperty(exports, "BLOCKS", ({ enumerable: true, get: function () { return grammar_1.BLOCKS; } }));
var conditional_comment_1 = __webpack_require__(8369);
Object.defineProperty(exports, "getConditionalComment", ({ enumerable: true, get: function () { return conditional_comment_1.getConditionalComment; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7778:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * This is the first stage of the parser.
 *
 * Input:
 *   Source code: string
 *
 * Output:
 *   Concrete Syntax Tree (CST): LiquidHtmlCST
 *
 * We use OhmJS's toAST method to turn the OhmJS nodes into an "almost-AST." We
 * call that a Concrete Syntax Tree because it considers Open and Close nodes as
 * separate nodes.
 *
 * It is mostly "flat."
 *
 * e.g.
 * {% if cond %}hi <em>there!</em>{% endif %}
 *
 * becomes
 * - LiquidTagOpen/if
 *   condition: LiquidVariableExpression/cond
 * - TextNode/"hi "
 * - HtmlTagOpen/em
 * - TextNode/"there!"
 * - HtmlTagClose/em
 * - LiquidTagClose/if
 *
 * In the Concrete Syntax Tree, all nodes are siblings instead of having a
 * parent/children relationship.
 *
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toLiquidCST = exports.toLiquidHtmlCST = exports.LiquidLiteralValues = exports.ConcreteNodeTypes = void 0;
const extras_1 = __webpack_require__(1610);
const grammar_1 = __webpack_require__(6504);
const errors_1 = __webpack_require__(5062);
const types_1 = __webpack_require__(6336);
var ConcreteNodeTypes;
(function (ConcreteNodeTypes) {
    ConcreteNodeTypes["HtmlDoctype"] = "HtmlDoctype";
    ConcreteNodeTypes["HtmlComment"] = "HtmlComment";
    ConcreteNodeTypes["HtmlRawTag"] = "HtmlRawTag";
    ConcreteNodeTypes["HtmlVoidElement"] = "HtmlVoidElement";
    ConcreteNodeTypes["HtmlSelfClosingElement"] = "HtmlSelfClosingElement";
    ConcreteNodeTypes["HtmlTagOpen"] = "HtmlTagOpen";
    ConcreteNodeTypes["HtmlTagClose"] = "HtmlTagClose";
    ConcreteNodeTypes["AttrSingleQuoted"] = "AttrSingleQuoted";
    ConcreteNodeTypes["AttrDoubleQuoted"] = "AttrDoubleQuoted";
    ConcreteNodeTypes["AttrUnquoted"] = "AttrUnquoted";
    ConcreteNodeTypes["AttrEmpty"] = "AttrEmpty";
    ConcreteNodeTypes["LiquidVariableOutput"] = "LiquidVariableOutput";
    ConcreteNodeTypes["LiquidRawTag"] = "LiquidRawTag";
    ConcreteNodeTypes["LiquidTag"] = "LiquidTag";
    ConcreteNodeTypes["LiquidTagOpen"] = "LiquidTagOpen";
    ConcreteNodeTypes["LiquidTagClose"] = "LiquidTagClose";
    ConcreteNodeTypes["TextNode"] = "TextNode";
    ConcreteNodeTypes["YAMLFrontmatter"] = "YAMLFrontmatter";
    ConcreteNodeTypes["LiquidVariable"] = "LiquidVariable";
    ConcreteNodeTypes["LiquidFilter"] = "LiquidFilter";
    ConcreteNodeTypes["NamedArgument"] = "NamedArgument";
    ConcreteNodeTypes["LiquidLiteral"] = "LiquidLiteral";
    ConcreteNodeTypes["VariableLookup"] = "VariableLookup";
    ConcreteNodeTypes["String"] = "String";
    ConcreteNodeTypes["Number"] = "Number";
    ConcreteNodeTypes["Range"] = "Range";
    ConcreteNodeTypes["Comparison"] = "Comparison";
    ConcreteNodeTypes["Condition"] = "Condition";
    ConcreteNodeTypes["AssignMarkup"] = "AssignMarkup";
    ConcreteNodeTypes["ContentForMarkup"] = "ContentForMarkup";
    ConcreteNodeTypes["CycleMarkup"] = "CycleMarkup";
    ConcreteNodeTypes["ForMarkup"] = "ForMarkup";
    ConcreteNodeTypes["RenderMarkup"] = "RenderMarkup";
    ConcreteNodeTypes["PaginateMarkup"] = "PaginateMarkup";
    ConcreteNodeTypes["RenderVariableExpression"] = "RenderVariableExpression";
    ConcreteNodeTypes["ContentForNamedArgument"] = "ContentForNamedArgument";
    ConcreteNodeTypes["LiquidDocParamNode"] = "LiquidDocParamNode";
    ConcreteNodeTypes["LiquidDocParamNameNode"] = "LiquidDocParamNameNode";
    ConcreteNodeTypes["LiquidDocDescriptionNode"] = "LiquidDocDescriptionNode";
    ConcreteNodeTypes["LiquidDocExampleNode"] = "LiquidDocExampleNode";
})(ConcreteNodeTypes = exports.ConcreteNodeTypes || (exports.ConcreteNodeTypes = {}));
exports.LiquidLiteralValues = {
    nil: null,
    null: null,
    true: true,
    false: false,
    blank: '',
    empty: '',
};
const markup = (i) => (tokens) => tokens[i].sourceString.trim();
const markupTrimEnd = (i) => (tokens) => tokens[i].sourceString.trimEnd();
const Grammars = {
    strict: grammar_1.strictGrammars,
    tolerant: grammar_1.tolerantGrammars,
    completion: grammar_1.placeholderGrammars,
};
function toLiquidHtmlCST(source, options = { mode: 'tolerant' }) {
    const grammars = Grammars[options.mode];
    const grammar = grammars.LiquidHTML;
    return toCST(source, grammars, grammar, [
        'HelperMappings',
        'LiquidMappings',
        'LiquidHTMLMappings',
    ]);
}
exports.toLiquidHtmlCST = toLiquidHtmlCST;
function toLiquidCST(source, options = { mode: 'tolerant' }) {
    const grammars = Grammars[options.mode];
    const grammar = grammars.Liquid;
    return toCST(source, grammars, grammar, ['HelperMappings', 'LiquidMappings']);
}
exports.toLiquidCST = toLiquidCST;
function toCST(source /* the original file */, grammars, grammar, cstMappings, matchingSource = source /* for subtree parsing */, offset = 0 /* for subtree parsing location offsets */) {
    // When we switch parser, our locStart and locEnd functions must account
    // for the offset of the {% liquid %} markup
    const locStart = (tokens) => offset + tokens[0].source.startIdx;
    const locEnd = (tokens) => offset + tokens[tokens.length - 1].source.endIdx;
    const locEndSecondToLast = (tokens) => offset + tokens[tokens.length - 2].source.endIdx;
    const textNode = {
        type: ConcreteNodeTypes.TextNode,
        value: function () {
            return this.sourceString;
        },
        locStart,
        locEnd,
        source,
    };
    const res = grammar.match(matchingSource, 'Node');
    if (res.failed()) {
        throw new errors_1.LiquidHTMLCSTParsingError(res);
    }
    const HelperMappings = {
        Node: 0,
        TextNode: textNode,
        orderedListOf: 0,
        listOf: 0,
        empty: () => null,
        emptyListOf: () => [],
        nonemptyListOf(first, _sep, rest) {
            const self = this;
            return [first.toAST(self.args.mapping)].concat(rest.toAST(self.args.mapping));
        },
        nonemptyOrderedListOf: 0,
        nonemptyOrderedListOfBoth(nonemptyListOfA, _sep, nonemptyListOfB) {
            const self = this;
            return nonemptyListOfA
                .toAST(self.args.mapping)
                .concat(nonemptyListOfB.toAST(self.args.mapping));
        },
    };
    const LiquidMappings = {
        liquidNode: 0,
        liquidRawTag: 0,
        liquidRawTagImpl: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 3,
            body: 9,
            children: (tokens) => {
                const nameNode = tokens[3];
                const rawMarkupStringNode = tokens[9];
                switch (nameNode.sourceString) {
                    // {% raw %} accepts syntax errors, we shouldn't try to parse that
                    case 'raw': {
                        return toCST(source, grammars, grammar_1.TextNodeGrammar, ['HelperMappings'], rawMarkupStringNode.sourceString, offset + rawMarkupStringNode.source.startIdx);
                    }
                    // {% javascript %}, {% style %}
                    default: {
                        return toCST(source, grammars, grammars.Liquid, ['HelperMappings', 'LiquidMappings'], rawMarkupStringNode.sourceString, offset + rawMarkupStringNode.source.startIdx);
                    }
                }
            },
            markup: 6,
            whitespaceStart: 1,
            whitespaceEnd: 7,
            delimiterWhitespaceStart: 11,
            delimiterWhitespaceEnd: 17,
            locStart,
            locEnd,
            source,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[8].source.endIdx,
            blockEndLocStart: (tokens) => tokens[10].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[18].source.endIdx,
        },
        liquidBlockComment: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 'comment',
            body: (tokens) => tokens[1].sourceString,
            children: (tokens) => {
                return toCST(source, grammars, grammar_1.TextNodeGrammar, ['HelperMappings'], tokens[1].sourceString, offset + tokens[1].source.startIdx);
            },
            whitespaceStart: (tokens) => tokens[0].children[1].sourceString,
            whitespaceEnd: (tokens) => tokens[0].children[7].sourceString,
            delimiterWhitespaceStart: (tokens) => tokens[2].children[1].sourceString,
            delimiterWhitespaceEnd: (tokens) => tokens[2].children[7].sourceString,
            locStart,
            locEnd,
            source,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[0].source.endIdx,
            blockEndLocStart: (tokens) => tokens[2].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[2].source.endIdx,
        },
        liquidDoc: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 'doc',
            body: (tokens) => tokens[1].sourceString,
            children: (tokens) => {
                const contentNode = tokens[1];
                return toLiquidDocAST(source, contentNode.sourceString, offset + contentNode.source.startIdx);
            },
            whitespaceStart: (tokens) => tokens[0].children[1].sourceString,
            whitespaceEnd: (tokens) => tokens[0].children[7].sourceString,
            delimiterWhitespaceStart: (tokens) => { var _a; return ((_a = tokens[2].children[1]) === null || _a === void 0 ? void 0 : _a.sourceString) || ''; },
            delimiterWhitespaceEnd: (tokens) => { var _a; return ((_a = tokens[2].children[7]) === null || _a === void 0 ? void 0 : _a.sourceString) || ''; },
            locStart,
            locEnd,
            source,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[0].source.endIdx,
            blockEndLocStart: (tokens) => tokens[2].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[2].source.endIdx,
        },
        liquidInlineComment: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup: markupTrimEnd(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
            source,
        },
        liquidTagOpen: 0,
        liquidTagOpenStrict: 0,
        liquidTagOpenBaseCase: 0,
        liquidTagOpenRule: {
            type: ConcreteNodeTypes.LiquidTagOpen,
            name: 3,
            markup(nodes) {
                const markupNode = nodes[6];
                const nameNode = nodes[3];
                if (types_1.NamedTags.hasOwnProperty(nameNode.sourceString)) {
                    return markupNode.toAST(this.args.mapping);
                }
                return markupNode.sourceString.trim();
            },
            whitespaceStart: 1,
            whitespaceEnd: 7,
            locStart,
            locEnd,
            source,
        },
        liquidTagOpenCapture: 0,
        liquidTagOpenForm: 0,
        liquidTagOpenFormMarkup: 0,
        liquidTagOpenFor: 0,
        liquidTagOpenForMarkup: {
            type: ConcreteNodeTypes.ForMarkup,
            variableName: 0,
            collection: 4,
            reversed: 6,
            args: 8,
            locStart,
            locEnd,
            source,
        },
        liquidTagBreak: 0,
        liquidTagContinue: 0,
        liquidTagOpenTablerow: 0,
        liquidTagOpenPaginate: 0,
        liquidTagOpenPaginateMarkup: {
            type: ConcreteNodeTypes.PaginateMarkup,
            collection: 0,
            pageSize: 4,
            args: 6,
            locStart,
            locEnd,
            source,
        },
        liquidTagOpenCase: 0,
        liquidTagOpenCaseMarkup: 0,
        liquidTagWhen: 0,
        liquidTagWhenMarkup: 0,
        liquidTagOpenIf: 0,
        liquidTagOpenUnless: 0,
        liquidTagElsif: 0,
        liquidTagElse: 0,
        liquidTagOpenConditionalMarkup: 0,
        condition: {
            type: ConcreteNodeTypes.Condition,
            relation: 0,
            expression: 2,
            locStart,
            locEnd,
            source,
        },
        comparison: {
            type: ConcreteNodeTypes.Comparison,
            comparator: 2,
            left: 0,
            right: 4,
            locStart,
            locEnd,
            source,
        },
        liquidTagClose: {
            type: ConcreteNodeTypes.LiquidTagClose,
            name: 4,
            whitespaceStart: 1,
            whitespaceEnd: 7,
            locStart,
            locEnd,
            source,
        },
        liquidTag: 0,
        liquidTagStrict: 0,
        liquidTagBaseCase: 0,
        liquidTagAssign: 0,
        liquidTagEcho: 0,
        liquidTagContentFor: 0,
        liquidTagCycle: 0,
        liquidTagIncrement: 0,
        liquidTagDecrement: 0,
        liquidTagRender: 0,
        liquidTagInclude: 0,
        liquidTagSection: 0,
        liquidTagSections: 0,
        liquidTagLayout: 0,
        liquidTagRule: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup(nodes) {
                const markupNode = nodes[6];
                const nameNode = nodes[3];
                if (types_1.NamedTags.hasOwnProperty(nameNode.sourceString)) {
                    return markupNode.toAST(this.args.mapping);
                }
                return markupNode.sourceString.trim();
            },
            whitespaceStart: 1,
            whitespaceEnd: 7,
            source,
            locStart,
            locEnd,
        },
        liquidTagLiquid: 0,
        liquidTagLiquidMarkup(tagMarkup) {
            return toCST(source, grammars, grammars.LiquidStatement, ['HelperMappings', 'LiquidMappings', 'LiquidStatement'], tagMarkup.sourceString, offset + tagMarkup.source.startIdx);
        },
        liquidTagEchoMarkup: 0,
        liquidTagSectionMarkup: 0,
        liquidTagSectionsMarkup: 0,
        liquidTagLayoutMarkup: 0,
        liquidTagAssignMarkup: {
            type: ConcreteNodeTypes.AssignMarkup,
            name: 0,
            value: 4,
            locStart,
            locEnd,
            source,
        },
        liquidTagCycleMarkup: {
            type: ConcreteNodeTypes.CycleMarkup,
            groupName: 0,
            args: 3,
            locStart,
            locEnd,
            source,
        },
        liquidTagContentForMarkup: {
            type: ConcreteNodeTypes.ContentForMarkup,
            contentForType: 0,
            args: 2,
            locStart,
            locEnd,
            source,
        },
        contentForType: 0,
        liquidTagRenderMarkup: {
            type: ConcreteNodeTypes.RenderMarkup,
            snippet: 0,
            variable: 1,
            alias: 2,
            renderArguments: 3,
            locStart,
            locEnd,
            source,
        },
        renderArguments: 1,
        completionModeRenderArguments: function (_0, namedArguments, _2, _3, _4, _5, variableLookup, _7) {
            const self = this;
            // variableLookup.sourceString can be '' when there are no incomplete params
            return namedArguments
                .toAST(self.args.mapping)
                .concat(variableLookup.sourceString === '' ? [] : variableLookup.toAST(self.args.mapping));
        },
        snippetExpression: 0,
        renderVariableExpression: {
            type: ConcreteNodeTypes.RenderVariableExpression,
            kind: 1,
            name: 3,
            locStart,
            locEnd,
            source,
        },
        renderAliasExpression: 3,
        liquidDrop: {
            type: ConcreteNodeTypes.LiquidVariableOutput,
            markup: 3,
            whitespaceStart: 1,
            whitespaceEnd: 4,
            locStart,
            locEnd,
            source,
        },
        liquidDropCases: 0,
        liquidExpression: 0,
        liquidDropBaseCase: (sw) => sw.sourceString.trimEnd(),
        liquidVariable: {
            type: ConcreteNodeTypes.LiquidVariable,
            expression: 0,
            filters: 1,
            rawSource: (tokens) => source.slice(locStart(tokens), tokens[tokens.length - 2].source.endIdx).trimEnd(),
            locStart,
            // The last node of this rule is a positive lookahead, we don't
            // want its endIdx, we want the endIdx of the previous one.
            locEnd: locEndSecondToLast,
            source,
        },
        liquidFilter: {
            type: ConcreteNodeTypes.LiquidFilter,
            name: 3,
            locStart,
            locEnd,
            source,
            args(nodes) {
                // Traditinally, this would get transformed into null or array. But
                // it's better if we have an empty array instead of null here.
                if (nodes[7].sourceString === '') {
                    return [];
                }
                else {
                    return nodes[7].toAST(this.args.mapping);
                }
            },
        },
        filterArguments: 0,
        arguments: 0,
        complexArguments: function (completeParams, _space1, _comma, _space2, incompleteParam) {
            const self = this;
            return completeParams
                .toAST(self.args.mapping)
                .concat(incompleteParam.sourceString === '' ? [] : incompleteParam.toAST(self.args.mapping));
        },
        simpleArgument: 0,
        tagArguments: 0,
        contentForTagArgument: 0,
        completionModeContentForTagArgument: function (namedArguments, _separator, variableLookup) {
            const self = this;
            return namedArguments
                .toAST(self.args.mapping)
                .concat(variableLookup.sourceString === '' ? [] : variableLookup.toAST(self.args.mapping));
        },
        positionalArgument: 0,
        namedArgument: {
            type: ConcreteNodeTypes.NamedArgument,
            name: 0,
            value: 4,
            locStart,
            locEnd,
            source,
        },
        contentForNamedArgument: {
            type: ConcreteNodeTypes.NamedArgument,
            name: (node) => node[0].sourceString + node[1].sourceString,
            value: 6,
            locStart,
            locEnd,
            source,
        },
        liquidString: 0,
        liquidDoubleQuotedString: {
            type: ConcreteNodeTypes.String,
            single: () => false,
            value: 1,
            locStart,
            locEnd,
            source,
        },
        liquidSingleQuotedString: {
            type: ConcreteNodeTypes.String,
            single: () => true,
            value: 1,
            locStart,
            locEnd,
            source,
        },
        liquidNumber: {
            type: ConcreteNodeTypes.Number,
            value: 0,
            locStart,
            locEnd,
            source,
        },
        liquidLiteral: {
            type: ConcreteNodeTypes.LiquidLiteral,
            value: (tokens) => {
                const keyword = tokens[0].sourceString;
                return exports.LiquidLiteralValues[keyword];
            },
            keyword: 0,
            locStart,
            locEnd,
            source,
        },
        liquidRange: {
            type: ConcreteNodeTypes.Range,
            start: 2,
            end: 6,
            locStart,
            locEnd,
            source,
        },
        liquidVariableLookup: {
            type: ConcreteNodeTypes.VariableLookup,
            name: 0,
            lookups: 1,
            locStart,
            locEnd,
            source,
        },
        variableSegmentAsLookupMarkup: 0,
        variableSegmentAsLookup: {
            type: ConcreteNodeTypes.VariableLookup,
            name: 0,
            lookups: () => [],
            locStart,
            locEnd,
            source,
        },
        lookup: 0,
        indexLookup: 3,
        dotLookup: {
            type: ConcreteNodeTypes.String,
            value: 3,
            locStart: (nodes) => offset + nodes[2].source.startIdx,
            locEnd: (nodes) => offset + nodes[nodes.length - 1].source.endIdx,
            source,
        },
        // trim on both sides
        tagMarkup: (n) => n.sourceString.trim(),
    };
    const LiquidStatement = {
        LiquidStatement: 0,
        liquidTagOpenRule: {
            type: ConcreteNodeTypes.LiquidTagOpen,
            name: 0,
            markup(nodes) {
                const markupNode = nodes[2];
                const nameNode = nodes[0];
                if (types_1.NamedTags.hasOwnProperty(nameNode.sourceString)) {
                    return markupNode.toAST(this.args.mapping);
                }
                return markupNode.sourceString.trim();
            },
            whitespaceStart: null,
            whitespaceEnd: null,
            locStart,
            locEnd: locEndSecondToLast,
            source,
        },
        liquidTagClose: {
            type: ConcreteNodeTypes.LiquidTagClose,
            name: 1,
            whitespaceStart: null,
            whitespaceEnd: null,
            locStart,
            locEnd: locEndSecondToLast,
            source,
        },
        liquidTagRule: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 0,
            markup(nodes) {
                const markupNode = nodes[2];
                const nameNode = nodes[0];
                if (types_1.NamedTags.hasOwnProperty(nameNode.sourceString)) {
                    return markupNode.toAST(this.args.mapping);
                }
                return markupNode.sourceString.trim();
            },
            whitespaceStart: null,
            whitespaceEnd: null,
            locStart,
            locEnd: locEndSecondToLast,
            source,
        },
        liquidRawTagImpl: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 0,
            body: 4,
            children(nodes) {
                return toCST(source, grammars, grammar_1.TextNodeGrammar, ['HelperMappings'], nodes[4].sourceString, offset + nodes[4].source.startIdx);
            },
            whitespaceStart: null,
            whitespaceEnd: null,
            delimiterWhitespaceStart: null,
            delimiterWhitespaceEnd: null,
            locStart,
            locEnd: locEndSecondToLast,
            source,
            blockStartLocStart: (tokens) => offset + tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => offset + tokens[2].source.endIdx,
            blockEndLocStart: (tokens) => offset + tokens[5].source.startIdx,
            blockEndLocEnd: (tokens) => offset + tokens[5].source.endIdx,
        },
        liquidBlockComment: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 'comment',
            body: (tokens) => 
            // We want this to behave like LiquidRawTag, so we have to do some
            // shenanigans to make it behave the same while also supporting
            // nested comments
            //
            // We're stripping the newline from the statementSep, that's why we
            // slice(1). Since statementSep = newline (space | newline)*
            tokens[1].sourceString.slice(1) + tokens[2].sourceString,
            children(tokens) {
                const commentSource = tokens[1].sourceString.slice(1) + tokens[2].sourceString;
                return toCST(source, grammars, grammar_1.TextNodeGrammar, ['HelperMappings'], commentSource, offset + tokens[1].source.startIdx + 1);
            },
            whitespaceStart: '',
            whitespaceEnd: '',
            delimiterWhitespaceStart: '',
            delimiterWhitespaceEnd: '',
            locStart,
            locEnd,
            source,
            blockStartLocStart: (tokens) => offset + tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => offset + tokens[0].source.endIdx,
            blockEndLocStart: (tokens) => offset + tokens[4].source.startIdx,
            blockEndLocEnd: (tokens) => offset + tokens[4].source.endIdx,
        },
        liquidInlineComment: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 0,
            markup: markupTrimEnd(2),
            whitespaceStart: null,
            whitespaceEnd: null,
            locStart,
            locEnd: locEndSecondToLast,
            source,
        },
    };
    const LiquidHTMLMappings = {
        Node(frontmatter, nodes) {
            const self = this;
            const frontmatterNode = frontmatter.sourceString.length === 0 ? [] : [frontmatter.toAST(self.args.mapping)];
            return frontmatterNode.concat(nodes.toAST(self.args.mapping));
        },
        yamlFrontmatter: {
            type: ConcreteNodeTypes.YAMLFrontmatter,
            body: 2,
            locStart,
            locEnd,
            source,
        },
        HtmlDoctype: {
            type: ConcreteNodeTypes.HtmlDoctype,
            legacyDoctypeString: 4,
            locStart,
            locEnd,
            source,
        },
        HtmlComment: {
            type: ConcreteNodeTypes.HtmlComment,
            body: markup(1),
            locStart,
            locEnd,
            source,
        },
        HtmlRawTagImpl: {
            type: ConcreteNodeTypes.HtmlRawTag,
            name: (tokens) => tokens[0].children[1].sourceString,
            attrList(tokens) {
                const mappings = this.args.mapping;
                return tokens[0].children[2].toAST(mappings);
            },
            body: (tokens) => source.slice(tokens[0].source.endIdx, tokens[2].source.startIdx),
            children: (tokens) => {
                const rawMarkup = source.slice(tokens[0].source.endIdx, tokens[2].source.startIdx);
                return toCST(source, grammars, grammars.Liquid, ['HelperMappings', 'LiquidMappings'], rawMarkup, tokens[0].source.endIdx);
            },
            locStart,
            locEnd,
            source,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[0].source.endIdx,
            blockEndLocStart: (tokens) => tokens[2].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[2].source.endIdx,
        },
        HtmlVoidElement: {
            type: ConcreteNodeTypes.HtmlVoidElement,
            name: 1,
            attrList: 3,
            locStart,
            locEnd,
            source,
        },
        HtmlSelfClosingElement: {
            type: ConcreteNodeTypes.HtmlSelfClosingElement,
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
            source,
        },
        HtmlTagOpen: {
            type: ConcreteNodeTypes.HtmlTagOpen,
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
            source,
        },
        HtmlTagClose: {
            type: ConcreteNodeTypes.HtmlTagClose,
            name: 1,
            locStart,
            locEnd,
            source,
        },
        leadingTagNamePart: 0,
        leadingTagNameTextNode: textNode,
        trailingTagNamePart: 0,
        trailingTagNameTextNode: textNode,
        tagName(leadingPart, trailingParts) {
            const mappings = this.args.mapping;
            return [leadingPart.toAST(mappings)].concat(trailingParts.toAST(mappings));
        },
        AttrUnquoted: {
            type: ConcreteNodeTypes.AttrUnquoted,
            name: 0,
            value: 2,
            locStart,
            locEnd,
            source,
        },
        AttrSingleQuoted: {
            type: ConcreteNodeTypes.AttrSingleQuoted,
            name: 0,
            value: 3,
            locStart,
            locEnd,
            source,
        },
        AttrDoubleQuoted: {
            type: ConcreteNodeTypes.AttrDoubleQuoted,
            name: 0,
            value: 3,
            locStart,
            locEnd,
            source,
        },
        attrEmpty: {
            type: ConcreteNodeTypes.AttrEmpty,
            name: 0,
            locStart,
            locEnd,
            source,
        },
        attrName: 0,
        attrNameTextNode: textNode,
        attrDoubleQuotedValue: 0,
        attrSingleQuotedValue: 0,
        attrUnquotedValue: 0,
        attrDoubleQuotedTextNode: textNode,
        attrSingleQuotedTextNode: textNode,
        attrUnquotedTextNode: textNode,
    };
    const defaultMappings = {
        HelperMappings,
        LiquidMappings,
        LiquidHTMLMappings,
        LiquidStatement,
    };
    const selectedMappings = cstMappings.reduce((mappings, key) => ({
        ...mappings,
        ...defaultMappings[key],
    }), {});
    return (0, extras_1.toAST)(res, selectedMappings);
}
/**
 * Builds an AST for LiquidDoc content.
 *
 * `toCST` includes mappings and logic that are not needed for LiquidDoc so we're separating this logic
 */
function toLiquidDocAST(source, matchingSource, offset) {
    // When we switch parser, our locStart and locEnd functions must account
    // for the offset of the {% doc %} markup
    const locStart = (tokens) => offset + tokens[0].source.startIdx;
    const locEnd = (tokens) => offset + tokens[tokens.length - 1].source.endIdx;
    const res = grammar_1.LiquidDocGrammar.match(matchingSource, 'Node');
    if (res.failed()) {
        throw new errors_1.LiquidHTMLCSTParsingError(res);
    }
    /**
     * Reusable text node type
     */
    const textNode = {
        type: ConcreteNodeTypes.TextNode,
        value: function () {
            return this.sourceString;
        },
        locStart,
        locEnd,
        source,
    };
    const LiquidDocMappings = {
        Node: 0,
        TextNode: textNode,
        paramNode: {
            type: ConcreteNodeTypes.LiquidDocParamNode,
            name: 'param',
            locStart,
            locEnd,
            source,
            paramType: 2,
            paramName: 4,
            paramDescription: 8,
        },
        descriptionNode: {
            type: ConcreteNodeTypes.LiquidDocDescriptionNode,
            name: 'description',
            locStart,
            locEnd,
            source,
            content: 2,
        },
        descriptionContent: textNode,
        paramType: 2,
        paramTypeContent: textNode,
        paramName: {
            type: ConcreteNodeTypes.LiquidDocParamNameNode,
            content: 0,
            locStart,
            locEnd,
            source,
            required: true,
        },
        optionalParamName: {
            type: ConcreteNodeTypes.LiquidDocParamNameNode,
            content: 2,
            locStart,
            locEnd,
            source,
            required: false,
        },
        paramDescription: textNode,
        exampleNode: {
            type: ConcreteNodeTypes.LiquidDocExampleNode,
            name: 'example',
            locStart,
            locEnd,
            source,
            content: 2,
        },
        exampleContent: textNode,
        textValue: textNode,
        fallbackNode: textNode,
    };
    return (0, extras_1.toAST)(res, LiquidDocMappings);
}
//# sourceMappingURL=stage-1-cst.js.map

/***/ }),

/***/ 6265:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * This is the second stage of the parser.
 *
 * Input:
 *  - A Concrete Syntax Tree (CST)
 *
 * Output:
 *  - An Abstract Syntax Tree (AST)
 *
 * This stage traverses the flat tree we get from the previous stage and
 * establishes the parent/child relationship between the nodes.
 *
 * Recall the Liquid example we had in the first stage:
 *   {% if cond %}hi <em>there!</em>{% endif %}
 *
 * Whereas the previous stage gives us this CST:
 *   - LiquidTagOpen/if
 *     condition: LiquidVariableExpression/cond
 *   - TextNode/"hi "
 *   - HtmlTagOpen/em
 *   - TextNode/"there!"
 *   - HtmlTagClose/em
 *   - LiquidTagClose/if
 *
 * We now traverse all the nodes and turn that into a proper AST:
 *   - LiquidTag/if
 *     condition: LiquidVariableExpression
 *     children:
 *       - TextNode/"hi "
 *       - HtmlElement/em
 *         children:
 *           - TextNode/"there!"
 *
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isLiquidHtmlNode = exports.walk = exports.cstToAst = exports.getName = exports.toLiquidHtmlAST = exports.toLiquidAST = exports.isBranchedTag = exports.RawMarkupKinds = void 0;
const stage_1_cst_1 = __webpack_require__(7778);
const types_1 = __webpack_require__(6336);
const utils_1 = __webpack_require__(6428);
const errors_1 = __webpack_require__(5062);
const grammar_1 = __webpack_require__(6504);
const stage_1_cst_2 = __webpack_require__(7778);
/**
 * The infered kind of raw markup
 * - `<script>` is javascript
 * - `<script type="application/json">` is JSON
 * - `<style>` is css
 * - etc.
 */
var RawMarkupKinds;
(function (RawMarkupKinds) {
    RawMarkupKinds["css"] = "css";
    RawMarkupKinds["html"] = "html";
    RawMarkupKinds["javascript"] = "javascript";
    RawMarkupKinds["json"] = "json";
    RawMarkupKinds["markdown"] = "markdown";
    RawMarkupKinds["typescript"] = "typescript";
    RawMarkupKinds["text"] = "text";
})(RawMarkupKinds = exports.RawMarkupKinds || (exports.RawMarkupKinds = {}));
function isBranchedTag(node) {
    return node.type === types_1.NodeTypes.LiquidTag && ['if', 'for', 'unless', 'case'].includes(node.name);
}
exports.isBranchedTag = isBranchedTag;
function isConcreteLiquidBranchDisguisedAsTag(node) {
    return node.type === stage_1_cst_1.ConcreteNodeTypes.LiquidTag && ['else', 'elsif', 'when'].includes(node.name);
}
function toLiquidAST(source, options = {
    allowUnclosedDocumentNode: true,
    mode: 'tolerant',
}) {
    const cst = (0, stage_1_cst_2.toLiquidCST)(source, { mode: options.mode });
    const root = {
        type: types_1.NodeTypes.Document,
        source: source,
        _source: source,
        children: cstToAst(cst, options),
        name: '#document',
        position: {
            start: 0,
            end: source.length,
        },
    };
    return root;
}
exports.toLiquidAST = toLiquidAST;
function toLiquidHtmlAST(source, options = {
    allowUnclosedDocumentNode: false,
    mode: 'tolerant',
}) {
    const cst = (0, stage_1_cst_1.toLiquidHtmlCST)(source, { mode: options.mode });
    const root = {
        type: types_1.NodeTypes.Document,
        source: source,
        _source: source,
        children: cstToAst(cst, options),
        name: '#document',
        position: {
            start: 0,
            end: source.length,
        },
    };
    return root;
}
exports.toLiquidHtmlAST = toLiquidHtmlAST;
class ASTBuilder {
    constructor(source) {
        this.ast = [];
        this.cursor = [];
        this.source = source;
    }
    // Returns the array to push nodes to.
    get current() {
        return (0, utils_1.deepGet)(this.cursor, this.ast);
    }
    // Returns the position of the current node in the array
    get currentPosition() {
        return (this.current || []).length - 1;
    }
    get parent() {
        if (this.cursor.length == 0)
            return undefined;
        return (0, utils_1.deepGet)((0, utils_1.dropLast)(1, this.cursor), this.ast);
    }
    get grandparent() {
        if (this.cursor.length < 4)
            return undefined;
        return (0, utils_1.deepGet)((0, utils_1.dropLast)(3, this.cursor), this.ast);
    }
    open(node) {
        this.current.push(node);
        this.cursor.push(this.currentPosition);
        this.cursor.push('children');
        if (isBranchedTag(node)) {
            this.open(toUnnamedLiquidBranch(node));
        }
    }
    push(node) {
        if (node.type === types_1.NodeTypes.LiquidBranch) {
            const previousBranch = this.findCloseableParentBranch(node);
            if (previousBranch) {
                previousBranch.blockEndPosition = { start: node.position.start, end: node.position.start };
                // close dangling open HTML nodes
                while (this.parent &&
                    this.parent !== previousBranch &&
                    this.parent.type === types_1.NodeTypes.HtmlElement) {
                    // 0-length blockEndPosition at the position of the next branch
                    this.parent.blockEndPosition = { start: node.position.start, end: node.position.start };
                    this.closeParentWith(node);
                }
                // close the previous branch
                this.closeParentWith(node);
            }
            this.open(node);
        }
        else {
            this.current.push(node);
        }
    }
    close(node, nodeType) {
        var _a, _b;
        if (isLiquidBranch(this.parent)) {
            this.parent.blockEndPosition = { start: node.locStart, end: node.locStart };
            this.closeParentWith(node);
        }
        if (!this.parent) {
            throw new errors_1.LiquidHTMLASTParsingError(`Attempting to close ${nodeType} '${getName(node)}' before it was opened`, this.source, node.locStart, node.locEnd);
        }
        if (getName(this.parent) !== getName(node) || this.parent.type !== nodeType) {
            const suitableParent = this.findCloseableParentNode(node);
            if (this.parent.type === types_1.NodeTypes.HtmlElement && suitableParent) {
                // close dangling open HTML nodes
                while (this.parent !== suitableParent) {
                    // 0-length end block position
                    this.parent.blockEndPosition = { start: node.locStart, end: node.locStart };
                    this.closeParentWith(node);
                }
            }
            else {
                throw new errors_1.LiquidHTMLASTParsingError(`Attempting to close ${nodeType} '${getName(node)}' before ${this.parent.type} '${getName(this.parent)}' was closed`, this.source, this.parent.position.start, node.locEnd, getUnclosed(this.parent));
            }
        }
        // The parent end is the end of the outer tag.
        this.parent.position.end = node.locEnd;
        this.parent.blockEndPosition = position(node);
        if (this.parent.type == types_1.NodeTypes.LiquidTag && node.type == stage_1_cst_1.ConcreteNodeTypes.LiquidTagClose) {
            this.parent.delimiterWhitespaceStart = (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '';
            this.parent.delimiterWhitespaceEnd = (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '';
        }
        this.cursor.pop();
        this.cursor.pop();
    }
    // This function performs the following tasks:
    // - Tries to find a parent branch to close when pushing a new branch.
    // - This is necessary because we allow unclosed HTML element nodes.
    // - The function traverses up the tree until it finds a LiquidBranch.
    // - If it encounters anything other than an Unclosed HTML Element, it throws.
    findCloseableParentBranch(next) {
        for (let index = this.cursor.length - 1; index > 0; index -= 2) {
            const parent = (0, utils_1.deepGet)(this.cursor.slice(0, index), this.ast);
            const parentProperty = this.cursor[index];
            const isUnclosedHtmlElement = parent.type === types_1.NodeTypes.HtmlElement && parentProperty === 'children';
            if (parent.type === types_1.NodeTypes.LiquidBranch) {
                return parent;
            }
            else if (!isUnclosedHtmlElement) {
                throw new errors_1.LiquidHTMLASTParsingError(`Attempting to open LiquidBranch '${next.name}' before ${parent.type} '${getName(parent)}' was closed`, this.source, parent.position.start, next.position.end);
            }
        }
        return null;
    }
    // Check if there's a parent in the ancestry that this node correctly closes
    findCloseableParentNode(current) {
        for (let index = this.cursor.length - 1; index > 0; index -= 2) {
            const parent = (0, utils_1.deepGet)(this.cursor.slice(0, index), this.ast);
            if (getName(parent) === getName(current) &&
                parent.type === types_1.NodeTypes.LiquidTag &&
                ['if', 'unless', 'case'].includes(parent.name)) {
                return parent;
            }
            else if (parent.type === types_1.NodeTypes.LiquidTag) {
                return null;
            }
        }
        return null;
    }
    // sets the parent's end position to the start of the next one.
    closeParentWith(next) {
        if (this.parent) {
            if ('locStart' in next) {
                this.parent.position.end = next.locStart;
            }
            else {
                this.parent.position.end = next.position.start;
            }
        }
        this.cursor.pop();
        this.cursor.pop();
    }
}
function isLiquidBranch(node) {
    return !!node && node.type === types_1.NodeTypes.LiquidBranch;
}
function getName(node) {
    if (!node)
        return null;
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlDanglingMarkerClose:
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case stage_1_cst_1.ConcreteNodeTypes.HtmlTagClose:
            return node.name
                .map((part) => {
                if (part.type === types_1.NodeTypes.TextNode || part.type == stage_1_cst_1.ConcreteNodeTypes.TextNode) {
                    return part.value;
                }
                else if (typeof part.markup === 'string') {
                    return `{{${part.markup.trim()}}}`;
                }
                else {
                    return `{{${part.markup.rawSource}}}`;
                }
            })
                .join('');
        case types_1.NodeTypes.AttrEmpty:
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
            // <a href="{{ hello }}">
            return node.name
                .map((part) => {
                if (typeof part === 'string') {
                    return part;
                }
                else {
                    return part.source.slice(part.position.start, part.position.end);
                }
            })
                .join('');
        default:
            return node.name;
    }
}
exports.getName = getName;
function cstToAst(cst, options) {
    var _a;
    if (cst.length === 0)
        return [];
    const builder = buildAst(cst, options);
    if (!options.allowUnclosedDocumentNode && builder.cursor.length !== 0) {
        throw new errors_1.LiquidHTMLASTParsingError(`Attempting to end parsing before ${(_a = builder.parent) === null || _a === void 0 ? void 0 : _a.type} '${getName(builder.parent)}' was closed`, builder.source, builder.source.length - 1, builder.source.length, getUnclosed(builder.parent, builder.grandparent));
    }
    return builder.ast;
}
exports.cstToAst = cstToAst;
function buildAst(cst, options) {
    var _a, _b, _c, _d;
    const builder = new ASTBuilder(cst[0].source);
    for (let i = 0; i < cst.length; i++) {
        const node = cst[i];
        switch (node.type) {
            case stage_1_cst_1.ConcreteNodeTypes.TextNode: {
                builder.push(toTextNode(node));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidVariableOutput: {
                builder.push(toLiquidVariableOutput(node));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidTagOpen: {
                builder.open(toLiquidTag(node, { ...options, isBlockTag: true }));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidTagClose: {
                builder.close(node, types_1.NodeTypes.LiquidTag);
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidTag: {
                builder.push(toLiquidTag(node, { ...options, isBlockTag: false }));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidRawTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidRawTag,
                    markup: markup(node.name, node.markup),
                    name: node.name,
                    body: toRawMarkup(node, options),
                    whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
                    whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
                    delimiterWhitespaceStart: (_c = node.delimiterWhitespaceStart) !== null && _c !== void 0 ? _c : '',
                    delimiterWhitespaceEnd: (_d = node.delimiterWhitespaceEnd) !== null && _d !== void 0 ? _d : '',
                    position: position(node),
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlTagOpen: {
                builder.open(toHtmlElement(node, options));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlTagClose: {
                if (isAcceptableDanglingMarkerClose(builder, cst, i, options.mode)) {
                    builder.push(toHtmlDanglingMarkerClose(node, options));
                }
                else {
                    builder.close(node, types_1.NodeTypes.HtmlElement);
                }
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlVoidElement: {
                builder.push(toHtmlVoidElement(node, options));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlSelfClosingElement: {
                builder.push(toHtmlSelfClosingElement(node, options));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlDoctype: {
                builder.push({
                    type: types_1.NodeTypes.HtmlDoctype,
                    legacyDoctypeString: node.legacyDoctypeString,
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlComment: {
                builder.push({
                    type: types_1.NodeTypes.HtmlComment,
                    body: node.body,
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlRawTag: {
                builder.push({
                    type: types_1.NodeTypes.HtmlRawNode,
                    name: node.name,
                    body: toRawMarkup(node, options),
                    attributes: toAttributes(node.attrList || [], options),
                    position: position(node),
                    source: node.source,
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.AttrEmpty: {
                builder.push({
                    type: types_1.NodeTypes.AttrEmpty,
                    name: cstToAst(node.name, options),
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.AttrSingleQuoted:
            case stage_1_cst_1.ConcreteNodeTypes.AttrDoubleQuoted:
            case stage_1_cst_1.ConcreteNodeTypes.AttrUnquoted: {
                const abstractNode = {
                    type: node.type,
                    name: cstToAst(node.name, options),
                    position: position(node),
                    source: node.source,
                    // placeholders
                    attributePosition: { start: -1, end: -1 },
                    value: [],
                };
                const value = toAttributeValue(node.value, options);
                abstractNode.value = value;
                abstractNode.attributePosition = toAttributePosition(node, value);
                builder.push(abstractNode);
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.YAMLFrontmatter: {
                builder.push({
                    type: types_1.NodeTypes.YAMLFrontmatter,
                    body: node.body,
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidDocParamNode: {
                builder.push({
                    type: types_1.NodeTypes.LiquidDocParamNode,
                    name: node.name,
                    position: position(node),
                    source: node.source,
                    paramName: toTextNode(node.paramName.content),
                    paramDescription: toNullableTextNode(node.paramDescription),
                    paramType: toNullableTextNode(node.paramType),
                    required: node.paramName.required,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidDocDescriptionNode: {
                builder.push({
                    type: types_1.NodeTypes.LiquidDocDescriptionNode,
                    name: node.name,
                    position: position(node),
                    source: node.source,
                    content: toTextNode(node.content),
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidDocExampleNode: {
                builder.push({
                    type: types_1.NodeTypes.LiquidDocExampleNode,
                    name: node.name,
                    position: position(node),
                    source: node.source,
                    content: toTextNode(node.content),
                });
                break;
            }
            default: {
                (0, utils_1.assertNever)(node);
            }
        }
    }
    return builder;
}
function nameLength(names) {
    const start = names.at(0);
    const end = names.at(-1);
    return end.locEnd - start.locStart;
}
function toAttributePosition(node, value) {
    if (value.length === 0) {
        // This is bugged when there's whitespace on either side. But I don't
        // think it's worth solving.
        return {
            start: node.locStart + nameLength(node.name) + '='.length + '"'.length,
            // name=""
            // 012345678
            // 0 + 4 + 1 + 1
            // = 6
            end: node.locStart + nameLength(node.name) + '='.length + '"'.length,
            // name=""
            // 012345678
            // 0 + 4 + 1 + 2
            // = 6
        };
    }
    return {
        start: value[0].position.start,
        end: value[value.length - 1].position.end,
    };
}
function toAttributeValue(value, options) {
    return cstToAst(value, options);
}
function toAttributes(attrList, options) {
    return cstToAst(attrList, options);
}
function liquidTagBaseAttributes(node) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidTag,
        position: position(node),
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        blockStartPosition: position(node),
        source: node.source,
    };
}
function liquidBranchBaseAttributes(node) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidBranch,
        children: [],
        position: position(node),
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        blockStartPosition: position(node),
        blockEndPosition: { start: -1, end: -1 },
        source: node.source,
    };
}
function toLiquidTag(node, options) {
    if (typeof node.markup !== 'string') {
        return toNamedLiquidTag(node, options);
    }
    else if (isConcreteLiquidBranchDisguisedAsTag(node)) {
        // `elsif`, `else`, `case`, but with unparseable markup.
        return toNamedLiquidBranchBaseCase(node);
    }
    else if (options.isBlockTag) {
        return {
            name: node.name,
            markup: markup(node.name, node.markup),
            children: options.isBlockTag ? [] : undefined,
            ...liquidTagBaseAttributes(node),
        };
    }
    return {
        name: node.name,
        markup: markup(node.name, node.markup),
        ...liquidTagBaseAttributes(node),
    };
}
function toNamedLiquidTag(node, options) {
    switch (node.name) {
        case types_1.NamedTags.echo: {
            return {
                ...liquidTagBaseAttributes(node),
                name: types_1.NamedTags.echo,
                markup: toLiquidVariable(node.markup),
            };
        }
        case types_1.NamedTags.assign: {
            return {
                ...liquidTagBaseAttributes(node),
                name: types_1.NamedTags.assign,
                markup: toAssignMarkup(node.markup),
            };
        }
        case types_1.NamedTags.cycle: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toCycleMarkup(node.markup),
            };
        }
        case types_1.NamedTags.increment:
        case types_1.NamedTags.decrement: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toExpression(node.markup),
            };
        }
        case types_1.NamedTags.capture: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toExpression(node.markup),
                children: [],
            };
        }
        case types_1.NamedTags.content_for: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toContentForMarkup(node.markup),
            };
        }
        case types_1.NamedTags.include:
        case types_1.NamedTags.render: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toRenderMarkup(node.markup),
            };
        }
        case types_1.NamedTags.layout:
        case types_1.NamedTags.section: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toExpression(node.markup),
            };
        }
        case types_1.NamedTags.sections: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toExpression(node.markup),
            };
        }
        case types_1.NamedTags.form: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: node.markup.map(toLiquidArgument),
                children: [],
            };
        }
        case types_1.NamedTags.tablerow:
        case types_1.NamedTags.for: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toForMarkup(node.markup),
                children: [],
            };
        }
        case types_1.NamedTags.paginate: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toPaginateMarkup(node.markup),
                children: [],
            };
        }
        case types_1.NamedTags.if:
        case types_1.NamedTags.unless: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toConditionalExpression(node.markup),
                blockEndPosition: { start: -1, end: -1 },
                children: [],
            };
        }
        case types_1.NamedTags.elsif: {
            return {
                ...liquidBranchBaseAttributes(node),
                name: node.name,
                markup: toConditionalExpression(node.markup),
            };
        }
        case types_1.NamedTags.case: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: toExpression(node.markup),
                children: [],
            };
        }
        case types_1.NamedTags.when: {
            return {
                ...liquidBranchBaseAttributes(node),
                name: node.name,
                markup: node.markup.map(toExpression),
            };
        }
        case types_1.NamedTags.liquid: {
            return {
                ...liquidTagBaseAttributes(node),
                name: node.name,
                markup: cstToAst(node.markup, options),
            };
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function toNamedLiquidBranchBaseCase(node) {
    var _a, _b;
    return {
        name: node.name,
        type: types_1.NodeTypes.LiquidBranch,
        markup: node.name !== 'else' ? node.markup : '',
        position: { start: node.locStart, end: node.locEnd },
        children: [],
        blockStartPosition: { start: node.locStart, end: node.locEnd },
        blockEndPosition: { start: -1, end: -1 },
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        source: node.source,
    };
}
function toUnnamedLiquidBranch(parentNode) {
    return {
        type: types_1.NodeTypes.LiquidBranch,
        name: null,
        markup: '',
        position: { start: parentNode.position.end, end: parentNode.position.end },
        blockStartPosition: { start: parentNode.position.end, end: parentNode.position.end },
        blockEndPosition: { start: -1, end: -1 },
        children: [],
        whitespaceStart: '',
        whitespaceEnd: '',
        source: parentNode.source,
    };
}
function toAssignMarkup(node) {
    return {
        type: types_1.NodeTypes.AssignMarkup,
        name: node.name,
        value: toLiquidVariable(node.value),
        position: position(node),
        source: node.source,
    };
}
function toCycleMarkup(node) {
    return {
        type: types_1.NodeTypes.CycleMarkup,
        groupName: node.groupName ? toExpression(node.groupName) : null,
        args: node.args.map(toExpression),
        position: position(node),
        source: node.source,
    };
}
function toForMarkup(node) {
    return {
        type: types_1.NodeTypes.ForMarkup,
        variableName: node.variableName,
        collection: toExpression(node.collection),
        args: node.args.map(toNamedArgument),
        reversed: !!node.reversed,
        position: position(node),
        source: node.source,
    };
}
function toPaginateMarkup(node) {
    return {
        type: types_1.NodeTypes.PaginateMarkup,
        collection: toExpression(node.collection),
        pageSize: toExpression(node.pageSize),
        position: position(node),
        args: node.args ? node.args.map(toNamedArgument) : [],
        source: node.source,
    };
}
function toRawMarkup(node, options) {
    return {
        type: types_1.NodeTypes.RawMarkup,
        kind: toRawMarkupKind(node),
        nodes: cstToAst(node.children, options),
        value: node.body,
        position: {
            start: node.blockStartLocEnd,
            end: node.blockEndLocStart,
        },
        source: node.source,
    };
}
function toRawMarkupKind(node) {
    switch (node.type) {
        case stage_1_cst_1.ConcreteNodeTypes.HtmlRawTag:
            return toRawMarkupKindFromHtmlNode(node);
        case stage_1_cst_1.ConcreteNodeTypes.LiquidRawTag:
            return toRawMarkupKindFromLiquidNode(node);
        default:
            return (0, utils_1.assertNever)(node);
    }
}
const liquidToken = /(\{%|\{\{)-?/g;
function toRawMarkupKindFromHtmlNode(node) {
    var _a;
    switch (node.name) {
        case 'script': {
            const scriptAttr = (_a = node.attrList) === null || _a === void 0 ? void 0 : _a.find((attr) => 'name' in attr &&
                typeof attr.name !== 'string' &&
                attr.name.length === 1 &&
                attr.name[0].type === stage_1_cst_1.ConcreteNodeTypes.TextNode &&
                attr.name[0].value === 'type');
            if (!scriptAttr ||
                !('value' in scriptAttr) ||
                scriptAttr.value.length === 0 ||
                scriptAttr.value[0].type !== stage_1_cst_1.ConcreteNodeTypes.TextNode) {
                return RawMarkupKinds.javascript;
            }
            const type = scriptAttr.value[0].value;
            if (type === 'text/markdown') {
                return RawMarkupKinds.markdown;
            }
            if (type === 'application/x-typescript') {
                return RawMarkupKinds.typescript;
            }
            if (type === 'text/html') {
                return RawMarkupKinds.html;
            }
            if ((type && (type.endsWith('json') || type.endsWith('importmap'))) ||
                type === 'speculationrules') {
                return RawMarkupKinds.json;
            }
            return RawMarkupKinds.javascript;
        }
        case 'style':
            if (liquidToken.test(node.body)) {
                return RawMarkupKinds.text;
            }
            return RawMarkupKinds.css;
        default:
            return RawMarkupKinds.text;
    }
}
function toRawMarkupKindFromLiquidNode(node) {
    switch (node.name) {
        case 'javascript':
            return RawMarkupKinds.javascript;
        case 'stylesheet':
        case 'style':
            if (liquidToken.test(node.body)) {
                return RawMarkupKinds.text;
            }
            return RawMarkupKinds.css;
        case 'schema':
            return RawMarkupKinds.json;
        default:
            return RawMarkupKinds.text;
    }
}
function toContentForMarkup(node) {
    return {
        type: types_1.NodeTypes.ContentForMarkup,
        contentForType: toExpression(node.contentForType),
        /**
         * When we're in completion mode we won't necessarily have valid named
         * arguments so we need to call toLiquidArgument instead of toNamedArgument.
         * We cast using `as` so that this doesn't affect the type system used in
         * other areas (like theme check) for a scenario that only occurs in
         * completion mode. This means that our types are *wrong* in completion mode
         * but this is the compromise we're making to get completions to work.
         */
        args: node.args.map(toLiquidArgument),
        position: position(node),
        source: node.source,
    };
}
function toRenderMarkup(node) {
    return {
        type: types_1.NodeTypes.RenderMarkup,
        snippet: toExpression(node.snippet),
        alias: node.alias,
        variable: toRenderVariableExpression(node.variable),
        /**
         * When we're in completion mode we won't necessarily have valid named
         * arguments so we need to call toLiquidArgument instead of toNamedArgument.
         * We cast using `as` so that this doesn't affect the type system used in
         * other areas (like theme check) for a scenario that only occurs in
         * completion mode. This means that our types are *wrong* in completion mode
         * but this is the compromise we're making to get completions to work.
         */
        args: node.renderArguments.map(toLiquidArgument),
        position: position(node),
        source: node.source,
    };
}
function toRenderVariableExpression(node) {
    if (!node)
        return null;
    return {
        type: types_1.NodeTypes.RenderVariableExpression,
        kind: node.kind,
        name: toExpression(node.name),
        position: position(node),
        source: node.source,
    };
}
function toConditionalExpression(nodes) {
    if (nodes.length === 1) {
        return toComparisonOrExpression(nodes[0]);
    }
    const [first, second] = nodes;
    const [, ...rest] = nodes;
    return {
        type: types_1.NodeTypes.LogicalExpression,
        relation: second.relation,
        left: toComparisonOrExpression(first),
        right: toConditionalExpression(rest),
        position: {
            start: first.locStart,
            end: nodes[nodes.length - 1].locEnd,
        },
        source: first.source,
    };
}
function toComparisonOrExpression(node) {
    const expression = node.expression;
    switch (expression.type) {
        case stage_1_cst_1.ConcreteNodeTypes.Comparison:
            return toComparison(expression);
        default:
            return toExpression(expression);
    }
}
function toComparison(node) {
    return {
        type: types_1.NodeTypes.Comparison,
        comparator: node.comparator,
        left: toExpression(node.left),
        right: toExpression(node.right),
        position: position(node),
        source: node.source,
    };
}
function toLiquidVariableOutput(node) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidVariableOutput,
        markup: typeof node.markup === 'string' ? node.markup : toLiquidVariable(node.markup),
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        position: position(node),
        source: node.source,
    };
}
function toLiquidVariable(node) {
    return {
        type: types_1.NodeTypes.LiquidVariable,
        expression: toExpression(node.expression),
        filters: node.filters.map(toFilter),
        position: position(node),
        rawSource: node.rawSource,
        source: node.source,
    };
}
function toExpression(node) {
    switch (node.type) {
        case stage_1_cst_1.ConcreteNodeTypes.String: {
            return {
                type: types_1.NodeTypes.String,
                position: position(node),
                single: node.single,
                value: node.value,
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.Number: {
            return {
                type: types_1.NodeTypes.Number,
                position: position(node),
                value: node.value,
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.LiquidLiteral: {
            return {
                type: types_1.NodeTypes.LiquidLiteral,
                position: position(node),
                value: node.value,
                keyword: node.keyword,
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.Range: {
            return {
                type: types_1.NodeTypes.Range,
                start: toExpression(node.start),
                end: toExpression(node.end),
                position: position(node),
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.VariableLookup: {
            return {
                type: types_1.NodeTypes.VariableLookup,
                name: node.name,
                lookups: node.lookups.map(toExpression),
                position: position(node),
                source: node.source,
            };
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function toFilter(node) {
    return {
        type: types_1.NodeTypes.LiquidFilter,
        name: node.name,
        args: node.args.map(toLiquidArgument),
        position: position(node),
        source: node.source,
    };
}
function toLiquidArgument(node) {
    switch (node.type) {
        case stage_1_cst_1.ConcreteNodeTypes.NamedArgument: {
            return toNamedArgument(node);
        }
        default: {
            return toExpression(node);
        }
    }
}
function toNamedArgument(node) {
    return {
        type: types_1.NodeTypes.NamedArgument,
        name: node.name,
        value: toExpression(node.value),
        position: position(node),
        source: node.source,
    };
}
function toHtmlElement(node, options) {
    return {
        type: types_1.NodeTypes.HtmlElement,
        name: cstToAst(node.name, options),
        attributes: toAttributes(node.attrList || [], options),
        position: position(node),
        blockStartPosition: position(node),
        blockEndPosition: { start: -1, end: -1 },
        children: [],
        source: node.source,
    };
}
function toHtmlDanglingMarkerClose(node, options) {
    return {
        type: types_1.NodeTypes.HtmlDanglingMarkerClose,
        name: cstToAst(node.name, options),
        position: position(node),
        blockStartPosition: position(node),
        source: node.source,
    };
}
function toHtmlVoidElement(node, options) {
    return {
        type: types_1.NodeTypes.HtmlVoidElement,
        name: node.name,
        attributes: toAttributes(node.attrList || [], options),
        position: position(node),
        blockStartPosition: position(node),
        source: node.source,
    };
}
function toHtmlSelfClosingElement(node, options) {
    return {
        type: types_1.NodeTypes.HtmlSelfClosingElement,
        name: cstToAst(node.name, options),
        attributes: toAttributes(node.attrList || [], options),
        position: position(node),
        blockStartPosition: position(node),
        source: node.source,
    };
}
function toNullableTextNode(node) {
    if (!node || node.value === '')
        return null;
    return toTextNode(node);
}
function toTextNode(node) {
    return {
        type: types_1.NodeTypes.TextNode,
        value: node.value,
        position: position(node),
        source: node.source,
    };
}
function isAcceptableDanglingMarkerClose(builder, cst, currIndex, mode) {
    if (mode === 'completion') {
        const current = cst[currIndex];
        const parentIsOfCorrectName = builder.parent &&
            builder.parent.type === types_1.NodeTypes.HtmlElement &&
            getName(builder.parent) === getName(current);
        return !parentIsOfCorrectName;
    }
    return isAcceptableDanglingMarker(builder);
}
// This function checks that the builder.current node accepts dangling nodes.
//
// The current logic is:
//  - Grandparent node must be an if-like statement
//  - Parent node must be a LiquidBranch
function isAcceptableDanglingMarker(builder) {
    const { parent, grandparent } = builder;
    if (!parent || !grandparent)
        return false;
    return (parent.type === types_1.NodeTypes.LiquidBranch &&
        grandparent.type === types_1.NodeTypes.LiquidTag &&
        ['if', 'unless', 'case'].includes(grandparent.name));
}
// checking that is a {% else %} or {% endif %}
function isConcreteExceptionEnd(node) {
    return (!node ||
        node.type === stage_1_cst_1.ConcreteNodeTypes.LiquidTagClose ||
        isConcreteLiquidBranchDisguisedAsTag(node));
}
function markup(name, markup) {
    if (grammar_1.TAGS_WITHOUT_MARKUP.includes(name))
        return '';
    return markup;
}
function position(node) {
    return {
        start: node.locStart,
        end: node.locEnd,
    };
}
function walk(ast, fn, parentNode) {
    for (const key of Object.keys(ast)) {
        if (types_1.nonTraversableProperties.has(key)) {
            continue;
        }
        const value = ast[key];
        if (Array.isArray(value)) {
            value.filter(isLiquidHtmlNode).forEach((node) => walk(node, fn, ast));
        }
        else if (isLiquidHtmlNode(value)) {
            walk(value, fn, ast);
        }
    }
    fn(ast, parentNode);
}
exports.walk = walk;
function isLiquidHtmlNode(value) {
    return (value !== null &&
        typeof value === 'object' &&
        'type' in value &&
        types_1.NodeTypes.hasOwnProperty(value.type));
}
exports.isLiquidHtmlNode = isLiquidHtmlNode;
function getUnclosed(node, parentNode) {
    var _a;
    if (!node)
        return undefined;
    if (getName(node) === null && parentNode) {
        node = parentNode;
    }
    return {
        type: node.type,
        name: (_a = getName(node)) !== null && _a !== void 0 ? _a : '',
        blockStartPosition: 'blockStartPosition' in node ? node.blockStartPosition : node.position,
    };
}
//# sourceMappingURL=stage-2-ast.js.map

/***/ }),

/***/ 6336:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.nonTraversableProperties = exports.LiquidNodeTypes = exports.HtmlNodeTypes = exports.Comparators = exports.NamedTags = exports.NodeTypes = void 0;
var NodeTypes;
(function (NodeTypes) {
    NodeTypes["Document"] = "Document";
    NodeTypes["LiquidRawTag"] = "LiquidRawTag";
    NodeTypes["LiquidTag"] = "LiquidTag";
    NodeTypes["LiquidBranch"] = "LiquidBranch";
    NodeTypes["LiquidVariableOutput"] = "LiquidVariableOutput";
    NodeTypes["HtmlSelfClosingElement"] = "HtmlSelfClosingElement";
    NodeTypes["HtmlVoidElement"] = "HtmlVoidElement";
    NodeTypes["HtmlDoctype"] = "HtmlDoctype";
    NodeTypes["HtmlComment"] = "HtmlComment";
    NodeTypes["HtmlElement"] = "HtmlElement";
    NodeTypes["HtmlDanglingMarkerClose"] = "HtmlDanglingMarkerClose";
    NodeTypes["HtmlRawNode"] = "HtmlRawNode";
    NodeTypes["AttrSingleQuoted"] = "AttrSingleQuoted";
    NodeTypes["AttrDoubleQuoted"] = "AttrDoubleQuoted";
    NodeTypes["AttrUnquoted"] = "AttrUnquoted";
    NodeTypes["AttrEmpty"] = "AttrEmpty";
    NodeTypes["TextNode"] = "TextNode";
    NodeTypes["YAMLFrontmatter"] = "YAMLFrontmatter";
    NodeTypes["LiquidVariable"] = "LiquidVariable";
    NodeTypes["LiquidFilter"] = "LiquidFilter";
    NodeTypes["NamedArgument"] = "NamedArgument";
    NodeTypes["LiquidLiteral"] = "LiquidLiteral";
    NodeTypes["String"] = "String";
    NodeTypes["Number"] = "Number";
    NodeTypes["Range"] = "Range";
    NodeTypes["VariableLookup"] = "VariableLookup";
    NodeTypes["Comparison"] = "Comparison";
    NodeTypes["LogicalExpression"] = "LogicalExpression";
    NodeTypes["AssignMarkup"] = "AssignMarkup";
    NodeTypes["ContentForMarkup"] = "ContentForMarkup";
    NodeTypes["CycleMarkup"] = "CycleMarkup";
    NodeTypes["ForMarkup"] = "ForMarkup";
    NodeTypes["PaginateMarkup"] = "PaginateMarkup";
    NodeTypes["RawMarkup"] = "RawMarkup";
    NodeTypes["RenderMarkup"] = "RenderMarkup";
    NodeTypes["RenderVariableExpression"] = "RenderVariableExpression";
    NodeTypes["LiquidDocDescriptionNode"] = "LiquidDocDescriptionNode";
    NodeTypes["LiquidDocParamNode"] = "LiquidDocParamNode";
    NodeTypes["LiquidDocExampleNode"] = "LiquidDocExampleNode";
})(NodeTypes = exports.NodeTypes || (exports.NodeTypes = {}));
// These are officially supported with special node types
var NamedTags;
(function (NamedTags) {
    NamedTags["assign"] = "assign";
    NamedTags["capture"] = "capture";
    NamedTags["case"] = "case";
    NamedTags["content_for"] = "content_for";
    NamedTags["cycle"] = "cycle";
    NamedTags["decrement"] = "decrement";
    NamedTags["echo"] = "echo";
    NamedTags["elsif"] = "elsif";
    NamedTags["for"] = "for";
    NamedTags["form"] = "form";
    NamedTags["if"] = "if";
    NamedTags["include"] = "include";
    NamedTags["increment"] = "increment";
    NamedTags["layout"] = "layout";
    NamedTags["liquid"] = "liquid";
    NamedTags["paginate"] = "paginate";
    NamedTags["render"] = "render";
    NamedTags["section"] = "section";
    NamedTags["sections"] = "sections";
    NamedTags["tablerow"] = "tablerow";
    NamedTags["unless"] = "unless";
    NamedTags["when"] = "when";
})(NamedTags = exports.NamedTags || (exports.NamedTags = {}));
var Comparators;
(function (Comparators) {
    Comparators["CONTAINS"] = "contains";
    Comparators["EQUAL"] = "==";
    Comparators["GREATER_THAN"] = ">";
    Comparators["GREATER_THAN_OR_EQUAL"] = ">=";
    Comparators["LESS_THAN"] = "<";
    Comparators["LESS_THAN_OR_EQUAL"] = "<=";
    Comparators["NOT_EQUAL"] = "!=";
})(Comparators = exports.Comparators || (exports.Comparators = {}));
exports.HtmlNodeTypes = [
    NodeTypes.HtmlElement,
    NodeTypes.HtmlDanglingMarkerClose,
    NodeTypes.HtmlRawNode,
    NodeTypes.HtmlVoidElement,
    NodeTypes.HtmlSelfClosingElement,
];
exports.LiquidNodeTypes = [
    NodeTypes.LiquidTag,
    NodeTypes.LiquidVariableOutput,
    NodeTypes.LiquidBranch,
    NodeTypes.LiquidRawTag,
];
// Those properties create loops that would make walking infinite
exports.nonTraversableProperties = new Set([
    'parentNode',
    'prev',
    'next',
    'firstChild',
    'lastChild',
]);
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 6428:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dropLast = exports.deepGet = exports.locEnd = exports.locStart = exports.assertNever = void 0;
function assertNever(x) {
    throw new Error(`Unexpected object: ${x.type}`);
}
exports.assertNever = assertNever;
function locStart(node) {
    return node.position.start;
}
exports.locStart = locStart;
function locEnd(node) {
    return node.position.end;
}
exports.locEnd = locEnd;
function deepGet(path, obj) {
    return path.reduce((curr, k) => {
        if (curr && curr[k] !== undefined)
            return curr[k];
        return undefined;
    }, obj);
}
exports.deepGet = deepGet;
function dropLast(n, xs) {
    const result = [...xs];
    for (let i = 0; i < n; i++) {
        result.pop();
    }
    return result;
}
exports.dropLast = dropLast;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5512:
/***/ ((module) => {

module.exports = String.raw`Helpers {
  Node = TextNode*
  TextNode = AnyExceptPlus<openControl>
  openControl = end

  empty = /* nothing */
  anyExcept<lit> = (~ lit any)
  anyExceptStar<lit> = (~ lit any)*
  anyExceptPlus<lit> = (~ lit any)+
  AnyExcept<lit> = (~ lit any)
  AnyExceptPlus<lit> = (~ lit any)+
  AnyExceptStar<lit> = (~ lit any)*
  identifierCharacter = alnum | "_" | "-"

  orderedListOf<a, b, sep> =
    | nonemptyOrderedListOf<a, b, sep>
    | emptyListOf<a, sep>
  nonemptyOrderedListOf<a, b, sep> =
    | nonemptyListOf<b, sep>
    | nonemptyOrderedListOfBoth<a, b, sep>
    | nonemptyListOf<a, sep>
  nonemptyOrderedListOfBoth<a, b, sep> =
    nonemptyListOf<a, sep> (sep nonemptyListOf<b, sep>)

  singleQuote = "'" | "‘" | "’"
  doubleQuote = "\"" | "“" | "”"
  controls = "\u{007F}".."\u{009F}"
  noncharacters = "\u{FDD0}".."\u{FDEF}"
  newline = "\r"? "\n"
}

Liquid <: Helpers {
  Node := (liquidNode | TextNode)*
  openControl := "{{" | "{%"
  endOfTagName = &("-%}" | "-}}" | "%}" | "}}")
  endOfVarName = ~identifierCharacter
  endOfIdentifier = endOfTagName | endOfVarName

  liquidNode =
  	| liquidDoc
    | liquidBlockComment
    | liquidRawTag
    | liquidDrop
    | liquidTagClose
    | liquidTagOpen
    | liquidTag
    | liquidInlineComment

  liquidTagStrict =
    | liquidTagAssign
    | liquidTagBreak
    | liquidTagContinue
    | liquidTagCycle
    | liquidTagContentFor
    | liquidTagDecrement
    | liquidTagEcho
    | liquidTagElse
    | liquidTagElsif
    | liquidTagInclude
    | liquidTagIncrement
    | liquidTagLayout
    | liquidTagLiquid
    | liquidTagRender
    | liquidTagSection
    | liquidTagSections
    | liquidTagWhen

  liquidTag =
    | liquidTagStrict
    | liquidTagBaseCase

  liquidTagOpenStrict =
    | liquidTagOpenCase
    | liquidTagOpenCapture
    | liquidTagOpenForm
    | liquidTagOpenFor
    | liquidTagOpenTablerow
    | liquidTagOpenIf
    | liquidTagOpenPaginate
    | liquidTagOpenUnless

  liquidTagOpen =
    | liquidTagOpenStrict
    | liquidTagOpenBaseCase

  liquidTagClose = "{%" "-"? space* "end" blockName space* tagMarkup "-"? "%}"

  // These two are the same but transformed differently
  liquidTagRule<name, markup> =
    "{%" "-"? space* (name endOfIdentifier) space* markup "-"? "%}"
  liquidTagOpenRule<name, markup> =
    "{%" "-"? space* (name endOfIdentifier) space* markup "-"? "%}"

  liquidTagBaseCase = liquidTagRule<liquidTagName, tagMarkup>

  liquidTagEcho = liquidTagRule<"echo", liquidTagEchoMarkup>
  liquidTagEchoMarkup = liquidVariable<delimTag>

  liquidTagAssign = liquidTagRule<"assign", liquidTagAssignMarkup>
  liquidTagAssignMarkup = variableSegment space* "=" space* liquidVariable<delimTag>

  liquidTagCycle = liquidTagRule<"cycle", liquidTagCycleMarkup>
  liquidTagCycleMarkup = (liquidExpression<delimTag> ":")? space* nonemptyListOf<liquidExpression<delimTag>, argumentSeparator> space*

  liquidTagIncrement = liquidTagRule<"increment", variableSegmentAsLookupMarkup>
  liquidTagDecrement = liquidTagRule<"decrement", variableSegmentAsLookupMarkup>
  liquidTagOpenCapture = liquidTagOpenRule<"capture", variableSegmentAsLookupMarkup>
  variableSegmentAsLookupMarkup = variableSegmentAsLookup space*

  liquidTagSection = liquidTagRule<"section", liquidTagSectionMarkup>
  liquidTagSectionMarkup = liquidString<delimTag> space*

  liquidTagSections = liquidTagRule<"sections", liquidTagSectionsMarkup>
  liquidTagSectionsMarkup = liquidString<delimTag> space*

  liquidTagLayout = liquidTagRule<"layout", liquidTagLayoutMarkup>
  liquidTagLayoutMarkup = liquidExpression<delimTag> space*

  // We'll black hole the statement and switch parser in the cst builder
  // We do this because it's technically the same grammar (with minor redefinitions)
  // and it would be a huge chore and maintenance hell to rewrite all the rules with
  // hspace = " " | "\t"
  //
  // The alternative is that this grammar parses the {% liquid tagMarkup %} as its own string,
  // and then we switch to the LiquidStatement grammar that
  // redefines liquidTagOpenRule, liquidTagRule, and space.
  liquidTagLiquid = liquidTagRule<"liquid", liquidTagLiquidMarkup>
  liquidTagLiquidMarkup = tagMarkup

  liquidTagContentFor = liquidTagRule<"content_for", liquidTagContentForMarkup>

  liquidTagContentForMarkup =
    contentForType (argumentSeparatorOptionalComma contentForTagArgument) (space* ",")? space*

  contentForTagArgument = listOf<contentForNamedArgument<delimTag>, argumentSeparatorOptionalComma>
  completionModeContentForTagArgument = listOf<contentForNamedArgument<delimTag>, argumentSeparatorOptionalComma> (argumentSeparator? (liquidVariableLookup<delimTag>))?
  contentForNamedArgument<delim> = (variableSegment ("." variableSegment)*) space* ":" space* (liquidExpression<delim>)

  contentForType = liquidString<delimTag>

  liquidTagInclude = liquidTagRule<"include", liquidTagRenderMarkup>
  liquidTagRender = liquidTagRule<"render", liquidTagRenderMarkup>
  liquidTagRenderMarkup =
    snippetExpression renderVariableExpression? renderAliasExpression? renderArguments

  renderArguments = (argumentSeparatorOptionalComma tagArguments) (space* ",")? space*
  completionModeRenderArguments = (argumentSeparatorOptionalComma tagArguments) (space* ",")? space* (argumentSeparator? liquidVariableLookup<delimTag> space*)?
  snippetExpression = liquidString<delimTag> | variableSegmentAsLookup
  renderVariableExpression = space+ ("for" | "with") space+ liquidExpression<delimTag>
  renderAliasExpression = space+ "as" space+ variableSegment

  liquidTagOpenBaseCase = liquidTagOpenRule<blockName, tagMarkup>

  liquidTagOpenForm = liquidTagOpenRule<"form", liquidTagOpenFormMarkup>
  liquidTagOpenFormMarkup = arguments<delimTag> (space* ",")? space*

  liquidTagOpenFor = liquidTagOpenRule<"for", liquidTagOpenForMarkup>
  liquidTagOpenForMarkup =
    variableSegment space* "in" space* liquidExpression<delimTag>
    (space* "reversed")? argumentSeparatorOptionalComma
    tagArguments (space* ",")? space*

  // It's the same, the difference is support for different named arguments<delim>
  liquidTagOpenTablerow = liquidTagOpenRule<"tablerow", liquidTagOpenForMarkup>

  liquidTagOpenCase = liquidTagOpenRule<"case", liquidTagOpenCaseMarkup>
  liquidTagOpenCaseMarkup = liquidExpression<delimTag> space*

  liquidTagWhen = liquidTagRule<"when", liquidTagWhenMarkup>
  liquidTagWhenMarkup = nonemptyListOf<liquidExpression<delimTag>, whenMarkupSep> space*
  whenMarkupSep = space* ("," | "or" ~identifier) space*

  liquidTagOpenIf = liquidTagOpenRule<"if", liquidTagOpenConditionalMarkup>
  liquidTagOpenUnless = liquidTagOpenRule<"unless", liquidTagOpenConditionalMarkup>
  liquidTagElsif = liquidTagRule<"elsif", liquidTagOpenConditionalMarkup>

  liquidTagBreak = liquidTagRule<"break", empty>
  liquidTagContinue = liquidTagRule<"continue", empty>
  liquidTagElse = liquidTagRule<"else", empty>

  liquidTagOpenConditionalMarkup = nonemptyListOf<condition<delimTag>, conditionSeparator> space*
  conditionSeparator = &logicalOperator
  condition<delim> = logicalOperator? space* (comparison<delim> | liquidExpression<delim>) space*
  logicalOperator = ("and" | "or") ~identifier
  comparison<delim> = liquidExpression<delim> space* comparator space* liquidExpression<delim>
  comparator =
    ( "=="
    | "!="
    | ">="
    | "<="
    | ">"
    | "<")
    | ("contains" ~identifier)

  liquidTagOpenPaginate = liquidTagOpenRule<"paginate", liquidTagOpenPaginateMarkup>
  liquidTagOpenPaginateMarkup =
    liquidExpression<delimTag> space+ "by" space+ liquidExpression<delimTag> argumentSeparatorOptionalComma tagArguments (space* ",")? space*

  liquidDrop = "{{" "-"? space* liquidDropCases "-"? "}}"
  liquidDropCases = liquidVariable<delimVO> | liquidDropBaseCase
  liquidDropBaseCase = anyExceptStar<delimVO>
  liquidInlineComment = "{%" "-"? space* "#" space? tagMarkup "-"? "%}"

  liquidRawTag =
    | liquidRawTagImpl<"raw">
    | liquidRawTagImpl<"javascript">
    | liquidRawTagImpl<"schema">
    | liquidRawTagImpl<"stylesheet">
    | liquidRawTagImpl<"style">
  liquidRawTagImpl<name> =
    "{%" "-"? space* (name endOfIdentifier) space* tagMarkup "-"? "%}"
    anyExceptStar<liquidRawTagClose<name>>
    "{%" "-"? space* "end" (name endOfIdentifier) space* "-"? "%}"
  liquidRawTagClose<name> =
    "{%" "-"? space* "end" (name endOfIdentifier) space* "-"? "%}"

  liquidBlockComment =
    commentBlockStart
      (liquidBlockComment | anyExceptPlus<(commentBlockStart | commentBlockEnd)>)*
    commentBlockEnd
  commentBlockStart = "{%" "-"? space* ("comment"    endOfIdentifier) space* tagMarkup "-"? "%}"
  commentBlockEnd   = "{%" "-"? space* ("endcomment" endOfIdentifier) space* tagMarkup "-"? "%}"

  liquidDoc =
    liquidDocStart
      liquidDocBody
    liquidDocEnd

  liquidDocStart = "{%" "-"? space* ("doc" endOfIdentifier) space* tagMarkup "-"? "%}"
  liquidDocEnd = "{%" "-"? space* ("enddoc" endOfIdentifier) space* tagMarkup "-"? "%}"
  liquidDocBody = anyExceptStar<(liquidDocStart | liquidDocEnd)>

  // In order for the grammar to "fallback" to the base case, this
  // rule must pass if and only if we support what we parse. This
  // implies that—since we don't support filters yet—we have a
  // positive lookahead on "-}}" or "}}" in the rule. We do this
  // because we'd otherwise positively match the following string
  // instead of falling back to the other rule:
  // {{ 'string' | some_filter }}
  liquidVariable<delim> = liquidExpression<delim> liquidFilter<delim>* space* &delim

  liquidExpression<delim> =
    | liquidString<delim>
    | liquidNumber
    | liquidLiteral
    | liquidRange<delim>
    | liquidVariableLookup<delim>

  liquidString<delim> = liquidSingleQuotedString<delim> | liquidDoubleQuotedString<delim>
  liquidSingleQuotedString<delim> = "'" anyExceptStar<("'"| delim)> "'"
  liquidDoubleQuotedString<delim> = "\"" anyExceptStar<("\""| delim)> "\""

  liquidNumber = liquidFloat | liquidInteger
  liquidInteger = "-"? digit+
  liquidFloat = "-"? digit+ "." digit+

  liquidLiteral =
    ( "true"
    | "false"
    | "blank"
    | "empty"
    | "nil"
    | "null"
    ) endOfIdentifier

  liquidRange<delim> =
    "(" space* liquidExpression<delim> space* ".." space* liquidExpression<delim> space* ")"

  liquidVariableLookup<delim> =
    | variableSegment lookup<delim>*
    | empty lookup<delim>+
  lookup<delim> =
    | indexLookup<delim>
    | dotLookup
  indexLookup<delim> = space* "[" space* liquidExpression<delim> space* "]"
  dotLookup = space* "." space* identifier

  liquidFilter<delim> = space* "|" space* identifier (space* ":" space* arguments<delim> (space* ",")?)?

  arguments<delim> = nonemptyOrderedListOf<positionalArgument<delim>, namedArgument<delim>, argumentSeparator>
  argumentSeparator = space* "," space*
  argumentSeparatorOptionalComma = space* ","? space*
  positionalArgument<delim> = liquidExpression<delim> ~(space* ":")
  namedArgument<delim> = variableSegment space* ":" space* liquidExpression<delim>
  tagArguments = listOf<namedArgument<delimTag>, argumentSeparatorOptionalComma>
  filterArguments<delim> =
    | complexArguments<delim>
    | simpleArgument<delim>
  complexArguments<delim> = arguments<delim> (space* "," space* simpleArgument<delim>)?
  simpleArgument<delim> = liquidVariableLookup<delim>

  variableSegment = (letter | "_") (~endOfTagName identifierCharacter)*
  variableSegmentAsLookup = variableSegment
  identifier = variableSegment "?"?

  tagMarkup = anyExceptStar<delimTag>

  liquidTagName =
    letter (alnum | "_")*

  blockName =
    // Shopify blocks
    ( "form"
    | "paginate"
    // Base blocks
    | "capture"
    | "case"
    | "for"
    | "ifchanged"
    | "if"
    | "unless"
    | "tablerow"
    ) endOfIdentifier

  delimTag = "-%}" | "%}"
  delimVO = "-}}" | "}}"
}

LiquidStatement <: Liquid {
  Node := listOf<LiquidStatement, statementSep> (space | newline)*

  // This is the big brains moment: we redefine space to exclude newlines.
  //
  // Which means that all our other Liquid rules can be reused
  // without modification(!)
  //
  // We don't need to maintain rules like this:
  // - liquidVariable<space>
  // - liquidExpression<space>
  // - variableLookup<space>
  // - ... long list of stuff that takes space as param
  // - liquidString<space>
  //
  // All we need is this little, VERY IMPORTANT, part right here that
  // make it so we can parse the same way in Liquid tags.
  //
  // I'm putting in this huge comment so that it's more obvious.
  space := " " | "\t"

  LiquidStatement =
    | liquidBlockComment
    | liquidRawTag
    | liquidTagClose
    | liquidTagOpen
    | liquidTag
    | liquidInlineComment

  liquidTagOpenRule<name, markup>
    := (name ~identifierCharacter) space* markup &liquidStatementEnd

  liquidTagRule<name, markup>
    := (name ~identifierCharacter) space* markup &liquidStatementEnd

  liquidTagClose
    := "end" (blockName ~identifierCharacter) space* tagMarkup &liquidStatementEnd

  liquidRawTagImpl<name>
    := (name ~identifierCharacter) space* tagMarkup newline
      anyExceptStar<liquidRawTagClose<name>>
      "end" name space* &liquidStatementEnd

  liquidRawTagClose<name>
    := "end" name space* &liquidStatementEnd

  liquidBlockComment :=
    commentBlockStart statementSep
      (listOf<liquidCommentBlockStatement, statementSep> statementSep)?
    commentBlockEnd

  liquidCommentBlockStatement =
    | liquidBlockComment
    | nonTerminalCommentLine

  commentBlockStart
    := ("comment" ~identifierCharacter) space* tagMarkup

  commentBlockEnd
    := ("endcomment" ~identifierCharacter) space* tagMarkup

  nonTerminalCommentLine
    = ~commentBlockEnd anyExceptPlus<newline>

  liquidInlineComment
    := "#" space? tagMarkup &liquidStatementEnd

  tagMarkup := anyExceptStar<liquidStatementEnd>

  // trailing whitespace, newline, + anything else before the next tag
  statementSep = space* newline (space | newline)*

  liquidStatementEnd = newline | end
  delimTag := liquidStatementEnd
}

LiquidDoc <: Helpers {
  Node := (LiquidDocNode | TextNode)*
  LiquidDocNode =
    | paramNode
    | exampleNode
    | descriptionNode
    | fallbackNode
    
  // By default, space matches new lines as well. We override it here to make writing rules easier.
  strictSpace = " " | "\t"
  // We use this as an escape hatch to stop matching TextNode and try again when one of these characters is encountered
  openControl:= "@" | end

  descriptionNode = "@description" strictSpace* descriptionContent
  descriptionContent = anyExceptStar<endOfDescription>
  endOfDescription = strictSpace* openControl

  paramNode = "@param" strictSpace* paramType? strictSpace* (optionalParamName | paramName) (strictSpace* "-")? strictSpace* paramDescription
  paramType = "{" strictSpace* paramTypeContent strictSpace* "}"
  paramTypeContent = anyExceptStar<("}"| strictSpace)>

  paramName = textValue
  optionalParamName = "[" strictSpace* textValue strictSpace* "]"
  textValue = identifierCharacter+

  paramDescription = (~"]" anyExceptStar<endOfParam>)
  endOfParam = strictSpace* (newline | end)

  exampleNode = "@example" strictSpace* exampleContent
  exampleContent = anyExceptStar<endOfExample>
  endOfExample =  strictSpace* ("@" | end)

  fallbackNode = "@" anyExceptStar<endOfParam>
}

LiquidHTML <: Liquid {
  Node := yamlFrontmatter? (HtmlNode | liquidNode | TextNode)*
  openControl += "<"

  yamlFrontmatter =
    "---" newline anyExceptStar<"---"> "---" newline

  HtmlNode =
    | HtmlDoctype
    | HtmlComment
    | HtmlRawTag
    | HtmlVoidElement
    | HtmlSelfClosingElement
    | HtmlTagClose
    | HtmlTagOpen

  // https://html.spec.whatwg.org/multipage/syntax.html#the-doctype
  HtmlDoctype =
    #("<!" caseInsensitive<"doctype"> space+ caseInsensitive<"html">) legacyDoctypeString? ">"
  legacyDoctypeString
    = anyExceptPlus<">">

  HtmlComment = "<!--" #(anyExceptStar<"-->"> "-->")

  // These are black holes, we'll ignore what's in them
  HtmlRawTag =
    | HtmlRawTagImpl<"script">
    | HtmlRawTagImpl<"style">
    | HtmlRawTagImpl<"svg">

  HtmlRawTagImpl<name> =
    TagStart<name>
      (HtmlRawTagImpl<name> | AnyExceptPlus<(TagStart<name> | TagEnd<name>)>)*
    TagEnd<name>
  TagStart<name> = "<" name AttrList ">"
  TagEnd<name> = "</" name ">"

  HtmlVoidElement =
    #("<" voidElementName &(space | "/" | ">")) AttrList "/"? ">"

  HtmlSelfClosingElement =
    #("<" tagName) AttrList "/>"

  HtmlTagOpen =
    #("<" tagName) AttrList ">"

  HtmlTagClose =
    #("</" tagName) ">"

  tagName = leadingTagNamePart trailingTagNamePart*

  // The difference here is that the first text part must start
  // with a letter, but trailing text parts don't have that
  // requirement
  leadingTagNamePart =
    | liquidDrop
    | leadingTagNameTextNode

  trailingTagNamePart =
    | liquidDrop
    | trailingTagNameTextNode

  leadingTagNameTextNode = letter (alnum | "-" | ":")*
  trailingTagNameTextNode = (alnum | "-" | ":")+

  AttrList = Attr*

  Attr =
    AttrSingleQuoted | AttrDoubleQuoted | AttrUnquoted | liquidNode | attrEmpty

  attrEmpty = attrName

  AttrUnquoted = attrName "=" attrUnquotedValue
  AttrSingleQuoted = attrName "=" singleQuote #(attrSingleQuotedValue singleQuote)
  AttrDoubleQuoted = attrName "=" doubleQuote #(attrDoubleQuotedValue doubleQuote)

  attrName = (liquidDrop | attrNameTextNode)+

  // https://html.spec.whatwg.org/#attributes-2
  attrNameTextNode = anyExceptPlus<(space | quotes | "=" | ">" | "/>" | "{{" | "{%" | controls | noncharacters)>
  attrUnquotedValue = (liquidDrop | attrUnquotedTextNode)*
  attrSingleQuotedValue = (liquidNode | attrSingleQuotedTextNode)*
  attrDoubleQuotedValue = (liquidNode | attrDoubleQuotedTextNode)*

  attrUnquotedTextNode = anyExceptPlus<(space | quotes | "=" | "<" | ">" | "${"`"}" | "{{" | "{%")>
  attrSingleQuotedTextNode = anyExceptPlus<(singleQuote | "{{" | "{%")>
  attrDoubleQuotedTextNode = anyExceptPlus<(doubleQuote | "{{" | "{%")>

  quotes = singleQuote | doubleQuote

  // https://www.w3.org/TR/2011/WD-html-markup-20110113/syntax.html#void-element
  voidElementName =
    ( caseInsensitive<"area">
    | caseInsensitive<"base">
    | caseInsensitive<"br">
    | caseInsensitive<"col">
    | caseInsensitive<"command">
    | caseInsensitive<"embed">
    | caseInsensitive<"hr">
    | caseInsensitive<"img">
    | caseInsensitive<"input">
    | caseInsensitive<"keygen">
    | caseInsensitive<"link">
    | caseInsensitive<"meta">
    | caseInsensitive<"param">
    | caseInsensitive<"source">
    | caseInsensitive<"track">
    | caseInsensitive<"wbr">
    ) ~identifierCharacter
}

StrictLiquid <: Liquid {
  liquidTag := liquidTagStrict
  liquidTagOpen := liquidTagOpenStrict
}

StrictLiquidStatement <: LiquidStatement {
  liquidTag := liquidTagStrict
  liquidTagOpen := liquidTagOpenStrict
}

StrictLiquidHTML <: LiquidHTML {
  liquidTag := liquidTagStrict
  liquidTagOpen := liquidTagOpenStrict
}

WithPlaceholderLiquid <: Liquid {
  liquidFilter<delim> := space* "|" space* identifier (space* ":" space* filterArguments<delim> (space* ",")?)?
  liquidTagContentForMarkup :=
    contentForType (argumentSeparatorOptionalComma completionModeContentForTagArgument) (space* ",")? space*
  liquidTagRenderMarkup :=
    snippetExpression renderVariableExpression? renderAliasExpression? completionModeRenderArguments
  liquidTagName := (letter | "█") (alnum | "_")*
  variableSegment := (letter | "_" | "█") (identifierCharacter | "█")*
  liquidDoc :=
    liquidDocStart
      liquidDocBody
    liquidDocEnd?
}

WithPlaceholderLiquidStatement <: LiquidStatement {
  liquidFilter<delim> := space* "|" space* identifier (space* ":" space* filterArguments<delim> (space* ",")?)?
  liquidTagContentForMarkup :=
    contentForType (argumentSeparatorOptionalComma completionModeContentForTagArgument) (space* ",")? space*
  liquidTagRenderMarkup :=
    snippetExpression renderVariableExpression? renderAliasExpression? completionModeRenderArguments
  liquidTagName := (letter | "█") (alnum | "_")*
  variableSegment := (letter | "_" | "█") (identifierCharacter | "█")*
  liquidDoc :=
    liquidDocStart
      liquidDocBody
    liquidDocEnd?
}

WithPlaceholderLiquidHTML <: LiquidHTML {
  liquidFilter<delim> := space* "|" space* identifier (space* ":" space* filterArguments<delim> (space* ",")?)?
  liquidTagContentForMarkup :=
    contentForType (argumentSeparatorOptionalComma completionModeContentForTagArgument) (space* ",")? space*
  liquidTagRenderMarkup :=
    snippetExpression renderVariableExpression? renderAliasExpression? completionModeRenderArguments
  liquidTagName := (letter | "█") (alnum | "_")*
  variableSegment := (letter | "_" | "█") (identifierCharacter | "█")*
  leadingTagNameTextNode := (letter | "█") (alnum | "-" | ":" | "█")*
  trailingTagNameTextNode := (alnum | "-" | ":" | "█")+
  liquidDoc :=
    liquidDocStart
      liquidDocBody
    liquidDocEnd?
}
`;

/***/ }),

/***/ 4104:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileType = void 0;
var FileType;
(function (FileType) {
    FileType[FileType["Unknown"] = 0] = "Unknown";
    FileType[FileType["File"] = 1] = "File";
    FileType[FileType["Directory"] = 2] = "Directory";
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType = exports.FileType || (exports.FileType = {}));
//# sourceMappingURL=AbstractFileSystem.js.map

/***/ }),

/***/ 2908:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AugmentedThemeDocset = void 0;
const utils_1 = __webpack_require__(6671);
const toFilterEntry = (name) => ({ name });
const aliasedFilters = ['camelcase', 'handle', 't'];
const undocumentedFilters = [
    '_online_store_editor_live_setting',
    'addresses_url',
    'app_block_path?',
    'app_block_path_for',
    'app_extension_path?',
    'app_snippet_path?',
    'cancel_customer_order_link',
    'debug',
    'delete_customer_address_link',
    'dev_shop?',
    'distance_from',
    'edit_customer_address_link',
    'encode_url_component',
    'excerpt',
    'format_code',
    'global_block_type?',
    'h',
    'handle_from',
    'installments_pricing',
    'link_to_theme',
    'login_button',
    'login_url',
    'logout_url',
    'pad_spaces',
    'paragraphize',
    'recover_password_link',
    'recover_url',
    'register_url',
    'registration_uuid_from',
    'root_account_url',
    'sentence',
    'theme_url',
    'unit',
    'weight',
];
const undocumentedObjectEntryKeys = [
    'locale',
    'direction',
    'skip_to_content_link',
    'checkout_html_classes',
    'checkout_stylesheets',
    'checkout_scripts',
    'content_for_logo',
    'breadcrumb',
    'order_summary_toggle',
    'content_for_order_summary',
    'alternative_payment_methods',
    'content_for_footer',
    'tracking_code',
];
const toObjectEntry = (name, access, returnType) => ({
    name,
    ...(access && { access }),
    ...(returnType && { return_type: returnType }),
});
const undocumentedObjects = ['customer_address', 'product_variant'];
const legacyCheckoutEntries = undocumentedObjectEntryKeys.map((objectKey) => toObjectEntry(objectKey, { global: false, parents: [], template: [] }, [
    { type: 'string', name: '' },
]));
const toTagEntry = (name) => ({ name });
const undocumentedTags = ['elsif', 'ifchanged', 'when', 'schema'];
class AugmentedThemeDocset {
    constructor(themeDocset) {
        this.themeDocset = themeDocset;
        this.isAugmented = true;
        this.filters = (0, utils_1.memo)(async () => {
            return [
                ...(await this.themeDocset.filters()),
                ...aliasedFilters.map(toFilterEntry),
                ...undocumentedFilters.map(toFilterEntry),
            ];
        });
        this.objects = (0, utils_1.memo)(async () => {
            return [
                ...(await this.themeDocset.objects()),
                ...undocumentedObjects.map((obj) => toObjectEntry(obj)),
                ...legacyCheckoutEntries,
            ];
        });
        this.tags = (0, utils_1.memo)(async () => {
            return [...(await this.themeDocset.tags()), ...undocumentedTags.map(toTagEntry)];
        });
        this.systemTranslations = (0, utils_1.memo)(async () => {
            return this.themeDocset.systemTranslations();
        });
    }
}
exports.AugmentedThemeDocset = AugmentedThemeDocset;
//# sourceMappingURL=AugmentedThemeDocset.js.map

/***/ }),

/***/ 9753:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isValid = exports.JSONValidator = void 0;
const vscode_json_languageservice_1 = __webpack_require__(2624);
const utils_1 = __webpack_require__(6671);
class JSONValidator {
    static async create(jsonValidationSet, config) {
        if (!jsonValidationSet)
            return;
        return new JSONValidator(await jsonValidationSet.schemas(config.context));
    }
    constructor(schemas) {
        /**
         * Will return an array of diagnostics for the given source code and JSON string.
         *
         * It's up to the caller to determine where in the file those should be.
         * (presumably by doing some offset logic)
         */
        this.validate = async (uri, jsonString) => {
            const jsonTextDocument = vscode_json_languageservice_1.TextDocument.create(uri, 'json', 0, jsonString);
            const diagnostics = await this.getOffsetDiagnostics(jsonTextDocument);
            return diagnostics.map((diagnostic) => ({
                message: diagnostic.message,
                startIndex: jsonTextDocument.offsetAt(diagnostic.range.start),
                endIndex: jsonTextDocument.offsetAt(diagnostic.range.end),
            }));
        };
        this.isValid = async (uri, jsonString) => {
            return isValid(this.service, uri, jsonString);
        };
        this.schemas = (0, utils_1.indexBy)((x) => x.uri, schemas);
        this.service = (0, vscode_json_languageservice_1.getLanguageService)({
            schemaRequestService: this.getSchemaForURI.bind(this),
            workspaceContext: {
                resolveRelativePath: (relativePath, resource) => {
                    const url = new URL(relativePath, resource);
                    return url.toString();
                },
            },
        });
        this.service.configure({
            schemas: schemas.map((schemaDefinition) => ({
                uri: schemaDefinition.uri,
                fileMatch: schemaDefinition.fileMatch,
            })),
        });
    }
    async getOffsetDiagnostics(jsonTextDocument) {
        const jsonDocument = this.service.parseJSONDocument(jsonTextDocument);
        return this.service.doValidation(jsonTextDocument, jsonDocument, {
            schemaValidation: 'error',
            trailingCommas: 'ignore',
            comments: 'ignore',
        });
    }
    async getSchemaForURI(uri) {
        var _a;
        const schema = (_a = this.schemas[uri]) === null || _a === void 0 ? void 0 : _a.schema;
        if (!schema)
            return `No schema for '${uri}' found`;
        return schema;
    }
}
exports.JSONValidator = JSONValidator;
/** We'll reuse this in the language server */
async function isValid(service, uri, jsonString) {
    const jsonTextDocument = vscode_json_languageservice_1.TextDocument.create(uri, 'json', 0, jsonString);
    const jsonDocument = service.parseJSONDocument(jsonTextDocument);
    const diagnostics = await service.doValidation(jsonTextDocument, jsonDocument, {
        schemaValidation: 'error',
        trailingCommas: 'ignore',
        comments: 'ignore',
    });
    return diagnostics.every((diagnostic) => diagnostic.severity !== 1);
}
exports.isValid = isValid;
//# sourceMappingURL=JSONValidator.js.map

/***/ }),

/***/ 2538:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppBlockMissingSchema = void 0;
const types_1 = __webpack_require__(2660);
exports.AppBlockMissingSchema = {
    meta: {
        code: 'AppBlockMissingSchema',
        name: 'Missing schema definitions in theme app extensions app blocks should be avoided',
        docs: {
            description: 'Report missing schema definitions in theme app extensions app blocks',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/app-block-missing-schema',
        },
        severity: types_1.Severity.ERROR,
        type: types_1.SourceCodeType.LiquidHtml,
        schema: {},
        targets: [types_1.ConfigTarget.ThemeAppExtension],
    },
    create(context) {
        let foundSchema = false;
        const relativePath = context.toRelativePath(context.file.uri);
        /**
         * Theme app extension blocks are the only types of files that can have a
         * schema defined in them.
         */
        if (!relativePath.startsWith('blocks/')) {
            return {};
        }
        return {
            async LiquidRawTag(node) {
                if (node.name == 'schema')
                    foundSchema = true;
            },
            async onCodePathEnd() {
                if (!foundSchema) {
                    context.report({
                        message: `The schema does not exist`,
                        startIndex: 0,
                        endIndex: 0,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8014:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppBlockValidTags = exports.ForbiddenTag = void 0;
const types_1 = __webpack_require__(2660);
var ForbiddenTag;
(function (ForbiddenTag) {
    ForbiddenTag["JavaScript"] = "javascript";
    ForbiddenTag["StyleSheet"] = "stylesheet";
    ForbiddenTag["Include"] = "include";
    ForbiddenTag["Layout"] = "layout";
    ForbiddenTag["Section"] = "section";
    ForbiddenTag["Sections"] = "sections";
})(ForbiddenTag = exports.ForbiddenTag || (exports.ForbiddenTag = {}));
const isForbiddenTag = (value) => {
    return Object.values(ForbiddenTag).includes(value);
};
const buildErrorMessage = (tag) => `Theme app extension blocks cannot contain '${tag}' tags`;
exports.AppBlockValidTags = {
    meta: {
        code: 'AppBlockValidTags',
        name: 'App Block Valid Tags',
        docs: {
            description: 'Identifies forbidden Liquid tags in theme app extension app block and app embed block code.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/app-block-valid-tags',
            recommended: false,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [types_1.ConfigTarget.ThemeAppExtension],
    },
    create(context) {
        const handleForbiddenTags = async (node) => {
            if (isForbiddenTag(node.name)) {
                // When a forbidden tag is used to define a block section
                // with an end tag, highlight the whole section
                const endIndex = node.blockEndPosition ? node.blockEndPosition.end : node.position.end;
                const startIndex = node.blockStartPosition.start;
                const message = buildErrorMessage(node.name);
                return context.report({ message, startIndex, endIndex });
            }
        };
        return {
            LiquidRawTag: handleForbiddenTags,
            LiquidTag: handleForbiddenTags,
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6292:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssetPreload = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
function isPreload(attr) {
    return ((0, utils_1.isAttr)(attr, 'rel') &&
        attr.value.some((node) => node.type === liquid_html_parser_1.NodeTypes.TextNode && node.value === 'preload'));
}
exports.AssetPreload = {
    meta: {
        code: 'AssetPreload',
        name: 'Prevent Manual Preloading of Assets',
        docs: {
            description: 'This check is aimed at discouraging the manual preloading of assets and encourages the use of appropriate Shopify filters.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/asset-preload',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async HtmlVoidElement(node) {
                var _a;
                const preloadLinkAttr = node.attributes.find((attr) => (0, utils_1.isValuedHtmlAttribute)(attr) && isPreload(attr));
                if (node.name === 'link' && preloadLinkAttr) {
                    const asAttr = node.attributes
                        .filter(utils_1.isValuedHtmlAttribute)
                        .find((attr) => (0, utils_1.isAttr)(attr, 'as'));
                    const assetType = (_a = asAttr === null || asAttr === void 0 ? void 0 : asAttr.value.find((node) => (0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.TextNode, node))) === null || _a === void 0 ? void 0 : _a.value;
                    let message = '';
                    if (assetType === 'style') {
                        message =
                            'For better performance, prefer using the preload argument of the stylesheet_tag filter';
                    }
                    else if (assetType === 'image') {
                        message =
                            'For better performance, prefer using the preload argument of the image_tag filter';
                    }
                    else {
                        message = 'For better performance, prefer using the preload_tag filter';
                    }
                    context.report({
                        message,
                        startIndex: node.position.start,
                        endIndex: node.position.end,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7814:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssetSizeAppBlockCSS = void 0;
const json_1 = __webpack_require__(9151);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const file_utils_1 = __webpack_require__(6025);
const schema = {
    thresholdInBytes: types_1.SchemaProp.number(100000),
};
exports.AssetSizeAppBlockCSS = {
    meta: {
        code: 'AssetSizeAppBlockCSS',
        name: 'Asset Size App Block CSS',
        docs: {
            description: 'This check is aimed at preventing large CSS bundles from being included via Theme App Extensions.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/asset-size-app-block-css',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema,
        targets: [types_1.ConfigTarget.ThemeAppExtension],
    },
    create(context) {
        if (!context.fileSize) {
            return {};
        }
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema')
                    return;
                const schema = (0, json_1.parseJSON)(node.body.value);
                if ((0, utils_1.isError)(schema))
                    return;
                const stylesheet = schema.stylesheet;
                if (!stylesheet)
                    return;
                const relativePath = `assets/${stylesheet}`;
                const thresholdInBytes = context.settings.thresholdInBytes;
                const startIndex = node.body.position.start + node.body.value.indexOf(stylesheet);
                const endIndex = startIndex + stylesheet.length;
                const fileExists = await (0, file_utils_1.doesFileExist)(context, relativePath);
                if (!fileExists) {
                    context.report({
                        message: `'${stylesheet}' does not exist.`,
                        startIndex: startIndex,
                        endIndex: endIndex,
                    });
                    return;
                }
                const [fileExceedsThreshold, fileSize] = await (0, file_utils_1.doesFileExceedThreshold)(context, relativePath, thresholdInBytes);
                if (fileExceedsThreshold) {
                    context.report({
                        message: `The file size for '${stylesheet}' (${fileSize} B) exceeds the configured threshold (${thresholdInBytes} B)`,
                        startIndex: startIndex,
                        endIndex: endIndex,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4544:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssetSizeAppBlockJavaScript = void 0;
const json_1 = __webpack_require__(9151);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const file_utils_1 = __webpack_require__(6025);
const schema = {
    thresholdInBytes: types_1.SchemaProp.number(10000),
};
exports.AssetSizeAppBlockJavaScript = {
    meta: {
        code: 'AssetSizeAppBlockJavaScript',
        name: 'Asset Size App Block JavaScript',
        docs: {
            description: 'This check is aimed at preventing large JavaScript bundles from being included via Theme App Extensions.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/asset-size-app-block-javascript',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema,
        targets: [types_1.ConfigTarget.ThemeAppExtension],
    },
    create(context) {
        if (!context.fileSize) {
            return {};
        }
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema')
                    return;
                const schema = (0, json_1.parseJSON)(node.body.value);
                if ((0, utils_1.isError)(schema))
                    return;
                const javascript = schema.javascript;
                if (!javascript)
                    return;
                const relativePath = `assets/${javascript}`;
                const thresholdInBytes = context.settings.thresholdInBytes;
                const startIndex = node.body.position.start + node.body.value.indexOf(javascript);
                const endIndex = startIndex + javascript.length;
                const fileExists = await (0, file_utils_1.doesFileExist)(context, relativePath);
                if (!fileExists) {
                    context.report({
                        message: `'${javascript}' does not exist.`,
                        startIndex: startIndex,
                        endIndex: endIndex,
                    });
                    return;
                }
                const [fileExceedsThreshold, fileSize] = await (0, file_utils_1.doesFileExceedThreshold)(context, relativePath, thresholdInBytes);
                if (fileExceedsThreshold) {
                    context.report({
                        message: `The file size for '${javascript}' (${fileSize} B) exceeds the configured threshold (${thresholdInBytes} B)`,
                        startIndex: startIndex,
                        endIndex: endIndex,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6300:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssetSizeCSS = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const file_utils_1 = __webpack_require__(6025);
const utils_2 = __webpack_require__(3222);
const schema = {
    thresholdInBytes: types_1.SchemaProp.number(100000),
};
function isTextNode(node) {
    return node.type === liquid_html_parser_1.NodeTypes.TextNode;
}
function isLiquidVariableOutput(node) {
    return node.type === liquid_html_parser_1.NodeTypes.LiquidVariableOutput;
}
function isLiquidVariable(node) {
    return typeof node !== 'string' && node.type === liquid_html_parser_1.NodeTypes.LiquidVariable;
}
function isString(node) {
    return node.type === liquid_html_parser_1.NodeTypes.String;
}
exports.AssetSizeCSS = {
    meta: {
        code: 'AssetSizeCSS',
        aliases: ['AssetSizeCSSStylesheetTag'],
        name: 'Prevent Large CSS bundles',
        docs: {
            description: 'This check is aimed at preventing large CSS bundles for speed.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/asset-size-css',
            recommended: false,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema,
        targets: [],
    },
    create(context) {
        if (!context.fileSize) {
            return {};
        }
        const thresholdInBytes = context.settings.thresholdInBytes;
        async function checkRemoteAssetSize(url, position) {
            if (await (0, file_utils_1.hasRemoteAssetSizeExceededThreshold)(url, thresholdInBytes)) {
                context.report({
                    message: `The CSS file size exceeds the threshold of ${thresholdInBytes} bytes`,
                    startIndex: position.start,
                    endIndex: position.end,
                });
            }
        }
        async function checkThemeAssetSize(srcValue, position) {
            if (await (0, file_utils_1.hasLocalAssetSizeExceededThreshold)(context, `assets/${srcValue}`, thresholdInBytes)) {
                context.report({
                    message: `The CSS file size exceeds the threshold of ${thresholdInBytes} bytes`,
                    startIndex: position.start,
                    endIndex: position.end,
                });
            }
        }
        return {
            async HtmlVoidElement(node) {
                if (node.name !== 'link')
                    return;
                const relIsStylesheet = node.attributes
                    .filter(utils_2.isValuedHtmlAttribute)
                    .find((attr) => (0, utils_2.isAttr)(attr, 'rel') && (0, utils_2.valueIncludes)(attr, 'stylesheet'));
                if (!relIsStylesheet)
                    return;
                const href = node.attributes
                    .filter(utils_2.isValuedHtmlAttribute)
                    .find((attr) => (0, utils_2.isAttr)(attr, 'href'));
                if (!href)
                    return;
                if (href.value.length !== 1)
                    return;
                /* This ensures that the link entered is a text and not anything else like http//..{}
                   This also checks if the value starts with 'http://', 'https://' or '//' to ensure its a valid link. */
                if (isTextNode(href.value[0]) && /(https?:)?\/\//.test(href.value[0].value)) {
                    const url = href.value[0].value;
                    await checkRemoteAssetSize(url, href.attributePosition);
                }
                /* This code checks if we have a link with a liquid variable
                and that its a string with one filter, `asset_url`. This is done to ensure our .css link is
                entered with a 'asset_url' to produce valid output. */
                if (isLiquidVariableOutput(href.value[0]) &&
                    isLiquidVariable(href.value[0].markup) &&
                    isString(href.value[0].markup.expression) &&
                    href.value[0].markup.filters.length === 1 &&
                    href.value[0].markup.filters[0].name === 'asset_url') {
                    const assetName = href.value[0].markup.expression.value;
                    await checkThemeAssetSize(assetName, href.attributePosition);
                }
            },
            async LiquidFilter(node, ancestors) {
                if (node.name !== 'stylesheet_tag')
                    return;
                const liquidVariableParent = (0, utils_1.last)(ancestors);
                if (!liquidVariableParent || !(0, utils_2.isNodeOfType)(liquid_html_parser_1.NodeTypes.LiquidVariable, liquidVariableParent))
                    return;
                if (liquidVariableParent.expression.type !== liquid_html_parser_1.NodeTypes.String)
                    return;
                /* This code ensures we have a liquid variable with 1 expression, 1 filter, and that it is a valid http link.
                   This is done to ensure a valid http link is entered with 1 filter being the `stylesheet_tag` for valid output. */
                if (liquidVariableParent.expression.value[0].length == 1 &&
                    liquidVariableParent.filters.length == 1 &&
                    /(https?:)?\/\//.test(liquidVariableParent.expression.value)) {
                    const url = liquidVariableParent.expression.value;
                    await checkRemoteAssetSize(url, liquidVariableParent.expression.position);
                }
                /* This code ensures we have a liquid variable with 1 expression, 2 filters being asset_url and stylesheet_tag
                   This is done to ensure a .css file has the 'asset_url' and 'stylesheet_tag' to produce the appropriate output. */
                if (liquidVariableParent.expression.value[0].length == 1 &&
                    liquidVariableParent.filters.length == 2 &&
                    liquidVariableParent.filters[0].name === 'asset_url' &&
                    liquidVariableParent.filters[1].name === 'stylesheet_tag') {
                    const css = liquidVariableParent.expression.value;
                    await checkThemeAssetSize(css, liquidVariableParent.position);
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6842:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssetSizeJavaScript = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const file_utils_1 = __webpack_require__(6025);
const utils_2 = __webpack_require__(3222);
const schema = {
    thresholdInBytes: types_1.SchemaProp.number(10000),
};
function isTextNode(node) {
    return node.type === liquid_html_parser_1.NodeTypes.TextNode;
}
function isLiquidVariableOutput(node) {
    return node.type === liquid_html_parser_1.NodeTypes.LiquidVariableOutput;
}
function isLiquidVariable(node) {
    return typeof node !== 'string' && node.type === liquid_html_parser_1.NodeTypes.LiquidVariable;
}
function isString(node) {
    return node.type === liquid_html_parser_1.NodeTypes.String;
}
exports.AssetSizeJavaScript = {
    meta: {
        code: 'AssetSizeJavaScript',
        name: 'Prevent Large JavaScript bundles',
        docs: {
            description: 'This check is aimed at preventing large JavaScript bundles for speed.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/asset-size-javascript',
            recommended: false,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema,
        targets: [],
    },
    create(context) {
        if (!context.fileSize) {
            return {};
        }
        const thresholdInBytes = context.settings.thresholdInBytes;
        async function checkRemoteAssetSize(url, position) {
            if (await (0, file_utils_1.hasRemoteAssetSizeExceededThreshold)(url, thresholdInBytes)) {
                context.report({
                    message: `JavaScript on every page load exceeds compressed size threshold (${thresholdInBytes} Bytes), consider using the import on interaction pattern.`,
                    startIndex: position.start,
                    endIndex: position.end,
                });
            }
        }
        async function checkThemeAssetSize(srcValue, position) {
            if (await (0, file_utils_1.hasLocalAssetSizeExceededThreshold)(context, `assets/${srcValue}`, thresholdInBytes)) {
                context.report({
                    message: `JavaScript on every page load exceeds compressed size threshold (${thresholdInBytes} Bytes), consider using the import on interaction pattern.`,
                    startIndex: position.start,
                    endIndex: position.end,
                });
            }
        }
        return {
            async HtmlRawNode(node) {
                if (node.name !== 'script')
                    return;
                const src = node.attributes
                    .filter(utils_2.isValuedHtmlAttribute)
                    .find((attr) => (0, utils_2.isAttr)(attr, 'src'));
                if (!src)
                    return;
                if (src.value.length !== 1)
                    return;
                if (isTextNode(src.value[0]) && /(https?:)?\/\//.test(src.value[0].value)) {
                    const url = src.value[0].value;
                    await checkRemoteAssetSize(url, src.attributePosition);
                }
                if (isLiquidVariableOutput(src.value[0]) &&
                    isLiquidVariable(src.value[0].markup) &&
                    isString(src.value[0].markup.expression) &&
                    src.value[0].markup.filters.length === 1 &&
                    src.value[0].markup.filters[0].name === 'asset_url') {
                    const assetName = src.value[0].markup.expression.value;
                    await checkThemeAssetSize(assetName, src.attributePosition);
                }
            },
            async LiquidFilter(node, ancestors) {
                if (node.name !== 'script_tag')
                    return;
                const liquidVariableParent = (0, utils_1.last)(ancestors);
                if (!liquidVariableParent || !(0, utils_2.isNodeOfType)(liquid_html_parser_1.NodeTypes.LiquidVariable, liquidVariableParent))
                    return;
                if (liquidVariableParent.expression.type !== liquid_html_parser_1.NodeTypes.String)
                    return;
                if (liquidVariableParent.expression.value[0].length == 1 &&
                    liquidVariableParent.filters.length == 1 &&
                    /(https?:)?\/\//.test(liquidVariableParent.expression.value)) {
                    const url = liquidVariableParent.expression.value;
                    await checkRemoteAssetSize(url, liquidVariableParent.expression.position);
                }
                if (liquidVariableParent.expression.value[0].length == 1 &&
                    liquidVariableParent.filters.length == 2 &&
                    liquidVariableParent.filters[0].name === 'asset_url' &&
                    liquidVariableParent.filters[1].name === 'script_tag') {
                    const js = liquidVariableParent.expression.value;
                    await checkThemeAssetSize(js, liquidVariableParent.position);
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2071:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockIdUsage = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
exports.BlockIdUsage = {
    meta: {
        code: 'BlockIdUsage',
        name: 'Do not rely on `block.id` in if/else/unless/case',
        docs: {
            description: 'The ID is dynamically generated by Shopify and is subject to change. You should avoid relying on a literal value of this ID.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/block_id_usage',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            // BAD: {% if block.id == "123" %}
            // BAD: {% if block.id == some_variable %}
            // BAD: {% if block[id] == "id" or block.id %}
            // FINE: <div data-block-id="{{ block.id }}">
            // FINE: document.querySelector(`[data-block-id="${block.id}"]`)
            async Comparison(node, ancesors) {
                if (node.comparator === '==' &&
                    node.left.type === liquid_html_parser_1.NodeTypes.VariableLookup &&
                    isUsingBlockId(node.left)) {
                    reportWarning(context, node.position);
                }
            },
            // BAD {% case block.id %}
            async VariableLookup(node, ancestors) {
                const parentNode = ancestors.at(-1);
                if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === liquid_html_parser_1.NodeTypes.LiquidTag && parentNode.name === 'case') {
                    if (isUsingBlockId(node)) {
                        reportWarning(context, node.position);
                    }
                }
            },
        };
    },
};
function isUsingBlockId(node) {
    return (node.type == liquid_html_parser_1.NodeTypes.VariableLookup &&
        node.name === 'block' &&
        node.lookups[0] &&
        node.lookups[0].type === liquid_html_parser_1.NodeTypes.String &&
        node.lookups[0].value === 'id');
}
function reportWarning(context, position) {
    context.report({
        message: 'The ID is dynamically generated by Shopify and is subject to change. You should avoid relying on a literal value of this ID.',
        startIndex: position.start,
        endIndex: position.end,
    });
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6062:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CaptureOnContentForBlock = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
exports.CaptureOnContentForBlock = {
    meta: {
        code: 'CaptureOnContentForBlock',
        name: 'Do not capture `content_for "block"`',
        docs: {
            description: 'Capture of content_for "block" is restricted to enforce static block rendering at its expected location.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/content_for_block',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidTag(node, ancestors) {
                if (node.name !== liquid_html_parser_1.NamedTags.content_for)
                    return;
                if (typeof node.markup === 'string')
                    return;
                if (node.markup.contentForType.value !== 'block')
                    return;
                for (const parentNode of ancestors) {
                    if ((0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.LiquidTag, parentNode) &&
                        parentNode.name === liquid_html_parser_1.NamedTags.capture) {
                        context.report({
                            message: 'Do not capture `content_for "block"`',
                            startIndex: node.position.start,
                            endIndex: node.position.end,
                        });
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9603:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CdnPreconnect = void 0;
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
exports.CdnPreconnect = {
    meta: {
        code: 'CdnPreconnect',
        name: 'CDN Preconnect',
        docs: {
            description: "This check is aimed at signaling the redundant preconnect to Shopify's CDN",
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/cdn-preconnect',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async HtmlVoidElement(node) {
                if (node.name !== 'link')
                    return;
                const isPreconnect = node.attributes
                    .filter(utils_1.isValuedHtmlAttribute)
                    .some((attr) => (0, utils_1.isAttr)(attr, 'rel') && (0, utils_1.valueIncludes)(attr, 'preconnect'));
                if (!isPreconnect)
                    return;
                const isShopifyCdn = node.attributes
                    .filter(utils_1.isValuedHtmlAttribute)
                    .some((attr) => (0, utils_1.isAttr)(attr, 'href') && (0, utils_1.valueIncludes)(attr, '.+cdn.shopify.com.+'));
                if (!isShopifyCdn)
                    return;
                context.report({
                    message: 'Preconnecting to cdn.shopify.com is unnecessary and can lead to worse performance',
                    startIndex: node.position.start,
                    endIndex: node.position.end,
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7874:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentForHeaderModification = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
function isLiquidTagAssign(node) {
    return node.name === 'assign' && typeof node.markup !== 'string';
}
function isLiquidTagCapture(node) {
    return node.name === 'capture' && typeof node.markup !== 'string';
}
function isLiquidTagEcho(node) {
    return node.name === 'echo' && typeof node.markup !== 'string';
}
exports.ContentForHeaderModification = {
    meta: {
        code: 'ContentForHeaderModification',
        name: 'Do not depend on the content of content_for_header',
        docs: {
            description: 'Do not rely on the content of content_for_header as it might change in the future, which could cause your Liquid code behavior to change.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/content-for-header-modification',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        function checkContentForHeader(node, position) {
            if ((0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.VariableLookup, node) && node.name === 'content_for_header') {
                context.report({
                    message: 'Do not rely on the content of `content_for_header`',
                    startIndex: position.start,
                    endIndex: position.end,
                });
            }
        }
        return {
            async LiquidTag(node) {
                if (isLiquidTagAssign(node)) {
                    checkContentForHeader(node.markup.value.expression, node.position);
                }
                else if (isLiquidTagEcho(node)) {
                    checkContentForHeader(node.markup.expression, node.position);
                }
                else if (isLiquidTagCapture(node) && node.children) {
                    for (const child of node.children) {
                        if (child.type === liquid_html_parser_1.NodeTypes.LiquidVariableOutput && typeof child.markup !== 'string') {
                            checkContentForHeader(child.markup.expression, child.position);
                        }
                    }
                }
            },
            async LiquidVariableOutput(node) {
                if (typeof node.markup === 'string')
                    return;
                if (node.markup.filters.length) {
                    checkContentForHeader(node.markup.expression, node.position);
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7369:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeprecateBgsizes = void 0;
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
exports.DeprecateBgsizes = {
    meta: {
        code: 'DeprecateBgsizes',
        name: 'Deprecate Bgsizes',
        docs: {
            description: 'This check is aimed at discouraging the use of the lazySizes bgset plugin.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/deprecate-bgsizes',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async HtmlElement(node) {
                const classAttributeWithLazyload = node.attributes
                    .filter(utils_1.isValuedHtmlAttribute)
                    .find((attr) => (0, utils_1.isAttr)(attr, 'class') && (0, utils_1.valueIncludes)(attr, 'lazyload'));
                if (classAttributeWithLazyload) {
                    const attr = classAttributeWithLazyload;
                    context.report({
                        message: 'Use the native loading="lazy" attribute instead of lazysizes',
                        startIndex: attr.attributePosition.start,
                        endIndex: attr.attributePosition.end,
                    });
                }
                const dataBgsetAttr = node.attributes.find((attr) => (0, utils_1.isValuedHtmlAttribute)(attr) && (0, utils_1.isAttr)(attr, 'data-bgset'));
                if (dataBgsetAttr) {
                    context.report({
                        message: 'Use the CSS imageset attribute instead of data-bgset',
                        startIndex: dataBgsetAttr.position.start,
                        endIndex: dataBgsetAttr.position.end,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9982:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeprecateLazysizes = void 0;
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
function showsLazysizesUsage(attr) {
    return (0, utils_1.isAttr)(attr, 'data-srcset') || (0, utils_1.isAttr)(attr, 'data-sizes');
}
exports.DeprecateLazysizes = {
    meta: {
        code: 'DeprecateLazysizes',
        name: 'Deprecate Lazysizes',
        docs: {
            description: 'This check is aimed at discouraging the use of the lazysizes JavaScript library',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/deprecate-lazysizes',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async HtmlVoidElement(node) {
                if (node.name !== 'img')
                    return;
                const attributes = node.attributes.filter(utils_1.isHtmlAttribute);
                const hasSrc = attributes.some((attr) => (0, utils_1.isAttr)(attr, 'src'));
                const hasNativeLoading = attributes.some((attr) => (0, utils_1.isAttr)(attr, 'loading'));
                if (hasSrc && hasNativeLoading)
                    return;
                const hasLazyloadClass = node.attributes
                    .filter(utils_1.isValuedHtmlAttribute)
                    .some((attr) => (0, utils_1.isAttr)(attr, 'class') && (0, utils_1.valueIncludes)(attr, 'lazyload'));
                if (!hasLazyloadClass)
                    return;
                const hasLazysizesAttribute = node.attributes
                    .filter(utils_1.isValuedHtmlAttribute)
                    .some(showsLazysizesUsage);
                if (!hasLazysizesAttribute)
                    return;
                context.report({
                    message: 'Use the native loading="lazy" attribute instead of lazysizes',
                    startIndex: node.position.start,
                    endIndex: node.position.end,
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5809:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.suggestImageUrlFix = exports.suggestImgUrlFix = exports.suggestImgTagFix = exports.fixHexToRgba = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const utils_1 = __webpack_require__(3222);
/**
 * Width and height values cannot exceed this maximum size.
 */
const MAX_SIZE = 5760;
const NAMED_SIZES = {
    pico: 16,
    icon: 32,
    thumb: 50,
    small: 100,
    compact: 160,
    medium: 240,
    large: 480,
    grande: 600,
    original: 1024,
};
function fixHexToRgba(node) {
    /**
     * Cannot fix invalid usage.
     *
     * The `hex_to_rgba` filter is only valid with zero or one argument (`alpha`).
     */
    if (node.args.length > 1)
        return;
    const { start, end } = getFilterSourceStartAndEnd(node);
    const alpha = getExpressionArgumentValue(node, 0);
    let fixedFilter;
    if (alpha) {
        fixedFilter = ` color_to_rgb | color_modify: 'alpha', ${alpha}`;
    }
    else {
        fixedFilter = ' color_to_rgb';
    }
    return (corrector) => corrector.replace(start, end, fixedFilter);
}
exports.fixHexToRgba = fixHexToRgba;
function suggestImgTagFix(node) {
    const message = "Replace 'img_tag' with 'image_tag'.";
    const alt = getExpressionArgumentValue(node, 0);
    const cssClass = getExpressionArgumentValue(node, 1);
    const sizeStr = getExpressionArgumentValue(node, 2);
    const { width, height } = getImageSize(sizeStr, { width: -1, height: -1 });
    const { start, end } = getFilterSourceStartAndEnd(node);
    const imageUrlParameters = ensureImageValue({ width, height });
    const imageTagParameters = {
        width,
        height,
        alt: strValue(alt),
        class: strValue(cssClass),
    };
    const imageUrlFilter = buildFilterString('image_url', imageUrlParameters);
    const imageTagFilter = buildFilterString('image_tag', imageTagParameters);
    return [
        {
            message,
            fix: (corrector) => {
                const insert = `${imageUrlFilter} |${imageTagFilter}`;
                corrector.replace(start, end, insert);
            },
        },
    ];
}
exports.suggestImgTagFix = suggestImgTagFix;
function suggestImgUrlFix(node) {
    const message = "Replace 'img_url' with 'image_url'.";
    const cropNode = getNamedArgumentNode(node, 'crop');
    const formatNode = getNamedArgumentNode(node, 'format');
    const scaleNode = getNamedArgumentNode(node, 'scale');
    const sizeStr = getExpressionArgumentValue(node, 0);
    const sizeNode = node.args.at(0);
    /**
     * Cannot fix when 'scale' or 'size' node are variable lookups.
     */
    if (isVariableLookup(scaleNode === null || scaleNode === void 0 ? void 0 : scaleNode.value) || isVariableLookup(sizeNode)) {
        return;
    }
    const { width, height } = ensureImageValue(scaleImage(node, getImageSize(sizeStr)));
    const { start, end } = getFilterSourceStartAndEnd(node);
    const parameters = { width, height };
    if (isStringLiteral(cropNode === null || cropNode === void 0 ? void 0 : cropNode.value)) {
        parameters['crop'] = strValue(cropNode.value.value);
    }
    if (isStringLiteral(formatNode === null || formatNode === void 0 ? void 0 : formatNode.value)) {
        parameters['format'] = strValue(formatNode.value.value);
    }
    if (isVariableLookup(formatNode === null || formatNode === void 0 ? void 0 : formatNode.value)) {
        parameters['format'] = formatNode.value.name;
    }
    return [
        {
            message,
            fix: (corrector) => {
                const insert = buildFilterString('image_url', parameters);
                corrector.replace(start, end, insert);
            },
        },
    ];
}
exports.suggestImgUrlFix = suggestImgUrlFix;
function suggestImageUrlFix(filter, node) {
    const message = `Replace '${filter}' with 'image_url'.`;
    const sizeStr = getExpressionArgumentValue(node, 0);
    const { width, height } = ensureImageValue(getImageSize(sizeStr));
    const { start, end } = getFilterSourceStartAndEnd(node);
    return [
        {
            message,
            fix: (corrector) => {
                const insert = buildFilterString('image_url', { width, height });
                corrector.replace(start, end, insert);
            },
        },
    ];
}
exports.suggestImageUrlFix = suggestImageUrlFix;
function getImageSize(size, imageSize = { width: 100, height: 100 }) {
    if (!size)
        return { ...imageSize };
    if (size in NAMED_SIZES) {
        const s = NAMED_SIZES[size];
        return { width: s, height: s };
    }
    const [width, height] = size.split('x').map((s) => parseInt(s));
    return ensureImageSizeLimit({ width, height });
}
function scaleImage(node, imageSize) {
    const scale = parseInt(getNamedArgumentValue(node, 'scale') || '0') || 1;
    return ensureImageSizeLimit({
        width: imageSize.width * scale,
        height: imageSize.height * scale,
    });
}
function ensureImageSizeLimit(imageSize) {
    return {
        width: Math.min(imageSize.width, MAX_SIZE),
        height: Math.min(imageSize.height, MAX_SIZE),
    };
}
function ensureImageValue(imageSize) {
    let { width, height } = imageSize;
    const isImageSizeUnset = (!height || height === -1) && (!width || width === -1);
    /**
     * If `image_url` is missing a width or height, we default to width=100, as
     * the documentation mention an error is returned if neither are specified
     * (interestingly, `image_url` doesn't actually fail during runtime tests).
     *
     * That default value is widely mentioned in the documentation and we've
     * confirmed that in runtime tests.
     */
    if (isImageSizeUnset) {
        width = 100;
    }
    return { width, height };
}
function getExpressionArgumentValue(node, index) {
    const arg = node.args.at(index);
    if (isNumberLiteral(arg) || isStringLiteral(arg)) {
        return arg.value;
    }
}
function getNamedArgumentValue(node, propertyName) {
    const argumentNode = getNamedArgumentNode(node, propertyName);
    const valueNode = argumentNode === null || argumentNode === void 0 ? void 0 : argumentNode.value;
    if (isNumberLiteral(valueNode) || isStringLiteral(valueNode)) {
        return valueNode.value;
    }
}
function getNamedArgumentNode(node, argName) {
    const args = node.args;
    return args.find((arg) => (0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.NamedArgument, arg) && arg.name === argName);
}
function buildFilterString(filter, filterParameters) {
    const parameters = Object.entries(filterParameters)
        .filter(([_key, value]) => value && value !== -1)
        .map(([key, value]) => `${key}: ${value}`)
        .join(', ');
    if (!parameters) {
        return ` ${filter}`;
    }
    return ` ${filter}: ${parameters}`;
}
function getFilterSourceStartAndEnd(node) {
    const position = node.position;
    const pipePosition = node.source.slice(position.start).indexOf('|');
    return {
        start: position.start + pipePosition + 1,
        end: position.end,
    };
}
function strValue(value) {
    return value ? `'${value}'` : null;
}
function isVariableLookup(exp) {
    return (0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.VariableLookup, exp);
}
function isStringLiteral(exp) {
    return (0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.String, exp);
}
function isNumberLiteral(exp) {
    return (0, utils_1.isNodeOfType)(liquid_html_parser_1.NodeTypes.Number, exp);
}
//# sourceMappingURL=fixes.js.map

/***/ }),

/***/ 9658:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeprecatedFilter = void 0;
const types_1 = __webpack_require__(2660);
const fixes_1 = __webpack_require__(5809);
exports.DeprecatedFilter = {
    meta: {
        code: 'DeprecatedFilter',
        aliases: ['DeprecatedFilters'],
        name: 'Deprecated Filter',
        docs: {
            description: 'Discourages using deprecated filters in themes.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/deprecated-filter',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        if (!context.themeDocset) {
            return {};
        }
        return {
            LiquidFilter: async (node) => {
                const filters = await context.themeDocset.filters();
                const deprecatedFilter = filters.find((f) => {
                    return f.deprecated && f.name === node.name;
                });
                if (!deprecatedFilter) {
                    return;
                }
                const recommendedFilterName = findRecommendedAlternative(deprecatedFilter);
                const recommendedFilter = filters.find((f) => f.name === recommendedFilterName);
                const message = deprecatedFilterMessage(deprecatedFilter, recommendedFilter);
                const suggest = deprecatedFilterSuggestion(node);
                const fix = deprecatedFilterFix(node);
                context.report({
                    message,
                    suggest,
                    fix,
                    startIndex: node.position.start + 1,
                    endIndex: node.position.end,
                });
            },
        };
    },
};
function deprecatedFilterSuggestion(node) {
    const filter = node.name;
    switch (filter) {
        case 'img_tag':
            return (0, fixes_1.suggestImgTagFix)(node);
        case 'img_url':
            return (0, fixes_1.suggestImgUrlFix)(node);
        case 'article_img_url':
        case 'collection_img_url':
        case 'product_img_url':
            /**
             * These filters rely on the usage of the `image_url`
             * filter as the fix.
             */
            return (0, fixes_1.suggestImageUrlFix)(filter, node);
        case 'currency_selector':
            /**
             * Cannot be fixed.
             *
             * Deprecated without a direct replacement because the
             * currency form has also been deprecated. The currency
             * form was replaced by the localization form.
             */
            return;
    }
}
function deprecatedFilterFix(node) {
    const filter = node.name;
    if (filter === 'hex_to_rgba') {
        return (0, fixes_1.fixHexToRgba)(node);
    }
}
function deprecatedFilterMessage(deprecated, recommended) {
    if (recommended) {
        return `Deprecated filter '${deprecated.name}', consider using '${recommended.name}'.`;
    }
    return `Deprecated filter '${deprecated.name}'.`;
}
function findRecommendedAlternative(deprecatedFilter) {
    const reason = deprecatedFilter.deprecation_reason;
    const match = reason === null || reason === void 0 ? void 0 : reason.match(/replaced by \[`(.+?)`\]/);
    return match === null || match === void 0 ? void 0 : match[1];
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8004:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeprecatedTag = void 0;
const types_1 = __webpack_require__(2660);
exports.DeprecatedTag = {
    meta: {
        code: 'DeprecatedTag',
        aliases: ['DeprecatedTags'],
        name: 'Deprecated Tag',
        docs: {
            description: 'This check is aimed at eliminating the use of deprecated tags.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/deprecated-tag',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidTag(node) {
                if (node.name === 'include') {
                    const start = node.source.substring(node.position.start);
                    const includeStartIndex = start.indexOf('include');
                    const includeEndIndex = includeStartIndex + 'include'.length;
                    const includeStart = node.position.start + includeStartIndex;
                    const includeEnd = node.position.start + includeEndIndex;
                    context.report({
                        message: `Use the 'render' tag instead of 'include'`,
                        startIndex: includeStart,
                        endIndex: includeEnd,
                        suggest: [
                            {
                                message: `Replace 'include' with 'render'`,
                                fix: (corrector) => {
                                    corrector.replace(includeStart, includeEnd, 'render');
                                },
                            },
                        ],
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7421:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmptyBlockContent = void 0;
const types_1 = __webpack_require__(2660);
const to_schema_1 = __webpack_require__(5182);
exports.EmptyBlockContent = {
    meta: {
        code: 'EmptyBlockContent',
        name: 'Prevent empty block content',
        docs: {
            description: 'This check exists to warn you when the blocks array at the root level of the schema is empty.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/empty-block-content',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        let isContentForBlocksLocationSet = false;
        let contentForBlocksLocation = { start: 0, end: 0 };
        return {
            async LiquidTag(node) {
                if (node.name !== 'content_for')
                    return;
                const nodeMarkup = node.markup;
                if (typeof nodeMarkup === 'object' && nodeMarkup.contentForType.value === 'blocks') {
                    contentForBlocksLocation.start = node.blockStartPosition.start;
                    contentForBlocksLocation.end = node.blockStartPosition.end;
                    isContentForBlocksLocationSet = true;
                }
            },
            async onCodePathEnd() {
                const schema = await (0, to_schema_1.getSchema)(context);
                const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                if (!validSchema || validSchema instanceof Error)
                    return;
                if (!ast || ast instanceof Error)
                    return;
                const blocks = validSchema.blocks;
                if (isContentForBlocksLocationSet && !blocks) {
                    context.report({
                        message: `The 'content_for "blocks"' tag is present, but the blocks array is not defined.`,
                        startIndex: contentForBlocksLocation.start,
                        endIndex: contentForBlocksLocation.end,
                    });
                }
                else if (isContentForBlocksLocationSet && blocks && blocks.length === 0) {
                    context.report({
                        message: `The 'content_for "blocks"' tag is present, but the blocks array is empty.`,
                        startIndex: contentForBlocksLocation.start,
                        endIndex: contentForBlocksLocation.end,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7234:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImgWidthAndHeight = void 0;
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
exports.ImgWidthAndHeight = {
    meta: {
        code: 'ImgWidthAndHeight',
        name: 'Width and height attributes on image tags',
        docs: {
            description: 'This check is aimed at eliminating content layout shift in themes by enforcing the use of the width and height attributes on img tags.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/img-width-and-height',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async HtmlVoidElement(node) {
                if (node.name === 'img') {
                    const widthAttr = node.attributes.find((attr) => (0, utils_1.isValuedHtmlAttribute)(attr) && (0, utils_1.isAttr)(attr, 'width'));
                    const heightAttr = node.attributes.find((attr) => (0, utils_1.isValuedHtmlAttribute)(attr) && (0, utils_1.isAttr)(attr, 'height'));
                    let missingAttributes = [];
                    if (!widthAttr) {
                        missingAttributes.push('width');
                    }
                    if (!heightAttr) {
                        missingAttributes.push('height');
                    }
                    if (missingAttributes.length > 0) {
                        const attributeWord = missingAttributes.length === 1 ? 'attribute' : 'attributes';
                        context.report({
                            message: `Missing ${missingAttributes.join(' and ')} ${attributeWord} on img tag`,
                            startIndex: node.position.start,
                            endIndex: node.position.end,
                        });
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1691:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.recommended = exports.allChecks = void 0;
const types_1 = __webpack_require__(2660);
const app_block_valid_tags_1 = __webpack_require__(8014);
const asset_preload_1 = __webpack_require__(6292);
const asset_size_app_block_css_1 = __webpack_require__(7814);
const asset_size_app_block_javascript_1 = __webpack_require__(4544);
const asset_size_css_1 = __webpack_require__(6300);
const asset_size_javascript_1 = __webpack_require__(6842);
const block_id_usage_1 = __webpack_require__(2071);
const capture_on_content_for_block_1 = __webpack_require__(6062);
const cdn_preconnect_1 = __webpack_require__(9603);
const content_for_header_modification_1 = __webpack_require__(7874);
const deprecate_bgsizes_1 = __webpack_require__(7369);
const deprecate_lazysizes_1 = __webpack_require__(9982);
const deprecated_filter_1 = __webpack_require__(9658);
const deprecated_tag_1 = __webpack_require__(8004);
const empty_block_content_1 = __webpack_require__(7421);
const img_width_and_height_1 = __webpack_require__(7234);
const json_missing_block_1 = __webpack_require__(8063);
const json_syntax_error_1 = __webpack_require__(3113);
const liquid_free_settings_1 = __webpack_require__(7333);
const liquid_html_syntax_error_1 = __webpack_require__(8081);
const matching_translations_1 = __webpack_require__(4762);
const missing_asset_1 = __webpack_require__(9129);
const missing_template_1 = __webpack_require__(4317);
const pagination_size_1 = __webpack_require__(9074);
const parser_blocking_script_1 = __webpack_require__(8759);
const schema_presets_block_order_1 = __webpack_require__(6727);
const schema_presets_static_blocks_1 = __webpack_require__(656);
const remote_asset_1 = __webpack_require__(8459);
const required_layout_theme_object_1 = __webpack_require__(7582);
const translation_key_exists_1 = __webpack_require__(7604);
const unclosed_html_element_1 = __webpack_require__(1182);
const undefined_object_1 = __webpack_require__(2544);
const unique_static_block_id_1 = __webpack_require__(4122);
const unknown_filter_1 = __webpack_require__(4843);
const unused_assign_1 = __webpack_require__(6500);
const valid_content_for_arguments_1 = __webpack_require__(7413);
const valid_block_target_1 = __webpack_require__(8400);
const valid_html_translation_1 = __webpack_require__(1874);
const valid_json_1 = __webpack_require__(7055);
const valid_local_blocks_1 = __webpack_require__(6817);
const valid_render_snippet_params_1 = __webpack_require__(9738);
const valid_schema_1 = __webpack_require__(3834);
const valid_schema_name_1 = __webpack_require__(2734);
const valid_settings_key_1 = __webpack_require__(6050);
const valid_static_block_type_1 = __webpack_require__(266);
const valid_visible_if_1 = __webpack_require__(8775);
const variable_name_1 = __webpack_require__(5548);
const app_block_missing_schema_1 = __webpack_require__(2538);
const unique_settings_id_1 = __webpack_require__(1915);
exports.allChecks = [
    app_block_valid_tags_1.AppBlockValidTags,
    asset_preload_1.AssetPreload,
    asset_size_app_block_css_1.AssetSizeAppBlockCSS,
    asset_size_app_block_javascript_1.AssetSizeAppBlockJavaScript,
    asset_size_css_1.AssetSizeCSS,
    asset_size_javascript_1.AssetSizeJavaScript,
    block_id_usage_1.BlockIdUsage,
    capture_on_content_for_block_1.CaptureOnContentForBlock,
    cdn_preconnect_1.CdnPreconnect,
    content_for_header_modification_1.ContentForHeaderModification,
    deprecate_bgsizes_1.DeprecateBgsizes,
    deprecated_filter_1.DeprecatedFilter,
    deprecated_tag_1.DeprecatedTag,
    deprecate_lazysizes_1.DeprecateLazysizes,
    empty_block_content_1.EmptyBlockContent,
    img_width_and_height_1.ImgWidthAndHeight,
    json_missing_block_1.JSONMissingBlock,
    json_syntax_error_1.JSONSyntaxError,
    liquid_free_settings_1.LiquidFreeSettings,
    liquid_html_syntax_error_1.LiquidHTMLSyntaxError,
    matching_translations_1.MatchingTranslations,
    missing_asset_1.MissingAsset,
    missing_template_1.MissingTemplate,
    app_block_missing_schema_1.AppBlockMissingSchema,
    pagination_size_1.PaginationSize,
    parser_blocking_script_1.ParserBlockingScript,
    schema_presets_block_order_1.SchemaPresetsBlockOrder,
    schema_presets_static_blocks_1.SchemaPresetsStaticBlocks,
    remote_asset_1.RemoteAsset,
    required_layout_theme_object_1.RequiredLayoutThemeObject,
    translation_key_exists_1.TranslationKeyExists,
    unclosed_html_element_1.UnclosedHTMLElement,
    undefined_object_1.UndefinedObject,
    unique_settings_id_1.UniqueSettingIds,
    unique_static_block_id_1.UniqueStaticBlockId,
    unknown_filter_1.UnknownFilter,
    unused_assign_1.UnusedAssign,
    valid_block_target_1.ValidBlockTarget,
    valid_html_translation_1.ValidHTMLTranslation,
    valid_content_for_arguments_1.ValidContentForArguments,
    valid_json_1.ValidJSON,
    valid_local_blocks_1.ValidLocalBlocks,
    valid_schema_1.ValidSchema,
    valid_settings_key_1.ValidSettingsKey,
    valid_static_block_type_1.ValidStaticBlockType,
    valid_visible_if_1.ValidVisibleIf,
    valid_visible_if_1.ValidVisibleIfSettingsSchema,
    variable_name_1.VariableName,
    valid_render_snippet_params_1.ValidRenderSnippetParams,
    valid_schema_name_1.ValidSchemaName,
];
/**
 * The recommended checks is populated by all checks with the following conditions:
 * - meta.docs.recommended: true
 * - Either no meta.targets list exist or if it does exist then Recommended is a target
 */
exports.recommended = exports.allChecks.filter((check) => {
    const isRecommended = check.meta.docs.recommended;
    const isValidTarget = !check.meta.targets ||
        !check.meta.targets.length ||
        check.meta.targets.includes(types_1.ConfigTarget.Recommended);
    return isRecommended && isValidTarget;
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8063:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONMissingBlock = void 0;
const to_schema_1 = __webpack_require__(5182);
const types_1 = __webpack_require__(2660);
const missing_block_utils_1 = __webpack_require__(5987);
exports.JSONMissingBlock = {
    meta: {
        code: 'JSONMissingBlock',
        name: 'Check for missing blocks types in JSON templates',
        docs: {
            description: 'This check ensures that JSON templates contain valid block types.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/json-missing-block',
        },
        type: types_1.SourceCodeType.JSON,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        const relativePath = context.toRelativePath(context.file.uri);
        if (!relativePath.startsWith('templates/'))
            return {};
        return {
            async onCodePathEnd() {
                const schema = await (0, to_schema_1.getSchemaFromJSON)(context);
                const { ast, offset } = schema !== null && schema !== void 0 ? schema : {};
                if (!ast || ast instanceof Error)
                    return;
                if (!schema)
                    return;
                const sections = schema.parsed.sections;
                if (!sections)
                    return;
                await Promise.all(Object.entries(sections).map(async ([sectionKey, section]) => {
                    if ((0, missing_block_utils_1.isPropertyNode)(section) &&
                        'blocks' in section &&
                        (0, missing_block_utils_1.isPropertyNode)(section.blocks) &&
                        'type' in section) {
                        await (0, missing_block_utils_1.getAllBlocks)(ast, offset, section.type, section.blocks, ['sections', sectionKey, 'blocks'], context);
                    }
                }));
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5987:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAllBlocks = exports.isPropertyNode = void 0;
const json_1 = __webpack_require__(9151);
const file_utils_1 = __webpack_require__(6025);
function isPropertyNode(node) {
    return typeof node === 'object' && node !== null;
}
exports.isPropertyNode = isPropertyNode;
function isNestedBlock(currentPath) {
    return currentPath.filter((segment) => segment === 'blocks').length > 1;
}
function reportWarning(message, offset, astNode, context) {
    context.report({
        message,
        startIndex: offset + (0, json_1.getLocStart)(astNode),
        endIndex: offset + (0, json_1.getLocEnd)(astNode),
    });
}
async function validateBlockFileExistence(blockType, context) {
    if (blockType === '@theme' || blockType === '@app') {
        return true;
    }
    const blockPath = `blocks/${blockType}.liquid`;
    return await (0, file_utils_1.doesFileExist)(context, blockPath);
}
async function getThemeBlocks(sectionType, currentPath, context) {
    var _a, _b;
    const themeBlocks = [];
    if (!sectionType)
        return themeBlocks;
    const schema = isNestedBlock(currentPath)
        ? await ((_a = context.getBlockSchema) === null || _a === void 0 ? void 0 : _a.call(context, sectionType))
        : await ((_b = context.getSectionSchema) === null || _b === void 0 ? void 0 : _b.call(context, sectionType));
    if (!schema || schema instanceof Error)
        return themeBlocks;
    const { validSchema } = schema;
    if (!validSchema || validSchema instanceof Error)
        return themeBlocks;
    if (Array.isArray(validSchema.blocks)) {
        validSchema.blocks.forEach((block) => {
            if (!('name' in block) && block.type !== '@app') {
                themeBlocks.push(block.type);
            }
        });
    }
    return themeBlocks;
}
async function validateBlock(blockType, blockPath, ancestorType, currentPath, offset, context) {
    const themeBlocks = await getThemeBlocks(ancestorType, currentPath, context);
    if (themeBlocks.length === 0)
        return;
    const exists = await validateBlockFileExistence(blockType, context);
    if (!exists) {
        reportWarning(`Theme block 'blocks/${blockType}.liquid' does not exist.`, offset, blockPath, context);
    }
    else {
        const isPrivateBlock = blockType.startsWith('_');
        const isThemeInRootLevel = themeBlocks.includes('@theme');
        const isPresetInRootLevel = themeBlocks.includes(blockType);
        if (!isPrivateBlock ? isPresetInRootLevel || isThemeInRootLevel : isPresetInRootLevel) {
            return;
        }
        else {
            const location = isNestedBlock(currentPath) ? 'blocks' : 'sections';
            reportWarning(`Block type '${blockType}' is not allowed in '${location}/${ancestorType}.liquid'.`, offset, blockPath, context);
        }
    }
}
async function getAllBlocks(ast, offset, ancestorType, blocks, currentPath, context) {
    await Promise.all(Object.entries(blocks).map(async ([blockKey, block]) => {
        if (block.type) {
            const typePath = currentPath.concat(blockKey, 'type');
            const blockPath = (0, json_1.nodeAtPath)(ast, typePath);
            if (blockPath) {
                await validateBlock(block.type, blockPath, ancestorType, currentPath, offset, context);
            }
        }
        if ('blocks' in block) {
            await getAllBlocks(ast, offset, block.type, block.blocks, currentPath.concat(blockKey, 'blocks'), context);
        }
    }));
}
exports.getAllBlocks = getAllBlocks;
//# sourceMappingURL=missing-block-utils.js.map

/***/ }),

/***/ 3113:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONSyntaxError = void 0;
const parse_1 = __webpack_require__(8558);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
function cleanErrorMessage(error) {
    const message = 'rawMessage' in error ? error.rawMessage : error.message;
    return message.replace(/\s+at \d+:\d+/, '');
}
exports.JSONSyntaxError = {
    meta: {
        code: 'JSONSyntaxError',
        name: 'Enforce valid JSON',
        docs: {
            description: 'This check exists to prevent invalid JSON files in themes.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/json-syntax-error',
        },
        type: types_1.SourceCodeType.JSON,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
        deprecated: true,
    },
    create(context) {
        if (context.validateJSON)
            return {}; // If available, we'll use the JSON validator instead
        const error = context.file.ast;
        if (!(0, utils_1.isError)(error))
            return {};
        return {
            async onCodePathStart(file) {
                if (file.ast instanceof parse_1.JSONCParseErrors) {
                    for (const error of file.ast.errors) {
                        context.report({
                            message: jsoncParseErrorMessage(error.error),
                            startIndex: error.offset,
                            endIndex: error.offset + error.length,
                        });
                    }
                }
                else {
                    context.report({
                        message: cleanErrorMessage(error),
                        startIndex: 0,
                        endIndex: file.source.length,
                    });
                }
            },
        };
    },
};
function jsoncParseErrorMessage(errorType) {
    switch (errorType) {
        case 1 /* ParseErrorCode.InvalidSymbol */:
            return 'Invalid symbol';
        case 2 /* ParseErrorCode.InvalidNumberFormat */:
            return 'Invalid number format';
        case 3 /* ParseErrorCode.PropertyNameExpected */:
            return 'Property name expected';
        case 4 /* ParseErrorCode.ValueExpected */:
            return 'Expecting a value';
        case 5 /* ParseErrorCode.ColonExpected */:
            return 'Expecting a colon after a property name (:)';
        case 6 /* ParseErrorCode.CommaExpected */:
            return 'Expecting a comma';
        case 7 /* ParseErrorCode.CloseBraceExpected */:
            return 'Expecting a closing brace (})';
        case 8 /* ParseErrorCode.CloseBracketExpected */:
            return 'Expecting a closing bracket (])';
        case 9 /* ParseErrorCode.EndOfFileExpected */:
            return 'Expecting end of file';
        case 10 /* ParseErrorCode.InvalidCommentToken */:
            return 'Invalid comment token';
        case 11 /* ParseErrorCode.UnexpectedEndOfComment */:
            return 'Unexpected end of comment';
        case 12 /* ParseErrorCode.UnexpectedEndOfString */:
            return 'Unexpected end of string';
        case 13 /* ParseErrorCode.UnexpectedEndOfNumber */:
            return 'Unexpected end of number';
        case 14 /* ParseErrorCode.InvalidUnicode */:
            return 'Invalid unicode';
        case 15 /* ParseErrorCode.InvalidEscapeCharacter */:
            return 'Invalid escape character';
        case 16 /* ParseErrorCode.InvalidCharacter */:
            return 'Invalid character';
        default:
            return 'Something went wrong with this JSON';
    }
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7333:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidFreeSettings = void 0;
const to_source_code_1 = __webpack_require__(3312);
const types_1 = __webpack_require__(2660);
const visitor_1 = __webpack_require__(6267);
exports.LiquidFreeSettings = {
    meta: {
        code: 'LiquidFreeSettings',
        name: 'Check for liquid free settings values',
        docs: {
            description: 'Ensures settings values are liquid free.',
            recommended: true,
            url: 'https://shopify.dev/docs/themes/tools/theme-check/checks/liquid-free-settings',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema' || node.body.kind !== 'json') {
                    return;
                }
                const jsonString = node.source.slice(node.blockStartPosition.end, node.blockEndPosition.start);
                const jsonFile = (0, to_source_code_1.toJSONAST)(jsonString);
                if (jsonFile instanceof Error)
                    return;
                (0, visitor_1.visit)(jsonFile, {
                    Property(schemaNode, ancestors) {
                        if (isInArrayWithParentKey(ancestors, 'settings') && isLiteralNode(schemaNode.value)) {
                            const { value, loc } = schemaNode.value;
                            const propertyValue = schemaNode.key.value;
                            if (typeof value === 'string' &&
                                propertyValue !== 'visible_if' &&
                                value.includes('{%') &&
                                value.includes('%}')) {
                                context.report({
                                    message: 'Settings values cannot contain liquid logic.',
                                    startIndex: node.blockStartPosition.end + loc.start.offset,
                                    endIndex: node.blockStartPosition.end + loc.end.offset,
                                });
                            }
                        }
                    },
                });
            },
        };
    },
};
function isLiteralNode(node) {
    return node.type === 'Literal';
}
function isInArrayWithParentKey(ancestors, parentKey) {
    return ancestors.some((ancestor, index) => {
        var _a;
        const parent = ancestors[index - 1];
        return ((ancestor.type === 'Array' || ancestor.type === 'Object') &&
            (parent === null || parent === void 0 ? void 0 : parent.type) === 'Property' &&
            ((_a = parent.key) === null || _a === void 0 ? void 0 : _a.value) === parentKey);
    });
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8081:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidHTMLSyntaxError = void 0;
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
function isParsingErrorWithLocation(error) {
    return 'name' in error && error.name === 'LiquidHTMLParsingError' && 'loc' in error;
}
function cleanErrorMessage(message, highlight) {
    return message
        .replace(/Line \d+, col \d+:\s+/, 'SyntaxError: ')
        .replace(/(?!<expected ".+",) not .*/, ` not "${highlight}"`);
}
exports.LiquidHTMLSyntaxError = {
    meta: {
        code: 'LiquidHTMLSyntaxError',
        aliases: ['SyntaxError', 'HtmlParsingError'],
        name: 'Prevent LiquidHTML Syntax Errors',
        docs: {
            description: 'This check exists to inform the user of Liquid HTML syntax errors.',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        const error = context.file.ast;
        if (!(0, utils_1.isError)(error))
            return {};
        return {
            async onCodePathStart(file) {
                if (isParsingErrorWithLocation(error)) {
                    const { start, end } = error.loc;
                    const startIndex = (0, utils_1.getOffset)(file.source, start.line, start.column);
                    let endIndex = (0, utils_1.getOffset)(file.source, end.line, end.column);
                    if (startIndex === endIndex)
                        endIndex += 1;
                    const highlight = file.source.slice(startIndex, endIndex);
                    context.report({
                        message: cleanErrorMessage(error.message, highlight),
                        startIndex,
                        endIndex: endIndex,
                    });
                }
                else {
                    context.report({
                        message: error.message,
                        startIndex: 0,
                        endIndex: file.source.length,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4762:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MatchingTranslations = void 0;
const types_1 = __webpack_require__(2660);
const PLURALIZATION_KEYS = new Set(['zero', 'one', 'two', 'few', 'many', 'other']);
exports.MatchingTranslations = {
    meta: {
        code: 'MatchingTranslations',
        name: 'Translation files should have the same keys',
        docs: {
            description: 'TODO',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/matching-translations',
        },
        type: types_1.SourceCodeType.JSON,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        // State
        const defaultTranslations = new Set();
        const missingTranslations = new Set();
        const nodesByPath = new Map();
        const file = context.file;
        const fileUri = file.uri;
        const relativePath = context.toRelativePath(fileUri);
        const ast = file.ast;
        const isLocaleFile = relativePath.startsWith('locales/');
        const isDefaultTranslationsFile = fileUri.endsWith('.default.json') || fileUri.endsWith('.default.schema.json');
        const isSchemaTranslationFile = fileUri.endsWith('.schema.json');
        if (!isLocaleFile || isDefaultTranslationsFile || ast instanceof Error) {
            // No need to lint a file that isn't a translation file, we return an
            // empty object as the check for those.
            return {};
        }
        // Helpers
        const hasDefaultTranslations = () => defaultTranslations.size > 0;
        const isTerminalNode = ({ type }) => type === 'Literal';
        const isPluralizationNode = (node) => PLURALIZATION_KEYS.has(node.key.value);
        const isShopifyPath = (path) => path.startsWith('shopify.');
        const hasDefaultTranslation = (translationPath) => { var _a; return (_a = defaultTranslations.has(translationPath)) !== null && _a !== void 0 ? _a : false; };
        const isPluralizationPath = (path) => [...PLURALIZATION_KEYS].some((key) => path.endsWith(key));
        const jsonPaths = (json) => {
            const keys = Object.keys(json);
            return keys.reduce((acc, key) => {
                if (typeof json[key] !== 'object') {
                    return acc.concat(key);
                }
                const childJson = json[key];
                const childPaths = jsonPaths(childJson);
                return acc.concat(childPaths.map((path) => `${key}.${path}`));
            }, []);
        };
        const objectPath = (nodes) => {
            return nodes
                .filter((node) => node.type === 'Property')
                .reduce((acc, val) => acc.concat(val.key.value), [])
                .join('.');
        };
        const countCommonParts = (arrayA, arrayB) => {
            const minLength = Math.min(arrayA.length, arrayB.length);
            for (let i = 0; i < minLength; i++) {
                if (arrayA[i] !== arrayB[i]) {
                    return i;
                }
            }
            return minLength;
        };
        const closestTranslationKey = (translationKey) => {
            var _a;
            const translationKeyParts = translationKey.split('.');
            let closestMatch = '';
            let maxCommonParts = 0;
            for (const path of nodesByPath.keys()) {
                const pathParts = path.split('.');
                const commonParts = countCommonParts(pathParts, translationKeyParts);
                if (commonParts > maxCommonParts) {
                    maxCommonParts = commonParts;
                    closestMatch = path;
                }
            }
            return (_a = nodesByPath.get(closestMatch)) !== null && _a !== void 0 ? _a : ast;
        };
        return {
            async onCodePathStart() {
                const getDefaultTranslations = isSchemaTranslationFile
                    ? context.getDefaultSchemaTranslations
                    : context.getDefaultTranslations;
                const defaultTranslationPaths = await getDefaultTranslations().then(jsonPaths);
                defaultTranslationPaths.forEach(Set.prototype.add, defaultTranslations);
                // At the `onCodePathStart`, we assume that all translations are missing,
                // and remove translation paths while traversing through the file.
                defaultTranslationPaths.forEach(Set.prototype.add, missingTranslations);
            },
            async Property(node, ancestors) {
                const path = objectPath(ancestors.concat(node));
                nodesByPath.set(path, node);
                if (!hasDefaultTranslations())
                    return;
                if (isPluralizationNode(node))
                    return;
                if (!isTerminalNode(node.value))
                    return;
                if (isShopifyPath(path))
                    return;
                if (hasDefaultTranslation(path)) {
                    // As `path` is present, we remove it from the
                    // `missingTranslationsPerFile` bucket.
                    missingTranslations.delete(path);
                    return;
                }
                context.report({
                    message: `A default translation for '${path}' does not exist`,
                    startIndex: node.loc.start.offset,
                    endIndex: node.loc.end.offset,
                    suggest: [
                        {
                            message: 'Delete unneeded translation key',
                            fix(corrector) {
                                corrector.remove(path);
                            },
                        },
                    ],
                });
            },
            async onCodePathEnd() {
                missingTranslations.forEach((path) => {
                    const closest = closestTranslationKey(path);
                    if (isPluralizationPath(path))
                        return;
                    if (isShopifyPath(path))
                        return;
                    context.report({
                        message: `The translation for '${path}' is missing`,
                        startIndex: closest.loc.start.offset,
                        endIndex: closest.loc.end.offset,
                        fix(corrector) {
                            corrector.add(path, 'TODO');
                        },
                    });
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9129:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingAsset = void 0;
const types_1 = __webpack_require__(2660);
const file_utils_1 = __webpack_require__(6025);
const utils_1 = __webpack_require__(3222);
exports.MissingAsset = {
    meta: {
        code: 'MissingAsset',
        name: 'Avoid rendering missing asset files',
        docs: {
            description: 'Reports missing asset files',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/missing-asset',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidVariable(node) {
                if (node.filters.length === 0 || node.filters[0].name !== 'asset_url') {
                    return;
                }
                if (!(0, utils_1.isLiquidString)(node.expression))
                    return;
                let expression = node.expression;
                let originalAssetPath = `assets/${expression.value}`;
                let assetPath = originalAssetPath;
                let fileExists = await (0, file_utils_1.doesFileExist)(context, assetPath);
                if (fileExists)
                    return;
                if (assetPath.endsWith('.scss.css')) {
                    assetPath = assetPath.replace('.scss.css', '.scss.liquid');
                    fileExists = await (0, file_utils_1.doesFileExist)(context, assetPath);
                    if (fileExists)
                        return;
                }
                if (assetPath.endsWith('.js') || assetPath.endsWith('.css')) {
                    assetPath += '.liquid';
                    fileExists = await (0, file_utils_1.doesFileExist)(context, assetPath);
                    if (fileExists)
                        return;
                }
                context.report({
                    message: `'${originalAssetPath}' does not exist`,
                    startIndex: expression.position.start,
                    endIndex: expression.position.end,
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4317:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingTemplate = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const minimatch_1 = __webpack_require__(7039);
const types_1 = __webpack_require__(2660);
const file_utils_1 = __webpack_require__(6025);
const schema = {
    ignoreMissing: types_1.SchemaProp.array(types_1.SchemaProp.string(), []),
};
exports.MissingTemplate = {
    meta: {
        code: 'MissingTemplate',
        name: 'Avoid rendering missing templates',
        docs: {
            description: 'Reports missing include/render/section liquid file',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/missing-template',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema,
        targets: [],
    },
    create(context) {
        const isNamedLiquidTag = (tag) => typeof tag.markup !== 'string';
        function isIgnored(relativePath) {
            return context.settings.ignoreMissing.some((pattern) => (0, minimatch_1.minimatch)(relativePath, pattern));
        }
        async function maybeReportMissing(relativePath, { position }) {
            const fileExists = await (0, file_utils_1.doesFileExist)(context, relativePath);
            if (fileExists || isIgnored(relativePath))
                return;
            context.report({
                message: `'${relativePath}' does not exist`,
                startIndex: position.start,
                endIndex: position.end,
            });
        }
        return {
            async RenderMarkup(node) {
                if (node.snippet.type === liquid_html_parser_1.NodeTypes.VariableLookup)
                    return;
                const snippet = node.snippet;
                const relativePath = `snippets/${snippet.value}.liquid`;
                await maybeReportMissing(relativePath, snippet);
            },
            async LiquidTag(node) {
                if (!isNamedLiquidTag(node))
                    return;
                if (node.name !== liquid_html_parser_1.NamedTags.section)
                    return;
                const markup = node.markup;
                const relativePath = `sections/${markup.value}.liquid`;
                await maybeReportMissing(relativePath, markup);
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9074:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PaginationSize = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const utils_2 = __webpack_require__(3222);
const json_1 = __webpack_require__(9151);
const schema = {
    minSize: types_1.SchemaProp.number(1),
    maxSize: types_1.SchemaProp.number(50),
};
exports.PaginationSize = {
    meta: {
        code: 'PaginationSize',
        name: 'Ensure paginate tags are used with performant sizes',
        docs: {
            description: 'This check is aimed at keeping response times low.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/pagination-size',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema,
        targets: [],
    },
    create(context) {
        const minSize = context.settings.minSize;
        const maxSize = context.settings.maxSize;
        let schemaSettings = [];
        const pageSizeLookups = [];
        function checkPageSize(pageSizeNode, value, message = `Pagination size must be a positive integer between ${minSize} and ${maxSize}.`) {
            if (minSize <= value && value <= maxSize)
                return;
            context.report({
                message,
                startIndex: pageSizeNode.position.start,
                endIndex: pageSizeNode.position.end,
            });
        }
        return {
            async LiquidTag(node) {
                if (typeof node.markup === 'string' || node.name !== 'paginate')
                    return;
                const pageSizeNode = node.markup.pageSize;
                if ((0, utils_2.isNodeOfType)(liquid_html_parser_1.NodeTypes.VariableLookup, pageSizeNode)) {
                    pageSizeLookups.push(pageSizeNode);
                }
                else if ((0, utils_2.isNodeOfType)(liquid_html_parser_1.NodeTypes.Number, pageSizeNode)) {
                    checkPageSize(pageSizeNode, Number(pageSizeNode.value));
                }
            },
            async LiquidRawTag(node) {
                if (node.name === 'schema') {
                    const schema = (0, json_1.parseJSON)(node.body.value);
                    if ((0, utils_1.isError)(schema))
                        return;
                    if (schema.settings && Array.isArray(schema.settings)) {
                        schemaSettings = schema.settings;
                    }
                }
            },
            async onCodePathEnd() {
                pageSizeLookups.forEach((pageSizeVariableLookup) => {
                    // Kind of assumes that you're using settings of some sort.
                    const lastLookup = (0, utils_1.last)(pageSizeVariableLookup.lookups);
                    if (lastLookup === undefined)
                        return;
                    if (lastLookup.type !== liquid_html_parser_1.NodeTypes.String)
                        return;
                    const settingId = lastLookup.value;
                    const setting = schemaSettings.find((setting) => setting.id === settingId);
                    if (setting === undefined)
                        return;
                    if (setting.default === undefined) {
                        context.report({
                            message: `Default pagination size should be defined in the section settings.`,
                            startIndex: pageSizeVariableLookup.position.start,
                            endIndex: pageSizeVariableLookup.position.end,
                        });
                        return;
                    }
                    checkPageSize(pageSizeVariableLookup, setting.default, `This setting's default value should be between ${minSize} and ${maxSize} but is currently ${setting.default}.`);
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8759:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ParserBlockingScript = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const utils_2 = __webpack_require__(3222);
const suggestions_1 = __webpack_require__(5066);
exports.ParserBlockingScript = {
    meta: {
        code: 'ParserBlockingScript',
        aliases: ['ParserBlockingScriptTag'],
        name: 'Avoid parser blocking scripts',
        docs: {
            description: 'They are bad ok?',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/parser-blocking-javascript',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            // {{ 'asset' | asset_url | script_tag }}
            LiquidFilter: async (node, ancestors) => {
                if (node.name !== 'script_tag')
                    return;
                const filterString = node.source.slice(node.position.start, node.position.end);
                const offset = filterString.indexOf('script_tag');
                const parentNode = (0, utils_1.last)(ancestors);
                const grandParentNode = (0, utils_1.last)(ancestors, -1);
                context.report({
                    message: 'The script_tag filter is parser-blocking. Use a <script> tag with async or defer for better performance',
                    startIndex: node.position.start + offset,
                    endIndex: node.position.end,
                    suggest: grandParentNode &&
                        grandParentNode.type === liquid_html_parser_1.NodeTypes.LiquidVariableOutput &&
                        parentNode &&
                        parentNode.type === liquid_html_parser_1.NodeTypes.LiquidVariable &&
                        (0, utils_1.last)(parentNode.filters) === node
                        ? [
                            (0, suggestions_1.liquidFilterSuggestion)('defer', node, parentNode, grandParentNode),
                            (0, suggestions_1.liquidFilterSuggestion)('async', node, parentNode, grandParentNode),
                        ]
                        : undefined,
                });
            },
            // <script src="...">
            HtmlRawNode: async (node) => {
                if (node.name !== 'script') {
                    return;
                }
                const hasSrc = node.attributes
                    .filter(utils_2.isValuedHtmlAttribute)
                    .some((attr) => (0, utils_2.isAttr)(attr, 'src'));
                if (!hasSrc) {
                    return;
                }
                const hasDeferOrAsync = node.attributes
                    .filter(utils_2.isHtmlAttribute)
                    .some((attr) => (0, utils_2.isAttr)(attr, 'async') || (0, utils_2.isAttr)(attr, 'defer'));
                const isTypeModule = node.attributes
                    .filter(utils_2.isValuedHtmlAttribute)
                    .some((attr) => (0, utils_2.isAttr)(attr, 'type') &&
                    ((0, utils_2.hasAttributeValueOf)(attr, 'module') || (0, utils_2.hasAttributeValueOf)(attr, 'importmap')));
                if (hasDeferOrAsync || isTypeModule) {
                    return;
                }
                context.report({
                    message: 'Avoid parser blocking scripts by adding `defer` or `async` on this tag',
                    startIndex: node.position.start,
                    endIndex: node.position.end,
                    suggest: [(0, suggestions_1.scriptTagSuggestion)('defer', node), (0, suggestions_1.scriptTagSuggestion)('async', node)],
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5066:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scriptTagSuggestion = exports.liquidFilterSuggestion = void 0;
const utils_1 = __webpack_require__(6671);
const suggestionMessage = (attr) => `Use an HTML script tag with the ${attr} attribute instead`;
const liquidFilterSuggestion = (attr, node, parentNode, grandParentNode) => ({
    message: suggestionMessage(attr),
    fix(corrector) {
        var _a, _b;
        const expression = node.source.slice(parentNode.expression.position.start, (_b = (_a = (0, utils_1.last)(parentNode.filters, -1)) === null || _a === void 0 ? void 0 : _a.position.end) !== null && _b !== void 0 ? _b : node.position.start);
        const url = `{{ ${expression} }}`;
        corrector.replace(grandParentNode.position.start, grandParentNode.position.end, `<script src="${url}" ${attr}></script>`);
    },
});
exports.liquidFilterSuggestion = liquidFilterSuggestion;
const scriptTagSuggestion = (attr, node) => ({
    message: suggestionMessage(attr),
    fix(corrector) {
        corrector.insert(node.blockStartPosition.end - 1, ` ${attr}`);
    },
});
exports.scriptTagSuggestion = scriptTagSuggestion;
//# sourceMappingURL=suggestions.js.map

/***/ }),

/***/ 8459:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoteAsset = void 0;
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
const utils_2 = __webpack_require__(6671);
const RESOURCE_TAGS = ['img', 'link', 'source', 'script'];
const SHOPIFY_CDN_DOMAINS = ['fonts.shopifycdn.com', 'cdn.shopify.com'];
const TAGNAMES = ['stylesheet_tag', 'script_tag', 'image_tag', 'img_tag'];
const DEPRECATED = ['product_img_url', 'article_img_url', 'collection_img_url', 'img_url'];
const NON_DEPRECATED = [
    'asset_url',
    'image_url',
    'asset_img_url',
    'file_img_url',
    'file_url',
    'global_asset_url',
    'shopify_asset_url',
    'external_video_url',
    'font_url',
];
const LIQUID_OBJECT = 'canonical_url';
function isLiquidVariableOutput(node) {
    return node.type === types_1.LiquidHtmlNodeTypes.LiquidVariableOutput;
}
function isLiquidVariable(node) {
    return typeof node !== 'string' && node.type === types_1.LiquidHtmlNodeTypes.LiquidVariable;
}
function isUrlHostedbyShopify(url) {
    const urlObj = new URL(url);
    return SHOPIFY_CDN_DOMAINS.includes(urlObj.hostname);
}
function valueIsDefinitelyNotShopifyHosted(attr) {
    return attr.value.some((node) => {
        if (node.type === types_1.LiquidHtmlNodeTypes.TextNode && /^(https?:)?\/\//.test(node.value)) {
            if (!isUrlHostedbyShopify(node.value)) {
                return true;
            }
        }
        if (isLiquidVariableOutput(node)) {
            const variable = node.markup;
            if (isLiquidVariable(variable)) {
                const expression = variable.expression;
                if (expression.type === types_1.LiquidHtmlNodeTypes.String && /^https?:\/\//.test(expression.value)) {
                    if (!isUrlHostedbyShopify(expression.value)) {
                        return true;
                    }
                }
            }
        }
        return false;
    });
}
function valueIsShopifyHosted(attr) {
    const ASSET_URL_FILTER_NAMES = [...DEPRECATED, ...NON_DEPRECATED];
    const ASSET_URL_OBJECT_NAMES = [LIQUID_OBJECT];
    return attr.value.some((node) => {
        if (!isLiquidVariableOutput(node))
            return false;
        if (!isLiquidVariable(node.markup))
            return false;
        const includesFilter = node.markup.filters.some((filter) => ASSET_URL_FILTER_NAMES.includes(filter.name));
        if (includesFilter)
            return true;
        if ((0, utils_1.isNodeOfType)(types_1.LiquidHtmlNodeTypes.VariableLookup, node.markup.expression)) {
            if (node.markup.expression.name
                ? ASSET_URL_OBJECT_NAMES.includes(node.markup.expression.name)
                : false)
                return true;
        }
        return false;
    });
}
exports.RemoteAsset = {
    meta: {
        code: 'RemoteAsset',
        aliases: ['AssetUrlFilters'],
        name: 'Remote Asset',
        docs: {
            description: 'This check is aimed at eliminating unnecessary HTTP connections.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/remote-asset',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        function checkHtmlNode(node) {
            if (!RESOURCE_TAGS.includes(node.name))
                return;
            const urlAttribute = node.attributes
                .filter(utils_1.isValuedHtmlAttribute)
                .find((attr) => (0, utils_1.isAttr)(attr, 'src') || (0, utils_1.isAttr)(attr, 'href'));
            if (!urlAttribute)
                return;
            const isShopifyUrl = urlAttribute.value
                .filter((node) => node.type === types_1.LiquidHtmlNodeTypes.TextNode)
                .some((textNode) => isUrlHostedbyShopify(textNode.value));
            if (isShopifyUrl)
                return;
            const hasDefinitelyARemoteAssetUrl = valueIsDefinitelyNotShopifyHosted(urlAttribute);
            if (hasDefinitelyARemoteAssetUrl) {
                context.report({
                    message: 'Asset should be served by the Shopify CDN for better performance.',
                    startIndex: urlAttribute.position.start,
                    endIndex: urlAttribute.position.end,
                });
                return;
            }
            const hasShopifyHostedValue = valueIsShopifyHosted(urlAttribute);
            if (hasShopifyHostedValue)
                return;
            context.report({
                message: 'Use one of the asset_url filters to serve assets for better performance.',
                startIndex: urlAttribute.position.start,
                endIndex: urlAttribute.position.end,
            });
        }
        function checkLiquidFilter(node, ancestors) {
            const tagName = node.name;
            if (!TAGNAMES.includes(tagName))
                return;
            const parentNode = (0, utils_2.last)(ancestors);
            if (!parentNode || !(0, utils_1.isNodeOfType)(types_1.LiquidHtmlNodeTypes.LiquidVariable, parentNode))
                return;
            const hasAsset = parentNode.filters.some((filter) => DEPRECATED.includes(filter.name) || NON_DEPRECATED.includes(filter.name));
            if (hasAsset)
                return;
            const urlNode = parentNode.expression;
            if (urlNode.type === types_1.LiquidHtmlNodeTypes.String && !isUrlHostedbyShopify(urlNode.value)) {
                context.report({
                    message: 'Asset should be served by the Shopify CDN for better performance.',
                    startIndex: urlNode.position.start,
                    endIndex: urlNode.position.end,
                });
            }
            context.report({
                message: `Use one of the asset_url filters to serve assets for better performance.`,
                startIndex: parentNode.expression.position.start,
                endIndex: node.position.end,
            });
        }
        return {
            async HtmlVoidElement(node) {
                checkHtmlNode(node);
            },
            async HtmlRawNode(node) {
                checkHtmlNode(node);
            },
            async LiquidFilter(node, ancestors) {
                checkLiquidFilter(node, ancestors);
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7582:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RequiredLayoutThemeObject = void 0;
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(3222);
exports.RequiredLayoutThemeObject = {
    meta: {
        code: 'RequiredLayoutThemeObject',
        name: 'Prevent missing required objects in theme.liquid',
        docs: {
            description: 'This check prevents missing {{ content_for_header }} and {{ content_for_layout }} objects in layout/theme.liquid.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/required-layout-theme-object',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [types_1.ConfigTarget.All, types_1.ConfigTarget.Recommended],
    },
    create(context) {
        if (context.toRelativePath(context.file.uri) !== 'layout/theme.liquid') {
            return {};
        }
        const requiredObjects = ['content_for_header', 'content_for_layout'];
        const foundObjects = new Set();
        let headTag;
        let bodyTag;
        function checkVariableUsage(node) {
            if (node.name && requiredObjects.includes(node.name)) {
                foundObjects.add(node.name);
            }
        }
        return {
            async VariableLookup(node) {
                checkVariableUsage(node);
            },
            async HtmlElement(node) {
                if ((0, utils_1.isHtmlTag)(node, 'head')) {
                    headTag = node;
                }
                else if ((0, utils_1.isHtmlTag)(node, 'body')) {
                    bodyTag = node;
                }
            },
            async onCodePathEnd() {
                var _a, _b;
                for (const requiredObject of requiredObjects) {
                    if (!foundObjects.has(requiredObject)) {
                        const message = `The required object '{{ ${requiredObject} }}' is missing in layout/theme.liquid`;
                        const insertionNode = requiredObject === 'content_for_header' ? headTag : bodyTag;
                        const fixInsertPosition = insertionNode === null || insertionNode === void 0 ? void 0 : insertionNode.blockEndPosition.start;
                        context.report({
                            message,
                            startIndex: (_a = insertionNode === null || insertionNode === void 0 ? void 0 : insertionNode.position.start) !== null && _a !== void 0 ? _a : 0,
                            endIndex: (_b = insertionNode === null || insertionNode === void 0 ? void 0 : insertionNode.position.end) !== null && _b !== void 0 ? _b : 0,
                            fix: fixInsertPosition !== undefined
                                ? (corrector) => corrector.insert(fixInsertPosition, `{{ ${requiredObject} }}`)
                                : undefined,
                        });
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6727:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SchemaPresetsBlockOrder = void 0;
const json_1 = __webpack_require__(9151);
const to_schema_1 = __webpack_require__(5182);
const types_1 = __webpack_require__(2660);
exports.SchemaPresetsBlockOrder = {
    meta: {
        code: 'SchemaPresetsBlockOrder',
        name: 'Gives recommendations and validations for block_order',
        docs: {
            description: 'Gives recommendations and validations for block_order for preset blocks as a hash.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/schema-presets-block-order',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema' || node.body.kind !== 'json') {
                    return;
                }
                const offset = node.blockStartPosition.end;
                const schema = await (0, to_schema_1.getSchema)(context);
                const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                if (!validSchema || validSchema instanceof Error)
                    return;
                if (!ast || ast instanceof Error)
                    return;
                const presets = validSchema.presets;
                if (!presets)
                    return;
                presets.forEach((preset, index) => {
                    if ('blocks' in preset && preset.blocks) {
                        checkBlockOrder(preset, context, offset, ast, ['presets', String(index)]);
                    }
                });
            },
        };
    },
};
function checkBlockOrder(node, context, offset, ast, ast_path) {
    if ('blocks' in node && typeof node.blocks == 'object' && node.blocks) {
        const blockOrder = 'block_order' in node ? node.block_order : undefined;
        // check 1: is block_order missing?
        if (!blockOrder) {
            if (shouldHaveBlockOrder(node)) {
                reportWarning(context, offset, ast, ast_path, `block_order is missing`, false);
            }
        }
        // check 2: are items in block_order present in blocks?
        blockOrder === null || blockOrder === void 0 ? void 0 : blockOrder.forEach((block_id, index) => {
            if (!node.blocks || (!Array.isArray(node.blocks) && !node.blocks[block_id])) {
                const warning_ast_path = ast_path.concat(['block_order']).concat([String(index)]);
                reportWarning(context, offset, ast, warning_ast_path, `block '${block_id}' is missing from 'blocks'`);
            }
        });
        // check 3: are items in blocks correctly in block_order?
        for (const [block_id, block] of Object.entries(node.blocks)) {
            if (block.static) {
                // if static block is in the block_order, that's an error
                if (Array.isArray(blockOrder) && blockOrder.includes(block_id)) {
                    const warning_ast_path = ast_path.concat(['block_order']);
                    reportWarning(context, offset, ast, warning_ast_path, `static block '${block_id}' cannot be in the block_order`);
                }
            }
            else {
                // if non-static block is not in the block_order, that's a potential mistake
                if (Array.isArray(blockOrder) && !blockOrder.includes(block_id)) {
                    const warning_ast_path = ast_path.concat(['block_order']);
                    reportWarning(context, offset, ast, warning_ast_path, `block '${block_id}' is missing from the block_order`);
                }
            }
            //recursive check for nested blocks
            if (block.blocks) {
                ast_path.push('blocks', block_id); // so we'll get ['presets', 0, 'blocks', 'my_block1'] for example to do nodeAtPath(schema.ast, ast_path)
                checkBlockOrder(block, context, offset, ast, ast_path);
            }
        }
    }
}
function shouldHaveBlockOrder(node) {
    if ('blocks' in node &&
        typeof node.blocks === 'object' &&
        node.blocks !== null &&
        !Array.isArray(node.blocks)) {
        return Object.entries(node.blocks).some(([_blockId, block]) => {
            // If static is undefined or false, it's considered non-static
            return block.static !== true;
        });
    }
    return false;
}
function reportWarning(context, offset, ast, ast_path, message, fullHighlight = true) {
    const node = (0, json_1.nodeAtPath)(ast, ast_path);
    const startIndex = fullHighlight ? offset + (0, json_1.getLocStart)(node) : offset + (0, json_1.getLocEnd)(node) - 1; // start to finish of the node or last char of the node
    const endIndex = offset + (0, json_1.getLocEnd)(node);
    context.report({
        message: message,
        startIndex,
        endIndex,
    });
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 656:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SchemaPresetsStaticBlocks = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const json_1 = __webpack_require__(9151);
const to_schema_1 = __webpack_require__(5182);
const types_1 = __webpack_require__(2660);
const markup_1 = __webpack_require__(1639);
exports.SchemaPresetsStaticBlocks = {
    meta: {
        code: 'SchemaPresetsStaticBlocks',
        name: 'Ensure the preset static blocks are used in the liquid',
        docs: {
            description: 'Warns if a preset static block does not have a corresponding content_for "block" tag.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/schema-presets-static-blocks',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        let contentForBlockList = [];
        let staticBlockList = [];
        let offset = 0;
        function checkStaticBlocks() {
            staticBlockList.forEach((block) => {
                if (!contentForBlockList.some((contentBlock) => contentBlock.id === block.id && contentBlock.type === block.type)) {
                    context.report({
                        message: `Static block ${block.id} is missing a corresponding content_for "block" tag.`,
                        startIndex: block.startIndex,
                        endIndex: block.endIndex,
                    });
                }
            });
        }
        return {
            async LiquidTag(node) {
                var _a, _b;
                // Early return if not a content_for block tag
                if (node.name !== liquid_html_parser_1.NamedTags.content_for || !(0, markup_1.isContentForBlock)(node.markup))
                    return;
                // Extract id and type from markup args
                const idValue = (_a = node.markup.args.find((arg) => arg.name === 'id')) === null || _a === void 0 ? void 0 : _a.value;
                const typeArg = (_b = node.markup.args.find((arg) => arg.name === 'type')) === null || _b === void 0 ? void 0 : _b.value;
                if (!typeArg || typeArg.type !== liquid_html_parser_1.NodeTypes.String) {
                    return; // covered by VariableContentForArguments
                }
                const typeValue = typeArg.value;
                // Add to list if valid string id
                if ((idValue === null || idValue === void 0 ? void 0 : idValue.type) === liquid_html_parser_1.NodeTypes.String) {
                    contentForBlockList.push({ id: idValue.value, type: typeValue });
                }
            },
            async LiquidRawTag(node) {
                // when we get the schema tag, get the list of static blocks from each preset
                if (node.name === 'schema' && node.body.kind === 'json') {
                    offset = node.blockStartPosition.end;
                    const schema = await (0, to_schema_1.getSchema)(context);
                    const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                    if (!validSchema || validSchema instanceof Error)
                        return;
                    if (!ast || ast instanceof Error)
                        return;
                    const presets = validSchema.presets;
                    if (!presets)
                        return;
                    presets.forEach((preset, index) => {
                        if ('blocks' in preset && preset.blocks) {
                            let ast_path = ['presets', index, 'blocks'];
                            // blocks as an array
                            if (Array.isArray(preset.blocks)) {
                                preset.blocks.forEach((block, block_index) => {
                                    if (block.static === true && block.id) {
                                        let node = (0, json_1.nodeAtPath)(ast, ast_path.concat([block_index]));
                                        staticBlockList.push({
                                            id: block.id,
                                            type: block.type,
                                            startIndex: offset + (0, json_1.getLocStart)(node),
                                            endIndex: offset + (0, json_1.getLocEnd)(node),
                                        });
                                    }
                                });
                            }
                            // blocks as an object
                            else if (typeof preset.blocks === 'object') {
                                Object.entries(preset.blocks).forEach(([block_id, block]) => {
                                    if (block.static === true) {
                                        let node = (0, json_1.nodeAtPath)(ast, ast_path.concat(block_id));
                                        staticBlockList.push({
                                            id: block_id,
                                            type: block.type,
                                            startIndex: offset + (0, json_1.getLocStart)(node),
                                            endIndex: offset + (0, json_1.getLocEnd)(node),
                                        });
                                    }
                                });
                            }
                        }
                    });
                }
            },
            async onCodePathEnd() {
                checkStaticBlocks();
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7604:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TranslationKeyExists = void 0;
const json_1 = __webpack_require__(9151);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
function keyExists(key, pointer) {
    for (const token of key.split('.')) {
        if (typeof pointer !== 'object') {
            return false;
        }
        if (!pointer.hasOwnProperty(token)) {
            return false;
        }
        pointer = pointer[token];
    }
    return true;
}
exports.TranslationKeyExists = {
    meta: {
        code: 'TranslationKeyExists',
        name: 'Reports missing translation keys',
        docs: {
            description: 'Reports missing translation keys',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/translation-key-exists',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        const nodes = [];
        let schemaLocales;
        return {
            async LiquidVariable(node) {
                if (node.expression.type !== 'String') {
                    return;
                }
                if (!node.filters.some(({ name }) => ['t', 'translate'].includes(name))) {
                    return;
                }
                nodes.push({
                    translationKey: node.expression.value,
                    startIndex: node.expression.position.start,
                    endIndex: node.expression.position.end,
                });
            },
            async LiquidRawTag(node) {
                var _a;
                if (node.name !== 'schema' || node.body.kind !== 'json') {
                    return;
                }
                const defaultLocale = await context.getDefaultLocale();
                const schema = (0, json_1.parseJSON)(node.body.value);
                if ((0, utils_1.isError)(schema) && schema instanceof SyntaxError)
                    return;
                schemaLocales = (_a = schema.locales) === null || _a === void 0 ? void 0 : _a[defaultLocale];
            },
            async onCodePathEnd() {
                var _a;
                const defaultTranslations = await context.getDefaultTranslations();
                const defaultLocale = await context.getDefaultLocale();
                const systemTranslations = await ((_a = context.themeDocset) === null || _a === void 0 ? void 0 : _a.systemTranslations());
                const systemTranslationsKeys = Object.keys(systemTranslations !== null && systemTranslations !== void 0 ? systemTranslations : {});
                if (!defaultTranslations && systemTranslationsKeys.length === 0)
                    return;
                nodes.forEach(({ translationKey, startIndex, endIndex }) => {
                    if (keyExists(translationKey, defaultTranslations) ||
                        keyExists(translationKey, schemaLocales) ||
                        systemTranslationsKeys.includes(translationKey)) {
                        return;
                    }
                    let message = `'${translationKey}' does not have a matching entry in 'locales/${defaultLocale}.default.json'`;
                    if (schemaLocales) {
                        message += ` or '${context.toRelativePath(context.file.uri)}'`;
                    }
                    context.report({
                        message,
                        startIndex,
                        endIndex,
                    });
                });
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1182:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnclosedHTMLElement = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const utils_2 = __webpack_require__(3222);
exports.UnclosedHTMLElement = {
    meta: {
        code: 'UnclosedHTMLElement',
        aliases: ['UnclosedHTMLElement'],
        name: 'Unclosed HTML Element',
        docs: {
            description: 'Warns you of unbalanced HTML tags in branching code',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/unclosed-html-element',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        /**
         * Algorithm explanation:
         *
         * When we have unclosed nodes, we have something a bit like this:
         *
         * <grandparent>
         *   {% if condition %}
         *     <unclosed1>
         *   {% else %}
         *     <unclosed2>
         *   {% endif %}
         *
         *   {% if condition %}
         *     </unclosed1>
         *   {% else %}
         *     </unclosed2>
         *   {% endif %}
         * </grandparent>
         *
         * When things are proper, we can see the following:
         *   - unclosed nodes must have the same parent condition,
         *   - unclosed nodes must have the same grandparent node.
         *
         * So what we can do is create stacks of unclosed nodes grouped by
         *   - parent condition, and
         *   - grandparent node.
         *
         * Thus we have
         *   - the stackByGrandparent Map which is the index by grandparent node
         *   - the Stacks object which is a by-condition-identifier index of open/close nodes
         *
         * When we're done with the file, we verify that the stacks push and
         * pop to the empty stack. When it isn't, then we have a problem to
         * report.
         */
        const stacksByGrandparent = new Map();
        return {
            async HtmlElement(node, ancestors) {
                if (isClosed(node))
                    return;
                const [branch, index] = (0, utils_1.findLastAndIndex)(ancestors, utils_2.isLiquidBranch);
                if (!branch)
                    return;
                const parent = ancestors[index - 1];
                const grandparent = ancestors[index - 2];
                if (!parent || !grandparent || parent.type !== liquid_html_parser_1.NodeTypes.LiquidTag)
                    return;
                if (!stacksByGrandparent.has(grandparent)) {
                    stacksByGrandparent.set(grandparent, {
                        open: new Map(),
                        close: new Map(),
                        identifiers: new Set(),
                    });
                }
                const stacks = stacksByGrandparent.get(grandparent);
                const identifier = getConditionIdentifier(branch, parent);
                stacks.identifiers.add(identifier);
                if (!stacks.open.has(identifier))
                    stacks.open.set(identifier, []);
                stacks.open.get(identifier).push(node);
            },
            async HtmlDanglingMarkerClose(node, ancestors) {
                const [branch, index] = (0, utils_1.findLastAndIndex)(ancestors, utils_2.isLiquidBranch);
                if (!branch)
                    return;
                const parent = ancestors[index - 1];
                const grandparent = ancestors[index - 2];
                if (!parent || !grandparent || parent.type !== liquid_html_parser_1.NodeTypes.LiquidTag)
                    return;
                if (!stacksByGrandparent.has(grandparent)) {
                    stacksByGrandparent.set(grandparent, {
                        open: new Map(),
                        close: new Map(),
                        identifiers: new Set(),
                    });
                }
                const stacks = stacksByGrandparent.get(grandparent);
                const identifier = getConditionIdentifier(branch, parent);
                stacks.identifiers.add(identifier);
                if (!stacks.close.has(identifier))
                    stacks.close.set(identifier, []);
                stacks.close.get(identifier).push(node);
            },
            async onCodePathEnd() {
                var _a, _b;
                for (const [grandparent, stacks] of stacksByGrandparent) {
                    for (const identifier of stacks.identifiers) {
                        const openNodes = (_a = stacks.open.get(identifier)) !== null && _a !== void 0 ? _a : [];
                        const closeNodes = (_b = stacks.close.get(identifier)) !== null && _b !== void 0 ? _b : [];
                        // We sort them in the order they are found in the file because we
                        // otherwise don't have an order guarantee with everything running
                        // async.
                        const nodes = []
                            .concat(openNodes, closeNodes)
                            .sort((a, b) => a.position.start - b.position.start);
                        // If everything is balanced,
                        //   Then we're going to push on open and pop when the close match.
                        // If a close doesn't match,
                        //   Then we'll push it onto the stack and everything after won't match.
                        const stack = [];
                        for (const node of nodes) {
                            if (node.type === liquid_html_parser_1.NodeTypes.HtmlElement) {
                                stack.push(node);
                            }
                            else if (stack.length > 0 &&
                                getName(node) === getName(stack.at(-1)) &&
                                stack.at(-1).type === liquid_html_parser_1.NodeTypes.HtmlElement &&
                                node.type === liquid_html_parser_1.NodeTypes.HtmlDanglingMarkerClose) {
                                stack.pop();
                            }
                            else {
                                stack.push(node);
                            }
                        }
                        // At the end, whatever is left in the stack is a reported offense.
                        for (const node of stack) {
                            if (node.type === liquid_html_parser_1.NodeTypes.HtmlDanglingMarkerClose) {
                                context.report({
                                    message: `Closing tag does not have a matching opening tag for condition \`${identifier}\` in ${grandparent.type} '${getName(grandparent)}'`,
                                    startIndex: node.position.start,
                                    endIndex: node.position.end,
                                });
                            }
                            else {
                                context.report({
                                    message: `Opening tag does not have a matching closing tag for condition \`${identifier}\` in ${grandparent.type} '${getName(grandparent)}'`,
                                    startIndex: node.blockStartPosition.start,
                                    endIndex: node.blockStartPosition.end,
                                });
                            }
                        }
                    }
                }
            },
        };
    },
};
function isClosed(node) {
    return node.blockEndPosition.start !== node.blockEndPosition.end;
}
function getConditionIdentifier(branch, parent) {
    if (branch.name === null) {
        switch (parent.name) {
            case liquid_html_parser_1.NamedTags.if:
                return getConditionIdentifierForMarkup(parent.markup);
            case liquid_html_parser_1.NamedTags.unless:
                return negateIdentifier(getConditionIdentifierForMarkup(parent.markup));
            default:
                return '??';
        }
    }
    switch (branch.name) {
        case 'else':
            switch (parent.name) {
                case liquid_html_parser_1.NamedTags.if:
                    return negateIdentifier(getConditionIdentifierForMarkup(parent.markup));
                case liquid_html_parser_1.NamedTags.unless:
                    return getConditionIdentifierForMarkup(parent.markup);
                case liquid_html_parser_1.NamedTags.case:
                    return `case ${getConditionIdentifierForMarkup(parent.markup)}`;
                default:
                    return '??';
            }
        case liquid_html_parser_1.NamedTags.elsif:
            return getConditionIdentifierForMarkup(branch.markup);
        case liquid_html_parser_1.NamedTags.when:
            if (parent.name !== liquid_html_parser_1.NamedTags.case)
                return '??';
            return `case ${getConditionIdentifierForMarkup(parent.markup)} == ${getConditionIdentifierForWhenMarkup(branch.markup)}`;
        default:
            return '??';
    }
}
function getConditionIdentifierForWhenMarkup(conditions) {
    if (typeof conditions === 'string')
        return conditions;
    return conditions.map(getConditionIdentifierForMarkup).join(' or ');
}
function getConditionIdentifierForMarkup(condition) {
    var _a;
    if (typeof condition === 'string')
        return condition;
    switch (condition.type) {
        case liquid_html_parser_1.NodeTypes.String:
            return `'` + condition.value + `'`;
        case liquid_html_parser_1.NodeTypes.LiquidLiteral:
            if (condition.value === null)
                return 'null';
            return condition.value.toString();
        case liquid_html_parser_1.NodeTypes.Number:
            return condition.value;
        case liquid_html_parser_1.NodeTypes.VariableLookup:
            return `${(_a = condition.name) !== null && _a !== void 0 ? _a : ''}${condition.lookups.map((expression) => `[${getConditionIdentifierForMarkup(expression)}]`)}`;
        case liquid_html_parser_1.NodeTypes.Range:
            return `(${getConditionIdentifierForMarkup(condition.start)}..${getConditionIdentifierForMarkup(condition.end)})`;
        case liquid_html_parser_1.NodeTypes.Comparison:
            return [
                getConditionIdentifierForMarkup(condition.left),
                condition.comparator,
                getConditionIdentifierForMarkup(condition.right),
            ].join(' ');
        case liquid_html_parser_1.NodeTypes.LogicalExpression:
            return [
                getConditionIdentifierForMarkup(condition.left),
                condition.relation,
                getConditionIdentifierForMarkup(condition.right),
            ].join(' ');
        default: {
            return (0, utils_1.assertNever)(condition);
        }
    }
}
function negateIdentifier(conditionIdentifier) {
    return conditionIdentifier.startsWith('-')
        ? conditionIdentifier.slice(1)
        : `-${conditionIdentifier}`;
}
function getName(node) {
    if (node.type === liquid_html_parser_1.NodeTypes.HtmlElement || node.type === liquid_html_parser_1.NodeTypes.HtmlDanglingMarkerClose) {
        if (node.name.length === 0)
            return '';
        return node.source.slice(node.name.at(0).position.start, node.name.at(-1).position.end);
    }
    else if (node.type === liquid_html_parser_1.NodeTypes.LiquidTag) {
        return node.name;
    }
    else {
        return node.type;
    }
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2544:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UndefinedObject = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
exports.UndefinedObject = {
    meta: {
        code: 'UndefinedObject',
        name: 'Undefined Object',
        docs: {
            description: 'This check exists to identify references to undefined Liquid objects.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/undefined-object',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        /**
         * At present, snippet assets are not supported due to the inability of this
         * check to handle objects defined in other assets.
         */
        const relativePath = context.toRelativePath(context.file.uri);
        if (relativePath.startsWith('snippets/')) {
            return {};
        }
        /**
         * Skip this check when definitions for global objects are unavailable.
         */
        if (!context.themeDocset) {
            return {};
        }
        const themeDocset = context.themeDocset;
        const variableScopes = new Map();
        const variables = [];
        function indexVariableScope(variableName, scope) {
            var _a;
            if (!variableName)
                return;
            const indexedScope = (_a = variableScopes.get(variableName)) !== null && _a !== void 0 ? _a : [];
            variableScopes.set(variableName, indexedScope.concat(scope));
        }
        return {
            async LiquidTag(node) {
                var _a, _b, _c, _d;
                if (isLiquidTagAssign(node)) {
                    indexVariableScope(node.markup.name, {
                        start: node.blockStartPosition.end,
                    });
                }
                if (isLiquidTagCapture(node)) {
                    indexVariableScope(node.markup.name, {
                        start: (_a = node.blockEndPosition) === null || _a === void 0 ? void 0 : _a.end,
                    });
                }
                /**
                 * {% form 'cart', cart %}
                 *   {{ form }}
                 * {% endform %}
                 */
                if (['form', 'paginate'].includes(node.name)) {
                    indexVariableScope(node.name, {
                        start: node.blockStartPosition.end,
                        end: (_b = node.blockEndPosition) === null || _b === void 0 ? void 0 : _b.start,
                    });
                }
                /* {% layout none %} */
                if (node.name === 'layout') {
                    indexVariableScope('none', {
                        start: node.position.start,
                        end: node.position.end,
                    });
                }
                /* {% increment var %} */
                if ((isLiquidTagIncrement(node) || isLiquidTagDecrement(node)) &&
                    node.markup.name !== null) {
                    indexVariableScope(node.markup.name, {
                        start: node.position.start,
                    });
                }
                /**
                 * {% for x in y %}
                 *   {{ forloop }}
                 *   {{ x }}
                 * {% endfor %}
                 */
                if (isLiquidForTag(node) || isLiquidTableRowTag(node)) {
                    indexVariableScope(node.markup.variableName, {
                        start: node.blockStartPosition.end,
                        end: (_c = node.blockEndPosition) === null || _c === void 0 ? void 0 : _c.start,
                    });
                    indexVariableScope(node.name === 'for' ? 'forloop' : 'tablerowloop', {
                        start: node.blockStartPosition.end,
                        end: (_d = node.blockEndPosition) === null || _d === void 0 ? void 0 : _d.start,
                    });
                }
            },
            async VariableLookup(node, ancestors) {
                const parent = (0, utils_1.last)(ancestors);
                if (isLiquidTag(parent) && isLiquidTagCapture(parent))
                    return;
                variables.push(node);
            },
            async onCodePathEnd() {
                const objects = await globalObjects(themeDocset, relativePath);
                objects.forEach((obj) => variableScopes.set(obj.name, []));
                variables.forEach((variable) => {
                    if (!variable.name)
                        return;
                    const isVariableDefined = isDefined(variable.name, variable.position, variableScopes);
                    if (isVariableDefined)
                        return;
                    context.report({
                        message: `Unknown object '${variable.name}' used.`,
                        startIndex: variable.position.start,
                        endIndex: variable.position.end,
                    });
                });
            },
        };
    },
};
async function globalObjects(themeDocset, relativePath) {
    const objects = await themeDocset.objects();
    const contextualObjects = getContextualObjects(relativePath);
    const globalObjects = objects.filter(({ access, name }) => {
        return (contextualObjects.includes(name) ||
            !access ||
            access.global === true ||
            access.template.length > 0);
    });
    return globalObjects;
}
function getContextualObjects(relativePath) {
    if (relativePath.startsWith('layout/checkout.liquid')) {
        return [
            'locale',
            'direction',
            'skip_to_content_link',
            'checkout_html_classes',
            'checkout_stylesheets',
            'checkout_scripts',
            'content_for_logo',
            'breadcrumb',
            'order_summary_toggle',
            'content_for_order_summary',
            'alternative_payment_methods',
            'content_for_footer',
            'tracking_code',
        ];
    }
    if (relativePath.startsWith('sections/')) {
        return ['section', 'predictive_search', 'recommendations', 'comment'];
    }
    if (relativePath.startsWith('blocks/')) {
        return ['app', 'section', 'block'];
    }
    if (relativePath.startsWith('snippets/')) {
        return ['app'];
    }
    return [];
}
function isDefined(variableName, variablePosition, scopedVariables) {
    const scopes = scopedVariables.get(variableName);
    /**
     * If there's no scope, the variable is not defined.
     */
    if (!scopes)
        return false;
    /**
     * If there are zero scopes, the variable is globally defined.
     */
    if (scopes.length === 0)
        return true;
    /**
     * Checks if a variable is defined within any of the scopes.
     */
    return scopes.some((scope) => isDefinedInScope(variablePosition, scope));
}
function isDefinedInScope(variablePosition, scope) {
    const start = variablePosition.start;
    const isVariableAfterScopeStart = !scope.start || start > scope.start;
    const isVariableBeforeScopeEnd = !scope.end || start < scope.end;
    return isVariableAfterScopeStart && isVariableBeforeScopeEnd;
}
function isLiquidTag(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === liquid_html_parser_1.NodeTypes.LiquidTag;
}
function isLiquidTagCapture(node) {
    return node.name === liquid_html_parser_1.NamedTags.capture;
}
function isLiquidTagAssign(node) {
    return node.name === liquid_html_parser_1.NamedTags.assign && typeof node.markup !== 'string';
}
function isLiquidForTag(node) {
    return node.name === liquid_html_parser_1.NamedTags.for && typeof node.markup !== 'string';
}
function isLiquidTableRowTag(node) {
    return node.name === liquid_html_parser_1.NamedTags.tablerow && typeof node.markup !== 'string';
}
function isLiquidTagIncrement(node) {
    return node.name === liquid_html_parser_1.NamedTags.increment && typeof node.markup !== 'string';
}
function isLiquidTagDecrement(node) {
    return node.name === liquid_html_parser_1.NamedTags.decrement && typeof node.markup !== 'string';
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1915:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UniqueSettingIds = void 0;
const types_1 = __webpack_require__(2660);
exports.UniqueSettingIds = {
    meta: {
        code: 'UniqueSettingId',
        name: 'Prevent duplicate Ids in setting_schema',
        docs: {
            description: 'This check is aimed at eliminating duplicate Ids in settings_schema.json',
            recommended: true,
            // url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-schema',
        },
        type: types_1.SourceCodeType.JSON,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async onCodePathEnd(file) {
                if ((0, types_1.isArrayNode)(file.ast)) {
                    const settingIds = [];
                    /* Find and loop through all of our nodes that have an id value and find their key value */
                    for (const child of file.ast.children) {
                        if ((0, types_1.isObjectNode)(child) && child.children) {
                            const settingsNode = child.children.find((node) => node.key.value === 'settings');
                            if (settingsNode && settingsNode.value && (0, types_1.isArrayNode)(settingsNode.value)) {
                                for (const setting of settingsNode.value.children) {
                                    if ((0, types_1.isObjectNode)(setting) && setting.children) {
                                        const idNode = setting.children.find((node) => node.key.value === 'id');
                                        if ((0, types_1.isPropertyNode)(idNode)) {
                                            settingIds.push(idNode);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    /* Check for dupes */
                    const idMap = new Map();
                    for (const node of settingIds) {
                        if ((0, types_1.isLiteralNode)(node.value)) {
                            const id = node.value.value;
                            if (typeof id === 'string') {
                                if (!idMap.has(id)) {
                                    idMap.set(id, []);
                                }
                                idMap.get(id).push(node);
                            }
                        }
                    }
                    const duplicates = Array.from(idMap.entries()).filter(([_, nodes]) => nodes.length > 1);
                    if (duplicates.length > 0) {
                        for (const [id, nodes] of duplicates) {
                            const lastNodeFound = nodes[nodes.length - 1];
                            context.report({
                                message: `Duplicate setting id found: "${id}"`,
                                startIndex: lastNodeFound.loc.start.offset,
                                endIndex: lastNodeFound.loc.end.offset,
                            });
                        }
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4122:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UniqueStaticBlockId = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const markup_1 = __webpack_require__(1639);
exports.UniqueStaticBlockId = {
    meta: {
        code: 'UniqueStaticBlockId',
        name: 'Prevent use of duplicated ids for blocks rendered statically',
        docs: {
            description: 'This check is aimed at preventing the use of duplicated ids for blocks rendered statically.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/unique-static-block-id',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        const usedIds = new Set();
        const idRegex = /id:\s*["'](\S+)["']/;
        return {
            async LiquidTag(node) {
                if (node.name !== liquid_html_parser_1.NamedTags.content_for) {
                    return;
                }
                if (!(0, markup_1.isContentForBlock)(node.markup)) {
                    return;
                }
                const idNode = node.markup.args.find((arg) => arg.name === 'id');
                if (!idNode) {
                    return; // covered by VariableContentForArguments
                }
                const idValueNode = idNode.value;
                if (idValueNode.type !== liquid_html_parser_1.NodeTypes.String) {
                    return; // covered by VariableContentForArguments
                }
                const id = idValueNode.value;
                if (usedIds.has(id)) {
                    context.report({
                        message: `The id '${id}' is already being used by another static block`,
                        startIndex: idValueNode.position.start,
                        endIndex: idValueNode.position.end,
                        suggest: [],
                    });
                }
                else {
                    usedIds.add(id);
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4843:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnknownFilter = void 0;
// src/checks/unknown-filter/index.ts
const types_1 = __webpack_require__(2660);
exports.UnknownFilter = {
    meta: {
        code: 'UnknownFilter',
        name: 'Prevent use of unknown filters',
        docs: {
            description: 'This check is aimed at preventing the use of unknown filters.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/unknown-filter',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        if (!context.themeDocset) {
            return {};
        }
        return {
            async LiquidFilter(node) {
                const knownFilters = await context.themeDocset.filters();
                if (!knownFilters.some((filter) => filter.name === node.name)) {
                    context.report({
                        message: `Unknown filter '${node.name}' used.`,
                        startIndex: node.position.start + 1,
                        endIndex: node.position.end,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6500:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnusedAssign = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
exports.UnusedAssign = {
    meta: {
        code: 'UnusedAssign',
        name: 'Prevent unused assigns',
        docs: {
            description: 'This check exists to prevent bloat in themes by surfacing variable definitions that are not used.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/unused-assign',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        const assignedVariables = new Map();
        const usedVariables = new Set();
        function checkVariableUsage(node) {
            if (node.type === liquid_html_parser_1.NodeTypes.VariableLookup) {
                usedVariables.add(node.name);
            }
        }
        return {
            async LiquidTag(node) {
                if (isLiquidTagAssign(node)) {
                    assignedVariables.set(node.markup.name, node);
                }
                else if (isLiquidTagCapture(node) && node.markup.name) {
                    assignedVariables.set(node.markup.name, node);
                }
            },
            async VariableLookup(node, ancestors) {
                const parentNode = ancestors.at(-1);
                if (parentNode && isLiquidTagCapture(parentNode)) {
                    return;
                }
                checkVariableUsage(node);
            },
            async onCodePathEnd() {
                for (const [variable, node] of assignedVariables.entries()) {
                    if (!usedVariables.has(variable) && !variable.startsWith('_')) {
                        context.report({
                            message: `The variable '${variable}' is assigned but not used`,
                            startIndex: node.position.start,
                            endIndex: node.position.end,
                            suggest: [
                                {
                                    message: `Remove the unused variable '${variable}'`,
                                    fix: (corrector) => corrector.remove(node.position.start, node.position.end),
                                },
                            ],
                        });
                    }
                }
            },
        };
    },
};
function isLiquidTagAssign(node) {
    return node.name === 'assign' && typeof node.markup !== 'string';
}
function isLiquidTagCapture(node) {
    return (node.type == liquid_html_parser_1.NodeTypes.LiquidTag && node.name === 'capture' && typeof node.markup !== 'string');
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3222:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isLiquidString = exports.hasAttributeValueOf = exports.valueIncludes = exports.isValuedHtmlAttribute = exports.isHtmlAttribute = exports.isAttr = exports.isHtmlTag = exports.isLiquidBranch = exports.isNodeOfType = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
function isNodeOfType(type, node) {
    return (node === null || node === void 0 ? void 0 : node.type) === type;
}
exports.isNodeOfType = isNodeOfType;
function isLiquidBranch(node) {
    return isNodeOfType(liquid_html_parser_1.NodeTypes.LiquidBranch, node);
}
exports.isLiquidBranch = isLiquidBranch;
function isHtmlTag(node, name) {
    return (node.name.length === 1 &&
        node.name[0].type === liquid_html_parser_1.NodeTypes.TextNode &&
        node.name[0].value === name &&
        !!node.blockEndPosition);
}
exports.isHtmlTag = isHtmlTag;
function isAttr(attr, name) {
    return (attr.name.length === 1 &&
        isNodeOfType(liquid_html_parser_1.NodeTypes.TextNode, attr.name[0]) &&
        attr.name[0].value === name);
}
exports.isAttr = isAttr;
function isHtmlAttribute(attr) {
    return [
        liquid_html_parser_1.NodeTypes.AttrUnquoted,
        liquid_html_parser_1.NodeTypes.AttrDoubleQuoted,
        liquid_html_parser_1.NodeTypes.AttrSingleQuoted,
        liquid_html_parser_1.NodeTypes.AttrEmpty,
    ].some((type) => isNodeOfType(type, attr));
}
exports.isHtmlAttribute = isHtmlAttribute;
function isValuedHtmlAttribute(attr) {
    return [liquid_html_parser_1.NodeTypes.AttrUnquoted, liquid_html_parser_1.NodeTypes.AttrDoubleQuoted, liquid_html_parser_1.NodeTypes.AttrSingleQuoted].some((type) => isNodeOfType(type, attr));
}
exports.isValuedHtmlAttribute = isValuedHtmlAttribute;
function valueIncludes(attr, word) {
    const regex = new RegExp(`(^|\\s)${word}(\\s|$)`, 'g');
    return attr.value
        .filter((node) => isNodeOfType(liquid_html_parser_1.NodeTypes.TextNode, node))
        .some((valueNode) => regex.test(valueNode.value));
}
exports.valueIncludes = valueIncludes;
function hasAttributeValueOf(attr, value) {
    return (attr.value.length === 1 &&
        isNodeOfType(liquid_html_parser_1.NodeTypes.TextNode, attr.value[0]) &&
        attr.value[0].value === value);
}
exports.hasAttributeValueOf = hasAttributeValueOf;
function isLiquidString(node) {
    return node.type === liquid_html_parser_1.NodeTypes.String;
}
exports.isLiquidString = isLiquidString;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 8400:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidBlockTarget = void 0;
const types_1 = __webpack_require__(2660);
const json_1 = __webpack_require__(9151);
const to_schema_1 = __webpack_require__(5182);
const utils_1 = __webpack_require__(6671);
exports.ValidBlockTarget = {
    meta: {
        code: 'ValidBlockTarget',
        name: 'Validate block targeting in presets',
        docs: {
            description: 'Ensures block types only reference valid block types and respect parent-child relationships',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-block-target',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema' || node.body.kind !== 'json')
                    return;
                const offset = node.blockStartPosition.end;
                const schema = await (0, to_schema_1.getSchema)(context);
                const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                if (!validSchema || validSchema instanceof Error)
                    return;
                if (!ast || ast instanceof Error)
                    return;
                if (!schema)
                    return;
                const { rootLevelThemeBlocks, rootLevelLocalBlocks, presetLevelBlocks } = (0, utils_1.getBlocks)(validSchema);
                if (rootLevelLocalBlocks.length > 0)
                    return;
                let errorsInRootLevelBlocks = false;
                await Promise.all(rootLevelThemeBlocks.map(async ({ node, path }) => {
                    const typeNode = (0, json_1.nodeAtPath)(ast, path);
                    const exists = await (0, utils_1.validateBlockFileExistence)(node.type, context);
                    if (!exists) {
                        errorsInRootLevelBlocks = true;
                        (0, utils_1.reportWarning)(`Theme block 'blocks/${node.type}.liquid' does not exist.`, offset, typeNode, context);
                    }
                }));
                if (errorsInRootLevelBlocks)
                    return;
                let errorsInPresetLevelBlocks = false;
                for (const [depthStr, blocks] of Object.entries(presetLevelBlocks)) {
                    const depth = parseInt(depthStr, 10);
                    if (depth === 0) {
                        await Promise.all(blocks.map(async ({ node, path }) => {
                            const typeNode = (0, json_1.nodeAtPath)(ast, path);
                            const isPrivateBlockType = node.type.startsWith('_');
                            if ((0, utils_1.isInvalidPresetBlock)(node, rootLevelThemeBlocks)) {
                                errorsInPresetLevelBlocks = true;
                                const errorMessage = isPrivateBlockType
                                    ? `Theme block type "${node.type}" is a private block so it must be explicitly allowed in "blocks" at the root of this schema.`
                                    : `Theme block type "${node.type}" must be allowed in "blocks" at the root of this schema.`;
                                (0, utils_1.reportWarning)(errorMessage, offset, typeNode, context);
                            }
                            if ('blocks' in node && node.blocks) {
                                await (0, utils_1.validateNestedBlocks)(context, node, node.blocks, path.slice(0, -1), offset, ast);
                            }
                        }));
                    }
                    if (!errorsInPresetLevelBlocks) {
                        await Promise.all(blocks.map(async ({ node, path }) => {
                            const typeNode = (0, json_1.nodeAtPath)(ast, path);
                            const exists = await (0, utils_1.validateBlockFileExistence)(node.type, context);
                            if (!exists) {
                                (0, utils_1.reportWarning)(`Theme block 'blocks/${node.type}.liquid' does not exist.`, offset, typeNode, context);
                            }
                        }));
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7413:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidContentForArguments = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
// content_for "block" and content_for "blocks" only allow `closest.*` kwargs.
const isClosestArgument = (argName) => argName.startsWith('closest.');
const isContextArgument = (argName) => argName.startsWith('context.');
exports.ValidContentForArguments = {
    meta: {
        code: 'ValidContentForArguments',
        name: 'Prevent the use of invalid arguments to the content_for tag',
        docs: {
            description: 'This check is aimed at preventing the use of invalid arguments for the content_for tag.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-content-for-arguments',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        const validationStrategies = {
            blocks: (node) => {
                const problematicArguments = node.args.filter((arg) => !isClosestArgument(arg.name));
                for (const arg of problematicArguments) {
                    context.report({
                        message: `{% content_for "blocks" %} only accepts 'closest.*' arguments`,
                        startIndex: arg.position.start,
                        endIndex: arg.position.end,
                    });
                }
                const deprecatedArguments = node.args.filter((arg) => isContextArgument(arg.name));
                for (const arg of deprecatedArguments) {
                    context.report({
                        message: `{% content_for "blocks" %} only accepts 'closest.*' arguments. The 'context.*' arguments usage has been deprecated.`,
                        startIndex: arg.position.start,
                        endIndex: arg.position.end,
                    });
                }
            },
            block: (node) => {
                const requiredArguments = ['id', 'type'];
                // Make sure the id and string arguments are present and are strings
                for (const requiredArgumentName of requiredArguments) {
                    const arg = node.args.find((arg) => arg.name === requiredArgumentName);
                    if (!arg) {
                        context.report({
                            message: `{% content_for "block" %} requires a '${requiredArgumentName}' argument`,
                            startIndex: node.position.start,
                            endIndex: node.position.end,
                            suggest: [],
                        });
                        continue;
                    }
                    const argValueNode = arg.value;
                    if (argValueNode.type !== liquid_html_parser_1.NodeTypes.String) {
                        context.report({
                            message: `The '${requiredArgumentName}' argument should be a string`,
                            startIndex: argValueNode.position.start,
                            endIndex: argValueNode.position.end,
                            suggest: [],
                        });
                    }
                }
                const problematicArguments = node.args.filter((arg) => !(requiredArguments.includes(arg.name) || isClosestArgument(arg.name)));
                for (const arg of problematicArguments) {
                    context.report({
                        message: `{% content_for "block" %} only accepts 'id', 'type' and 'closest.*' arguments`,
                        startIndex: arg.position.start,
                        endIndex: arg.position.end,
                    });
                }
                const deprecatedArguments = node.args.filter((arg) => isContextArgument(arg.name));
                for (const arg of deprecatedArguments) {
                    context.report({
                        message: `{% content_for "block" %} accepts 'closest.*' arguments. The 'context.*' arguments usage has been deprecated.`,
                        startIndex: arg.position.start,
                        endIndex: arg.position.end,
                    });
                }
            },
        };
        return {
            async LiquidTag(node) {
                if (node.name !== 'content_for' || typeof node.markup === 'string') {
                    return;
                }
                /** "block", "blocks", etc. */
                const contentForType = node.markup.contentForType.value;
                const validate = validationStrategies[contentForType];
                if (!validate) {
                    return;
                }
                validate(node.markup);
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1874:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidHTMLTranslation = void 0;
const types_1 = __webpack_require__(2660);
const liquid_html_parser_1 = __webpack_require__(4849);
exports.ValidHTMLTranslation = {
    meta: {
        code: 'ValidHTMLTranslation',
        name: 'Valid HTML Translation',
        docs: {
            description: 'This check exists to prevent invalid HTML inside translations.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-html-translation',
            recommended: true,
        },
        type: types_1.SourceCodeType.JSON,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        // We ignore non-`locales/` json files.
        const relativePath = context.toRelativePath(context.file.uri);
        if (!relativePath.startsWith('locales/'))
            return {};
        return {
            async Literal(node) {
                const htmlRegex = /<[^>]+>/;
                if (typeof node.value !== 'string' || !htmlRegex.test(node.value))
                    return;
                try {
                    (0, liquid_html_parser_1.toLiquidHtmlAST)(node.value);
                }
                catch (error) {
                    const loc = node.loc;
                    const problem = {
                        message: `${error}.`,
                        startIndex: loc.start.offset,
                        endIndex: loc.end.offset,
                    };
                    context.report(problem);
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7055:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidJSON = void 0;
const types_1 = __webpack_require__(2660);
exports.ValidJSON = {
    meta: {
        code: 'ValidJSON',
        aliases: ['ValidJson'],
        name: 'Enforce valid JSON',
        docs: {
            description: 'This check exists to prevent invalid JSON files in themes. Will check against schema if available.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/json-syntax-error',
        },
        type: types_1.SourceCodeType.JSON,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        if (!context.validateJSON)
            return {};
        const validateJSON = context.validateJSON;
        return {
            async onCodePathStart(file) {
                const problems = await validateJSON(file.uri, file.source);
                if (!problems)
                    return;
                for (const problem of problems) {
                    context.report(problem);
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6817:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidLocalBlocks = void 0;
const types_1 = __webpack_require__(2660);
const json_1 = __webpack_require__(9151);
const to_schema_1 = __webpack_require__(5182);
const to_schema_2 = __webpack_require__(5182);
const valid_block_utils_1 = __webpack_require__(7699);
exports.ValidLocalBlocks = {
    meta: {
        code: 'ValidLocalBlocks',
        name: 'Prevent mixing static and local blocks in non-theme sections',
        docs: {
            description: 'Ensures sections without theme block support do not mix static and local blocks',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-local-blocks',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema' || node.body.kind !== 'json')
                    return;
                const offset = node.blockStartPosition.end;
                const schema = await (0, to_schema_1.getSchema)(context);
                const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                if (!validSchema || validSchema instanceof Error)
                    return;
                if (!ast || ast instanceof Error)
                    return;
                if (!schema)
                    return;
                const { staticBlockNameLocations, staticBlockLocations, localBlockLocations, themeBlockLocations, hasRootLevelThemeBlocks, } = (0, valid_block_utils_1.getBlocks)(validSchema);
                if ((0, to_schema_2.isSection)(context.file.uri)) {
                    staticBlockNameLocations.forEach((blockWithPath) => {
                        const astNode = (0, json_1.nodeAtPath)(ast, blockWithPath.path);
                        (0, valid_block_utils_1.reportWarning)('Static theme blocks cannot have a name property.', offset, astNode, context);
                    });
                    if (staticBlockLocations.length > 0 && localBlockLocations.length > 0) {
                        staticBlockLocations.forEach((blockWithPath) => {
                            const astNode = (0, json_1.nodeAtPath)(ast, blockWithPath.path);
                            (0, valid_block_utils_1.reportWarning)(`Sections cannot use static theme blocks together with locally scoped blocks.`, offset, astNode, context);
                        });
                    }
                    if (hasRootLevelThemeBlocks &&
                        localBlockLocations.length > 0 &&
                        themeBlockLocations.length > 0) {
                        localBlockLocations.forEach((blockWithPath) => {
                            const astNode = (0, json_1.nodeAtPath)(ast, blockWithPath.path);
                            (0, valid_block_utils_1.reportWarning)('Sections cannot use theme blocks together with locally scoped blocks.', offset, astNode, context);
                        });
                    }
                }
                if ((0, to_schema_2.isBlock)(context.file.uri)) {
                    if (localBlockLocations.length > 0) {
                        localBlockLocations.forEach((blockWithPath) => {
                            const astNode = (0, json_1.nodeAtPath)(ast, blockWithPath.path);
                            (0, valid_block_utils_1.reportWarning)('Local scoped blocks are not supported in theme blocks.', offset, astNode, context);
                        });
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7699:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reportWarning = exports.getBlocks = void 0;
const json_1 = __webpack_require__(9151);
function getBlocks(validSchema) {
    const staticBlockNameLocations = [];
    const staticBlockLocations = [];
    const localBlockLocations = [];
    const themeBlockLocations = [];
    const rootLevelBlocks = validSchema.blocks;
    const presets = validSchema.presets;
    function categorizeBlock(block, currentPath) {
        if (!block)
            return;
        const hasStatic = 'static' in block;
        const hasName = 'name' in block;
        if (hasStatic && hasName) {
            staticBlockNameLocations.push({ node: block, path: currentPath.concat('type') });
        }
        else if (hasStatic) {
            staticBlockLocations.push({ node: block, path: currentPath.concat('type') });
        }
        else if (hasName) {
            localBlockLocations.push({ node: block, path: currentPath.concat('type') });
        }
        else if (block.type !== '@app') {
            themeBlockLocations.push({ node: block, path: currentPath.concat('type') });
        }
        if ('blocks' in block) {
            if (Array.isArray(block.blocks)) {
                block.blocks.forEach((nestedBlock, index) => {
                    categorizeBlock(nestedBlock, currentPath.concat('blocks', String(index)));
                });
            }
            else if (typeof block.blocks === 'object' && block.blocks !== null) {
                Object.entries(block.blocks).forEach(([key, nestedBlock]) => {
                    categorizeBlock(nestedBlock, currentPath.concat('blocks', key));
                });
            }
        }
    }
    if (Array.isArray(rootLevelBlocks)) {
        rootLevelBlocks.forEach((block, index) => {
            categorizeBlock(block, ['blocks', String(index)]);
        });
    }
    if (presets) {
        presets.forEach((preset, presetIndex) => {
            if ('blocks' in preset && preset.blocks) {
                if (Array.isArray(preset.blocks)) {
                    preset.blocks.forEach((block, blockIndex) => {
                        categorizeBlock(block, ['presets', String(presetIndex), 'blocks', String(blockIndex)]);
                    });
                }
                else if (typeof preset.blocks === 'object') {
                    Object.entries(preset.blocks).forEach(([key, block]) => {
                        categorizeBlock(block, ['presets', String(presetIndex), 'blocks', key]);
                    });
                }
            }
        });
    }
    return {
        staticBlockNameLocations,
        staticBlockLocations,
        localBlockLocations,
        themeBlockLocations,
        hasRootLevelThemeBlocks: themeBlockLocations.some((block) => block.path[0] === 'blocks'),
    };
}
exports.getBlocks = getBlocks;
function reportWarning(message, offset, astNode, context) {
    context.report({
        message,
        startIndex: offset + (0, json_1.getLocStart)(astNode),
        endIndex: offset + (0, json_1.getLocEnd)(astNode),
    });
}
exports.reportWarning = reportWarning;
//# sourceMappingURL=valid-block-utils.js.map

/***/ }),

/***/ 9738:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidRenderSnippetParams = void 0;
const types_1 = __webpack_require__(2660);
const liquid_html_parser_1 = __webpack_require__(4849);
const liquidDoc_1 = __webpack_require__(9803);
const utils_1 = __webpack_require__(3222);
const utils_2 = __webpack_require__(6108);
exports.ValidRenderSnippetParams = {
    meta: {
        code: 'ValidRenderSnippetParams',
        name: 'Valid Render Snippet Parameters',
        docs: {
            description: 'This check ensures that all required parameters are provided when rendering a snippet and that no unknown parameters are used.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-render-snippet-params',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema: {},
        targets: [],
    },
    create(context) {
        function partitionParameters(liquidDocParameters, providedParams) {
            const providedParameters = new Map(providedParams.map((arg) => [arg.name, arg]));
            const missingRequiredParams = [];
            const unknownProvidedParams = [];
            // Check required params
            for (const param of liquidDocParameters.values()) {
                if (param.required && !providedParameters.has(param.name)) {
                    missingRequiredParams.push(param);
                }
            }
            // Check provided params
            for (const arg of providedParameters.values()) {
                const liquidDocParamDef = liquidDocParameters.has(arg.name);
                if (!liquidDocParamDef) {
                    unknownProvidedParams.push(arg);
                }
            }
            return {
                missingRequiredParams,
                unknownProvidedParams,
            };
        }
        function reportMissingParams(missingRequiredParams, node, snippetName) {
            for (const param of missingRequiredParams) {
                context.report({
                    message: `Missing required parameter '${param.name}' in render tag for snippet '${snippetName}'`,
                    startIndex: node.position.start,
                    endIndex: node.position.end,
                    suggest: [
                        {
                            message: `Add required parameter '${param.name}'`,
                            fix: (fixer) => {
                                const paramToAdd = `, ${param.name}: ${(0, utils_2.getDefaultValueForType)(param.type)}`;
                                if (node.args.length == 0) {
                                    return fixer.insert(node.snippet.position.end, paramToAdd);
                                }
                                const lastArg = node.args[node.args.length - 1];
                                const sourceAfterLastArg = node.source.substring(lastArg.position.end, node.position.end);
                                const trailingCommaAndWhitespaceMatch = sourceAfterLastArg.match(/\s*,\s*/);
                                if (trailingCommaAndWhitespaceMatch) {
                                    // IF there is already a trailing comma after the last arg, we want to find it and replace it with our own while stripping whitespace
                                    return fixer.replace(lastArg.position.end, lastArg.position.end + trailingCommaAndWhitespaceMatch[0].length, `${paramToAdd} `);
                                }
                                return fixer.insert(lastArg.position.end, paramToAdd);
                            },
                        },
                    ],
                });
            }
        }
        function reportUnknownParams(unknownProvidedParams, node, snippetName) {
            for (const param of unknownProvidedParams) {
                context.report({
                    message: `Unknown parameter '${param.name}' in render tag for snippet '${snippetName}'`,
                    startIndex: param.position.start,
                    endIndex: param.position.end,
                    suggest: [
                        {
                            message: `Remove '${param.name}'`,
                            fix: (fixer) => {
                                // This is a bit messy, but it allows us to strip leading and trailing whitespaces and commas
                                const sourceBeforeArg = node.source.slice(0, param.position.start);
                                const matches = sourceBeforeArg.match(/,\s*/g);
                                const lastWhitespaceMatch = matches ? matches[matches.length - 1] : null;
                                let startPos = lastWhitespaceMatch
                                    ? param.position.start - (lastWhitespaceMatch.length - 1)
                                    : param.position.start;
                                if (isLastParam(param)) {
                                    // Remove the leading comma if it's the last parameter
                                    startPos -= 1;
                                }
                                const sourceAfterArg = node.source.substring(param.position.end, node.position.end);
                                const trailingCommaMatch = sourceAfterArg.match(/\s*,/);
                                if (trailingCommaMatch) {
                                    return fixer.remove(startPos, param.position.end + trailingCommaMatch[0].length);
                                }
                                return fixer.remove(startPos, param.position.end);
                            },
                        },
                    ],
                });
            }
            function isLastParam(param) {
                return (node.args.length == 1 ||
                    param.position.start == node.args[node.args.length - 1].position.start);
            }
        }
        return {
            async RenderMarkup(node) {
                var _a;
                if (!(0, utils_1.isLiquidString)(node.snippet) || node.variable) {
                    return;
                }
                const snippetName = node.snippet.value;
                const snippetPath = `snippets/${snippetName}.liquid`;
                const snippetUri = context.toUri(snippetPath);
                const snippetContent = await context.fs.readFile(snippetUri);
                const snippetAst = (0, liquid_html_parser_1.toLiquidHtmlAST)(snippetContent);
                const snippetDef = (0, liquidDoc_1.getSnippetDefinition)(snippetAst, snippetName);
                if (!((_a = snippetDef.liquidDoc) === null || _a === void 0 ? void 0 : _a.parameters)) {
                    return;
                }
                const liquidDocParameters = new Map(snippetDef.liquidDoc.parameters.map((p) => [p.name, p]));
                const { missingRequiredParams, unknownProvidedParams } = partitionParameters(liquidDocParameters, node.args);
                reportMissingParams(missingRequiredParams, node, snippetName);
                reportUnknownParams(unknownProvidedParams, node, snippetName);
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2734:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidSchemaName = void 0;
const json_1 = __webpack_require__(9151);
const to_schema_1 = __webpack_require__(5182);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const MAX_SCHEMA_NAME_LENGTH = 25;
exports.ValidSchemaName = {
    meta: {
        code: 'ValidSchemaName',
        name: 'Enforce valid schema name',
        docs: {
            description: 'This check is aimed at ensuring a valid schema name.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-schema-name',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema' || node.body.kind !== 'json') {
                    return;
                }
                const offset = node.blockStartPosition.end;
                const schema = await (0, to_schema_1.getSchema)(context);
                const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                if (!validSchema || validSchema instanceof Error)
                    return;
                if (!ast || ast instanceof Error)
                    return;
                const name = validSchema.name;
                if (!name)
                    return;
                // We can make this type assertion because we know the schema is valid
                const nameNode = (0, json_1.nodeAtPath)(ast, ['name']);
                const startIndex = offset + (0, json_1.getLocStart)(nameNode);
                const endIndex = offset + (0, json_1.getLocEnd)(nameNode);
                if (name.startsWith('t:')) {
                    const defaultLocale = await context.getDefaultLocale();
                    const key = name.replace('t:', '');
                    const defaultTranslations = await context.getDefaultSchemaTranslations();
                    const translation = (0, utils_1.deepGet)(defaultTranslations, key.split('.'));
                    if (translation === undefined) {
                        context.report({
                            message: `'${name}' does not have a matching entry in 'locales/${defaultLocale}.default.schema.json'`,
                            startIndex,
                            endIndex,
                        });
                    }
                    if (translation !== undefined && translation.length > MAX_SCHEMA_NAME_LENGTH) {
                        context.report({
                            message: `Schema name '${translation}' from 'locales/${defaultLocale}.default.schema.json' is too long (max 25 characters)`,
                            startIndex,
                            endIndex,
                        });
                    }
                }
                else if (name.length > MAX_SCHEMA_NAME_LENGTH) {
                    context.report({
                        message: `Schema name '${name}' is too long (max 25 characters)`,
                        startIndex,
                        endIndex,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3834:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidSchema = void 0;
const types_1 = __webpack_require__(2660);
exports.ValidSchema = {
    meta: {
        code: 'ValidSchema',
        name: 'Prevent invalid JSON in {% schema %} tags',
        docs: {
            description: 'This check is aimed at eliminating JSON errors in schema tags.',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-schema',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidRawTag(node) {
                if (node.name !== 'schema' || node.body.kind !== 'json' || !context.validateJSON) {
                    return;
                }
                const jsonString = node.source.slice(node.blockStartPosition.end, node.blockEndPosition.start);
                const problems = await context.validateJSON(context.file.uri, jsonString);
                if (!problems)
                    return;
                for (const problem of problems) {
                    context.report({
                        message: problem.message,
                        startIndex: node.blockStartPosition.end + problem.startIndex,
                        endIndex: node.blockStartPosition.end + problem.endIndex,
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6050:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidSettingsKey = void 0;
const types_1 = __webpack_require__(2660);
const json_1 = __webpack_require__(9151);
const to_schema_1 = __webpack_require__(5182);
const utils_1 = __webpack_require__(6671);
exports.ValidSettingsKey = {
    meta: {
        code: 'ValidSettingsKey',
        name: 'Validate settings key in presets',
        docs: {
            description: 'Ensures settings key only references valid settings defined in its respective schema',
            recommended: true,
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-settings-key',
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidRawTag(node) {
                var _a;
                if (node.name !== 'schema' || node.body.kind !== 'json')
                    return;
                const offset = node.blockStartPosition.end;
                const schema = await (0, to_schema_1.getSchema)(context);
                const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                if (!validSchema || validSchema instanceof Error)
                    return;
                if (!ast || ast instanceof Error)
                    return;
                const { rootLevelLocalBlocks, presetLevelBlocks } = (0, utils_1.getBlocks)(validSchema);
                // Check if presets settings match schema-level settings
                if (validSchema.presets) {
                    for (let i = 0; i < validSchema.presets.length; i++) {
                        const settingsNode = (0, json_1.nodeAtPath)(ast, ['presets', i, 'settings']);
                        validateSettingsKey(context, offset, settingsNode, validSchema.settings);
                    }
                }
                if ((0, to_schema_1.isSectionSchema)(schema) && 'default' in validSchema && validSchema.default) {
                    // Check if default settings match schema-level settings
                    const settingsNode = (0, json_1.nodeAtPath)(ast, ['default', 'settings']);
                    validateSettingsKey(context, offset, settingsNode, validSchema.settings);
                    // Check if default block settings match the settings defined in the block file's schema
                    (_a = validSchema.default.blocks) === null || _a === void 0 ? void 0 : _a.forEach((block, i) => {
                        const settingsNode = (0, json_1.nodeAtPath)(ast, ['default', 'blocks', i, 'settings']);
                        validateReferencedBlock(context, offset, settingsNode, rootLevelLocalBlocks, block);
                    });
                }
                // Check if preset block settings match the settings defined in the block file's schema
                for (const [_depthStr, blocks] of Object.entries(presetLevelBlocks)) {
                    blocks.forEach(({ node: blockNode, path }) => {
                        const settingsNode = (0, json_1.nodeAtPath)(ast, path.slice(0, -1).concat('settings'));
                        validateReferencedBlock(context, offset, settingsNode, rootLevelLocalBlocks, blockNode);
                    });
                }
            },
        };
    },
};
async function validateReferencedBlock(context, offset, settingsNode, localBlocks, referencedBlock) {
    var _a;
    if (localBlocks.length > 0) {
        const localBlock = localBlocks.find((localBlock) => localBlock.node.type === referencedBlock.type);
        if (!localBlock)
            return;
        const localBlockNode = localBlock.node;
        validateSettingsKey(context, offset, settingsNode, localBlockNode.settings);
    }
    else {
        const blockSchema = await ((_a = context.getBlockSchema) === null || _a === void 0 ? void 0 : _a.call(context, referencedBlock.type));
        const { validSchema: validBlockSchema } = blockSchema !== null && blockSchema !== void 0 ? blockSchema : {};
        if (!validBlockSchema || validBlockSchema instanceof Error)
            return;
        validateSettingsKey(context, offset, settingsNode, validBlockSchema.settings, referencedBlock);
    }
}
function validateSettingsKey(context, offset, settingsNode, validSettings, blockNode) {
    if (!settingsNode || settingsNode.type !== 'Object')
        return;
    for (const setting of settingsNode.children) {
        const settingExists = validSettings === null || validSettings === void 0 ? void 0 : validSettings.find((validSetting) => (validSetting === null || validSetting === void 0 ? void 0 : validSetting.id) === setting.key.value);
        if (!settingExists) {
            const errorMessage = blockNode
                ? `Setting '${setting.key.value}' does not exist in 'blocks/${blockNode.type}.liquid'.`
                : `Setting '${setting.key.value}' does not exist in schema.`;
            (0, utils_1.reportWarning)(errorMessage, offset, setting.key, context);
        }
    }
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 266:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidStaticBlockType = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const file_utils_1 = __webpack_require__(6025);
const markup_1 = __webpack_require__(1639);
exports.ValidStaticBlockType = {
    meta: {
        code: 'ValidStaticBlockType',
        name: 'Prevent use of type that is not valid for static blocks',
        docs: {
            description: 'This check is aimed at preventing the use of an invalid type for blocks rendered statically.',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-static-block-type',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.ERROR,
        schema: {},
        targets: [],
    },
    create(context) {
        return {
            async LiquidTag(node) {
                if (node.name !== 'content_for') {
                    return;
                }
                if (!(0, markup_1.isContentForBlock)(node.markup)) {
                    return;
                }
                const typeArg = node.markup.args.find((arg) => arg.name === 'type');
                if (!typeArg) {
                    return; // covered by VariableContentForArguments
                }
                const typeArgValueNode = typeArg.value;
                if (typeArgValueNode.type !== liquid_html_parser_1.NodeTypes.String) {
                    return; // covered by VariableContentForArguments
                }
                const blockName = typeArgValueNode.value;
                const relativePath = `blocks/${blockName}.liquid`;
                const fileExists = await (0, file_utils_1.doesFileExist)(context, relativePath);
                if (!fileExists) {
                    context.report({
                        message: `'blocks/${blockName}.liquid' does not exist`,
                        startIndex: typeArgValueNode.position.start,
                        endIndex: typeArgValueNode.position.end,
                        suggest: [],
                    });
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8775:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ValidVisibleIfSettingsSchema = exports.ValidVisibleIf = void 0;
const types_1 = __webpack_require__(2660);
const json_1 = __webpack_require__(9151);
const to_schema_1 = __webpack_require__(5182);
const utils_1 = __webpack_require__(6671);
const visible_if_utils_1 = __webpack_require__(2633);
// Note that unlike most other files in the `checks` directory, this exports two
// checks: one for Liquid files and one for 'config/settings_schema.json'. They
// perform the same check using the same logic (modulo differences extracting
// the schema and determining warning start and end indices).
const meta = {
    code: 'ValidVisibleIf',
    name: 'Validate visible_if expressions',
    docs: {
        description: 'Ensures visible_if expressions are well-formed and only reference settings keys that are defined',
        recommended: true,
        url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/valid-visible-if',
    },
    severity: types_1.Severity.ERROR,
    schema: {},
    targets: [],
};
exports.ValidVisibleIf = {
    meta: { ...meta, type: types_1.SourceCodeType.LiquidHtml },
    create(context) {
        return {
            async LiquidRawTag(node) {
                var _a;
                if (node.name !== 'schema' || node.body.kind !== 'json')
                    return;
                const schema = await (0, to_schema_1.getSchema)(context);
                const { validSchema, ast } = schema !== null && schema !== void 0 ? schema : {};
                if (!validSchema ||
                    validSchema instanceof Error ||
                    !((_a = validSchema.settings) === null || _a === void 0 ? void 0 : _a.some((setting) => 'visible_if' in setting)) ||
                    !ast ||
                    ast instanceof Error) {
                    return;
                }
                const offset = node.blockStartPosition.end;
                const settings = Object.fromEntries((await (0, visible_if_utils_1.getGlobalSettings)(context)).map((s) => [s, true]));
                const currentFileSettings = Object.fromEntries(validSchema.settings.map((setting) => [setting.id, true]));
                const vars = { settings };
                if ((0, to_schema_1.isSectionSchema)(schema)) {
                    vars.section = { settings: currentFileSettings };
                }
                else if ((0, to_schema_1.isBlockSchema)(schema)) {
                    vars.block = { settings: currentFileSettings };
                }
                for (const [i, setting] of validSchema.settings.entries()) {
                    if (!('visible_if' in setting) || typeof setting.visible_if !== 'string')
                        continue;
                    const visibleIfNode = (0, json_1.nodeAtPath)(ast, ['settings', i, 'visible_if']);
                    const varLookupsOrWarning = (0, visible_if_utils_1.getVariableLookupsInExpression)(setting.visible_if);
                    if ('warning' in varLookupsOrWarning) {
                        (0, utils_1.reportWarning)(varLookupsOrWarning.warning, offset, visibleIfNode, context);
                        continue;
                    }
                    const report = (message, lookup) => {
                        if (typeof message === 'string') {
                            context.report({
                                message,
                                // the JSONNode start location returned by `getLocStart`
                                // includes the opening quotation mark — whereas when we parse
                                // the inner expression, 0 is the location _inside_ the quotes.
                                // we add 1 to the offsets to compensate.
                                startIndex: offset + (0, json_1.getLocStart)(visibleIfNode) + lookup.position.start + visible_if_utils_1.offsetAdjust + 1,
                                endIndex: offset + (0, json_1.getLocStart)(visibleIfNode) + lookup.position.end + visible_if_utils_1.offsetAdjust + 1,
                            });
                        }
                    };
                    for (const lookup of varLookupsOrWarning) {
                        if (lookup.name === 'section' && !(0, to_schema_1.isSectionSchema)(schema)) {
                            report(`Invalid visible_if: can't refer to "section" when not in a section file.`, lookup);
                        }
                        else if (lookup.name === 'block' && !(0, to_schema_1.isBlockSchema)(schema)) {
                            report(`Invalid visible_if: can't refer to "block" when not in a block file.`, lookup);
                        }
                        else {
                            report((0, visible_if_utils_1.validateLookup)(lookup, vars), lookup);
                        }
                    }
                }
            },
        };
    },
};
exports.ValidVisibleIfSettingsSchema = {
    meta: { ...meta, type: types_1.SourceCodeType.JSON },
    create(context) {
        const relativePath = context.toRelativePath(context.file.uri);
        if (relativePath !== 'config/settings_schema.json')
            return {};
        return {
            async Property(node) {
                if (node.key.value !== 'visible_if' || node.value.type !== 'Literal')
                    return;
                const visibleIfExpression = node.value.value;
                if (typeof visibleIfExpression !== 'string')
                    return;
                const offset = node.value.loc.start.offset;
                const varLookupsOrWarning = (0, visible_if_utils_1.getVariableLookupsInExpression)(visibleIfExpression);
                if ('warning' in varLookupsOrWarning) {
                    context.report({
                        message: varLookupsOrWarning.warning,
                        startIndex: node.value.loc.start.offset,
                        endIndex: node.value.loc.end.offset,
                    });
                    return;
                }
                const settings = Object.fromEntries((await (0, visible_if_utils_1.getGlobalSettings)(context)).map((s) => [s, true]));
                const vars = { settings };
                const report = (message, lookup) => {
                    if (typeof message === 'string') {
                        context.report({
                            message,
                            startIndex: offset + lookup.position.start + visible_if_utils_1.offsetAdjust + 1,
                            endIndex: offset + lookup.position.end + visible_if_utils_1.offsetAdjust + 1,
                        });
                    }
                };
                for (const lookup of varLookupsOrWarning) {
                    // settings_schema.json can't reference `section` or `block`.
                    if (lookup.name === 'section') {
                        report(`Invalid visible_if: can't refer to "section" when not in a section file.`, lookup);
                    }
                    else if (lookup.name === 'block') {
                        report(`Invalid visible_if: can't refer to "block" when not in a block file.`, lookup);
                    }
                    else {
                        report((0, visible_if_utils_1.validateLookup)(lookup, vars), lookup);
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2633:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getGlobalSettings = exports.validateLookup = exports.getVariableLookupsInExpression = exports.offsetAdjust = exports.adjustedSuffix = exports.adjustedPrefix = exports.variableExpressionMatcher = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const find_root_1 = __webpack_require__(4267);
const json_1 = __webpack_require__(9151);
const path_1 = __webpack_require__(1702);
const visitor_1 = __webpack_require__(6267);
exports.variableExpressionMatcher = /{{(.+?)}}/;
exports.adjustedPrefix = '{% if ';
exports.adjustedSuffix = ' %}{% endif %}';
exports.offsetAdjust = '{{'.length - exports.adjustedPrefix.length;
function getVariableLookupsInExpression(expression) {
    // As of February 2025, parsers other than LiquidJS don't yet support
    // expressions in {{ variable }} tags. So we have to do something a little
    // gnarly — before parsing it we extract the expression from within the tag
    // and plunk it into an `{% if <expression> %}{% endif %}` statement instead.
    // This requires us to adjust the reported character ranges and offer slightly
    // less useful messages on syntax errors, but otherwise should behave
    // similarly to a proper `{{ <expression> }}` syntax whenever it lands.
    const match = exports.variableExpressionMatcher.exec(expression);
    if (match == null) {
        return {
            warning: `Invalid visible_if expression. It should take the form "{{ <expression> }}".`,
        };
    }
    const unwrappedExpression = match[1];
    const adjustedExpression = `${exports.adjustedPrefix}${unwrappedExpression}${exports.adjustedSuffix}`;
    try {
        const innerAst = (0, liquid_html_parser_1.toLiquidHtmlAST)(adjustedExpression, {
            mode: 'strict',
            allowUnclosedDocumentNode: false,
        });
        if (innerAst.children.length !== 1) {
            throw new Error('Unexpected child count for DocumentNode');
        }
        const ifTag = innerAst.children[0];
        if (ifTag.type !== 'LiquidTag' || ifTag.name !== 'if') {
            throw new Error("Expected DocumentNode to contain 'if' tag");
        }
        const vars = (0, visitor_1.visit)(ifTag, {
            VariableLookup: (node) => node,
        });
        if (vars.length === 0) {
            return {
                warning: `visible_if expression contains no references to any settings. This is likely an error.`,
            };
        }
        return vars;
    }
    catch (error) {
        if (error instanceof SyntaxError) {
            // Because of our hackish approach, the underlying error is likely to
            // include an incorrect character range and/or mention {% if %} tags.
            // Squelch the details and just report it as a simple syntax error.
            return { warning: 'Syntax error: cannot parse visible_if expression.' };
        }
        return { warning: String(error) };
    }
}
exports.getVariableLookupsInExpression = getVariableLookupsInExpression;
function validateLookup(lookup, vars) {
    const normalized = getNormalizedLookups(lookup);
    const poppedSegments = [];
    let scope = vars;
    while (normalized.length > 0) {
        const segment = normalized.shift();
        poppedSegments.push(segment);
        // "noUncheckedIndexedAccess" is false in our tsconfig.json
        const next = scope[segment];
        if (!next) {
            return `Invalid variable: "${poppedSegments.join('.')}" was not found.`;
        }
        if (typeof next === 'boolean') {
            if (normalized.length > 0) {
                return `Invalid variable: "${poppedSegments.join('.')}" refers to a variable, but is being used here as a namespace.`;
            }
            return null;
        }
        scope = next;
    }
    // note this is the reverse of the above similar-looking case
    return `Invalid variable: "${poppedSegments.join('.')}" refers to a namespace, but is being used here as a variable.`;
}
exports.validateLookup = validateLookup;
function getNormalizedLookups(lookup) {
    const nestedLookups = lookup.lookups.map((lookup) => {
        if (lookup.type !== liquid_html_parser_1.NodeTypes.String) {
            throw new Error(`Expected lookups to be String nodes: ${JSON.stringify(lookup)}`);
        }
        return lookup.value;
    });
    return [lookup.name, ...nestedLookups];
}
async function getGlobalSettings(context) {
    const globalSettings = [];
    try {
        const path = (0, path_1.join)(await (0, find_root_1.findRoot)(context.file.uri, context.fileExists), 'config/settings_schema.json');
        const settingsFile = await context.fs.readFile(path);
        const settings = (0, json_1.parseJSON)(settingsFile);
        if (Array.isArray(settings)) {
            for (const group of settings) {
                if ('settings' in group && Array.isArray(group.settings)) {
                    globalSettings.push(...group.settings.map((setting) => setting.id).filter((id) => id));
                }
            }
        }
    }
    catch (e) {
        console.error('Error fetching global settings:', e);
        // ignore absent or malformed settings schema
    }
    return globalSettings;
}
exports.getGlobalSettings = getGlobalSettings;
//# sourceMappingURL=visible-if-utils.js.map

/***/ }),

/***/ 5548:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VariableName = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const types_1 = __webpack_require__(2660);
const camelCase_1 = __importDefault(__webpack_require__(9677));
const kebabCase_1 = __importDefault(__webpack_require__(750));
const snakeCase_1 = __importDefault(__webpack_require__(9867));
const pascalCase = (string) => {
    const camelCased = (0, camelCase_1.default)(string);
    return camelCased.charAt(0).toUpperCase() + camelCased.slice(1);
};
const isLiquidTagAssign = (node) => {
    return node.name === 'assign' && typeof node.markup !== 'string';
};
const isLiquidTagCapture = (node) => {
    return (node.type == liquid_html_parser_1.NodeTypes.LiquidTag && node.name === 'capture' && typeof node.markup !== 'string');
};
const formatTypes = {
    camelCase: camelCase_1.default,
    PascalCase: pascalCase,
    snake_case: snakeCase_1.default,
    'kebab-case': kebabCase_1.default,
};
const schema = {
    format: types_1.SchemaProp.string('snake_case'),
};
exports.VariableName = {
    meta: {
        code: 'VariableName',
        name: 'Invalid variable naming format',
        docs: {
            description: 'This check is aimed at using certain variable naming conventions',
            url: 'https://shopify.dev/docs/storefronts/themes/tools/theme-check/checks/variable-name',
            recommended: true,
        },
        type: types_1.SourceCodeType.LiquidHtml,
        severity: types_1.Severity.WARNING,
        schema,
        targets: [],
    },
    create(context) {
        const formatter = (node) => {
            if (!node.markup.name) {
                return {
                    valid: false,
                };
            }
            const suggestion = formatTypes[context.settings.format]
                .call(null, node.markup.name)
                .replace(/(\d+)[-_](?=[a-z])/g, '$1');
            return {
                valid: node.markup.name === suggestion,
                suggestion,
            };
        };
        const reportHandler = (node) => {
            return context.report({
                message: `The variable '${node.markup.name}' uses wrong naming format`,
                startIndex: node.markup.position.start,
                endIndex: node.markup.position.end,
                suggest: [
                    {
                        message: `Change variable '${node.markup.name}' to '${formatter(node).suggestion}'`,
                        fix: (corrector) => {
                            const { position, name, source } = node.markup;
                            return corrector.replace(position.start, position.end, source
                                .slice(position.start, position.end)
                                .replace(name, formatter(node).suggestion));
                        },
                    },
                ],
            });
        };
        return {
            async LiquidTag(node) {
                if (isLiquidTagAssign(node)) {
                    if (!formatter(node).valid) {
                        reportHandler(node);
                    }
                }
                else if (isLiquidTagCapture(node) && node.markup.name) {
                    if (!formatter(node).valid) {
                        reportHandler(node);
                    }
                }
            },
        };
    },
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5386:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeGetMetafieldDefinitions = exports.FETCHED_METAFIELD_CATEGORIES = exports.isDirectory = exports.recursiveReadDirectory = exports.makeGetDefaultSchemaTranslations = exports.makeGetDefaultTranslations = exports.makeGetDefaultSchemaLocale = exports.makeGetDefaultLocale = exports.makeFileSize = exports.makeFileExists = void 0;
const vscode_uri_1 = __webpack_require__(2186);
const AbstractFileSystem_1 = __webpack_require__(4104);
const json_1 = __webpack_require__(9151);
const path_1 = __webpack_require__(1702);
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const makeFileExists = (fs) => async function fileExists(uri) {
    try {
        await fs.stat(uri);
        return true;
    }
    catch (e) {
        return false;
    }
};
exports.makeFileExists = makeFileExists;
const makeFileSize = (fs) => async function fileSize(uri) {
    try {
        const stats = await fs.stat(uri);
        return stats.size;
    }
    catch (error) {
        return 0;
    }
};
exports.makeFileSize = makeFileSize;
exports.makeGetDefaultLocale = getDefaultLocaleFactoryFactory('.default.json');
exports.makeGetDefaultSchemaLocale = getDefaultLocaleFactoryFactory('.default.schema.json');
function getDefaultLocaleFactoryFactory(postfix = '.default.json') {
    return function getDefaultLocaleFactory(fs, rootUri) {
        return cached(() => getDefaultLocale(fs, rootUri, postfix));
    };
}
exports.makeGetDefaultTranslations = getDefaultTranslationsFactoryFactory('.default.json');
exports.makeGetDefaultSchemaTranslations = getDefaultTranslationsFactoryFactory('.default.schema.json');
// prettier-ignore
function getDefaultTranslationsFactoryFactory(postfix = '.default.json') {
    return function getDefaultTranslationsFactory(fs, theme, rootUri) {
        return cached(() => getDefaultTranslations(fs, theme, rootUri, postfix));
    };
}
async function getDefaultLocaleFile(fs, rootUri, postfix = '.default.json') {
    var _a;
    const files = await fs.readDirectory((0, path_1.join)(rootUri, 'locales'));
    return (_a = files.find(([uri]) => uri.endsWith(postfix))) === null || _a === void 0 ? void 0 : _a[0];
}
async function getDefaultLocale(fs, rootUri, postfix) {
    try {
        const defaultLocaleFile = await getDefaultLocaleFile(fs, rootUri, postfix);
        if (!defaultLocaleFile)
            return 'en';
        const defaultLocaleFileName = vscode_uri_1.Utils.basename(vscode_uri_1.URI.parse(defaultLocaleFile));
        return defaultLocaleFileName.split('.')[0];
    }
    catch (error) {
        console.error(error);
        return 'en';
    }
}
async function getDefaultTranslations(fs, theme, rootUri, postfix) {
    try {
        const bufferTranslations = getDefaultTranslationsFromBuffer(theme, postfix);
        if (bufferTranslations)
            return bufferTranslations;
        const defaultLocaleFile = await getDefaultLocaleFile(fs, rootUri, postfix);
        if (!defaultLocaleFile)
            return {};
        const defaultTranslationsFile = await fs.readFile(defaultLocaleFile);
        return (0, json_1.parseJSON)(defaultTranslationsFile, {});
    }
    catch (error) {
        console.error(error);
        return {};
    }
}
/** It might be that you have an open buffer, we prefer translations from there if available */
function getDefaultTranslationsFromBuffer(theme, postfix) {
    const defaultTranslationsSourceCode = theme.find((sourceCode) => sourceCode.type === types_1.SourceCodeType.JSON &&
        sourceCode.uri.match(/locales/) &&
        sourceCode.uri.endsWith(postfix));
    if (!defaultTranslationsSourceCode)
        return undefined;
    const translations = (0, json_1.parseJSON)(defaultTranslationsSourceCode.source);
    if ((0, utils_1.isError)(translations))
        return undefined;
    return translations;
}
function cached(fn) {
    let cachedPromise;
    return async (...args) => {
        if (!cachedPromise)
            cachedPromise = fn(...args);
        return cachedPromise;
    };
}
async function recursiveReadDirectory(fs, uri, filter) {
    const allFiles = await fs.readDirectory(uri);
    const files = allFiles.filter((ft) => !isIgnored(ft) && (isDirectory(ft) || filter(ft)));
    const results = await Promise.all(files.map((ft) => {
        if (isDirectory(ft)) {
            return recursiveReadDirectory(fs, ft[0], filter);
        }
        else {
            return Promise.resolve([ft[0]]);
        }
    }));
    return results.flat();
}
exports.recursiveReadDirectory = recursiveReadDirectory;
function isDirectory([_, type]) {
    return type === AbstractFileSystem_1.FileType.Directory;
}
exports.isDirectory = isDirectory;
const ignoredFolders = ['.git', 'node_modules', 'dist', 'build', 'tmp', 'vendor'];
function isIgnored([uri, type]) {
    return type === AbstractFileSystem_1.FileType.Directory && ignoredFolders.some((folder) => uri.endsWith(folder));
}
exports.FETCHED_METAFIELD_CATEGORIES = [
    'article',
    'blog',
    'brand',
    'collection',
    'company',
    'company_location',
    'location',
    'market',
    'order',
    'page',
    'product',
    'variant',
    'shop',
];
const makeGetMetafieldDefinitions = (fs) => async function (rootUri) {
    const definitions = {
        article: [],
        blog: [],
        brand: [],
        collection: [],
        company: [],
        company_location: [],
        location: [],
        market: [],
        order: [],
        page: [],
        product: [],
        variant: [],
        shop: [],
    };
    try {
        const content = await fs.readFile((0, path_1.join)(rootUri, '.shopify', 'metafields.json'));
        const json = (0, json_1.parseJSON)(content);
        if ((0, utils_1.isError)(json))
            return definitions;
        return exports.FETCHED_METAFIELD_CATEGORIES.reduce((definitions, group) => {
            try {
                definitions[group] = json[group].map((definition) => ({
                    key: definition.key,
                    name: definition.name,
                    namespace: definition.namespace,
                    description: definition.description,
                    type: {
                        category: definition.type.category,
                        name: definition.type.name,
                    },
                }));
            }
            catch (error) {
                // If there are errors in the file, we ignore it
            }
            return definitions;
        }, definitions);
    }
    catch (err) {
        return definitions;
    }
};
exports.makeGetMetafieldDefinitions = makeGetMetafieldDefinitions;
//# sourceMappingURL=context-utils.js.map

/***/ }),

/***/ 5832:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDisabledChecksModule = void 0;
function createDisabledChecksModule() {
    const SPECIFIC_CHECK_NOT_DEFINED = '@all';
    const INLINE_COMMENT_TAG = '#';
    const disabledChecks = new Map();
    function determineRanges(uri, value, position) {
        const [_, command, checksJoined] = value.trim().match(/^(?:theme\-check\-(disable|enable)) ?(.*)/) || [];
        const checks = checksJoined ? checksJoined.split(/,[ ]*/) : [SPECIFIC_CHECK_NOT_DEFINED];
        checks.forEach((check) => {
            const disabledRanges = disabledChecks.get(uri);
            if (command === 'disable') {
                if (!disabledRanges.has(check)) {
                    disabledRanges.set(check, []);
                }
                disabledRanges.get(check).push({ from: position.end });
            }
            if (command === 'enable') {
                let disabledRangesForCheck = disabledRanges.get(check);
                if (disabledRangesForCheck) {
                    disabledRangesForCheck[disabledRangesForCheck.length - 1].to = position.start;
                }
                else {
                    if (check === SPECIFIC_CHECK_NOT_DEFINED) {
                        for (let ranges of disabledRanges.values()) {
                            for (let range of ranges) {
                                if (!range.to) {
                                    range.to = position.start;
                                }
                            }
                        }
                    }
                }
            }
        });
    }
    const DisabledChecksVisitor = {
        meta: { schema: {} },
        create: ({ file }) => ({
            async onCodePathStart() {
                disabledChecks.set(file.uri, new Map());
            },
            async LiquidRawTag(node) {
                if (node.name !== 'comment') {
                    return;
                }
                determineRanges(file.uri, node.body.value, node.position);
            },
            async LiquidTag(node) {
                if (typeof node.markup !== 'string' || node.name !== INLINE_COMMENT_TAG) {
                    return;
                }
                determineRanges(file.uri, node.markup, node.position);
            },
        }),
    };
    function isDisabled(offense) {
        const ranges = [SPECIFIC_CHECK_NOT_DEFINED, offense.check].flatMap((check) => {
            if (!disabledChecks.has(offense.uri)) {
                return [];
            }
            if (!disabledChecks.get(offense.uri).has(check)) {
                return [];
            }
            return disabledChecks.get(offense.uri).get(check);
        });
        return ranges.some((range) => offense.start.index >= range.from && (!range.to || offense.end.index <= range.to));
    }
    return {
        DisabledChecksVisitor,
        isDisabled,
    };
}
exports.createDisabledChecksModule = createDisabledChecksModule;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4267:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findRoot = void 0;
const path = __importStar(__webpack_require__(1702));
async function isRoot(dir, fileExists) {
    return or(fileExists(path.join(dir, 'shopify.extension.toml')), // for theme-app-extensions
    fileExists(path.join(dir, '.theme-check.yml')), fileExists(path.join(dir, '.git')), 
    // zip files and TAEs might not have config files, but they should have a
    // snippets directory but in case they do specify a .theme-check.yml a
    // couple of directories up, we should respect that
    and(fileExists(path.join(dir, 'snippets')), not(fileExists(path.join(path.dirname(dir), '.theme-check.yml'))), not(fileExists(path.join(path.dirname(path.dirname(dir)), '.theme-check.yml')))));
}
async function and(...promises) {
    const bools = await Promise.all(promises);
    return bools.reduce((a, b) => a && b, true);
}
async function or(...promises) {
    const bools = await Promise.all(promises);
    return bools.reduce((a, b) => a || b, false);
}
async function not(ap) {
    const a = await ap;
    return !a;
}
/**
 * Returns the "root" of a theme or theme app extension. The root is the
 * directory that contains a `.theme-check.yml` file, a `.git` directory, or a
 * `shopify.extension.toml` file.
 *
 * There are cases where .theme-check.yml is not defined and we have to infer the root.
 * We'll assume that the root is the directory that contains a `snippets` directory.
 *
 * So you can think of this function as the function that infers where a .theme-check.yml
 * should be.
 *
 * Note: that this is not the theme root. The config file might have a `root` entry in it
 * that points to somewhere else.
 */
async function findRoot(curr, fileExists) {
    const currIsRoot = await isRoot(curr, fileExists);
    if (currIsRoot) {
        return curr;
    }
    const dir = path.dirname(curr);
    const currIsAbsoluteRoot = dir === curr;
    if (currIsAbsoluteRoot) {
        return curr;
    }
    return findRoot(dir, fileExists);
}
exports.findRoot = findRoot;
//# sourceMappingURL=find-root.js.map

/***/ }),

/***/ 435:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyFixToString = void 0;
const utils_1 = __webpack_require__(8856);
// First iteration imported @codemirror/state to do this but it's kind of
// a gross dependency. I asked chatGPT to make me something similar and,
// after a couple of prompts, was surprised to like the result.
//
// So here goes:
// A neat and mean (Source, Fix) => Source function :)
function applyFixToString(source, fix) {
    // Create a copy of the original string to store the modified result
    let newStr = source;
    // Initialize an offset variable to keep track of the changes in index
    // due to previous fixes. This is necessary because each modification
    // is assumed to be to the original document, and we need to account for
    // the index drift caused by previous fixes.
    let offset = 0;
    // Sort modifications by startIndex in ascending order to ensure that
    // modifications with lower indices are applied first. This helps to
    // maintain the correct index positions for subsequent modifications.
    const sortedFixes = (0, utils_1.flattenFixes)(fix).sort((a, b) => a.startIndex - b.startIndex);
    // Verify that the fixes are valid and do not overlap
    for (let i = 0; i < sortedFixes.length - 1; i++) {
        const currentFix = sortedFixes[i];
        const nextFix = sortedFixes[i + 1];
        // Check if the current fix overlaps with the next fix
        if (currentFix.endIndex > nextFix.startIndex) {
            throw new Error('Overlapping ranges are not allowed');
        }
    }
    for (const fix of sortedFixes) {
        // Drift-adjust the fix location
        const startIndex = fix.startIndex + offset;
        const endIndex = fix.endIndex + offset;
        // Throw an error if either startIndex or endIndex are out of bounds.
        if (startIndex < 0 ||
            startIndex > newStr.length ||
            endIndex < startIndex ||
            endIndex > newStr.length) {
            throw new Error('Fix description is going overboard');
        }
        // Perform the modification at the drift-adjusted location
        newStr = newStr.slice(0, startIndex) + fix.insert + newStr.slice(endIndex);
        // Account for "index drift" as the modifications are applied.
        offset += fix.insert.length - (endIndex - startIndex);
    }
    return newStr;
}
exports.applyFixToString = applyFixToString;
//# sourceMappingURL=apply-fix-to-string.js.map

/***/ }),

/***/ 1563:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.autofix = void 0;
const correctors_1 = __webpack_require__(5906);
const utils_1 = __webpack_require__(8856);
/**
 * Takes a theme, list of offenses and a fixApplicator and runs all the
 * safe ones on the theme.
 *
 * Note that offense.fix is assumed to be safe, unlike offense.suggest
 * options.
 */
async function autofix(sourceCodes, offenses, applyFixes) {
    const fixableOffenses = offenses.filter((offense) => 'fix' in offense && !!offense.fix);
    const promises = [];
    for (const sourceCode of sourceCodes) {
        const sourceCodeOffenses = fixableOffenses.filter((offense) => offense.uri === sourceCode.uri);
        if (sourceCodeOffenses.length === 0) {
            continue;
        }
        const corrector = (0, correctors_1.createCorrector)(sourceCode.type, sourceCode.source);
        for (const offense of sourceCodeOffenses) {
            // I'm being slightly too clever for TypeScript here...
            offense.fix(corrector);
        }
        promises.push(applyFixes(sourceCode, (0, utils_1.flattenFixes)(corrector.fix)));
    }
    await Promise.all(promises);
}
exports.autofix = autofix;
//# sourceMappingURL=autofix.js.map

/***/ }),

/***/ 5906:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCorrector = exports.StringCorrector = exports.JSONCorrector = void 0;
const types_1 = __webpack_require__(2660);
const json_corrector_1 = __webpack_require__(3748);
Object.defineProperty(exports, "JSONCorrector", ({ enumerable: true, get: function () { return json_corrector_1.JSONCorrector; } }));
const string_corrector_1 = __webpack_require__(5427);
Object.defineProperty(exports, "StringCorrector", ({ enumerable: true, get: function () { return string_corrector_1.StringCorrector; } }));
function createCorrector(sourceCodeType, source) {
    switch (sourceCodeType) {
        case types_1.SourceCodeType.JSON: {
            return new json_corrector_1.JSONCorrector(source);
        }
        case types_1.SourceCodeType.LiquidHtml: {
            return new string_corrector_1.StringCorrector(source);
        }
        default: {
            return assertNever(sourceCodeType);
        }
    }
}
exports.createCorrector = createCorrector;
function assertNever(x) {
    throw new Error(`Case statement not exhausted: ${x}`);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3748:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONCorrector = void 0;
const set_1 = __importDefault(__webpack_require__(1263));
const unset_1 = __importDefault(__webpack_require__(3450));
// This function mutates json. So use it in a reducer and consider it a
// fire and forget.
function applyPatch(json, operation) {
    switch (operation.type) {
        case 'add': {
            return (0, set_1.default)(json, operation.path, operation.value);
        }
        case 'remove': {
            (0, unset_1.default)(json, operation.path);
            return json;
        }
    }
}
/**
 * The JSONCorrector collects patches and then creates a Fix object
 * that represents the application of all the collected patches on the
 * source document.
 *
 * Fixes are assumed to not be overlapping.
 */
class JSONCorrector {
    constructor(source) {
        this.source = source;
        this.patches = [];
    }
    /**
     * corrector.fix is the data representation of all the changes to source.
     */
    get fix() {
        if (this.patches.length === 0)
            return [];
        const json = this.patches.reduce(applyPatch, JSON.parse(this.source));
        return {
            startIndex: 0,
            endIndex: this.source.length,
            insert: JSON.stringify(json, null, 2),
        };
    }
    /**
     * Add value at dot delited JSON path
     *
     * @example
     * corrector.add('missing.key', 'TO DO')
     */
    add(path, value) {
        this.patches.push({
            type: 'add',
            path,
            value,
        });
    }
    /**
     * Replace a value at dot delited JSON path.
     *
     * @example
     * corrector.replace('missing.key', 'TO DO')
     */
    replace(path, value) {
        this.patches.push({
            type: 'remove',
            path,
        }, {
            type: 'add',
            path,
            value,
        });
    }
    /**
     * Remove key from JSON object
     *
     * @example
     * corrector.remove('unneeded.key')
     */
    remove(path) {
        this.patches.push({
            type: 'remove',
            path,
        });
    }
}
exports.JSONCorrector = JSONCorrector;
//# sourceMappingURL=json-corrector.js.map

/***/ }),

/***/ 5427:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StringCorrector = void 0;
/**
 * The corrector is a helper that collects Fix objects. At the end we
 * collect those fix objects and apply them on the source code to obtain a
 * "fixed" file.
 *
 * We cannot fix on overlapping ranges.
 *
 * All fix are assumed to be on the file without modifications. The
 * FixApplicator should take care of knowing where to apply fixes as the
 * changes are applied.
 */
class StringCorrector {
    constructor(source) {
        this.source = source;
        this.fix = [];
    }
    /**
     * insert text before the given index
     *
     * @example
     * corrector.insert(
     *   node.position.start,
     *   node.position.start,
     *   'prefix node with this content'
     * )
     *
     * corrector.insert(
     *   node.position.end,
     *   node.position.end,
     *   'suffix node with this content (since position.end is excluded)'
     * )
     */
    insert(index, text) {
        this.fix.push({
            startIndex: index,
            endIndex: index,
            insert: text,
        });
    }
    /**
     * replace text between start (included) and end (excluded) with text.
     *
     * @example
     * corrector.replace(
     *   node.position.start,
     *   node.position.end,
     *   'ho ho ho',
     * );
     */
    replace(start, end, text) {
        this.fix.push({
            startIndex: start,
            endIndex: end,
            insert: text,
        });
    }
    /**
     * remove text between start (included) and end (excluded)
     *
     * @example
     * corrector.remove(
     *   node.position.start,
     *   node.position.end,
     * )
     */
    remove(start, end) {
        this.fix.push({
            startIndex: start,
            endIndex: end,
            insert: '',
        });
    }
}
exports.StringCorrector = StringCorrector;
//# sourceMappingURL=string-corrector.js.map

/***/ }),

/***/ 621:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyFixToString = exports.autofix = exports.createCorrector = exports.JSONCorrector = exports.StringCorrector = exports.flattenFixes = void 0;
var utils_1 = __webpack_require__(8856);
Object.defineProperty(exports, "flattenFixes", ({ enumerable: true, get: function () { return utils_1.flattenFixes; } }));
var correctors_1 = __webpack_require__(5906);
Object.defineProperty(exports, "StringCorrector", ({ enumerable: true, get: function () { return correctors_1.StringCorrector; } }));
Object.defineProperty(exports, "JSONCorrector", ({ enumerable: true, get: function () { return correctors_1.JSONCorrector; } }));
Object.defineProperty(exports, "createCorrector", ({ enumerable: true, get: function () { return correctors_1.createCorrector; } }));
var autofix_1 = __webpack_require__(1563);
Object.defineProperty(exports, "autofix", ({ enumerable: true, get: function () { return autofix_1.autofix; } }));
var apply_fix_to_string_1 = __webpack_require__(435);
Object.defineProperty(exports, "applyFixToString", ({ enumerable: true, get: function () { return apply_fix_to_string_1.applyFixToString; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8856:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.flattenFixes = void 0;
function flattenFixes(fix) {
    if (!Array.isArray(fix))
        return [fix];
    return fix.flatMap(flattenFixes);
}
exports.flattenFixes = flattenFixes;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 6663:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isIgnored = void 0;
const minimatch_1 = __webpack_require__(7039);
function isIgnored(uri, config, checkDef) {
    const ignorePatterns = [...checkIgnorePatterns(checkDef, config), ...asArray(config.ignore)].map((pattern) => pattern
        .replace(/^\//, config.rootUri + '/') // "absolute patterns" are config.rootUri matches
        .replace(/^([^\/])/, '**/$1') // "relative patterns" are "**/${pattern}"
        .replace(/\/\*$/, '/**'));
    return ignorePatterns.some((pattern) => (0, minimatch_1.minimatch)(uri, pattern));
}
exports.isIgnored = isIgnored;
function checkIgnorePatterns(checkDef, config) {
    var _a;
    if (!checkDef)
        return [];
    return asArray((_a = config.settings[checkDef.meta.code]) === null || _a === void 0 ? void 0 : _a.ignore);
}
function asArray(x) {
    return x !== null && x !== void 0 ? x : [];
}
//# sourceMappingURL=ignore.js.map

/***/ }),

/***/ 5309:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.check = exports.path = void 0;
const AugmentedThemeDocset_1 = __webpack_require__(2908);
const JSONValidator_1 = __webpack_require__(9753);
const context_utils_1 = __webpack_require__(5386);
const disabled_checks_1 = __webpack_require__(5832);
const ignore_1 = __webpack_require__(6663);
const path = __importStar(__webpack_require__(1702));
const types_1 = __webpack_require__(2660);
const utils_1 = __webpack_require__(6671);
const visitors_1 = __webpack_require__(1837);
__exportStar(__webpack_require__(4104), exports);
__exportStar(__webpack_require__(2908), exports);
__exportStar(__webpack_require__(1691), exports);
__exportStar(__webpack_require__(5386), exports);
__exportStar(__webpack_require__(4267), exports);
__exportStar(__webpack_require__(621), exports);
__exportStar(__webpack_require__(6663), exports);
__exportStar(__webpack_require__(9151), exports);
__exportStar(__webpack_require__(9753), exports);
exports.path = __importStar(__webpack_require__(1702));
__exportStar(__webpack_require__(5182), exports);
__exportStar(__webpack_require__(3312), exports);
__exportStar(__webpack_require__(2660), exports);
__exportStar(__webpack_require__(3773), exports);
__exportStar(__webpack_require__(1214), exports);
__exportStar(__webpack_require__(8665), exports);
__exportStar(__webpack_require__(3686), exports);
__exportStar(__webpack_require__(6240), exports);
__exportStar(__webpack_require__(6267), exports);
__exportStar(__webpack_require__(9803), exports);
__exportStar(__webpack_require__(6108), exports);
const defaultErrorHandler = (_error) => {
    // Silently ignores errors by default.
};
async function check(theme, config, injectedDependencies) {
    var _a;
    const pipelines = [];
    const offenses = [];
    const { fs } = injectedDependencies;
    const { rootUri } = config;
    const dependencies = {
        ...injectedDependencies,
        mode: config.context,
        fileExists: (0, context_utils_1.makeFileExists)(fs),
        fileSize: (0, context_utils_1.makeFileSize)(fs),
        getDefaultLocale: (0, context_utils_1.makeGetDefaultLocale)(fs, rootUri),
        getDefaultTranslations: (0, context_utils_1.makeGetDefaultTranslations)(fs, theme, rootUri),
        getDefaultSchemaLocale: (0, context_utils_1.makeGetDefaultSchemaLocale)(fs, rootUri),
        getDefaultSchemaTranslations: (0, context_utils_1.makeGetDefaultSchemaTranslations)(fs, theme, rootUri),
        getMetafieldDefinitions: (_a = injectedDependencies.getMetafieldDefinitions) !== null && _a !== void 0 ? _a : (0, context_utils_1.makeGetMetafieldDefinitions)(fs),
    };
    const { DisabledChecksVisitor, isDisabled } = (0, disabled_checks_1.createDisabledChecksModule)();
    const jsonValidator = await JSONValidator_1.JSONValidator.create(dependencies.jsonValidationSet, config);
    const validateJSON = jsonValidator === null || jsonValidator === void 0 ? void 0 : jsonValidator.validate;
    // We're memozing those deps here because they shouldn't change within a run.
    if (dependencies.themeDocset && !dependencies.themeDocset.isAugmented) {
        dependencies.themeDocset = new AugmentedThemeDocset_1.AugmentedThemeDocset(dependencies.themeDocset);
    }
    for (const type of Object.values(types_1.SourceCodeType)) {
        switch (type) {
            case types_1.SourceCodeType.JSON: {
                const files = filesOfType(type, theme);
                const checkDefs = checksOfType(type, config.checks);
                for (const file of files) {
                    for (const checkDef of checkDefs) {
                        if ((0, ignore_1.isIgnored)(file.uri, config, checkDef))
                            continue;
                        const check = createCheck(checkDef, file, config, offenses, dependencies, validateJSON);
                        pipelines.push(checkJSONFile(check, file));
                    }
                }
                break;
            }
            case types_1.SourceCodeType.LiquidHtml: {
                const files = filesOfType(type, theme);
                const checkDefs = [DisabledChecksVisitor, ...checksOfType(type, config.checks)];
                for (const file of files) {
                    for (const checkDef of checkDefs) {
                        if ((0, ignore_1.isIgnored)(file.uri, config, checkDef))
                            continue;
                        const check = createCheck(checkDef, file, config, offenses, dependencies, validateJSON);
                        pipelines.push(checkLiquidFile(check, file));
                    }
                }
                break;
            }
        }
    }
    const onRejected = config.onError || defaultErrorHandler;
    await Promise.all(pipelines.map((pipeline) => pipeline.catch(onRejected)));
    return offenses.filter((offense) => !isDisabled(offense));
}
exports.check = check;
function createContext(check, file, offenses, config, dependencies, validateJSON) {
    const checkSettings = config.settings[check.meta.code];
    return {
        ...dependencies,
        validateJSON,
        settings: createSettings(checkSettings, check.meta.schema),
        toUri: (relativePath) => path.join(config.rootUri, relativePath),
        toRelativePath: (uri) => path.relative(uri, config.rootUri),
        report(problem) {
            var _a;
            offenses.push({
                type: check.meta.type,
                check: check.meta.code,
                message: problem.message,
                uri: file.uri,
                severity: (_a = checkSettings === null || checkSettings === void 0 ? void 0 : checkSettings.severity) !== null && _a !== void 0 ? _a : check.meta.severity,
                start: (0, utils_1.getPosition)(file.source, problem.startIndex),
                end: (0, utils_1.getPosition)(file.source, problem.endIndex),
                fix: problem.fix,
                suggest: problem.suggest,
            });
        },
        file,
    };
}
function createSettings(checkSettings, schema) {
    var _a;
    const settings = {};
    for (const [key, schemaProp] of Object.entries(schema)) {
        settings[key] = (_a = checkSettings === null || checkSettings === void 0 ? void 0 : checkSettings[key]) !== null && _a !== void 0 ? _a : schemaProp.defaultValue();
    }
    return settings;
}
function checksOfType(type, checks) {
    return checks.filter((def) => def.meta.type === type);
}
function createCheck(check, file, config, offenses, dependencies, validateJSON) {
    const context = createContext(check, file, offenses, config, dependencies, validateJSON);
    return check.create(context);
}
function filesOfType(type, sourceCodes) {
    return sourceCodes.filter((file) => file.type === type);
}
async function checkJSONFile(check, file) {
    if (check.onCodePathStart)
        await check.onCodePathStart(file);
    if (file.ast instanceof Error)
        return;
    if (Object.keys(check).length > 0)
        await (0, visitors_1.visitJSON)(file.ast, check);
    if (check.onCodePathEnd)
        await check.onCodePathEnd(file);
}
async function checkLiquidFile(check, file) {
    if (check.onCodePathStart)
        await check.onCodePathStart(file);
    if (file.ast instanceof Error)
        return;
    if (Object.keys(check).length > 0)
        await (0, visitors_1.visitLiquid)(file.ast, check);
    if (check.onCodePathEnd)
        await check.onCodePathEnd(file);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9151:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLocEnd = exports.getLocStart = exports.nodeAtPath = exports.parseJSON = void 0;
const jsonc_parser_1 = __webpack_require__(2328);
const utils_1 = __webpack_require__(6671);
const PARSE_OPTS = {
    disallowComments: false,
    allowTrailingComma: true,
    allowEmptyContent: false,
};
function parseJSON(source, defaultValue, isStrict) {
    try {
        /**
         * The jsonc-parser is fault-tolerant and typically returns a valid
         * result. However, it also mutates the 'errors' array with any
         * errors it encounters during parsing.
         */
        const errors = [];
        const result = (0, jsonc_parser_1.parse)(source, errors, PARSE_OPTS);
        if (errors.length && isStrict) {
            throw errors[0];
        }
        return result;
    }
    catch (error) {
        if (defaultValue !== undefined)
            return defaultValue;
        return (0, utils_1.asError)(error);
    }
}
exports.parseJSON = parseJSON;
/**
 * Given a known path to a property and an ast, returns the AST node at that path.
 *
 * @example
 * const nameNode = nodeAtPath(ast, ['name'])! as LiteralNode;
 * const blocksNode = nodeAtPath(ast, ['blocks'])! as ArrayNode;
 * const someDeepNode = nodeAtPath(ast, ['blocks', 0, 'settings', 'someDeepKey'])! as LiteralNode;
 */
function nodeAtPath(node, path) {
    return path.reduce((acc, key) => {
        if (!acc)
            return;
        switch (acc.type) {
            case 'Object': {
                const property = acc.children.find((child) => child.key.value === key);
                if (!property)
                    return;
                return property.value;
            }
            case 'Array': {
                return acc.children[key];
            }
            case 'Literal': {
                // You're probably going too deep
                return;
            }
            case 'Identifier': {
                // This is for keys, shouldn't get there
                return;
            }
            case 'Property': {
                // This is for keys, shouldn't get there
                return;
            }
        }
    }, node);
}
exports.nodeAtPath = nodeAtPath;
/** Given a JSONNode, returns the start offset of the node in the source string. */
function getLocStart(node) {
    var _a, _b;
    return (_b = (_a = node.loc) === null || _a === void 0 ? void 0 : _a.start.offset) !== null && _b !== void 0 ? _b : 0;
}
exports.getLocStart = getLocStart;
/** Given a JSONNode, returns the end offset of the node in the source string. */
function getLocEnd(node) {
    var _a, _b;
    return (_b = (_a = node.loc) === null || _a === void 0 ? void 0 : _a.end.offset) !== null && _b !== void 0 ? _b : 0;
}
exports.getLocEnd = getLocEnd;
//# sourceMappingURL=json.js.map

/***/ }),

/***/ 8558:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.location = exports.toJSONNode = exports.JSONCParseErrors = void 0;
const utils_1 = __webpack_require__(6671);
const jsonc_parser_1 = __webpack_require__(2328);
class JSONCParseErrors extends Error {
    constructor(message, errors) {
        super(message);
        this.errors = errors;
    }
}
exports.JSONCParseErrors = JSONCParseErrors;
/**
 * At some point, we started supporting JSONC. Theme Check 2 was built on top of
 * `json-to-ast` which does not support comments.
 *
 * This little adapter here will take a tree we get from `jsonc-parser` and
 * convert it to the shape of `json-to-ast`.
 *
 * The `json-to-ast` types feel much better to use than the ones from `jsonc-parser`
 * and we don't need to rewrite all our downstream code.
 */
function toJSONNode(source) {
    const errors = [];
    const tree = (0, jsonc_parser_1.parseTree)(source, errors, {
        allowTrailingComma: true,
        disallowComments: false,
    });
    if (errors.length || tree === undefined) {
        throw new JSONCParseErrors('Failed to parse JSONC', errors);
    }
    return jsoncToJsonAst(tree);
}
exports.toJSONNode = toJSONNode;
function jsoncToJsonAst(node) {
    switch (node.type) {
        case 'object': {
            return objectToObjectNode(node);
        }
        case 'property': {
            return propertyToPropertyNode(node);
        }
        case 'array': {
            return arrayToArrayNode(node);
        }
        case 'boolean':
        case 'null':
        case 'number':
        case 'string': {
            return valueToLiteralNode(node);
        }
        default: {
            (0, utils_1.assertNever)(node.type);
        }
    }
}
function objectToObjectNode(node) {
    var _a;
    return {
        type: 'Object',
        children: ((_a = node.children) !== null && _a !== void 0 ? _a : []).map(jsoncToJsonAst),
        loc: (0, exports.location)(node.offset, node.offset + node.length),
    };
}
function arrayToArrayNode(node) {
    return {
        type: 'Array',
        children: node.children.map(jsoncToJsonAst),
        loc: (0, exports.location)(node.offset, node.offset + node.length),
    };
}
function propertyToPropertyNode(node) {
    return {
        type: 'Property',
        key: identifierToIdentifierNode(node.children[0]),
        value: jsoncToJsonAst(node.children[1]),
        loc: (0, exports.location)(node.offset, node.offset + node.length),
    };
}
function identifierToIdentifierNode(node) {
    return {
        type: 'Identifier',
        value: node.value,
        raw: JSON.stringify(node.value),
        loc: (0, exports.location)(node.offset, node.offset + node.length),
    };
}
function valueToLiteralNode(node) {
    return {
        type: 'Literal',
        value: node.value,
        raw: JSON.stringify(node.value),
        loc: (0, exports.location)(node.offset, node.offset + node.length),
    };
}
const location = (start, end) => ({
    start: position(start),
    end: position(end),
});
exports.location = location;
const position = (offset) => ({ offset });
//# sourceMappingURL=parse.js.map

/***/ }),

/***/ 9592:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 9803:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSnippetDefinition = void 0;
const visitor_1 = __webpack_require__(6267);
function getSnippetDefinition(snippet, snippetName) {
    let hasDocTag = false;
    const nodes = (0, visitor_1.visit)(snippet, {
        LiquidRawTag(node) {
            if (node.name === 'doc')
                hasDocTag = true;
            return undefined;
        },
        LiquidDocParamNode(node) {
            var _a, _b, _c, _d;
            return {
                name: node.paramName.value,
                description: (_b = (_a = node.paramDescription) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : null,
                type: (_d = (_c = node.paramType) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : null,
                required: node.required,
                nodeType: 'param',
            };
        },
        LiquidDocExampleNode(node) {
            return {
                content: node.content.value,
                nodeType: 'example',
            };
        },
    });
    const { parameters, examples } = nodes.reduce((acc, node) => {
        if (node.nodeType === 'param') {
            acc.parameters.push(node);
        }
        else if (node.nodeType === 'example') {
            acc.examples.push(node);
        }
        return acc;
    }, { parameters: [], examples: [] });
    if (!hasDocTag)
        return { name: snippetName };
    return {
        name: snippetName,
        liquidDoc: {
            ...(parameters.length && { parameters }),
            ...(examples.length && { examples }),
        },
    };
}
exports.getSnippetDefinition = getSnippetDefinition;
//# sourceMappingURL=liquidDoc.js.map

/***/ }),

/***/ 6108:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDefaultValueForType = exports.SupportedDocTagTypes = exports.SupportedParamTypes = void 0;
var SupportedParamTypes;
(function (SupportedParamTypes) {
    SupportedParamTypes["String"] = "string";
    SupportedParamTypes["Number"] = "number";
    SupportedParamTypes["Boolean"] = "boolean";
    SupportedParamTypes["Object"] = "object";
})(SupportedParamTypes = exports.SupportedParamTypes || (exports.SupportedParamTypes = {}));
var SupportedDocTagTypes;
(function (SupportedDocTagTypes) {
    SupportedDocTagTypes["Param"] = "param";
    SupportedDocTagTypes["Example"] = "example";
    SupportedDocTagTypes["Description"] = "description";
})(SupportedDocTagTypes = exports.SupportedDocTagTypes || (exports.SupportedDocTagTypes = {}));
/**
 * Provides a default completion value for an argument / parameter of a given type.
 */
function getDefaultValueForType(type) {
    switch (type === null || type === void 0 ? void 0 : type.toLowerCase()) {
        case SupportedParamTypes.String:
            return "''";
        case SupportedParamTypes.Number:
            return '0';
        case SupportedParamTypes.Boolean:
            return 'false';
        case SupportedParamTypes.Object:
            return 'empty';
        default:
            return "''";
    }
}
exports.getDefaultValueForType = getDefaultValueForType;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 1702:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fsPath = exports.basename = exports.dirname = exports.normalize = exports.resolve = exports.join = exports.relative = exports.Utils = exports.URI = void 0;
const vscode_uri_1 = __webpack_require__(2186);
Object.defineProperty(exports, "URI", ({ enumerable: true, get: function () { return vscode_uri_1.URI; } }));
Object.defineProperty(exports, "Utils", ({ enumerable: true, get: function () { return vscode_uri_1.Utils; } }));
function relative(uri, rootUri) {
    return normalize(uri)
        .replace(rootUri, '')
        .replace(/\\\\/g, '/') // We expect forward slash paths (windows path get normalized)
        .replace(/^\/+/, '');
}
exports.relative = relative;
function join(rootUri, ...paths) {
    return normalize(vscode_uri_1.Utils.joinPath(asUri(rootUri), ...paths));
}
exports.join = join;
function resolve(uri, path) {
    return normalize(vscode_uri_1.Utils.resolvePath(asUri(uri), path));
}
exports.resolve = resolve;
function normalize(uri) {
    return asUri(uri).toString(true);
}
exports.normalize = normalize;
function dirname(uri) {
    return normalize(vscode_uri_1.Utils.dirname(asUri(uri)));
}
exports.dirname = dirname;
function basename(uri, ext) {
    const base = vscode_uri_1.Utils.basename(asUri(uri));
    return ext ? base.replace(new RegExp(`${ext}$`), '') : base;
}
exports.basename = basename;
function fsPath(uri) {
    return asUri(uri).fsPath;
}
exports.fsPath = fsPath;
function asUri(uri) {
    return vscode_uri_1.URI.isUri(uri) ? uri : vscode_uri_1.URI.parse(uri);
}
//# sourceMappingURL=path.js.map

/***/ }),

/***/ 5182:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSchemaFromJSON = exports.getSchema = exports.toAppBlockSchema = exports.toSectionSchema = exports.toBlockSchema = exports.isSectionSchema = exports.isBlockSchema = exports.isSection = exports.isBlock = exports.toSchema = void 0;
const json_1 = __webpack_require__(9151);
const path = __importStar(__webpack_require__(1702));
const to_source_code_1 = __webpack_require__(3312);
const types_1 = __webpack_require__(2660);
const visitor_1 = __webpack_require__(6267);
async function toSchema(mode, uri, sourceCode, isValidSchema, isStrict = true) {
    if (sourceCode.type !== types_1.SourceCodeType.LiquidHtml)
        return undefined;
    switch (true) {
        case mode === 'app' && isBlock(uri):
            return toAppBlockSchema(uri, sourceCode.ast, isStrict);
        case mode === 'theme' && isBlock(uri):
            return toBlockSchema(uri, sourceCode.ast, isValidSchema, isStrict);
        case mode === 'theme' && isSection(uri):
            return toSectionSchema(uri, sourceCode.ast, isValidSchema, isStrict);
        default:
            return undefined;
    }
}
exports.toSchema = toSchema;
function isBlock(uri) {
    return path.dirname(uri).endsWith('blocks');
}
exports.isBlock = isBlock;
function isSection(uri) {
    return path.dirname(uri).endsWith('sections');
}
exports.isSection = isSection;
function isBlockSchema(schema) {
    return (schema === null || schema === void 0 ? void 0 : schema.type) === types_1.ThemeSchemaType.Block;
}
exports.isBlockSchema = isBlockSchema;
function isSectionSchema(schema) {
    return (schema === null || schema === void 0 ? void 0 : schema.type) === types_1.ThemeSchemaType.Section;
}
exports.isSectionSchema = isSectionSchema;
async function toValidSchema(uri, schemaNode, parsed, isValidSchema) {
    if (!isValidSchema)
        return new Error('No JSON validator provided');
    if (schemaNode instanceof Error)
        return parsed;
    if (await isValidSchema(uri, schemaNode.body.value)) {
        return parsed;
    }
    else {
        return new Error('Invalid schema');
    }
}
async function toBlockSchema(uri, liquidAst, isValidSchema, isStrict) {
    const name = path.basename(uri, '.liquid');
    const schemaNode = toSchemaNode(liquidAst);
    const parsed = toParsed(schemaNode, isStrict);
    const ast = toAst(schemaNode);
    return {
        type: types_1.ThemeSchemaType.Block,
        validSchema: await toValidSchema(uri, schemaNode, parsed, isValidSchema),
        offset: schemaNode instanceof Error ? 0 : schemaNode.blockStartPosition.end,
        name,
        parsed,
        ast,
        value: schemaNode instanceof Error ? '' : schemaNode.body.value,
    };
}
exports.toBlockSchema = toBlockSchema;
// Coincidentally very similar right now... but could be different in the future
// given there might be a plan to support folders in the blocks folder.
// e.g. if we start having a stricter "parsed" object / ways to get settings.
async function toSectionSchema(uri, liquidAst, isValidSchema, isStrict) {
    const name = path.basename(uri, '.liquid');
    const schemaNode = toSchemaNode(liquidAst);
    const parsed = toParsed(schemaNode, isStrict);
    const ast = toAst(schemaNode);
    return {
        type: types_1.ThemeSchemaType.Section,
        validSchema: await toValidSchema(uri, schemaNode, parsed, isValidSchema),
        offset: schemaNode instanceof Error ? 0 : schemaNode.blockStartPosition.end,
        name,
        parsed,
        ast,
        value: schemaNode instanceof Error ? '' : schemaNode.body.value,
    };
}
exports.toSectionSchema = toSectionSchema;
// validSchema not implemented yet. You can still `visit` the ast.
async function toAppBlockSchema(uri, liquidAst, isStrict) {
    const name = path.basename(uri, '.liquid');
    const schemaNode = toSchemaNode(liquidAst);
    const parsed = toParsed(schemaNode, isStrict);
    const ast = toAst(schemaNode);
    return {
        type: types_1.ThemeSchemaType.AppBlock,
        offset: schemaNode instanceof Error ? 0 : schemaNode.blockStartPosition.end,
        name,
        parsed,
        ast,
        value: schemaNode instanceof Error ? '' : schemaNode.body.value,
    };
}
exports.toAppBlockSchema = toAppBlockSchema;
function toSchemaNode(ast) {
    var _a;
    if (ast instanceof Error)
        return ast;
    return ((_a = (0, visitor_1.visit)(ast, {
        LiquidRawTag(node) {
            if (node.name === 'schema') {
                return node;
            }
        },
    })[0]) !== null && _a !== void 0 ? _a : new Error('No schema tag found'));
}
function getSchema(context) {
    var _a, _b;
    const name = path.basename(context.file.uri, '.liquid');
    switch (true) {
        case isBlock(context.file.uri):
            return (_a = context.getBlockSchema) === null || _a === void 0 ? void 0 : _a.call(context, name);
        case isSection(context.file.uri):
            return (_b = context.getSectionSchema) === null || _b === void 0 ? void 0 : _b.call(context, name);
        default:
            return undefined;
    }
}
exports.getSchema = getSchema;
async function getSchemaFromJSON(context) {
    const originalSource = context.file.source;
    const strippedSource = originalSource.replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, '').trim();
    const offset = originalSource.indexOf(strippedSource);
    const parsed = (0, json_1.parseJSON)(strippedSource);
    const ast = (0, to_source_code_1.toJSONAST)(strippedSource);
    return {
        parsed,
        ast,
        offset,
    };
}
exports.getSchemaFromJSON = getSchemaFromJSON;
function toParsed(schemaNode, isStrict) {
    if (schemaNode instanceof Error)
        return schemaNode;
    return (0, json_1.parseJSON)(schemaNode.body.value, undefined, isStrict);
}
function toAst(schemaNode) {
    if (schemaNode instanceof Error)
        return schemaNode;
    return (0, to_source_code_1.toJSONAST)(schemaNode.body.value);
}
//# sourceMappingURL=to-schema.js.map

/***/ }),

/***/ 3312:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toSourceCode = exports.toJSONAST = exports.toLiquidHTMLAST = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const parse_1 = __webpack_require__(8558);
const path = __importStar(__webpack_require__(1702));
const types_1 = __webpack_require__(2660);
const error_1 = __webpack_require__(3773);
function toLiquidHTMLAST(source) {
    try {
        return (0, liquid_html_parser_1.toLiquidHtmlAST)(source);
    }
    catch (error) {
        return (0, error_1.asError)(error);
    }
}
exports.toLiquidHTMLAST = toLiquidHTMLAST;
function toJSONAST(source) {
    try {
        return (0, parse_1.toJSONNode)(source);
    }
    catch (error) {
        return (0, error_1.asError)(error);
    }
}
exports.toJSONAST = toJSONAST;
function toSourceCode(uri, source, version) {
    const isLiquid = uri.endsWith('.liquid');
    if (isLiquid) {
        return {
            uri: path.normalize(uri),
            source,
            type: types_1.SourceCodeType.LiquidHtml,
            ast: toLiquidHTMLAST(source),
            version,
        };
    }
    else {
        return {
            uri: path.normalize(uri),
            source,
            type: types_1.SourceCodeType.JSON,
            ast: toJSONAST(source),
            version,
        };
    }
}
exports.toSourceCode = toSourceCode;
//# sourceMappingURL=to-source-code.js.map

/***/ }),

/***/ 2660:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigTarget = exports.Severity = exports.LiquidHtmlNodeTypes = exports.SourceCodeType = exports.Modes = exports.isLiteralNode = exports.isValueNode = exports.isPropertyNode = exports.isArrayNode = exports.isObjectNode = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
Object.defineProperty(exports, "LiquidHtmlNodeTypes", ({ enumerable: true, get: function () { return liquid_html_parser_1.NodeTypes; } }));
__exportStar(__webpack_require__(9592), exports);
__exportStar(__webpack_require__(5579), exports);
__exportStar(__webpack_require__(4127), exports);
__exportStar(__webpack_require__(4199), exports);
const isObjectNode = (node) => (node === null || node === void 0 ? void 0 : node.type) === 'Object';
exports.isObjectNode = isObjectNode;
const isArrayNode = (node) => (node === null || node === void 0 ? void 0 : node.type) === 'Array';
exports.isArrayNode = isArrayNode;
const isPropertyNode = (node) => (node === null || node === void 0 ? void 0 : node.type) === 'Property';
exports.isPropertyNode = isPropertyNode;
const isValueNode = (node) => (node === null || node === void 0 ? void 0 : node.type) === 'Value';
exports.isValueNode = isValueNode;
const isLiteralNode = (node) => (node === null || node === void 0 ? void 0 : node.type) === 'Literal';
exports.isLiteralNode = isLiteralNode;
exports.Modes = ['theme', 'app'];
var SourceCodeType;
(function (SourceCodeType) {
    SourceCodeType["JSON"] = "JSON";
    SourceCodeType["LiquidHtml"] = "LiquidHtml";
})(SourceCodeType = exports.SourceCodeType || (exports.SourceCodeType = {}));
/** The severity determines the icon and color of diagnostics */
var Severity;
(function (Severity) {
    Severity[Severity["ERROR"] = 0] = "ERROR";
    Severity[Severity["WARNING"] = 1] = "WARNING";
    Severity[Severity["INFO"] = 2] = "INFO";
})(Severity = exports.Severity || (exports.Severity = {}));
/** The yaml configurations to target checks */
var ConfigTarget;
(function (ConfigTarget) {
    ConfigTarget["All"] = "all";
    ConfigTarget["Recommended"] = "recommended";
    ConfigTarget["ThemeAppExtension"] = "theme-app-extension";
})(ConfigTarget = exports.ConfigTarget || (exports.ConfigTarget = {}));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 5579:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SchemaProp = void 0;
class SchemaProp {
    constructor(options) {
        this.options = options;
    }
    /** Creates a string setting definition */
    static string(defaultValue) {
        return new SchemaProp({ type: 'string', defaultValue });
    }
    /** Creates a number setting definition */
    static number(defaultValue) {
        return new SchemaProp({ type: 'number', defaultValue });
    }
    /** Creates a boolean setting definition */
    static boolean(defaultValue) {
        return new SchemaProp({ type: 'boolean', defaultValue });
    }
    /**
     * Creates an object setting definition
     *
     * Usage:
     * ```
     * const schema = {
     *   user: SchemaProp.object({
     *     age: SchemaProp.number(),
     *     name: SchemaProp.string(),
     *   })
     * };
     * ```
     *
     * @returns a schema property definition for an object type
     */
    static object(
    /** The schema of the object's properties */
    properties, defaultValue) {
        const schema = new SchemaProp({ type: 'object', defaultValue, properties });
        return schema;
    }
    /**
     * Creates an array setting definition
     *
     * Usage:
     * ```
     * const schema = {
     *   numbers: SchemaProp.array(SchemaProp.number(), [0, 1]),
     *   strings: SchemaProp.array(SchemaProp.string(), ["foo", "bar"]),
     *   users: SchemaProp.array(SchemaProp.object({
     *    name: SchemaProp.string(),
     *    age: SchemaProp.number(),
     *   })),
     * };
     * ```
     *
     * @param itemType the type of the items in the array
     * @returns a schema property definition for an object type
     */
    static array(
    /** The schema prop type of the items in the array */
    itemType, defaultValue) {
        const schema = new SchemaProp({ type: 'array', defaultValue, itemType });
        return schema;
    }
    /**
     * A schema prop can be optional, making the setting T | undefined.
     *
     * Usage:
     * ```
     * const Schema = {
     *   age: SchemaProp.number().optional(),
     * }
     * ```
     */
    optional() {
        this.options.optional = true;
        return this;
    }
    defaultValue() {
        return this.options.defaultValue;
    }
}
exports.SchemaProp = SchemaProp;
//# sourceMappingURL=schema-prop-factory.js.map

/***/ }),

/***/ 8288:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Setting = void 0;
var setting_1 = __webpack_require__(976);
Object.defineProperty(exports, "Setting", ({ enumerable: true, get: function () { return setting_1.Setting; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 976:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=setting.js.map

/***/ }),

/***/ 4127:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=theme-liquid-docs.js.map

/***/ }),

/***/ 4199:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ThemeSchemaType = void 0;
__exportStar(__webpack_require__(8288), exports);
var ThemeSchemaType;
(function (ThemeSchemaType) {
    ThemeSchemaType["AppBlock"] = "app-block";
    ThemeSchemaType["Block"] = "block";
    ThemeSchemaType["Section"] = "section";
})(ThemeSchemaType = exports.ThemeSchemaType || (exports.ThemeSchemaType = {}));
//# sourceMappingURL=theme-schemas.js.map

/***/ }),

/***/ 522:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findLastAndIndex = exports.findLastIndex = exports.findLast = exports.last = exports.first = void 0;
function first(arr) {
    return arr[0];
}
exports.first = first;
function last(arr, offset = 0) {
    return arr[arr.length - 1 + offset];
}
exports.last = last;
function findLast(array, pred) {
    return array[findLastIndex(array, pred)];
}
exports.findLast = findLast;
function findLastIndex(array, pred) {
    for (let i = array.length - 1; i >= 0; i--) {
        if (pred(array[i]))
            return i;
    }
    return -1;
}
exports.findLastIndex = findLastIndex;
function findLastAndIndex(array, pred) {
    const index = findLastIndex(array, pred);
    return [array[index], index];
}
exports.findLastAndIndex = findLastAndIndex;
//# sourceMappingURL=array.js.map

/***/ }),

/***/ 294:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateBlockFileExistence = exports.reportWarning = exports.validateNestedBlocks = exports.isInvalidPresetBlock = exports.getBlocks = void 0;
const json_1 = __webpack_require__(9151);
const file_utils_1 = __webpack_require__(6025);
function getBlocks(validSchema) {
    const rootLevelThemeBlocks = [];
    const rootLevelLocalBlocks = [];
    const presetLevelBlocks = {};
    const rootLevelBlocks = validSchema.blocks;
    const presets = validSchema.presets;
    // Helper function to categorize blocks
    function categorizeRootLevelBlocks(block, index) {
        if (!block)
            return;
        const hasName = 'name' in block;
        if (hasName) {
            rootLevelLocalBlocks.push({
                node: block,
                path: ['blocks', String(index), 'type'],
            });
        }
        else if (block.type !== '@app') {
            rootLevelThemeBlocks.push({
                node: block,
                path: ['blocks', String(index), 'type'],
            });
        }
    }
    function categorizePresetLevelBlocks(block, currentPath, depth = 0) {
        if (!block)
            return;
        if (!presetLevelBlocks[depth]) {
            presetLevelBlocks[depth] = [];
        }
        presetLevelBlocks[depth].push({
            node: block,
            path: currentPath.concat('type'),
        });
        if ('blocks' in block) {
            if (Array.isArray(block.blocks)) {
                block.blocks.forEach((nestedBlock, index) => {
                    categorizePresetLevelBlocks(nestedBlock, currentPath.concat('blocks', String(index)), depth + 1);
                });
            }
            else if (typeof block.blocks === 'object' && block.blocks !== null) {
                Object.entries(block.blocks).forEach(([key, nestedBlock]) => {
                    categorizePresetLevelBlocks(nestedBlock, currentPath.concat('blocks', key), depth + 1);
                });
            }
        }
    }
    if (Array.isArray(rootLevelBlocks)) {
        rootLevelBlocks.forEach((block, index) => {
            categorizeRootLevelBlocks(block, index);
        });
    }
    if (presets) {
        presets.forEach((preset, presetIndex) => {
            if ('blocks' in preset && preset.blocks) {
                if (Array.isArray(preset.blocks)) {
                    preset.blocks.forEach((block, blockIndex) => {
                        categorizePresetLevelBlocks(block, ['presets', String(presetIndex), 'blocks', String(blockIndex)], 0);
                    });
                }
                else if (typeof preset.blocks === 'object') {
                    Object.entries(preset.blocks).forEach(([key, block]) => {
                        categorizePresetLevelBlocks(block, ['presets', String(presetIndex), 'blocks', key], 0);
                    });
                }
            }
        });
    }
    return {
        rootLevelThemeBlocks,
        rootLevelLocalBlocks,
        presetLevelBlocks,
    };
}
exports.getBlocks = getBlocks;
function isInvalidPresetBlock(blockNode, rootLevelThemeBlocks) {
    const isPrivateBlockType = blockNode.type.startsWith('_');
    const isThemeInRootLevel = rootLevelThemeBlocks.some((block) => block.node.type === '@theme');
    const needsExplicitRootBlock = isPrivateBlockType || !isThemeInRootLevel;
    const isPresetInRootLevel = rootLevelThemeBlocks.some((block) => block.node.type === blockNode.type);
    return !isPresetInRootLevel && needsExplicitRootBlock;
}
exports.isInvalidPresetBlock = isInvalidPresetBlock;
function validateBlockTargeting(nestedBlock, nestedPath, context, parentNode, rootLevelThemeBlocks, allowedBlockTypes, offset, ast) {
    const typeNode = (0, json_1.nodeAtPath)(ast, nestedPath);
    if (typeNode && isInvalidPresetBlock(nestedBlock, rootLevelThemeBlocks)) {
        const isPrivateBlock = nestedBlock.type.startsWith('_');
        const errorMessage = isPrivateBlock
            ? `Private block type "${nestedBlock.type}" is not allowed in "${parentNode.type}" blocks.`
            : `Block type "${nestedBlock.type}" is not allowed in "${parentNode.type}" blocks. Allowed types are: ${allowedBlockTypes.join(', ')}.`;
        reportWarning(errorMessage, offset, typeNode, context);
    }
    if ('blocks' in nestedBlock && nestedBlock.blocks) {
        validateNestedBlocks(context, nestedBlock, nestedBlock.blocks, nestedPath.slice(0, -1), offset, ast);
    }
}
async function validateNestedBlocks(context, parentNode, nestedBlocks, currentPath, offset, ast) {
    var _a;
    if (!nestedBlocks)
        return;
    const parentSchema = await ((_a = context.getBlockSchema) === null || _a === void 0 ? void 0 : _a.call(context, parentNode.type));
    if (!parentSchema || parentSchema instanceof Error)
        return;
    const { validSchema } = parentSchema;
    if (!validSchema || validSchema instanceof Error)
        return;
    const { rootLevelThemeBlocks } = getBlocks(validSchema);
    const allowedBlockTypes = rootLevelThemeBlocks.map((block) => block.node.type);
    if (Array.isArray(nestedBlocks)) {
        nestedBlocks.forEach((nestedBlock, index) => {
            const nestedPath = currentPath.concat(['blocks', String(index), 'type']);
            validateBlockTargeting(nestedBlock, nestedPath, context, parentNode, rootLevelThemeBlocks, allowedBlockTypes, offset, ast);
        });
    }
    else if (typeof nestedBlocks === 'object') {
        Object.entries(nestedBlocks).forEach(([key, nestedBlock]) => {
            const nestedPath = currentPath.concat(['blocks', key, 'type']);
            validateBlockTargeting(nestedBlock, nestedPath, context, parentNode, rootLevelThemeBlocks, allowedBlockTypes, offset, ast);
        });
    }
}
exports.validateNestedBlocks = validateNestedBlocks;
function reportWarning(message, offset, astNode, context) {
    context.report({
        message,
        startIndex: offset + (0, json_1.getLocStart)(astNode),
        endIndex: offset + (0, json_1.getLocEnd)(astNode),
    });
}
exports.reportWarning = reportWarning;
async function validateBlockFileExistence(blockType, context) {
    if (blockType === '@theme' || blockType === '@app') {
        return true;
    }
    const blockPath = `blocks/${blockType}.liquid`;
    return await (0, file_utils_1.doesFileExist)(context, blockPath);
}
exports.validateBlockFileExistence = validateBlockFileExistence;
//# sourceMappingURL=block.js.map

/***/ }),

/***/ 3773:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.asError = exports.isError = void 0;
const PARSE_ERROR_MESSAGES = {
    [1 /* ParseErrorCode.InvalidSymbol */]: 'Invalid symbol found in the input.',
    [2 /* ParseErrorCode.InvalidNumberFormat */]: 'Invalid number format detected.',
    [3 /* ParseErrorCode.PropertyNameExpected */]: 'Property name expected but not found.',
    [4 /* ParseErrorCode.ValueExpected */]: 'A value was expected but not found.',
    [5 /* ParseErrorCode.ColonExpected */]: 'Colon `:` expected after the property name.',
    [6 /* ParseErrorCode.CommaExpected */]: 'Comma `,` expected between elements and properties.',
    [7 /* ParseErrorCode.CloseBraceExpected */]: 'Closing brace `}` expected.',
    [8 /* ParseErrorCode.CloseBracketExpected */]: 'Closing bracket `]` expected.',
    [9 /* ParseErrorCode.EndOfFileExpected */]: 'End of file expected.',
    [10 /* ParseErrorCode.InvalidCommentToken */]: 'Invalid comment token found.',
    [11 /* ParseErrorCode.UnexpectedEndOfComment */]: 'Unexpected end of comment.',
    [12 /* ParseErrorCode.UnexpectedEndOfString */]: 'Unexpected end of string.',
    [13 /* ParseErrorCode.UnexpectedEndOfNumber */]: 'Unexpected end of number.',
    [14 /* ParseErrorCode.InvalidUnicode */]: 'Invalid Unicode escape sequence.',
    [15 /* ParseErrorCode.InvalidEscapeCharacter */]: 'Invalid escape character found.',
    [16 /* ParseErrorCode.InvalidCharacter */]: 'Invalid character found in the input.',
};
function isError(error) {
    return error instanceof Error;
}
exports.isError = isError;
function asError(error) {
    if (error instanceof Error) {
        return error;
    }
    if (typeof error === 'string') {
        return new Error(error);
    }
    if (error && typeof error === 'object' && 'error' in error) {
        return new Error(getParseErrorMessage(error));
    }
    if (error && typeof error.toString === 'function') {
        return new Error(error.toString());
    }
    return new Error('An unknown error occurred');
}
exports.asError = asError;
function getParseErrorMessage(parseError) {
    return PARSE_ERROR_MESSAGES[parseError.error] || 'Unknown parse error.';
}
//# sourceMappingURL=error.js.map

/***/ }),

/***/ 6025:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hasLocalAssetSizeExceededThreshold = exports.hasRemoteAssetSizeExceededThreshold = exports.getFileSize = exports.doesFileExceedThreshold = exports.doesFileExist = void 0;
const cross_fetch_1 = __webpack_require__(288);
async function doesFileExist(context, relativePath) {
    const uri = context.toUri(relativePath);
    return await context.fileExists(uri);
}
exports.doesFileExist = doesFileExist;
async function doesFileExceedThreshold(context, relativePath, thresholdInBytes) {
    const uri = context.toUri(relativePath);
    if (!context.fileSize)
        return [false, 0];
    const fileSize = await context.fileSize(uri);
    return [fileSize > thresholdInBytes, fileSize];
}
exports.doesFileExceedThreshold = doesFileExceedThreshold;
async function getFileSize(url) {
    try {
        const response = await (0, cross_fetch_1.fetch)(url, { method: 'HEAD' });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const fileSize = response.headers.get('Content-Length');
        if (fileSize === null)
            return 0;
        return parseFloat(fileSize);
    }
    catch (error) {
        return 0;
    }
}
exports.getFileSize = getFileSize;
async function hasRemoteAssetSizeExceededThreshold(url, thresholdInBytes) {
    const fileSize = await getFileSize(url);
    return fileSize > thresholdInBytes;
}
exports.hasRemoteAssetSizeExceededThreshold = hasRemoteAssetSizeExceededThreshold;
async function hasLocalAssetSizeExceededThreshold(context, relativePath, thresholdInBytes) {
    const fileExists = await doesFileExist(context, relativePath);
    if (!fileExists)
        return false;
    const [fileExceedsThreshold, _fileSize] = await doesFileExceedThreshold(context, relativePath, thresholdInBytes);
    return fileExceedsThreshold;
}
exports.hasLocalAssetSizeExceededThreshold = hasLocalAssetSizeExceededThreshold;
//# sourceMappingURL=file-utils.js.map

/***/ }),

/***/ 6671:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(6240), exports);
__exportStar(__webpack_require__(522), exports);
__exportStar(__webpack_require__(1108), exports);
__exportStar(__webpack_require__(3773), exports);
__exportStar(__webpack_require__(3686), exports);
__exportStar(__webpack_require__(8665), exports);
__exportStar(__webpack_require__(1214), exports);
__exportStar(__webpack_require__(294), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1214:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.indexBy = void 0;
/**
 * Returns an Record representation of the collection indexed by keyFn. Assumes
 * the key function returns unique results.
 */
function indexBy(keyFn, collection) {
    const record = {};
    for (const item of collection) {
        record[keyFn(item)] = item;
    }
    return record;
}
exports.indexBy = indexBy;
//# sourceMappingURL=indexBy.js.map

/***/ }),

/***/ 1639:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isContentForBlock = void 0;
function isContentForBlock(nodeMarkup) {
    if (typeof nodeMarkup === 'string') {
        return false;
    }
    return nodeMarkup.contentForType.value === 'block';
}
exports.isContentForBlock = isContentForBlock;
//# sourceMappingURL=markup.js.map

/***/ }),

/***/ 8665:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.memoize = exports.memo = void 0;
const Unset = Symbol('Unset');
/** Returns a cached version of a function. Only caches one result. */
function memo(fn) {
    let cachedValue = Unset;
    const memoedFunction = (...args) => {
        if (cachedValue === Unset) {
            cachedValue = fn(...args);
        }
        return cachedValue;
    };
    memoedFunction.clearCache = () => {
        cachedValue = Unset;
    };
    return memoedFunction;
}
exports.memo = memo;
/**
 * Returns a function that is cached-by-keyFn(argument)
 *
 * e.g.
 *
 * const expensiveFunction = (thing: Thing) => ...
 * const thingToString = (thing: Thing): string => ...
 * const fastOnSubsequentCalls = memoize(
 *   expensiveFunction,
 *   thingToString,
 * );
 *
 * // slow first run
 * fastOnSubsequentCalls(thing1);
 *
 * // fast subsequent ones
 * fastOnSubsequentCalls(thing1);
 * fastOnSubsequentCalls(thing1);
 */
function memoize(fn, keyFn) {
    const cache = {};
    const memoedFunction = (arg) => {
        const key = keyFn(arg);
        if (!cache[key]) {
            cache[key] = fn(arg);
        }
        return cache[key];
    };
    memoedFunction.force = (arg) => {
        memoedFunction.invalidate(arg);
        return memoedFunction(arg);
    };
    memoedFunction.invalidate = (arg) => {
        const key = keyFn(arg);
        delete cache[key];
    };
    return memoedFunction;
}
exports.memoize = memoize;
//# sourceMappingURL=memo.js.map

/***/ }),

/***/ 6240:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.deepGet = void 0;
function deepGet(obj, path) {
    return path.reduce((acc, key) => acc === null || acc === void 0 ? void 0 : acc[key], obj);
}
exports.deepGet = deepGet;
//# sourceMappingURL=object.js.map

/***/ }),

/***/ 1108:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOffset = exports.getPosition = void 0;
const line_column_1 = __importDefault(__webpack_require__(4638));
function getPosition(source, index) {
    const lineCol = (0, line_column_1.default)(source, { origin: 0 }).fromIndex(Math.min(index, source.length - 1));
    return {
        index,
        line: lineCol ? lineCol.line : -1,
        character: lineCol ? lineCol.col : -1,
    };
}
exports.getPosition = getPosition;
function getOffset(source, line, column) {
    return (0, line_column_1.default)(source, { origin: 1 }).toIndex(line, column);
}
exports.getOffset = getOffset;
//# sourceMappingURL=position.js.map

/***/ }),

/***/ 3686:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertNever = void 0;
/**
 * assertNever(x: never);
 *
 * You use this in the default case of switch statements to make sure you
 * exhaust your discriminated union.
 *
 * If you don't, typescript is going to complain that assertNever is being
 * called with a non-never value.
 *
 * @example
 * switch (fruit.type) {
 *   case BANANA: // ...
 *   case APPLE: // ...
 *   default: return assertNever(fruit.type);
 * }
 */
function assertNever(x) {
    throw new Error(`We should never reach this code, you are missing a case for ${x}`);
}
exports.assertNever = assertNever;
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 6267:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findCurrentNode = exports.forEachChildNodes = exports.visit = void 0;
function isNode(x) {
    return x !== null && typeof x === 'object' && typeof x.type === 'string';
}
/**
 * @example
 *
 * const links = visit<'LiquidHTML', DocumentLink>(liquidAST, {
 *   'LiquidTag': (node, ancestors) => {
 *     if (node.name === 'render' || node.name === 'include') {
 *       return DocumentLink.create(...);
 *     }
 *   },
 * })
 *
 * Note: this is the ChatGPT-rewritten version of the recursive method.
 * If you want to refactor it, just ask it to do it for you :P
 */
function visit(node, visitor) {
    const results = [];
    const stack = [{ node, lineage: [] }];
    const pushStack = (node, lineage) => stack.push({ node, lineage });
    while (stack.length > 0) {
        // Visit current node
        const { node, lineage } = stack.pop();
        const visitNode = visitor[node.type];
        const result = visitNode ? visitNode(node, lineage) : undefined;
        if (Array.isArray(result)) {
            results.push(...result);
        }
        else if (result !== undefined) {
            results.push(result);
        }
        // Enqueue child nodes
        forEachChildNodes(node, lineage.concat(node), pushStack);
    }
    return results;
}
exports.visit = visit;
function forEachChildNodes(node, lineage, execute) {
    for (const value of Object.values(node)) {
        if (Array.isArray(value)) {
            for (let i = value.length - 1; i >= 0; i--) {
                execute(value[i], lineage);
            }
        }
        else if (isNode(value)) {
            execute(value, lineage);
        }
    }
}
exports.forEachChildNodes = forEachChildNodes;
function findCurrentNode(ast, cursorPosition) {
    let prev;
    let current = ast;
    let ancestors = [];
    while (current !== prev) {
        prev = current;
        forEachChildNodes(current, ancestors.concat(current), (child, lineage) => {
            if (isUnclosed(child) ||
                (isCovered(child, cursorPosition) && size(child) <= size(current))) {
                current = child;
                ancestors = lineage;
            }
        });
    }
    return [current, ancestors];
}
exports.findCurrentNode = findCurrentNode;
function isCovered(node, offset) {
    return node.position.start < offset && offset <= node.position.end;
}
function size(node) {
    return node.position.end - node.position.start;
}
function isUnclosed(node) {
    var _a;
    if ('blockEndPosition' in node) {
        return ((_a = node.blockEndPosition) === null || _a === void 0 ? void 0 : _a.end) === -1;
    }
    else if ('children' in node) {
        return node.children.length > 0;
    }
    return false;
}
//# sourceMappingURL=visitor.js.map

/***/ }),

/***/ 1837:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.visitJSON = exports.visitLiquid = void 0;
var liquid_1 = __webpack_require__(9241);
Object.defineProperty(exports, "visitLiquid", ({ enumerable: true, get: function () { return liquid_1.visitLiquid; } }));
var json_1 = __webpack_require__(8895);
Object.defineProperty(exports, "visitJSON", ({ enumerable: true, get: function () { return json_1.visitJSON; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8895:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.visitJSON = void 0;
function isJSONNode(thing) {
    return !!thing && typeof thing === 'object' && 'type' in thing;
}
const nonTraversableProperties = new Set(['loc']);
async function visitJSON(node, check) {
    const stack = [{ node, ancestors: [] }];
    let method;
    while (stack.length > 0) {
        const { node, ancestors } = stack.pop();
        const lineage = ancestors.concat(node);
        method = check[node.type];
        if (method)
            await method(node, ancestors);
        for (const key in node) {
            if (!node.hasOwnProperty(key) || nonTraversableProperties.has(key)) {
                continue;
            }
            const value = node[key];
            if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const item = value[i];
                    if (isJSONNode(item)) {
                        stack.push({ node: item, ancestors: lineage });
                    }
                }
            }
            else if (isJSONNode(value)) {
                stack.push({ node: value, ancestors: lineage });
            }
        }
        method = check[`${node.type}:exit`];
        if (method)
            await method(node, ancestors);
    }
}
exports.visitJSON = visitJSON;
//# sourceMappingURL=json.js.map

/***/ }),

/***/ 9241:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.visitLiquid = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
function isLiquidHtmlNode(thing) {
    return !!thing && typeof thing === 'object' && 'type' in thing;
}
async function visitLiquid(node, check) {
    const stack = [{ node, ancestors: [] }];
    let method;
    while (stack.length > 0) {
        const { node, ancestors } = stack.pop();
        const lineage = ancestors.concat(node);
        method = check[node.type];
        if (method)
            await method(node, ancestors);
        for (const key in node) {
            if (!node.hasOwnProperty(key) || liquid_html_parser_1.nonTraversableProperties.has(key)) {
                continue;
            }
            const value = node[key];
            if (Array.isArray(value)) {
                for (let i = value.length - 1; i >= 0; i--) {
                    const item = value[i];
                    if (isLiquidHtmlNode(item)) {
                        stack.push({ node: item, ancestors: lineage });
                    }
                }
            }
            else if (isLiquidHtmlNode(value)) {
                stack.push({ node: value, ancestors: lineage });
            }
        }
        method = check[`${node.type}:exit`];
        if (method)
            await method(node, ancestors);
    }
}
exports.visitLiquid = visitLiquid;
//# sourceMappingURL=liquid.js.map

/***/ }),

/***/ 4842:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.startServer = exports.getConnection = void 0;
const theme_language_server_common_1 = __webpack_require__(6691);
const browser_1 = __webpack_require__(4794);
__exportStar(__webpack_require__(6691), exports);
function getConnection(worker) {
    const reader = new browser_1.BrowserMessageReader(worker);
    const writer = new browser_1.BrowserMessageWriter(worker);
    return (0, browser_1.createConnection)(reader, writer);
}
exports.getConnection = getConnection;
// This is where you do the worker.postMessage stuff?
// Or is this where we accept the worker.postMessage stuff?
// Yeah I think this is where you _accept_ the worker.postMessage stuff
function startServer(worker, dependencies, connection = getConnection(worker)) {
    console.info('staging server', worker, dependencies, connection);
    (0, theme_language_server_common_1.startServer)(connection, dependencies);
}
exports.startServer = startServer;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6558:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClientCapabilities = void 0;
class ClientCapabilities {
    constructor() {
        this.capabilities = {};
        this.initializationOptions = {};
    }
    setup(capabilities, initializationOptions = {}) {
        this.capabilities = capabilities;
        this.initializationOptions = initializationOptions;
    }
    get hasWorkspaceConfigurationSupport() {
        var _a, _b;
        return !!((_b = (_a = this.capabilities) === null || _a === void 0 ? void 0 : _a.workspace) === null || _b === void 0 ? void 0 : _b.configuration);
    }
    get hasApplyEditSupport() {
        var _a, _b;
        return !!((_b = (_a = this.capabilities) === null || _a === void 0 ? void 0 : _a.workspace) === null || _b === void 0 ? void 0 : _b.applyEdit);
    }
    get hasWorkspaceFoldersSupport() {
        var _a, _b;
        return !!((_b = (_a = this.capabilities) === null || _a === void 0 ? void 0 : _a.workspace) === null || _b === void 0 ? void 0 : _b.workspaceFolders);
    }
    get hasDidChangeConfigurationDynamicRegistrationSupport() {
        var _a, _b, _c;
        return !!((_c = (_b = (_a = this.capabilities) === null || _a === void 0 ? void 0 : _a.workspace) === null || _b === void 0 ? void 0 : _b.didChangeConfiguration) === null || _c === void 0 ? void 0 : _c.dynamicRegistration);
    }
    get hasDidChangeWatchedFilesDynamicRegistrationSupport() {
        var _a, _b, _c;
        return !!((_c = (_b = (_a = this.capabilities) === null || _a === void 0 ? void 0 : _a.workspace) === null || _b === void 0 ? void 0 : _b.didChangeWatchedFiles) === null || _c === void 0 ? void 0 : _c.dynamicRegistration);
    }
    get hasShowDocumentSupport() {
        var _a, _b;
        return !!((_b = (_a = this.capabilities) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.showDocument);
    }
    get hasProgressSupport() {
        var _a, _b;
        return !!((_b = (_a = this.capabilities) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.workDoneProgress);
    }
    initializationOption(key, defaultValue) {
        var _a;
        // { 'themeCheck.checkOnSave': true }
        const direct = (_a = this.initializationOptions) === null || _a === void 0 ? void 0 : _a[key];
        if (direct !== undefined)
            return direct;
        // { themeCheck: { checkOnSave: true } }
        const nested = pathGet(this.initializationOptions, key);
        if (nested !== undefined)
            return nested;
        // fallback
        return defaultValue;
    }
}
exports.ClientCapabilities = ClientCapabilities;
function pathGet(obj, key) {
    const path = key.split('.');
    return path.reduce((acc, subpath) => acc === null || acc === void 0 ? void 0 : acc[subpath], obj);
}
//# sourceMappingURL=ClientCapabilities.js.map

/***/ }),

/***/ 9242:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isArrayType = exports.docsetEntryReturnType = exports.TypeSystem = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const theme_check_common_1 = __webpack_require__(5309);
const settings_1 = __webpack_require__(7429);
const utils_1 = __webpack_require__(6813);
const theme_check_common_2 = __webpack_require__(5309);
class TypeSystem {
    constructor(themeDocset, getThemeSettingsSchemaForURI, getMetafieldDefinitions) {
        this.themeDocset = themeDocset;
        this.getThemeSettingsSchemaForURI = getThemeSettingsSchemaForURI;
        this.getMetafieldDefinitions = getMetafieldDefinitions;
        /**
         * An indexed representation of objects.json by name
         *
         * e.g. objectMap['product'] returns the product ObjectEntry.
         */
        this.objectMap = async (uri, ast) => {
            var _a, _b, _c, _d;
            const [objectMap, themeSettingProperties, metafieldDefinitionsObjectMap] = await Promise.all([
                this._objectMap(),
                this.themeSettingProperties(uri),
                this.metafieldDefinitionsObjectMap(uri),
            ]);
            // Here we shallow mutate `settings.properties` to have the properties made
            // available by settings_schema.json
            const result = {
                ...objectMap,
                settings: {
                    ...((_a = objectMap.settings) !== null && _a !== void 0 ? _a : {}),
                    properties: themeSettingProperties,
                },
                ...customMetafieldTypeEntries(objectMap['metafield']),
                ...metafieldDefinitionsObjectMap,
            };
            // For each metafield definition fetched, we need to override existing types with `metafields` property
            // to `${category}_metafield`.
            //
            // WARNING: Since we aren't cloning the object, we are mutating the original type for all themes in
            // the workspace. However, this is fine since these changes are not unique to a theme.
            for (let category of theme_check_common_1.FETCHED_METAFIELD_CATEGORIES) {
                if (!result[category])
                    continue;
                let metafieldsProperty = (_b = result[category].properties) === null || _b === void 0 ? void 0 : _b.find((prop) => prop.name === 'metafields');
                if (!metafieldsProperty)
                    continue;
                metafieldsProperty.return_type = [{ type: `${category}_metafields`, name: '' }];
            }
            // Deal with sections/file.liquid section.settings by infering the type from the {% schema %}
            if (/[\/\\]sections[\/\\]/.test(uri) && result.section) {
                result.section = JSON.parse(JSON.stringify(result.section)); // easy deep clone
                const settings = (_c = result.section.properties) === null || _c === void 0 ? void 0 : _c.find((x) => x.name === 'settings');
                if (!settings || !settings.return_type)
                    return result;
                settings.return_type = [{ type: 'section_settings', name: '' }];
                result.section_settings = {
                    name: 'section_settings',
                    access: {
                        global: false,
                        parents: [],
                        template: [],
                    },
                    properties: schemaSettingsAsProperties(ast),
                    return_type: [],
                };
            }
            // Deal with blocks/files.liquid block.settings in a similar fashion
            if (/[\/\\]blocks[\/\\]/.test(uri) && result.block) {
                result.block = JSON.parse(JSON.stringify(result.block)); // easy deep clone
                const settings = (_d = result.block.properties) === null || _d === void 0 ? void 0 : _d.find((x) => x.name === 'settings');
                if (!settings || !settings.return_type)
                    return result;
                settings.return_type = [{ type: 'block_settings', name: '' }];
                result.block_settings = {
                    name: 'block_settings',
                    access: {
                        global: false,
                        parents: [],
                        template: [],
                    },
                    properties: schemaSettingsAsProperties(ast),
                    return_type: [],
                };
            }
            return result;
        };
        // This is the big one we reuse (memoized)
        this._objectMap = (0, utils_1.memo)(async () => {
            const entries = await this.objectEntries();
            return entries.reduce((map, entry) => {
                map[entry.name] = entry;
                return map;
            }, {});
        });
        /** An indexed representation of filters.json by name */
        this.filtersMap = (0, utils_1.memo)(async () => {
            const entries = await this.filterEntries();
            return entries.reduce((map, entry) => {
                map[entry.name] = entry;
                return map;
            }, {});
        });
        this.filterEntries = (0, utils_1.memo)(async () => {
            return this.themeDocset.filters();
        });
        this.objectEntries = (0, utils_1.memo)(async () => {
            return this.themeDocset.objects();
        });
        /**
         * The seedSymbolsTable contains all the global variables.
         *
         * This lets us have the ambient type of things first, but if someone
         * reassigns product, then we'll be able to change the type of product on
         * the appropriate range.
         *
         * This is not memo'ed because we would otherwise need to clone the thing.
         */
        this.seedSymbolsTable = async (uri) => {
            const [globalVariables, contextualVariables] = await Promise.all([
                this.globalVariables(),
                this.contextualVariables(uri),
            ]);
            return globalVariables.concat(contextualVariables).reduce((table, objectEntry) => {
                var _a;
                var _b;
                (_a = table[_b = objectEntry.name]) !== null && _a !== void 0 ? _a : (table[_b] = []);
                table[objectEntry.name].push({
                    identifier: objectEntry.name,
                    type: objectEntryType(objectEntry),
                    range: [0],
                });
                return table;
            }, {});
        };
        this.globalVariables = (0, utils_1.memo)(async () => {
            const entries = await this.objectEntries();
            return entries.filter((entry) => !entry.access || entry.access.global === true || entry.access.template.length > 0);
        });
        this.contextualVariables = async (uri) => {
            const entries = await this.objectEntries();
            const contextualEntries = getContextualEntries(uri);
            return entries.filter((entry) => contextualEntries.includes(entry.name));
        };
    }
    async inferType(thing, partialAst, uri) {
        const [objectMap, filtersMap, symbolsTable] = await Promise.all([
            this.objectMap(uri, partialAst),
            this.filtersMap(),
            this.symbolsTable(partialAst, uri),
        ]);
        return inferType(thing, symbolsTable, objectMap, filtersMap);
    }
    async availableVariables(partialAst, partial, node, uri) {
        const [objectMap, filtersMap, symbolsTable] = await Promise.all([
            this.objectMap(uri, partialAst),
            this.filtersMap(),
            this.symbolsTable(partialAst, uri),
        ]);
        return Object.entries(symbolsTable)
            .filter(([key, typeRanges]) => key.startsWith(partial) &&
            typeRanges.some((typeRange) => isCorrectTypeRange(typeRange, node)))
            .map(([identifier, typeRanges]) => {
            var _a;
            const typeRange = (0, utils_1.findLast)(typeRanges, (typeRange) => isCorrectTypeRange(typeRange, node));
            const type = resolveTypeRangeType(typeRange.type, symbolsTable, objectMap, filtersMap);
            const entry = (_a = objectMap[isArrayType(type) ? type.valueType : type]) !== null && _a !== void 0 ? _a : {};
            return {
                entry: { ...entry, name: identifier },
                type,
            };
        });
    }
    async themeSettingProperties(uri) {
        const themeSettingsSchema = await this.getThemeSettingsSchemaForURI(uri);
        const categories = themeSettingsSchema.filter(settings_1.isSettingsCategory);
        const result = [];
        for (const category of categories) {
            const inputSettings = category.settings.filter(settings_1.isInputSetting);
            for (const setting of inputSettings) {
                result.push({
                    name: setting.id,
                    summary: '',
                    description: '',
                    return_type: settingReturnType(setting),
                    access: {
                        global: false,
                        parents: [],
                        template: [],
                    },
                });
            }
        }
        return result;
    }
    async metafieldDefinitionsObjectMap(uri) {
        let result = {};
        const metafieldDefinitionMap = await this.getMetafieldDefinitions(uri);
        for (let [category, definitions] of Object.entries(metafieldDefinitionMap)) {
            // Metafield definitions need to be grouped by their namespace
            let metafieldNamespaces = new Map();
            for (let definition of definitions) {
                if (!metafieldNamespaces.has(definition.namespace)) {
                    metafieldNamespaces.set(definition.namespace, []);
                }
                metafieldNamespaces.get(definition.namespace).push({
                    name: definition.key,
                    description: definition.description,
                    return_type: metafieldReturnType(definition.type.name),
                });
            }
            let metafieldGroupProperties = [];
            for (let [namespace, namespaceProperties] of metafieldNamespaces) {
                const metafieldCategoryNamespaceHandle = `${category}_metafield_${namespace}`;
                // Since the namespace can be shared by multiple categories, we need to make sure the return_type
                // handle is unique across all categories
                metafieldGroupProperties.push({
                    name: namespace,
                    return_type: [{ type: metafieldCategoryNamespaceHandle, name: '' }],
                    access: {
                        global: false,
                        parents: [],
                        template: [],
                    },
                });
                result[metafieldCategoryNamespaceHandle] = {
                    name: metafieldCategoryNamespaceHandle,
                    properties: namespaceProperties,
                    access: {
                        global: false,
                        parents: [],
                        template: [],
                    },
                };
            }
            const metafieldCategoryHandle = `${category}_metafields`;
            result[metafieldCategoryHandle] = {
                name: metafieldCategoryHandle,
                properties: metafieldGroupProperties,
                access: {
                    global: false,
                    parents: [],
                    template: [],
                },
            };
        }
        return result;
    }
    async symbolsTable(partialAst, uri) {
        const seedSymbolsTable = await this.seedSymbolsTable(uri);
        return buildSymbolsTable(partialAst, seedSymbolsTable);
    }
}
exports.TypeSystem = TypeSystem;
const SECTION_FILE_REGEX = /sections[\/\\][^.\\\/]*\.liquid$/;
const BLOCK_FILE_REGEX = /blocks[\/\\][^.\\\/]*\.liquid$/;
const SNIPPET_FILE_REGEX = /snippets[\/\\][^.\\\/]*\.liquid$/;
const LAYOUT_FILE_REGEX = /layout[\/\\]checkout\.liquid$/;
function getContextualEntries(uri) {
    const normalizedUri = theme_check_common_1.path.normalize(uri);
    if (LAYOUT_FILE_REGEX.test(normalizedUri)) {
        return [
            'locale',
            'direction',
            'skip_to_content_link',
            'checkout_html_classes',
            'checkout_stylesheets',
            'checkout_scripts',
            'content_for_logo',
            'breadcrumb',
            'order_summary_toggle',
            'content_for_order_summary',
            'alternative_payment_methods',
            'content_for_footer',
            'tracking_code',
        ];
    }
    if (SECTION_FILE_REGEX.test(normalizedUri)) {
        return ['section', 'predictive_search', 'recommendations', 'comment'];
    }
    if (BLOCK_FILE_REGEX.test(normalizedUri)) {
        return ['app', 'section', 'block'];
    }
    if (SNIPPET_FILE_REGEX.test(normalizedUri)) {
        return ['app'];
    }
    return [];
}
const Untyped = 'untyped';
const String = 'string';
const arrayType = (valueType) => ({
    kind: 'array',
    valueType,
});
const lazyVariable = (node, offset) => ({
    kind: liquid_html_parser_1.NodeTypes.LiquidVariable,
    node,
    offset,
});
const LazyDeconstructedExpression = (node, offset) => ({
    kind: 'deconstructed',
    node,
    offset,
});
function buildSymbolsTable(partialAst, seedSymbolsTable) {
    const typeRanges = (0, theme_check_common_2.visit)(partialAst, {
        // {% assign x = foo.x | filter %}
        AssignMarkup(node) {
            return {
                identifier: node.name,
                type: lazyVariable(node.value, node.position.start),
                range: [node.position.end],
            };
        },
        // This also covers tablerow
        ForMarkup(node, ancestors) {
            var _a;
            const parentNode = ancestors.at(-1);
            return {
                identifier: node.variableName,
                type: LazyDeconstructedExpression(node.collection, node.position.start),
                range: [parentNode.blockStartPosition.end, end((_a = parentNode.blockEndPosition) === null || _a === void 0 ? void 0 : _a.end)],
            };
        },
        // {% capture foo %}
        //   ...
        // {% endcapture}
        LiquidTag(node) {
            var _a, _b;
            if (node.name === 'capture' && typeof node.markup !== 'string') {
                return {
                    identifier: node.markup.name,
                    type: String,
                    range: [node.position.end],
                };
            }
            else if (['form', 'paginate'].includes(node.name)) {
                return {
                    identifier: node.name,
                    type: node.name,
                    range: [node.blockStartPosition.end, end((_a = node.blockEndPosition) === null || _a === void 0 ? void 0 : _a.end)],
                };
            }
            else if (['for', 'tablerow'].includes(node.name)) {
                return {
                    identifier: node.name + 'loop',
                    type: node.name + 'loop',
                    range: [node.blockStartPosition.end, end((_b = node.blockEndPosition) === null || _b === void 0 ? void 0 : _b.end)],
                };
            }
            else if (isLiquidTagIncrement(node) || isLiquidTagDecrement(node)) {
                if (node.markup.name === null)
                    return;
                return {
                    identifier: node.markup.name,
                    type: 'number',
                    range: [node.position.start],
                };
            }
            else if (node.name === 'layout') {
                return {
                    identifier: 'none',
                    type: 'keyword',
                    range: [node.position.start, node.position.end],
                };
            }
        },
    });
    return typeRanges
        .sort(({ range: [startA] }, { range: [startB] }) => startA - startB)
        .reduce((table, typeRange) => {
        var _a;
        var _b;
        (_a = table[_b = typeRange.identifier]) !== null && _a !== void 0 ? _a : (table[_b] = []);
        table[typeRange.identifier].push(typeRange);
        return table;
    }, seedSymbolsTable);
}
/**
 * Given a TypeRange['type'] (which may be lazy), resolve its type recursively.
 *
 * The output is a fully resolved PseudoType | ArrayType. Which means we
 * could use it to power completions.
 */
function resolveTypeRangeType(typeRangeType, symbolsTable, objectMap, filtersMap) {
    if (typeof typeRangeType === 'string') {
        return typeRangeType;
    }
    switch (typeRangeType.kind) {
        case 'array': {
            return typeRangeType;
        }
        case 'deconstructed': {
            const arrayType = inferType(typeRangeType.node, symbolsTable, objectMap, filtersMap);
            if (typeof arrayType === 'string') {
                return Untyped;
            }
            else {
                return arrayType.valueType;
            }
        }
        default: {
            return inferType(typeRangeType.node, symbolsTable, objectMap, filtersMap);
        }
    }
}
function inferType(thing, symbolsTable, objectMap, filtersMap) {
    var _a, _b;
    if (typeof thing === 'string') {
        return (_b = (_a = objectMap[thing]) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : Untyped;
    }
    switch (thing.type) {
        case liquid_html_parser_1.NodeTypes.Number: {
            return 'number';
        }
        case liquid_html_parser_1.NodeTypes.String: {
            return 'string';
        }
        case liquid_html_parser_1.NodeTypes.LiquidLiteral: {
            return 'boolean';
        }
        case liquid_html_parser_1.NodeTypes.Range: {
            return arrayType('number');
        }
        // The type of the assign markup is the type of the right hand side.
        // {% assign x = y.property | filter1 | filter2 %}
        case liquid_html_parser_1.NodeTypes.AssignMarkup: {
            return inferType(thing.value, symbolsTable, objectMap, filtersMap);
        }
        // A variable lookup is expression[.lookup]*
        // {{ y.property }}
        case liquid_html_parser_1.NodeTypes.VariableLookup: {
            return inferLookupType(thing, symbolsTable, objectMap, filtersMap);
        }
        // A variable is the VariableLookup + Filters
        // The type is the return value of the last filter
        // {{ y.property | filter1 | filter2 }}
        case liquid_html_parser_1.NodeTypes.LiquidVariable: {
            if (thing.filters.length > 0) {
                const lastFilter = thing.filters.at(-1);
                const filterEntry = filtersMap[lastFilter.name];
                return filterEntry ? filterEntryReturnType(filterEntry) : Untyped;
            }
            else {
                return inferType(thing.expression, symbolsTable, objectMap, filtersMap);
            }
        }
        default: {
            return Untyped;
        }
    }
}
function inferLookupType(thing, symbolsTable, objectMap, filtersMap) {
    // we return the type of the drop, so a.b.c
    const node = thing;
    // We don't complete global lookups. It's too much of an edge case.
    if (node.name === null)
        return Untyped;
    /**
     * curr stores the type of the variable lookup starting at the beginning.
     *
     * It starts as the type of the top-level identifier, and the we
     * recursively change it to the return type of the lookups.
     *
     * So, for x.images.first.src we do:
     * - curr = infer type of x                   | x
     * - curr = x.images -> ArrayType<image>      | x.images
     * - curr = images.first -> image             | x.images.first
     * - curr = first.src -> string               | x.images.first.src
     *
     * Once were done iterating, the type of the lookup is curr.
     */
    let curr = inferIdentifierType(node, symbolsTable, objectMap, filtersMap);
    for (let lookup of node.lookups) {
        // Here we redefine curr to be the returnType of the lookup.
        // e.g. images[0] -> image
        // e.g. images.first -> image
        // e.g. images.size -> number
        if (isArrayType(curr)) {
            curr = inferArrayTypeLookupType(curr, lookup);
        }
        // e.g. product.featured_image -> image
        // e.g. product.images -> ArrayType<images>
        // e.g. product.name -> string
        else {
            curr = inferPseudoTypePropertyType(curr, lookup, objectMap);
        }
        // Early return
        if (curr === Untyped) {
            return Untyped;
        }
    }
    return curr;
}
/**
 * Given a VariableLookup node, infer the type of its root (position-relative).
 *
 * e.g. for the following
 *   {% assign x = product %}
 *   {{ x.images.first }}
 *
 * This function infers the type of `x`.
 */
function inferIdentifierType(node, symbolsTable, objectMap, filtersMap) {
    // The name of a variable
    const identifier = node.name;
    // We don't complete the global access edge case
    // e.g. {{ ['all_products'] }}
    if (!identifier) {
        return Untyped;
    }
    const typeRanges = symbolsTable[identifier];
    if (!typeRanges) {
        return Untyped;
    }
    const typeRange = (0, utils_1.findLast)(typeRanges, (tr) => isCorrectTypeRange(tr, node));
    return typeRange
        ? resolveTypeRangeType(typeRange.type, symbolsTable, objectMap, filtersMap)
        : Untyped;
}
/**
 * infers the type of a lookup on an ArrayType
 * - images[0] becomes 'image'
 * - images[index] becomes 'image'
 * - images.first becomes 'image'
 * - images.last becomes 'image'
 * - images.size becomes 'number'
 * - anything else becomes 'untyped'
 */
function inferArrayTypeLookupType(curr, lookup) {
    // images[0]
    // images[index]
    if (lookup.type === liquid_html_parser_1.NodeTypes.Number || lookup.type === liquid_html_parser_1.NodeTypes.VariableLookup) {
        return curr.valueType;
    }
    // images.first
    // images.last
    // images.size
    // anything else is undef
    else if (lookup.type === liquid_html_parser_1.NodeTypes.String) {
        switch (lookup.value) {
            case 'first':
            case 'last': {
                return curr.valueType;
            }
            case 'size': {
                return 'number';
            }
            default: {
                return Untyped;
            }
        }
    }
    // images[true]
    // images[(0..2)]
    else {
        return Untyped;
    }
}
function inferPseudoTypePropertyType(curr, // settings
lookup, objectMap) {
    var _a;
    const parentEntry = objectMap[curr];
    // products[0]
    // products[true]
    // products[(0..10)]
    // unknown.images
    if (!parentEntry || lookup.type !== liquid_html_parser_1.NodeTypes.String) {
        return Untyped;
    }
    const propertyName = lookup.value;
    const property = (_a = parentEntry.properties) === null || _a === void 0 ? void 0 : _a.find((property) => property.name === propertyName);
    if (!property) {
        return Untyped;
    }
    return objectEntryType(property);
}
function filterEntryReturnType(entry) {
    return docsetEntryReturnType(entry, 'string');
}
function objectEntryType(entry) {
    return docsetEntryReturnType(entry, entry.name);
}
/**
 * This function converts the return_type property in one of the .json
 * files into a PseudoType or ArrayType.
 */
function docsetEntryReturnType(entry, defaultValue) {
    const returnTypes = entry.return_type;
    if (returnTypes && returnTypes.length > 0) {
        const returnType = returnTypes[0];
        if (isArrayReturnType(returnType)) {
            return arrayType(returnType.array_value);
        }
        else {
            return returnType.type;
        }
    }
    return defaultValue;
}
exports.docsetEntryReturnType = docsetEntryReturnType;
function isArrayReturnType(rt) {
    return rt.type === 'array';
}
function isArrayType(thing) {
    return typeof thing !== 'string';
}
exports.isArrayType = isArrayType;
/** Assumes findLast */
function isCorrectTypeRange(typeRange, node) {
    const [start, end] = typeRange.range;
    if (end && node.position.start > end)
        return false;
    return node.position.start > start;
}
function end(offset) {
    if (offset === -1)
        return undefined;
    return offset;
}
function isLiquidTagIncrement(node) {
    return node.name === liquid_html_parser_1.NamedTags.increment && typeof node.markup !== 'string';
}
function isLiquidTagDecrement(node) {
    return node.name === liquid_html_parser_1.NamedTags.decrement && typeof node.markup !== 'string';
}
function settingReturnType(setting) {
    switch (setting.type) {
        // basic settings
        case 'checkbox':
            return [{ type: 'boolean', name: '' }];
        case 'range':
        case 'number':
            return [{ type: 'number', name: '' }];
        case 'radio':
        case 'select':
        case 'text':
        case 'textarea':
            return [{ type: 'string', name: '' }];
        // specialized settings
        case 'article':
            return [{ type: 'article', name: '' }];
        case 'blog':
            return [{ type: 'blog', name: '' }];
        case 'collection':
            return [{ type: 'collection', name: '' }];
        case 'collection_list':
            return [{ type: 'array', array_value: 'collection' }];
        case 'color':
            return [{ type: 'color', name: '' }];
        case 'color_background':
            return [{ type: 'string', name: '' }];
        case 'color_scheme':
            return [{ type: 'color_scheme', name: '' }];
        // TODO ??
        case 'color_scheme_group':
            return [];
        case 'font_picker':
            return [{ type: 'font', name: '' }];
        case 'html':
            return [{ type: 'string', name: '' }];
        case 'image_picker':
            return [{ type: 'image', name: '' }];
        case 'inline_richtext':
            return [{ type: 'string', name: '' }];
        case 'link_list':
            return [{ type: 'linklist', name: '' }];
        case 'liquid':
            return [{ type: 'string', name: '' }];
        case 'page':
            return [{ type: 'page', name: '' }];
        case 'product':
            return [{ type: 'product', name: '' }];
        case 'product_list':
            return [{ type: 'array', array_value: 'product' }];
        case 'richtext':
            return [{ type: 'string', name: '' }];
        case 'text_alignment':
            return [{ type: 'string', name: '' }];
        case 'url':
            return [{ type: 'string', name: '' }];
        case 'video':
            return [{ type: 'video', name: '' }];
        case 'video_url':
            return [{ type: 'string', name: '' }];
        default:
            return [];
    }
}
const METAFIELD_TYPE_TO_TYPE = Object.freeze({
    single_line_text_field: String,
    multi_line_text_field: String,
    url_reference: String,
    date: String,
    date_time: String,
    number_integer: 'number',
    number_decimal: 'number',
    product_reference: 'product',
    collection_reference: 'collection',
    variant_reference: 'variant',
    page_reference: 'page',
    boolean: 'boolean',
    color: 'color',
    weight: 'measurement',
    volume: 'measurement',
    dimension: 'measurement',
    rating: 'rating',
    money: 'money',
    json: Untyped,
    metaobject_reference: 'metaobject',
    mixed_reference: Untyped,
    rich_text_field: Untyped,
    file_reference: Untyped,
});
const REFERENCE_TYPE_METAFIELDS = Object.entries(METAFIELD_TYPE_TO_TYPE)
    .filter(([metafieldType, _type]) => metafieldType.endsWith('_reference'))
    .map(([_metafieldType, type]) => type);
function metafieldReturnType(metafieldType) {
    var _a;
    let isArray = metafieldType.startsWith('list.');
    if (isArray) {
        metafieldType = metafieldType.split('.')[1];
    }
    let type = 'metafield_' + ((_a = METAFIELD_TYPE_TO_TYPE[metafieldType]) !== null && _a !== void 0 ? _a : Untyped);
    if (isArray) {
        return [{ type: `${type}_array`, name: '' }];
    }
    return [{ type: type, name: '' }];
}
// The default `metafield` type has an untyped `value` property.
// We need to create new metafield types with the labels `metafield_x` and `metafield_x_array`
// where x is the type of metafield inside the `value` property. The metafields ending with `x_array`
// is where the value is an array of type x.
const customMetafieldTypeEntries = (0, utils_1.memo)((baseMetafieldEntry) => {
    if (!baseMetafieldEntry)
        return {};
    return [
        ...new Set([...Object.values(METAFIELD_TYPE_TO_TYPE), ...theme_check_common_1.FETCHED_METAFIELD_CATEGORIES]),
    ].reduce((map, type) => {
        var _a, _b;
        {
            const metafieldEntry = JSON.parse(JSON.stringify(baseMetafieldEntry)); // easy deep clone
            const metafieldValueProp = (_a = metafieldEntry.properties) === null || _a === void 0 ? void 0 : _a.find((prop) => prop.name === 'value');
            if (metafieldValueProp) {
                metafieldValueProp.return_type = [{ type: type, name: '' }];
                metafieldValueProp.description = '';
                metafieldEntry.name = `metafield_${type}`;
                map[metafieldEntry.name] = metafieldEntry;
            }
        }
        {
            const metafieldArrayEntry = JSON.parse(JSON.stringify(baseMetafieldEntry)); // easy deep clone
            const metafieldArrayValueProp = (_b = metafieldArrayEntry.properties) === null || _b === void 0 ? void 0 : _b.find((prop) => prop.name === 'value');
            if (metafieldArrayValueProp) {
                // A metafield definition using a list of references does not use an array, but a separate type of collection.
                // For auto-completion purposes, we can't use the array type
                // https://shopify.dev/docs/api/liquid/objects/metafield#metafield-determining-the-length-of-a-list-metafield
                if (REFERENCE_TYPE_METAFIELDS.includes(type)) {
                    metafieldArrayValueProp.return_type = [{ type: 'untyped', name: '' }];
                }
                else {
                    metafieldArrayValueProp.return_type = [{ type: 'array', name: '', array_value: type }];
                }
                metafieldArrayValueProp.description = '';
                metafieldArrayEntry.name = `metafield_${type}_array`;
                map[metafieldArrayEntry.name] = metafieldArrayEntry;
            }
        }
        return map;
    }, {});
});
function schemaSettingsAsProperties(ast) {
    if (ast.type !== liquid_html_parser_1.NodeTypes.Document)
        return [];
    try {
        const source = ast._source; // (the unfixed source)
        const start = /\{%\s*schema\s*%\}/m.exec(source);
        const end = /\{%\s*endschema\s*%\}/m.exec(source);
        if (!start || !end)
            return [];
        const schema = source.slice(start.index + start[0].length, end.index);
        const json = (0, theme_check_common_1.parseJSON)(schema);
        if ((0, theme_check_common_1.isError)(json) || !('settings' in json) || !Array.isArray(json.settings))
            return [];
        const result = [];
        const inputSettings = json.settings.filter(settings_1.isInputSetting);
        for (const setting of inputSettings) {
            result.push({
                name: setting.id,
                summary: '',
                description: '',
                return_type: settingReturnType(setting),
                access: {
                    global: false,
                    parents: [],
                    template: [],
                },
            });
        }
        return result;
    }
    catch (_) {
        return [];
    }
}
//# sourceMappingURL=TypeSystem.js.map

/***/ }),

/***/ 6254:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseCodeActionsProvider = void 0;
class BaseCodeActionsProvider {
    constructor(documentManager, diagnosticsManager) {
        this.documentManager = documentManager;
        this.diagnosticsManager = diagnosticsManager;
    }
    get kind() {
        return this.constructor.kind;
    }
}
exports.BaseCodeActionsProvider = BaseCodeActionsProvider;
//# sourceMappingURL=BaseCodeActionsProvider.js.map

/***/ }),

/***/ 9557:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeActionsProvider = exports.CodeActionKinds = void 0;
const providers_1 = __webpack_require__(649);
exports.CodeActionKinds = Array.from(new Set([providers_1.FixAllProvider.kind, providers_1.FixProvider.kind, providers_1.SuggestionProvider.kind]));
class CodeActionsProvider {
    constructor(documentManager, diagnosticsManager) {
        this.providers = [
            new providers_1.FixAllProvider(documentManager, diagnosticsManager),
            new providers_1.FixProvider(documentManager, diagnosticsManager),
            new providers_1.SuggestionProvider(documentManager, diagnosticsManager),
        ];
    }
    codeActions(params) {
        const only = params.context.only;
        return this.providers
            .filter((provider) => !only || only.some((kind) => provider.kind.startsWith(kind)))
            .flatMap((provider) => provider.codeActions(params));
    }
}
exports.CodeActionsProvider = CodeActionsProvider;
//# sourceMappingURL=CodeActionsProvider.js.map

/***/ }),

/***/ 8940:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CodeActionKinds = exports.CodeActionsProvider = void 0;
var CodeActionsProvider_1 = __webpack_require__(9557);
Object.defineProperty(exports, "CodeActionsProvider", ({ enumerable: true, get: function () { return CodeActionsProvider_1.CodeActionsProvider; } }));
Object.defineProperty(exports, "CodeActionKinds", ({ enumerable: true, get: function () { return CodeActionsProvider_1.CodeActionKinds; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8442:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FixAllProvider = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const commands_1 = __webpack_require__(8042);
const BaseCodeActionsProvider_1 = __webpack_require__(6254);
const utils_1 = __webpack_require__(7732);
/**
 * FixAllProvider is a `source.fixAll` code action provider.
 *
 * It is different from FixProvider in the sense where this won't appear on
 * top of diagnostics, but rather can be executed in different contexts.
 * Unlike FixProvider, it is also cursor position independent.
 *
 * Folks can have this run automatically on save with the following config:
 *
 * "[liquid]": {
 *   "editor.codeActionsOnSave": {
 *     "source.fixAll": true,
 *   }
 * },
 *
 * Or as as 'Right click > Source Actions...' request
 */
class FixAllProvider extends BaseCodeActionsProvider_1.BaseCodeActionsProvider {
    codeActions(params) {
        const { uri } = params.textDocument;
        const document = this.documentManager.get(uri);
        const diagnostics = this.diagnosticsManager.get(uri);
        if (!document || !diagnostics)
            return [];
        const { anomalies, version } = diagnostics;
        const fixableAnomalies = anomalies.filter(utils_1.isFixable);
        if (fixableAnomalies.length === 0)
            return [];
        return quickfixAllAction(uri, version, fixableAnomalies);
    }
}
exports.FixAllProvider = FixAllProvider;
FixAllProvider.kind = vscode_languageserver_1.CodeActionKind.SourceFixAll;
/**
 * @returns code action to fix all offenses in a file
 * @example Fix all auto-fixable problems
 */
function quickfixAllAction(uri, version, fixableAnomalies) {
    const ids = fixableAnomalies.map((a) => a.id);
    const diagnostics = fixableAnomalies.map((a) => a.diagnostic);
    return [
        (0, utils_1.toCodeAction)(`Fix all auto-fixable problems`, (0, commands_1.applyFixCommand)(uri, version, ids), diagnostics, FixAllProvider.kind),
    ];
}
//# sourceMappingURL=FixAllProvider.js.map

/***/ }),

/***/ 4939:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FixProvider = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const commands_1 = __webpack_require__(8042);
const BaseCodeActionsProvider_1 = __webpack_require__(6254);
const utils_1 = __webpack_require__(7732);
class FixProvider extends BaseCodeActionsProvider_1.BaseCodeActionsProvider {
    codeActions(params) {
        const { uri } = params.textDocument;
        const document = this.documentManager.get(uri);
        const diagnostics = this.diagnosticsManager.get(uri);
        if (!document || !diagnostics)
            return [];
        const { textDocument } = document;
        const { anomalies, version } = diagnostics;
        const start = textDocument.offsetAt(params.range.start);
        const end = textDocument.offsetAt(params.range.end);
        const fixableAnomalies = anomalies.filter(utils_1.isFixable);
        const anomaliesUnderCursor = fixableAnomalies.filter((anomaly) => (0, utils_1.isInRange)(anomaly, start, end));
        if (anomaliesUnderCursor.length === 0)
            return [];
        return [
            ...quickfixCursorActions(uri, version, anomaliesUnderCursor),
            ...quickfixSameTypeActions(uri, version, anomaliesUnderCursor, fixableAnomalies),
            ...quickfixAllAction(uri, version, fixableAnomalies),
        ];
    }
}
exports.FixProvider = FixProvider;
FixProvider.kind = vscode_languageserver_1.CodeActionKind.QuickFix;
/**
 * @returns code actions to fix only one of the offenses under the cursor
 * @example Fix this ParserBlockingScript problem: '...'
 */
function quickfixCursorActions(uri, version, anomaliesUnderCursor) {
    return anomaliesUnderCursor.map(({ offense, diagnostic, id }) => {
        return (0, utils_1.toCodeAction)(`Fix this ${offense.check} problem: ${offense.message}`, (0, commands_1.applyFixCommand)(uri, version, [id]), [diagnostic], FixProvider.kind, true);
    });
}
/**
 * @returns code actions to fix all offenses of a particular type
 * @example Fix all ParserBlockingScript problems
 */
function quickfixSameTypeActions(uri, version, anomaliesUnderCursor, fixableAnomalies) {
    const checks = new Set(anomaliesUnderCursor.map((anomaly) => anomaly.offense.check));
    return Array.from(checks).flatMap((check) => {
        const checkAnomalies = fixableAnomalies.filter(({ offense }) => offense.check === check);
        // We don't want to show this one if there's only one of this type.
        if (checkAnomalies.length < 2)
            return [];
        const ids = checkAnomalies.map((a) => a.id);
        const diagnostics = checkAnomalies.map((a) => a.diagnostic);
        return (0, utils_1.toCodeAction)(`Fix all ${check} problems`, (0, commands_1.applyFixCommand)(uri, version, ids), diagnostics, FixProvider.kind);
    });
}
/**
 * @returns code action to fix all offenses of a particular type
 * @example Fix all auto-fixable problems
 */
function quickfixAllAction(uri, version, fixableAnomalies) {
    const ids = fixableAnomalies.map((a) => a.id);
    const diagnostics = fixableAnomalies.map((a) => a.diagnostic);
    const checks = new Set(diagnostics.map((a) => a.code));
    // We don't want to this one if there's only one type of problems
    if (checks.size < 2)
        return [];
    return [
        (0, utils_1.toCodeAction)(`Fix all auto-fixable problems`, (0, commands_1.applyFixCommand)(uri, version, ids), diagnostics, FixProvider.kind),
    ];
}
//# sourceMappingURL=FixProvider.js.map

/***/ }),

/***/ 3552:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SuggestionProvider = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const providers_1 = __webpack_require__(5103);
const BaseCodeActionsProvider_1 = __webpack_require__(6254);
const utils_1 = __webpack_require__(7732);
class SuggestionProvider extends BaseCodeActionsProvider_1.BaseCodeActionsProvider {
    codeActions(params) {
        const { uri } = params.textDocument;
        const document = this.documentManager.get(uri);
        const diagnostics = this.diagnosticsManager.get(uri);
        if (!document || !diagnostics)
            return [];
        const { textDocument } = document;
        const { anomalies, version } = diagnostics;
        const start = textDocument.offsetAt(params.range.start);
        const end = textDocument.offsetAt(params.range.end);
        const suggestibleAnomalies = anomalies.filter(isSuggestible);
        const anomaliesUnderCursor = suggestibleAnomalies.filter((anomaly) => (0, utils_1.isInRange)(anomaly, start, end));
        if (anomaliesUnderCursor.length === 0)
            return [];
        return quickfixCursorActions(uri, version, anomaliesUnderCursor);
    }
}
exports.SuggestionProvider = SuggestionProvider;
SuggestionProvider.kind = vscode_languageserver_1.CodeActionKind.QuickFix;
/**
 * @returns all Offense.suggest code actions for the offenses under the cursor
 * @example Suggestion: Add the `defer` HTML attribute
 */
function quickfixCursorActions(uri, version, anomaliesUnderCursor) {
    return anomaliesUnderCursor.flatMap(({ offense, diagnostic, id }) => {
        return offense.suggest.map((suggestion, suggestionId) => (0, utils_1.toCodeAction)(`Suggestion: ${suggestion.message}`, (0, providers_1.applySuggestionCommand)(uri, version, id, suggestionId), [diagnostic], SuggestionProvider.kind));
    });
}
function isSuggestible(anomaly) {
    const { offense } = anomaly;
    return 'suggest' in offense && offense.suggest !== undefined;
}
//# sourceMappingURL=SuggestionProvider.js.map

/***/ }),

/***/ 649:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SuggestionProvider = exports.FixAllProvider = exports.FixProvider = void 0;
var FixProvider_1 = __webpack_require__(4939);
Object.defineProperty(exports, "FixProvider", ({ enumerable: true, get: function () { return FixProvider_1.FixProvider; } }));
var FixAllProvider_1 = __webpack_require__(8442);
Object.defineProperty(exports, "FixAllProvider", ({ enumerable: true, get: function () { return FixAllProvider_1.FixAllProvider; } }));
var SuggestionProvider_1 = __webpack_require__(3552);
Object.defineProperty(exports, "SuggestionProvider", ({ enumerable: true, get: function () { return SuggestionProvider_1.SuggestionProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7732:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isFixable = exports.isInRange = exports.toCodeAction = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
// They have an awkard API for creating them, so we have this helper here
// to make it a bit more straightforward.
function toCodeAction(title, command, diagnostics, kind, isPreferred = false) {
    const codeAction = vscode_languageserver_1.CodeAction.create(title, command, kind);
    codeAction.diagnostics = diagnostics;
    codeAction.isPreferred = isPreferred;
    return codeAction;
}
exports.toCodeAction = toCodeAction;
/**
 * The range is either the selection or cursor position, an offense is in
 * range if the selection and offense overlap in any way.
 */
function isInRange({ offense }, start, end) {
    const offenseStart = offense.start.index;
    const offenseEnd = offense.end.index;
    const isOutOfRange = offenseEnd < start || offenseStart > end;
    return !isOutOfRange;
}
exports.isInRange = isInRange;
function isFixable(anomaly) {
    const { offense } = anomaly;
    return 'fix' in offense && offense.fix !== undefined;
}
exports.isFixable = isFixable;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 9140:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BaseExecuteCommandProvider = void 0;
class BaseExecuteCommandProvider {
    constructor(documentManager, diagnosticsManager, clientCapabilities, connection) {
        this.documentManager = documentManager;
        this.diagnosticsManager = diagnosticsManager;
        this.clientCapabilities = clientCapabilities;
        this.connection = connection;
    }
}
exports.BaseExecuteCommandProvider = BaseExecuteCommandProvider;
//# sourceMappingURL=BaseExecuteCommandProvider.js.map

/***/ }),

/***/ 6537:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExecuteCommandProvider = exports.Commands = void 0;
const providers_1 = __webpack_require__(5103);
exports.Commands = [
    providers_1.ApplyFixesProvider.command,
    providers_1.ApplySuggestionProvider.command,
    providers_1.RunChecksProvider.command,
];
function isKnownCommand(command) {
    return exports.Commands.includes(command);
}
class ExecuteCommandProvider {
    constructor(documentManager, diagnosticsManager, clientCapabilities, runChecks, connection) {
        this.commands = {
            [providers_1.ApplyFixesProvider.command]: new providers_1.ApplyFixesProvider(documentManager, diagnosticsManager, clientCapabilities, connection),
            [providers_1.ApplySuggestionProvider.command]: new providers_1.ApplySuggestionProvider(documentManager, diagnosticsManager, clientCapabilities, connection),
            [providers_1.RunChecksProvider.command]: new providers_1.RunChecksProvider(documentManager, diagnosticsManager, clientCapabilities, connection, runChecks),
        };
    }
    async execute(params) {
        var _a;
        if (!isKnownCommand(params.command))
            return;
        const provider = this.commands[params.command];
        const args = (_a = params.arguments) !== null && _a !== void 0 ? _a : [];
        await provider.execute(...args);
    }
}
exports.ExecuteCommandProvider = ExecuteCommandProvider;
//# sourceMappingURL=ExecuteCommandProvider.js.map

/***/ }),

/***/ 8042:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyFixCommand = exports.Commands = exports.ExecuteCommandProvider = void 0;
var ExecuteCommandProvider_1 = __webpack_require__(6537);
Object.defineProperty(exports, "ExecuteCommandProvider", ({ enumerable: true, get: function () { return ExecuteCommandProvider_1.ExecuteCommandProvider; } }));
Object.defineProperty(exports, "Commands", ({ enumerable: true, get: function () { return ExecuteCommandProvider_1.Commands; } }));
var providers_1 = __webpack_require__(5103);
Object.defineProperty(exports, "applyFixCommand", ({ enumerable: true, get: function () { return providers_1.applyFixCommand; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8653:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyFixCommand = exports.ApplyFixesProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_1 = __webpack_require__(7532);
const BaseExecuteCommandProvider_1 = __webpack_require__(9140);
/**
 * The ApplyFixesProvider is responsible for handling the `themeCheck/applyFixes` command.
 *
 * To create a command, use the `applyFixCommand` function.
 * The provider will execute the command with the given arguments.
 *
 * ApplyFixesProvider collects the text edits represented by the targeted offenses' `.fix` property,
 * applies them, and forwards the result to the client using the 'workspace/applyEdit' request.
 */
class ApplyFixesProvider extends BaseExecuteCommandProvider_1.BaseExecuteCommandProvider {
    async execute(uri, version, ids) {
        if (!this.clientCapabilities.hasApplyEditSupport)
            return;
        const diagnostics = this.diagnosticsManager.get(uri);
        const document = this.documentManager.get(uri);
        if (!document || !diagnostics)
            return;
        if (document.version !== version || diagnostics.version !== version)
            return;
        const anomalies = ids
            .map((id) => diagnostics.anomalies[id])
            .filter((anomaly) => !!anomaly.offense.fix);
        const fixes = anomalies.map((anomaly) => anomaly.offense.fix);
        const corrector = (0, theme_check_common_1.createCorrector)(document.type, document.source);
        for (const collectFixes of fixes) {
            collectFixes(corrector);
        }
        const { textDocument } = document;
        const textDocumentEdit = vscode_languageserver_1.TextDocumentEdit.create({ uri: textDocument.uri, version: textDocument.version }, toTextEdits(document.textDocument, corrector.fix));
        await this.connection.sendRequest(vscode_languageserver_1.ApplyWorkspaceEditRequest.type, {
            edit: {
                documentChanges: [textDocumentEdit],
            },
        });
        // Clean up state diagnostics when we're done
        const offenses = diagnostics.anomalies.map((a) => a.offense);
        const fixedOffenses = anomalies.map((a) => a.offense);
        const remainingOffenses = offenses.filter((offense) => !fixedOffenses.includes(offense));
        this.diagnosticsManager.set(uri, diagnostics.version, remainingOffenses);
    }
}
exports.ApplyFixesProvider = ApplyFixesProvider;
ApplyFixesProvider.command = 'themeCheck/applyFixes';
/**
 * applyFixCommand creates an LSP Command that the client can call
 */
function applyFixCommand(uri, version, ids) {
    return vscode_languageserver_1.Command.create('applyFixes', ApplyFixesProvider.command, uri, version, ids);
}
exports.applyFixCommand = applyFixCommand;
function toTextEdit(document, fixDesc) {
    return {
        newText: fixDesc.insert,
        range: {
            start: document.positionAt(fixDesc.startIndex),
            end: document.positionAt(fixDesc.endIndex),
        },
    };
}
function toTextEdits(document, fix) {
    return (0, theme_check_common_1.flattenFixes)(fix).map((fixDesc) => toTextEdit(document, fixDesc));
}
//# sourceMappingURL=ApplyFixesProvider.js.map

/***/ }),

/***/ 7914:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applySuggestionCommand = exports.ApplySuggestionProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_1 = __webpack_require__(7532);
const BaseExecuteCommandProvider_1 = __webpack_require__(9140);
/**
 * The ApplySuggestionProvider is responsible for handling the `themeCheck/applySuggestion` command.
 *
 * To create a command, use the `applySuggestionCommand` function.
 * The provider will execute the command with the given arguments.
 *
 * ApplySuggestionProvider collects the text edits represented by the targeted offense' `.suggest` property,
 * applies them, and forwards the result to the client using the 'workspace/applyEdit' request.
 */
class ApplySuggestionProvider extends BaseExecuteCommandProvider_1.BaseExecuteCommandProvider {
    async execute(uri, version, anomalyId, suggestionIndex) {
        var _a;
        if (!this.clientCapabilities.hasApplyEditSupport)
            return;
        const diagnostics = this.diagnosticsManager.get(uri);
        const document = this.documentManager.get(uri);
        if (!document || !diagnostics)
            return;
        if (document.version !== version || diagnostics.version !== version)
            return;
        const anomaly = diagnostics.anomalies[anomalyId];
        if (!anomaly)
            return;
        const offense = anomaly.offense;
        const suggestion = (_a = offense.suggest) === null || _a === void 0 ? void 0 : _a[suggestionIndex];
        if (!suggestion)
            return;
        // Collect text edits
        const corrector = (0, theme_check_common_1.createCorrector)(document.type, document.source);
        suggestion.fix(corrector);
        // Suggest -> TextDocumentEdit
        const { textDocument } = document;
        const textDocumentEdit = vscode_languageserver_1.TextDocumentEdit.create({ uri: textDocument.uri, version: textDocument.version }, toTextEdits(document.textDocument, corrector.fix));
        await this.connection.sendRequest(vscode_languageserver_1.ApplyWorkspaceEditRequest.type, {
            label: `Apply suggestion: ${suggestion.message}`,
            edit: {
                documentChanges: [textDocumentEdit],
            },
        });
        // Clean up state diagnostics when we're done
        const offenses = diagnostics.anomalies.map((a) => a.offense);
        const fixedOffense = offense;
        const remainingOffenses = offenses.filter((offense) => offense !== fixedOffense);
        this.diagnosticsManager.set(uri, diagnostics.version, remainingOffenses);
    }
}
exports.ApplySuggestionProvider = ApplySuggestionProvider;
ApplySuggestionProvider.command = 'themeCheck/applySuggestion';
/**
 * applySuggestionCommand creates an LSP Command that the client can call
 */
function applySuggestionCommand(uri, version, anomalyId, suggestionIndex) {
    return vscode_languageserver_1.Command.create('applySuggestion', ApplySuggestionProvider.command, uri, version, anomalyId, suggestionIndex);
}
exports.applySuggestionCommand = applySuggestionCommand;
function toTextEdits(document, fix) {
    return (0, theme_check_common_1.flattenFixes)(fix).map((fixDesc) => toTextEdit(document, fixDesc));
}
function toTextEdit(document, fixDesc) {
    return {
        newText: fixDesc.insert,
        range: {
            start: document.positionAt(fixDesc.startIndex),
            end: document.positionAt(fixDesc.endIndex),
        },
    };
}
//# sourceMappingURL=ApplySuggestionProvider.js.map

/***/ }),

/***/ 6177:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RunChecksProvider = void 0;
const BaseExecuteCommandProvider_1 = __webpack_require__(9140);
/**
 * The RunChecksProvider runs theme check on all open files.
 *
 * It is triggered by the cmd+p command in the VS Code extension and is
 * otherwise not used internally, which is why there is no
 * `runChecksCommand` method.
 *
 * This will be useful in a world where `checkOnSave`, `checkOnChange`,
 * `checkOnOpen` are all false.
 */
class RunChecksProvider extends BaseExecuteCommandProvider_1.BaseExecuteCommandProvider {
    constructor(documentManager, diagnosticsManager, clientCapabilities, connection, runChecks) {
        super(documentManager, diagnosticsManager, clientCapabilities, connection);
        this.documentManager = documentManager;
        this.diagnosticsManager = diagnosticsManager;
        this.clientCapabilities = clientCapabilities;
        this.connection = connection;
        this.runChecks = runChecks;
    }
    async execute() {
        const openDocuments = this.documentManager.openDocuments;
        const triggerURIs = openDocuments.map((sourceCode) => sourceCode.uri);
        this.runChecks(triggerURIs);
    }
}
exports.RunChecksProvider = RunChecksProvider;
RunChecksProvider.command = 'themeCheck/runChecks';
//# sourceMappingURL=RunChecksProvider.js.map

/***/ }),

/***/ 5103:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RunChecksProvider = exports.ApplySuggestionProvider = exports.applySuggestionCommand = exports.ApplyFixesProvider = exports.applyFixCommand = void 0;
var ApplyFixesProvider_1 = __webpack_require__(8653);
Object.defineProperty(exports, "applyFixCommand", ({ enumerable: true, get: function () { return ApplyFixesProvider_1.applyFixCommand; } }));
Object.defineProperty(exports, "ApplyFixesProvider", ({ enumerable: true, get: function () { return ApplyFixesProvider_1.ApplyFixesProvider; } }));
var ApplySuggestionProvider_1 = __webpack_require__(7914);
Object.defineProperty(exports, "applySuggestionCommand", ({ enumerable: true, get: function () { return ApplySuggestionProvider_1.applySuggestionCommand; } }));
Object.defineProperty(exports, "ApplySuggestionProvider", ({ enumerable: true, get: function () { return ApplySuggestionProvider_1.ApplySuggestionProvider; } }));
var RunChecksProvider_1 = __webpack_require__(6177);
Object.defineProperty(exports, "RunChecksProvider", ({ enumerable: true, get: function () { return RunChecksProvider_1.RunChecksProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8265:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompletionsProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const TypeSystem_1 = __webpack_require__(9242);
const params_1 = __webpack_require__(5306);
const providers_1 = __webpack_require__(6896);
const RenderSnippetParameterCompletionProvider_1 = __webpack_require__(444);
const LiquidDocTagCompletionProvider_1 = __webpack_require__(693);
const LiquidDocParamTypeCompletionProvider_1 = __webpack_require__(4152);
class CompletionsProvider {
    constructor({ documentManager, themeDocset, getMetafieldDefinitions, getTranslationsForURI = async () => ({}), getSnippetNamesForURI = async () => [], getThemeSettingsSchemaForURI = async () => [], getSnippetDefinitionForURI = async (_uri, snippetName) => ({
        name: snippetName,
    }), getThemeBlockNames = async (_rootUri, _includePrivate) => [], log = () => { }, }) {
        this.providers = [];
        this.documentManager = documentManager;
        this.themeDocset = themeDocset;
        this.log = log;
        const typeSystem = new TypeSystem_1.TypeSystem(themeDocset, getThemeSettingsSchemaForURI, getMetafieldDefinitions);
        this.providers = [
            new providers_1.ContentForCompletionProvider(),
            new providers_1.ContentForBlockTypeCompletionProvider(getThemeBlockNames),
            new providers_1.ContentForParameterCompletionProvider(),
            new providers_1.HtmlTagCompletionProvider(),
            new providers_1.HtmlAttributeCompletionProvider(documentManager),
            new providers_1.HtmlAttributeValueCompletionProvider(),
            new providers_1.LiquidTagsCompletionProvider(themeDocset),
            new providers_1.ObjectCompletionProvider(typeSystem),
            new providers_1.ObjectAttributeCompletionProvider(typeSystem, getThemeSettingsSchemaForURI),
            new providers_1.FilterCompletionProvider(typeSystem),
            new providers_1.TranslationCompletionProvider(documentManager, getTranslationsForURI),
            new providers_1.RenderSnippetCompletionProvider(getSnippetNamesForURI),
            new RenderSnippetParameterCompletionProvider_1.RenderSnippetParameterCompletionProvider(getSnippetDefinitionForURI),
            new providers_1.FilterNamedParameterCompletionProvider(themeDocset),
            new LiquidDocTagCompletionProvider_1.LiquidDocTagCompletionProvider(),
            new LiquidDocParamTypeCompletionProvider_1.LiquidDocParamTypeCompletionProvider(),
        ];
    }
    async completions(params) {
        const uri = params.textDocument.uri;
        const document = this.documentManager.get(uri);
        // Supports only Liquid resources
        if ((document === null || document === void 0 ? void 0 : document.type) !== theme_check_common_1.SourceCodeType.LiquidHtml) {
            return [];
        }
        try {
            const liquidParams = (0, params_1.createLiquidCompletionParams)(document, params);
            const promises = this.providers.map((p) => p.completions(liquidParams));
            const results = await Promise.all(promises);
            return results.flat();
        }
        catch (err) {
            this.log(`[SERVER] CompletionsProvider error: ${err}`);
            return [];
        }
    }
}
exports.CompletionsProvider = CompletionsProvider;
//# sourceMappingURL=CompletionsProvider.js.map

/***/ }),

/***/ 3515:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompletionsProvider = void 0;
var CompletionsProvider_1 = __webpack_require__(8265);
Object.defineProperty(exports, "CompletionsProvider", ({ enumerable: true, get: function () { return CompletionsProvider_1.CompletionsProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7512:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createLiquidCompletionParams = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const fix_1 = __webpack_require__(5937);
function createLiquidCompletionParams(sourceCode, params) {
    const { textDocument } = sourceCode;
    const cursor = textDocument.offsetAt(params.position);
    const completionContext = getCompletionContext(sourceCode, cursor);
    return {
        ...params,
        completionContext,
        document: sourceCode,
    };
}
exports.createLiquidCompletionParams = createLiquidCompletionParams;
function getCompletionContext(sourceCode, cursor) {
    const partialAst = parsePartial(sourceCode, cursor);
    if (!partialAst) {
        return undefined;
    }
    const [node, ancestors] = findCurrentNode(partialAst, cursor);
    return {
        partialAst,
        ancestors,
        node,
    };
}
/**
 * This function will return an AST of the entire file up until the cursor
 * position.
 *
 * So if you accept that we use █ to represent the cursor, and a have a file that
 * looks like this:
 *
 * <div>
 *   {% assign x = product %}
 *   {% assign y = x | plus: 20 %}
 *   {% assign z = █ %}
 *   <span>
 *     this content is not part of the partial tree
 *   </span>
 * </div>
 *
 * Then the contents of the file up until the cursor position is this:
 *
 * <div>
 *   {% assign x = product %}
 *   {% assign y = x | plus: 20 %}
 *   {% assign z = █
 *
 * Then we'll use `fix(sourceCode, cursorPosition)` to make it parseable.
 * Fixed output:
 *
 * <div>
 *   {% assign x = product %}
 *   {% assign y = x | plus: 20 %}
 *   {% assign z = █%}
 *
 * Then we'll parse this with `allowUnclosedDocumentNode` and
 * `mode: completion` to allow parsing of placeholder characters (█)
 *
 * The result is a partial AST whose last-most node is probably the one
 * under the cursor.
 */
function parsePartial(sourceCode, cursorPosition) {
    let fixedSource;
    try {
        fixedSource = (0, fix_1.fix)(sourceCode.source, cursorPosition);
        const ast = (0, liquid_html_parser_1.toLiquidHtmlAST)(fixedSource, {
            allowUnclosedDocumentNode: true,
            mode: 'completion',
        });
        ast._source = sourceCode.source;
        return ast;
    }
    catch (err) {
        // We swallow errors here, because we gracefully accept that and
        // simply don't offer completions when that happens.
        return undefined;
    }
}
class Finder {
    constructor(ast) {
        this.stack = [ast];
    }
    get current() {
        return last(this.stack);
    }
    get parent() {
        return this.stack.at(-2);
    }
    set current(node) {
        this.stack.push(node);
    }
}
/**
 * @returns the node at the cursor position and its ancestry.
 *
 * Undefined when you're not really on a node (there's nothing to complete)
 */
function findCurrentNode(partialAst, cursor) {
    // The current node is the "last" node in the AST.
    const finder = new Finder(partialAst);
    let current = { ...partialAst };
    // Our objective:
    //   Finding the "last-most node" in the partial AST.
    //
    // Context:
    //   A generic visitor doesn't quite work in this context because we
    //   cannot trust the position, blockStartPosition, blockEndPosition of
    //   nodes when we use `allowUnclosedDocumentNode`. You see, these
    //   properties are updated when the nodes are closed. An {% if cond %}
    //   node without its closing {% endif %} would have its position.end be
    //   the one of the starting block. Which means that any children it may
    //   have wouldn't be covered.
    //
    // How we do it:
    //   We define logic per node type. For example, HTML tags will do this:
    //     - If the node is closed (<a>child</a>),
    //         then there's nothing to complete.
    //         We return undefined
    //     - If the node has children,
    //         then we visit the last children
    //     - If the node has attributes,
    //         then we visit the last attribute
    //     - If the node has a name,
    //         then we visit the last name node (<a--{{ product.id }}>)
    //
    //   It's different per node type, because each node type has a different
    //   concept of child node and because they have to be traversed in a
    //   specific order.
    while (finder.current !== undefined && current !== finder.current) {
        current = finder.current;
        switch (current.type) {
            case liquid_html_parser_1.NodeTypes.Document: {
                if (hasNonEmptyArrayProperty(current, 'children')) {
                    finder.current = last(current.children);
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.HtmlRawNode:
            case liquid_html_parser_1.NodeTypes.HtmlVoidElement:
            case liquid_html_parser_1.NodeTypes.HtmlDanglingMarkerClose:
            case liquid_html_parser_1.NodeTypes.HtmlSelfClosingElement:
            case liquid_html_parser_1.NodeTypes.HtmlElement: {
                if (isCompletedTag(current)) {
                    finder.current = undefined;
                }
                else if (hasNonEmptyArrayProperty(current, 'children')) {
                    finder.current = last(current.children);
                }
                else if (hasNonEmptyArrayProperty(current, 'attributes')) {
                    finder.current = last(current.attributes);
                }
                else if (hasNonEmptyArrayProperty(current, 'name') &&
                    isCoveredExcluded(cursor, current.blockStartPosition)) {
                    finder.current = last(current.name);
                }
                else if (typeof current.name === 'string' &&
                    isCoveredExcluded(cursor, current.blockStartPosition)) {
                    /* break */
                }
                else {
                    finder.current = undefined; // there's nothing to complete
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.LiquidTag: {
                if (isLiquidLiquidTag(finder.current) ||
                    isCoveredExcluded(cursor, current.blockStartPosition) || // wouldn't want to complete {% if cond %} after the }.
                    (isInLiquidLiquidTagContext(finder) && isCovered(cursor, current.blockStartPosition))) {
                    if (hasNonNullProperty(current, 'markup') && typeof current.markup !== 'string') {
                        finder.current = Array.isArray(current.markup) ? current.markup.at(-1) : current.markup;
                    }
                    else {
                        // Exits the loop and the node is the thing to complete
                        // (presumably name or something else)
                        // finder.current = finder.current;
                    }
                }
                else if (isIncompleteBlockTag(current)) {
                    finder.current = last(current.children);
                }
                else {
                    finder.current = undefined; // we're done and there's nothing to complete
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.LiquidBranch:
                if (isCovered(cursor, current.blockStartPosition) && typeof current.markup !== 'string') {
                    finder.current = Array.isArray(current.markup) ? current.markup.at(-1) : current.markup;
                }
                else if (hasNonEmptyArrayProperty(current, 'children')) {
                    finder.current = last(current.children);
                }
                else {
                    finder.current = undefined; // there's nothing to complete
                }
                break;
            case liquid_html_parser_1.NodeTypes.LiquidRawTag:
                if (current.name === 'doc' && current.body.nodes.length > 0) {
                    finder.current = current.body.nodes.at(-1);
                }
                break;
            case liquid_html_parser_1.NodeTypes.AttrDoubleQuoted:
            case liquid_html_parser_1.NodeTypes.AttrSingleQuoted:
            case liquid_html_parser_1.NodeTypes.AttrEmpty:
            case liquid_html_parser_1.NodeTypes.AttrUnquoted: {
                const lastNameNode = last(current.name); // there's at least one... guaranteed.
                if (isCovered(cursor, lastNameNode.position)) {
                    finder.current = lastNameNode;
                }
                else if (current.type !== liquid_html_parser_1.NodeTypes.AttrEmpty &&
                    isCovered(cursor, current.attributePosition) &&
                    isNotEmpty(current.value)) {
                    finder.current = last(current.value);
                }
                else {
                    finder.current = undefined;
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.YAMLFrontmatter:
            case liquid_html_parser_1.NodeTypes.HtmlDoctype:
            case liquid_html_parser_1.NodeTypes.HtmlComment:
            case liquid_html_parser_1.NodeTypes.RawMarkup: {
                break;
            }
            case liquid_html_parser_1.NodeTypes.LiquidVariableOutput: {
                if (typeof current.markup !== 'string') {
                    finder.current = current.markup;
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.LiquidVariable: {
                if (isNotEmpty(current.filters)) {
                    finder.current = last(current.filters);
                }
                else {
                    finder.current = current.expression;
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.LiquidFilter: {
                if (isNotEmpty(current.args)) {
                    finder.current = last(current.args);
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.VariableLookup: {
                if (hasNonEmptyArrayProperty(current, 'lookups') &&
                    last(current.lookups).type === liquid_html_parser_1.NodeTypes.VariableLookup) {
                    finder.current = last(current.lookups);
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.AssignMarkup: {
                finder.current = current.value;
                break;
            }
            case liquid_html_parser_1.NodeTypes.ForMarkup: {
                if (isCovered(cursor, current.collection.position)) {
                    finder.current = current.collection;
                }
                else if (isNotEmpty(current.args) && isCovered(cursor, last(current.args).position)) {
                    finder.current = last(current.args);
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.NamedArgument: {
                if (isCovered(cursor, current.value.position)) {
                    finder.current = current.value;
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.Comparison: {
                finder.current = current.right;
                break;
            }
            case liquid_html_parser_1.NodeTypes.LogicalExpression: {
                finder.current = current.right;
                break;
            }
            case liquid_html_parser_1.NodeTypes.CycleMarkup: {
                if (isNotEmpty(current.args)) {
                    finder.current = last(current.args);
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.PaginateMarkup: {
                if (isNotEmpty(current.args)) {
                    finder.current = last(current.args);
                }
                else if (isCovered(cursor, current.collection.position)) {
                    finder.current = current.collection;
                }
                else if (isCovered(cursor, current.pageSize.position)) {
                    finder.current = current.pageSize;
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.ContentForMarkup: {
                if (isNotEmpty(current.args)) {
                    finder.current = last(current.args);
                }
                else if (isCovered(cursor, current.contentForType.position)) {
                    finder.current = current.contentForType;
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.RenderMarkup: {
                if (isNotEmpty(current.args)) {
                    finder.current = last(current.args);
                }
                else if (current.variable && isCovered(cursor, current.variable.position)) {
                    finder.current = current.variable;
                }
                else if (current.snippet && isCovered(cursor, current.snippet.position)) {
                    finder.current = current.snippet;
                }
                break;
            }
            case liquid_html_parser_1.NodeTypes.RenderVariableExpression: {
                finder.current = current.name;
                break;
            }
            case liquid_html_parser_1.NodeTypes.Range: {
                // This means you can't complete the start range as a variable...
                // is this bad?
                finder.current = current.end;
                break;
            }
            // If you end up on any of these. You're done.
            // That's the current node.
            case liquid_html_parser_1.NodeTypes.TextNode:
            case liquid_html_parser_1.NodeTypes.LiquidLiteral:
            case liquid_html_parser_1.NodeTypes.String:
            case liquid_html_parser_1.NodeTypes.Number:
            case liquid_html_parser_1.NodeTypes.LiquidDocParamNode:
            case liquid_html_parser_1.NodeTypes.LiquidDocExampleNode:
            case liquid_html_parser_1.NodeTypes.LiquidDocDescriptionNode: {
                break;
            }
            default: {
                return assertNever(current);
            }
        }
    }
    return [finder.stack.pop(), finder.stack];
}
function hasNonNullProperty(thing, property) {
    return thing !== null && property in thing && !!thing[property];
}
function isIncompleteBlockTag(thing) {
    return (hasNonEmptyArrayProperty(thing, 'children') &&
        (!hasNonNullProperty(thing, 'blockEndPosition') ||
            (thing.blockEndPosition.start === -1 && thing.blockEndPosition.end === -1)));
}
function isCompletedTag(thing) {
    return (hasNonNullProperty(thing, 'blockEndPosition') &&
        thing.blockEndPosition.start !== -1 &&
        thing.blockEndPosition.end !== -1);
}
function hasNonEmptyArrayProperty(thing, property) {
    return (thing !== null &&
        property in thing &&
        Array.isArray(thing[property]) &&
        !isEmpty(thing[property]));
}
function isInLiquidLiquidTagContext(finder) {
    return finder.stack.some(isLiquidLiquidTag);
}
function isLiquidLiquidTag(node) {
    if (!node)
        return false;
    return node.type === liquid_html_parser_1.NodeTypes.LiquidTag && node.name === 'liquid';
}
function isCoveredExcluded(cursor, position) {
    return position.start <= cursor && cursor < position.end;
}
function isCovered(cursor, position) {
    return position.start <= cursor && cursor <= position.end;
}
function isNotEmpty(x) {
    return x.length > 0;
}
function isEmpty(x) {
    return x.length === 0;
}
function last(x) {
    return x[x.length - 1];
}
function assertNever(x) {
    throw new Error(`This function should never be called, but was called with ${x}`);
}
//# sourceMappingURL=LiquidCompletionParams.js.map

/***/ }),

/***/ 5937:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fix = exports.CURSOR = void 0;
exports.CURSOR = '█';
const SINGLE_QUOTE = `'`;
const DOUBLE_QUOTE = `"`;
const HTML_TOKENS = ['<', '>'];
const SHOULD_IGNORE_HTML_TOKENS = [SINGLE_QUOTE, DOUBLE_QUOTE, '{{', '{%'];
const QUOTES = [SINGLE_QUOTE, DOUBLE_QUOTE];
const CONTROL_TOKENS = ['{{', '{%', '<'];
const TokenPairs = {
    "'": "'",
    '"': '"',
    '{{': '}}',
    '{%': '%}',
    '<': '>',
    '[': ']',
    '(': ')',
};
/**
 * Fix the source code and return the new fixed source with the new absolute
 * position
 *
 * @param source - source code
 * @param position - absolute position
 *
 * @returns new fixed source
 */
function fix(source, position = source.length) {
    const fixer = new Fixer(source, position);
    return fixer.fix();
}
exports.fix = fix;
class Fixer {
    constructor(source, position) {
        /**
         * A list of quotes, <, [, etc. We'll pass through that list to determine
         * what needs to be closed at the end.
         */
        this.tokens = [];
        /**
         * A stack of closing tokens such that when we're done we simply pop
         * everything out into the string to get a fixed string.
         */
        this.stack = [];
        this.cursor = 0;
        this.markup = source.slice(0, position);
    }
    /**
     * This is cool, so bear with me.
     *
     * We'll scan the entire string up to the cursor position and turn that
     * into a list of tokens
     *
     * input:
     *   `<a href="hi'" other="{{ 'there'`
     *
     * output:
     *   - <
     *   - "
     *   - '
     *   - "
     *   - "
     *   - {{
     *   - '
     *   - '
     *   - }}
     *   - "
     *
     * Then we take that output, and we turn it into a stack
     * (open tokens push, close tokens pop)
     *
     * stack evolution:
     *   - <         # open tag
     *   - < "       # add quote
     *   - < "       # (single quote is ignored)
     *   - <         # close quote
     *   - < "       # open new quote
     *   - < " {{    # open liquid variable output
     *   - < " {{ '  # open liquid string in variable output
     *   - < " {{    # close liquid string in variable output
     *
     * then we pop the close characters of that stack onto the string and
     * have a fixed string
     *
     *   - <a href="hi'" other="{{ 'there'      # start
     *   - <a href="hi'" other="{{ 'there'}}    # pop close {{
     *   - <a href="hi'" other="{{ 'there'}}"   # pop close "
     *   - <a href="hi'" other="{{ 'there'}}">  # pop close <
     *
     * And there we go, we have a fixed string.
     */
    fix() {
        this.scanTokens();
        this.buildStack();
        let markup = this.markup;
        if (this.shouldIncludeCursorPlaceholder()) {
            markup += exports.CURSOR;
        }
        while (this.stack.length !== 0) {
            markup += this.stack.pop();
        }
        return markup;
    }
    buildStack() {
        for (let token of this.tokens) {
            if (this.shouldPanic(token)) {
                while (token !== this.stack.pop()) { }
            }
            else if (this.shouldSkipToken(token)) {
                /* do nothing */
            }
            else if (this.isClosingToken(token)) {
                this.stack.pop();
            }
            else {
                const closingToken = TokenPairs[token];
                if (closingToken) {
                    this.stack.push(closingToken);
                }
            }
        }
    }
    isClosingToken(token) {
        return this.current === token;
    }
    shouldPanic(token) {
        const isInStringContext = QUOTES.includes(this.current);
        return isInStringContext && this.stack.at(-2) === token;
    }
    shouldSkipToken(token) {
        const current = this.current;
        const isInTextContext = !current;
        const isInStringContext = QUOTES.includes(current);
        const isInLiquidContext = this.stack.includes('}}') || this.stack.includes('%}');
        return ((isInTextContext && !CONTROL_TOKENS.includes(token)) ||
            (isInStringContext && !CONTROL_TOKENS.includes(token) && !QUOTES.includes(token)) ||
            (isInLiquidContext && token === '<') ||
            (current === SINGLE_QUOTE && token === DOUBLE_QUOTE) ||
            (current === DOUBLE_QUOTE && token === SINGLE_QUOTE) ||
            (SHOULD_IGNORE_HTML_TOKENS.includes(current) && HTML_TOKENS.includes(token)));
    }
    scanTokens() {
        while (!this.isAtEnd()) {
            const character = this.peek();
            switch (character) {
                case DOUBLE_QUOTE:
                case SINGLE_QUOTE:
                case '(':
                case ')':
                case '[':
                case ']': {
                    this.pushToken(character);
                    break;
                }
                case '{': {
                    if (this.matchNext('%')) {
                        this.pushToken('{%');
                    }
                    else if (this.matchNext('{')) {
                        this.pushToken('{{');
                    }
                    break;
                }
                case '%': {
                    if (this.matchNext('}')) {
                        this.pushToken('%}');
                    }
                    break;
                }
                case '}': {
                    if (this.matchNext('}')) {
                        this.pushToken('}}');
                    }
                    break;
                }
                case '<': {
                    if (this.testNext(/[a-z{\/]/i)) {
                        this.pushToken('<');
                    }
                    break;
                }
                case '>': {
                    this.pushToken('>');
                    break;
                }
                default: {
                    /* do nothing */
                }
            }
            this.advance();
        }
    }
    shouldIncludeCursorPlaceholder() {
        var _a, _b;
        const prevCharacter = (_a = this.markup.at(-1)) !== null && _a !== void 0 ? _a : '';
        const prevPrevCharacter = (_b = this.markup.at(-2)) !== null && _b !== void 0 ? _b : '';
        const isInLiquidContext = this.stack.includes('%}') || this.stack.includes('}}');
        const isInHtmlContext = this.current === '>';
        const isInStringContext = QUOTES.includes(this.current);
        return ((isInStringContext && this.stack.at(-2) === '>' && QUOTES.includes(prevCharacter)) ||
            (isInHtmlContext &&
                (/\s/.test(prevCharacter) ||
                    prevCharacter === '<' ||
                    (prevPrevCharacter === '<' && prevCharacter === '/') ||
                    (prevPrevCharacter === '%' && prevCharacter === '}'))) ||
            (isInLiquidContext &&
                ((!isInStringContext && [' ', '\t', '\n', '.', '{', '[', ','].includes(prevCharacter)) ||
                    (isInStringContext && prevPrevCharacter === '['))));
    }
    get current() {
        return this.stack.at(-1);
    }
    advance() {
        this.cursor += 1;
    }
    matchNext(character) {
        if (this.peekNext() !== character)
            return false;
        this.cursor++;
        return true;
    }
    testNext(regex) {
        return regex.test(this.peekNext());
    }
    peek(cursor = this.cursor) {
        return this.markup[cursor];
    }
    peekNext(cursor = this.cursor) {
        return this.markup[cursor + 1];
    }
    pushToken(token) {
        this.tokens.push(token);
    }
    isAtEnd() {
        return this.cursor >= this.markup.length;
    }
}
//# sourceMappingURL=fix.js.map

/***/ }),

/***/ 5306:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CURSOR = exports.createLiquidCompletionParams = void 0;
var LiquidCompletionParams_1 = __webpack_require__(7512);
Object.defineProperty(exports, "createLiquidCompletionParams", ({ enumerable: true, get: function () { return LiquidCompletionParams_1.createLiquidCompletionParams; } }));
var fix_1 = __webpack_require__(5937);
Object.defineProperty(exports, "CURSOR", ({ enumerable: true, get: function () { return fix_1.CURSOR; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4032:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentForBlockTypeCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
class ContentForBlockTypeCompletionProvider {
    constructor(getThemeBlockNames) {
        this.getThemeBlockNames = getThemeBlockNames;
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { document } = params;
        const doc = document.textDocument;
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        const grandParentNode = ancestors.at(-2);
        if (!node ||
            !parentNode ||
            !grandParentNode ||
            node.type !== liquid_html_parser_1.NodeTypes.String ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.NamedArgument ||
            parentNode.name !== 'type' ||
            grandParentNode.type !== liquid_html_parser_1.NodeTypes.ContentForMarkup ||
            grandParentNode.contentForType.value !== 'block') {
            return [];
        }
        return (await this.getThemeBlockNames(doc.uri, false)).map((blockName) => ({
            label: blockName,
            kind: vscode_languageserver_1.CompletionItemKind.EnumMember,
            insertText: blockName,
        }));
    }
}
exports.ContentForBlockTypeCompletionProvider = ContentForBlockTypeCompletionProvider;
//# sourceMappingURL=ContentForBlockTypeCompletionProvider.js.map

/***/ }),

/***/ 4183:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentForCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
class ContentForCompletionProvider {
    constructor() { }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { document } = params;
        const doc = document.textDocument;
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        if (!node ||
            !parentNode ||
            node.type !== liquid_html_parser_1.NodeTypes.String ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.ContentForMarkup) {
            return [];
        }
        const options = [
            {
                keyword: 'block',
                description: 'Renders a static theme block within `sections` or `theme blocks`.\n',
                syntax: "content_for 'block', type: '$1', id: '$2'",
            },
            {
                keyword: 'blocks',
                description: `Renders block elements within sections or other blocks as configured in the JSON template or section groups.
See [theme blocks](https://shopify.dev/docs/storefronts/themes/architecture/blocks/theme-blocks)
to see how to create theme blocks that can be used this way.\n`,
                syntax: `content_for 'blocks'`,
            },
        ];
        const partial = node.value;
        const isInLiquidLiquidTag = ancestors.some((node) => node.type === liquid_html_parser_1.NodeTypes.LiquidTag && node.name === 'liquid');
        const startPosition = node.position.start + 1; // after the quote
        const endPosition = indexOf(document.source, 
        // We want to maintain trailing whitespace to whatever it was before the completion
        isInLiquidLiquidTag ? / *\n/g : /\s*-?%}/gm, startPosition + partial.length);
        const hasMarkup = document.source
            .slice(startPosition + partial.length, endPosition)
            .replace(/^['"]/, '')
            .trim() !== '';
        const shouldCompleteSyntax = endPosition !== -1 && !hasMarkup;
        return options
            .filter(({ keyword }) => keyword.startsWith(partial))
            .map(({ keyword, description, syntax }) => {
            const item = {
                label: keyword,
                kind: vscode_languageserver_1.CompletionItemKind.Keyword,
                insertTextFormat: vscode_languageserver_1.InsertTextFormat.PlainText,
                documentation: {
                    kind: 'markdown',
                    value: description,
                },
            };
            if (shouldCompleteSyntax) {
                const snippetText = getSnippetText(node, syntax);
                item.insertTextFormat = vscode_languageserver_1.InsertTextFormat.Snippet;
                item.textEdit = vscode_languageserver_1.TextEdit.replace(vscode_languageserver_1.Range.create(doc.positionAt(startPosition), doc.positionAt(endPosition)), snippetText);
            }
            return item;
        });
    }
}
exports.ContentForCompletionProvider = ContentForCompletionProvider;
function getSnippetText(node, syntax) {
    // Language clients don't like it when the text edit starts before the word being completed
    // So we make the snippet text start with the word being completed
    return (syntax
        .replace(/^content_for '/, '')
        // use the same quote type as the original string everywhere in the snippet
        .replace(node.single ? /"/g : /'/g, node.single ? "'" : '"'));
}
/**
 * String.prototype.indexOf does not accept RegExp args...
 * String.prototype.search does not accept fromIndex args...
 *
 * We want both.
 */
function indexOf(string, searchValue, fromIndex) {
    searchValue.lastIndex = fromIndex;
    const match = searchValue.exec(string);
    return match ? match.index : -1;
}
//# sourceMappingURL=ContentForCompletionProvider.js.map

/***/ }),

/***/ 9402:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentForParameterCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const params_1 = __webpack_require__(5306);
const contentForParameterCompletionOptions_1 = __webpack_require__(9714);
/**
 * Offers completions for parameters for the `content_for` tag after a user has
 * specificied the type.
 *
 * @example {% content_for "block", █ %}
 */
class ContentForParameterCompletionProvider {
    constructor() { }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        const parentIsContentFor = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) == liquid_html_parser_1.NodeTypes.ContentForMarkup;
        const nodeIsVariableLookup = (node === null || node === void 0 ? void 0 : node.type) == liquid_html_parser_1.NodeTypes.VariableLookup;
        if (!parentIsContentFor || !nodeIsVariableLookup) {
            return [];
        }
        if (!node.name || node.lookups.length > 0) {
            return [];
        }
        let options = contentForParameterCompletionOptions_1.DEFAULT_COMPLETION_OPTIONS;
        const partial = node.name.replace(params_1.CURSOR, '');
        if (parentNode.contentForType.value == 'blocks') {
            options = {
                closest: contentForParameterCompletionOptions_1.DEFAULT_COMPLETION_OPTIONS.closest,
            };
        }
        return Object.entries(options)
            .filter(([keyword, _description]) => keyword.startsWith(partial))
            .map(([keyword, description]) => {
            const { textEdit, format } = this.textEdit(node, params.document, keyword);
            return {
                label: keyword,
                kind: vscode_languageserver_1.CompletionItemKind.Keyword,
                documentation: {
                    kind: 'markdown',
                    value: description,
                },
                insertTextFormat: format,
                // We want to force these options to appear first in the list given
                // the context that they are being requested in.
                sortText: `1${keyword}`,
                textEdit,
            };
        });
    }
    textEdit(node, document, name) {
        var _a, _b;
        const remainingText = document.source.slice(node.position.end);
        // Match all the way up to the termination of the parameter which could be
        // another parameter (`,`), filter (`|`), or the end of a liquid statement.
        const match = remainingText.match(/^(.*?)\s*(?=,|\||-?\}\}|-?\%\})|^(.*)$/);
        const offset = match ? match[0].trimEnd().length : remainingText.length;
        const existingParameterOffset = (_b = (_a = remainingText.match(/[^a-zA-Z]/)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : remainingText.length;
        let start = document.textDocument.positionAt(node.position.start);
        let end = document.textDocument.positionAt(node.position.end + offset);
        let newText = name === 'closest' ? `${name}.` : `${name}: '$1'`;
        let format = name === 'closest' ? vscode_languageserver_1.InsertTextFormat.PlainText : vscode_languageserver_1.InsertTextFormat.Snippet;
        // If the cursor is inside the parameter or at the end and it's the same
        // value as the one we're offering a completion for then we want to restrict
        // the insert to just the name of the parameter.
        // e.g. `{% content_for "block", t█ype: "button" %}` and we're offering `type`
        if (node.name + remainingText.slice(0, existingParameterOffset) == name) {
            newText = name;
            format = vscode_languageserver_1.InsertTextFormat.PlainText;
            end = document.textDocument.positionAt(node.position.end + existingParameterOffset);
        }
        // If the cursor is at the beginning of the string we can consider all
        // options and should not replace any text.
        // e.g. `{% content_for "block", █type: "button" %}`
        // e.g. `{% content_for "block", █ %}`
        if (node.name === params_1.CURSOR) {
            end = start;
            // If we're inserting text in front of an existing parameter then we need
            // to add a comma to separate them.
            if (existingParameterOffset > 0) {
                newText += ', ';
            }
        }
        return {
            textEdit: vscode_languageserver_1.TextEdit.replace({
                start,
                end,
            }, newText),
            format,
        };
    }
}
exports.ContentForParameterCompletionProvider = ContentForParameterCompletionProvider;
//# sourceMappingURL=ContentForParameterCompletionProvider.js.map

/***/ }),

/***/ 6637:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const TypeSystem_1 = __webpack_require__(9242);
const utils_1 = __webpack_require__(6813);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
class FilterCompletionProvider {
    constructor(typeSystem) {
        this.typeSystem = typeSystem;
        this.options = (0, utils_1.memoize)(async (inputType) => {
            const filterEntries = await this.typeSystem.filterEntries();
            const options = filterEntries
                .filter((entry) => { var _a; return (_a = entry.syntax) === null || _a === void 0 ? void 0 : _a.startsWith(inputType); })
                .sort(common_1.sortByName);
            // Case we take "anything" as argument
            if (inputType === 'variable') {
                const entriesWithoutSyntax = filterEntries.filter((entry) => !entry.syntax);
                return options.concat(entriesWithoutSyntax).sort(common_1.sortByName);
            }
            // Case there doesn't exist filter entries for that type
            if (options.length === 0) {
                return filterEntries.sort(common_1.sortByName);
            }
            const untypedOptions = await this.options('variable');
            // We show 'array' options before 'untyped' options because they feel
            // like better options.
            return [...options, ...untypedOptions.map(deprioritized)];
        }, (inputType) => inputType);
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { partialAst, node, ancestors } = params.completionContext;
        if (!node || node.type !== liquid_html_parser_1.NodeTypes.LiquidFilter) {
            return [];
        }
        if (node.args.length > 0) {
            // We only do name completion
            return [];
        }
        // We'll fake a LiquidVariable
        let parentVariable = ancestors.at(-1);
        if (!parentVariable ||
            parentVariable.type !== liquid_html_parser_1.NodeTypes.LiquidVariable ||
            parentVariable.filters.at(-1) !== node) {
            return []; // something went wrong...
        }
        // We'll infer the type of the variable up to the last filter (excluding this one)
        parentVariable = { ...parentVariable }; // soft clone
        parentVariable.filters = parentVariable.filters.slice(0, -1); // remove last one
        const inputType = await this.typeSystem.inferType(parentVariable, partialAst, params.textDocument.uri);
        const partial = node.name.replace(params_1.CURSOR, '');
        const options = await this.options((0, TypeSystem_1.isArrayType)(inputType) ? 'array' : inputType);
        return options
            .filter(({ name }) => name.startsWith(partial))
            .map((entry) => {
            const { textEdit, format } = this.textEdit(node, params.document, entry);
            return (0, common_1.createCompletionItem)(entry, {
                kind: vscode_languageserver_1.CompletionItemKind.Function,
                insertTextFormat: format,
                textEdit,
            }, 'filter');
        });
    }
    textEdit(node, document, entry) {
        var _a, _b;
        const remainingText = document.source.slice(node.position.end);
        // Match all the way up to the termination of the filter which could be
        // another filter (`|`), or the end of a liquid statement.
        const matchEndOfFilter = remainingText.match(/^(.*?)\s*(?=\||-?\}\}|-?\%\})|^(.*)$/);
        const endOffset = matchEndOfFilter ? matchEndOfFilter[1].length : remainingText.length;
        // The start position for a LiquidFilter node includes the `|`. We need to
        // ignore the pipe and any spaces for our starting position.
        const pipeRegex = new RegExp(`(\\s*\\|\\s*)(?:${node.name}(?:\\}|\\%)\\})`);
        const matchFilterPipe = node.source.match(pipeRegex);
        const startOffet = matchFilterPipe ? matchFilterPipe[1].length : 0;
        let start = document.textDocument.positionAt(node.position.start + startOffet);
        let end = document.textDocument.positionAt(node.position.end + endOffset);
        const { insertText, insertStyle } = appendRequiredParemeters(entry);
        let newText = insertText;
        let format = insertStyle;
        // If the cursor is inside the filter or at the end and it's the same
        // value as the one we're offering a completion for then we want to restrict
        // the insert to just the name of the filter.
        // e.g. `{{ product | imag█e_url: crop: 'center' }}` and we're offering `imag█e_url`
        const existingFilterOffset = (_b = (_a = remainingText.match(/[^a-zA-Z_]/)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : remainingText.length;
        if (node.name + remainingText.slice(0, existingFilterOffset) === entry.name) {
            newText = entry.name;
            format = vscode_languageserver_1.InsertTextFormat.PlainText;
            end = document.textDocument.positionAt(node.position.end + existingFilterOffset);
        }
        // If the cursor is at the beginning of the string we can consider all
        // options and should not replace any text.
        // e.g. `{{ product | █image_url: crop: 'center' }}`
        // e.g. `{{ product | █ }}`
        if (node.name === params_1.CURSOR) {
            end = start;
        }
        return {
            textEdit: vscode_languageserver_1.TextEdit.replace({
                start,
                end,
            }, newText),
            format,
        };
    }
}
exports.FilterCompletionProvider = FilterCompletionProvider;
function deprioritized(entry) {
    return { ...entry, deprioritized: true };
}
function appendRequiredParemeters(entry) {
    var _a;
    let insertText = entry.name;
    let insertStyle = vscode_languageserver_1.InsertTextFormat.PlainText;
    if (!((_a = entry === null || entry === void 0 ? void 0 : entry.parameters) === null || _a === void 0 ? void 0 : _a.length)) {
        return { insertText, insertStyle };
    }
    const requiredPositionalParams = entry.parameters
        .filter((p) => p.required && p.positional)
        .map(formatParameter);
    const requiredNamedParams = entry.parameters
        .filter((p) => p.required && !p.positional)
        .map(formatParameter);
    if (requiredPositionalParams.length) {
        insertText += `: ${requiredPositionalParams.join(', ')}`;
        insertStyle = vscode_languageserver_1.InsertTextFormat.Snippet;
    }
    if (requiredNamedParams.length) {
        insertText += `: ${requiredNamedParams.join(', ')}`;
        insertStyle = vscode_languageserver_1.InsertTextFormat.Snippet;
    }
    return {
        insertText,
        insertStyle,
    };
}
function formatParameter(parameter, index) {
    let cursorLocation = '';
    if (parameter.positional) {
        cursorLocation = `$\{${index + 1}:${parameter.name}\}`;
    }
    else {
        cursorLocation = `$${index + 1}`;
    }
    if (parameter.types[0] === 'string') {
        cursorLocation = `'${cursorLocation}'`;
    }
    return parameter.positional ? cursorLocation : `${parameter.name}: ${cursorLocation}`;
}
//# sourceMappingURL=FilterCompletionProvider.js.map

/***/ }),

/***/ 7801:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterNamedParameterCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
class FilterNamedParameterCompletionProvider {
    constructor(themeDocset) {
        this.themeDocset = themeDocset;
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node } = params.completionContext;
        if (!node || node.type !== liquid_html_parser_1.NodeTypes.VariableLookup) {
            return [];
        }
        if (!node.name || node.lookups.length > 0) {
            // We only do top level in this one.
            return [];
        }
        const partial = node.name.replace(params_1.CURSOR, '');
        const currentContext = params.completionContext.ancestors.at(-1);
        if (!currentContext || (currentContext === null || currentContext === void 0 ? void 0 : currentContext.type) !== liquid_html_parser_1.NodeTypes.LiquidFilter) {
            return [];
        }
        const filters = await this.themeDocset.filters();
        const foundFilter = filters.find((f) => f.name === currentContext.name);
        if (!(foundFilter === null || foundFilter === void 0 ? void 0 : foundFilter.parameters)) {
            return [];
        }
        const filteredOptions = foundFilter.parameters.filter((p) => !p.positional && p.name.startsWith(partial));
        return filteredOptions.map(({ description, name, types }) => {
            const { textEdit, format } = this.textEdit(node, params.document, name, types[0]);
            return (0, common_1.createCompletionItem)({
                name,
                description,
            }, {
                kind: vscode_languageserver_1.CompletionItemKind.TypeParameter,
                insertTextFormat: format,
                // We want to force these options to appear first in the list given
                // the context that they are being requested in.
                sortText: `1${name}`,
                textEdit,
            }, 'filter', Array.isArray(types) ? types[0] : 'unknown');
        });
    }
    textEdit(node, document, name, type) {
        var _a, _b;
        const remainingText = document.source.slice(node.position.end);
        // Match all the way up to the termination of the parameter which could be
        // another parameter (`,`), filter (`|`), or the end of a liquid statement.
        const match = remainingText.match(/^(.*?)\s*(?=,|\||-?\}\}|-?\%\})|^(.*)$/);
        const offset = match ? match[0].length : remainingText.length;
        const existingParameterOffset = (_b = (_a = remainingText.match(/[^a-zA-Z]/)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : remainingText.length;
        let start = document.textDocument.positionAt(node.position.start);
        let end = document.textDocument.positionAt(node.position.end + offset);
        let newText = type === 'string' ? `${name}: '$1'` : `${name}: `;
        let format = type === 'string' ? vscode_languageserver_1.InsertTextFormat.Snippet : vscode_languageserver_1.InsertTextFormat.PlainText;
        // If the cursor is inside the parameter or at the end and it's the same
        // value as the one we're offering a completion for then we want to restrict
        // the insert to just the name of the parameter.
        // e.g. `{{ product | image_url: cr█op: 'center' }}` and we're offering `crop`
        if (node.name + remainingText.slice(0, existingParameterOffset) == name) {
            newText = name;
            format = vscode_languageserver_1.InsertTextFormat.PlainText;
            end = document.textDocument.positionAt(node.position.end + existingParameterOffset);
        }
        // If the cursor is at the beginning of the string we can consider all
        // options and should not replace any text.
        // e.g. `{{ product | image_url: █crop: 'center' }}`
        // e.g. `{{ product | image_url: █ }}`
        if (node.name === '█') {
            end = start;
        }
        return {
            textEdit: vscode_languageserver_1.TextEdit.replace({
                start,
                end,
            }, newText),
            format,
        };
    }
}
exports.FilterNamedParameterCompletionProvider = FilterNamedParameterCompletionProvider;
//# sourceMappingURL=FilterNamedParameterCompletionProvider.js.map

/***/ }),

/***/ 4818:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlAttributeCompletionProvider = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const docset_1 = __webpack_require__(5338);
const utils_1 = __webpack_require__(6813);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
class HtmlAttributeCompletionProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = (0, utils_1.findLast)(ancestors, utils_1.isAttrEmpty);
        const grandParentNode = (0, utils_1.findLast)(ancestors, utils_1.isNamedHtmlElementNode);
        const document = this.documentManager.get(params.textDocument.uri);
        if (!node || !parentNode || !grandParentNode || !document) {
            return [];
        }
        if (!(0, utils_1.isTextNode)(node) || !(0, utils_1.isAttrEmpty)(parentNode) || !(0, utils_1.isNamedHtmlElementNode)(grandParentNode)) {
            return [];
        }
        const grandParentNodeName = (0, utils_1.getCompoundName)(grandParentNode);
        const name = node.value;
        const partial = name.replace(params_1.CURSOR, '');
        const options = getOptions(partial, grandParentNodeName);
        const attributeTagRange = this.attributeTagRange(node, document);
        const hasExistingAttributeValue = this.hasExistingAttributeValue(attributeTagRange, document);
        const hasLiquidTag = this.hasLiquidTag(attributeTagRange, document);
        return options.sort(common_1.sortByName).map((tag) => {
            return toCompletionItem(tag, attributeTagRange, hasExistingAttributeValue, hasLiquidTag);
        });
    }
    hasExistingAttributeValue(attributeTagRange, document) {
        return /^\s*=/.test(document.source.slice(document.textDocument.offsetAt(attributeTagRange.end)));
    }
    hasLiquidTag(attributeTagRange, document) {
        return /^(?:\{%|\{\{)/.test(document.source.slice(document.textDocument.offsetAt(attributeTagRange.end)));
    }
    // Find the range of the attribute partial. If the attribute contains any liquid code, the range
    // will end before the first character of the liquid block.
    attributeTagRange(node, document) {
        var _a, _b;
        if (node.type === 'TextNode' && node.value === params_1.CURSOR) {
            // If you try to auto-complete with no provided attribute tag,
            // we will not try to override the subsequent character.
            // E.g. <a href="" █>
            return {
                start: document.textDocument.positionAt(node.position.start),
                end: document.textDocument.positionAt(node.position.start),
            };
        }
        const sourcePartialPastCursor = document.source.slice(node.position.end);
        const attributeEndOffset = (_b = (_a = sourcePartialPastCursor.match(/[\s=]|\{%|\{\{|>/)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : sourcePartialPastCursor.length;
        return {
            start: document.textDocument.positionAt(node.position.start),
            end: document.textDocument.positionAt(node.position.end + attributeEndOffset),
        };
    }
}
exports.HtmlAttributeCompletionProvider = HtmlAttributeCompletionProvider;
function getOptions(partial, parentNodeName) {
    var _a;
    const tag = docset_1.HtmlData.tags.find((tag) => tag.name === parentNodeName);
    const parentAttributes = (_a = tag === null || tag === void 0 ? void 0 : tag.attributes) !== null && _a !== void 0 ? _a : [];
    return [...parentAttributes, ...docset_1.HtmlData.globalAttributes].filter((x) => x.name.startsWith(partial));
}
function toCompletionItem(tag, attributeTagRange, hasExistingAttributeValue, hasLiquidTag) {
    const attributeWithValue = !tag.valueSet || tag.valueSet !== 'v';
    const insertSnippet = attributeWithValue && !hasExistingAttributeValue && !hasLiquidTag;
    return {
        label: tag.name,
        kind: vscode_languageserver_1.CompletionItemKind.Value,
        insertTextFormat: insertSnippet ? vscode_languageserver_1.InsertTextFormat.Snippet : vscode_languageserver_1.InsertTextFormat.PlainText,
        textEdit: vscode_languageserver_1.TextEdit.replace(attributeTagRange, insertSnippet ? `${tag.name}="$1"$0` : tag.name),
        documentation: {
            kind: 'markdown',
            value: (0, docset_1.renderHtmlEntry)(tag),
        },
    };
}
//# sourceMappingURL=HtmlAttributeCompletionProvider.js.map

/***/ }),

/***/ 9423:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlAttributeValueCompletionProvider = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const docset_1 = __webpack_require__(5338);
const utils_1 = __webpack_require__(6813);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
class HtmlAttributeValueCompletionProvider {
    constructor() { }
    async completions(params) {
        var _a, _b;
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const attributeNode = (0, utils_1.findLast)(ancestors, utils_1.isHtmlAttribute);
        const tagNode = (0, utils_1.findLast)(ancestors, utils_1.isNamedHtmlElementNode);
        if (!node ||
            !attributeNode ||
            !tagNode ||
            !(0, utils_1.isTextNode)(node) ||
            !(0, utils_1.isHtmlAttribute)(attributeNode) ||
            !(0, utils_1.isNamedHtmlElementNode)(tagNode) ||
            (0, utils_1.isAttrEmpty)(attributeNode) ||
            !attributeNode.value.includes(node)) {
            return [];
        }
        const tagName = (0, utils_1.getCompoundName)(tagNode);
        const attrName = (0, utils_1.getCompoundName)(attributeNode);
        const name = node.value;
        const partial = name.replace(params_1.CURSOR, '');
        const tagEntry = docset_1.HtmlData.tags.find((tag) => tag.name === tagName);
        const attribute = (_a = docset_1.HtmlData.globalAttributes.find((attr) => attr.name === attrName)) !== null && _a !== void 0 ? _a : tagEntry === null || tagEntry === void 0 ? void 0 : tagEntry.attributes.find((attr) => attr.name === attrName);
        const valueSetName = attribute === null || attribute === void 0 ? void 0 : attribute.valueSet;
        const valueSetEntry = docset_1.HtmlData.valueSets.find((valueSet) => valueSet.name === valueSetName);
        const options = ((_b = valueSetEntry === null || valueSetEntry === void 0 ? void 0 : valueSetEntry.values) !== null && _b !== void 0 ? _b : []).filter((value) => value.name.startsWith(partial));
        return options
            .sort(common_1.sortByName)
            .map((option) => toCompletionItem(option, attribute && 'references' in attribute ? attribute : tagEntry));
    }
}
exports.HtmlAttributeValueCompletionProvider = HtmlAttributeValueCompletionProvider;
function toCompletionItem(value, parentEntry) {
    return {
        label: value.name,
        kind: vscode_languageserver_1.CompletionItemKind.Value,
        documentation: {
            kind: 'markdown',
            value: (0, docset_1.renderHtmlEntry)(value, parentEntry),
        },
    };
}
//# sourceMappingURL=HtmlAttributeValueCompletionProvider.js.map

/***/ }),

/***/ 841:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlTagCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const docset_1 = __webpack_require__(5338);
const utils_1 = __webpack_require__(6813);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
class HtmlTagCompletionProvider {
    constructor() { }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        const grandParentNode = ancestors.at(-2);
        if (node && node.type === liquid_html_parser_1.NodeTypes.HtmlVoidElement) {
            const options = docset_1.HtmlData.tags.filter((tag) => tag.name === node.name);
            return options.map(toCompletionItem);
        }
        if (!node || !parentNode || !(0, utils_1.isTextNode)(node) || !canComplete(node, parentNode)) {
            return [];
        }
        const name = node.value;
        const partial = name.replace(params_1.CURSOR, '');
        const options = getOptions(partial, parentNode, grandParentNode);
        return options.sort(common_1.sortByName).map(toCompletionItem);
    }
}
exports.HtmlTagCompletionProvider = HtmlTagCompletionProvider;
function canComplete(node, parentNode) {
    return (isElementOrDanglingClose(parentNode) &&
        parentNode.name.includes(node) &&
        parentNode.name.length === 1);
}
function getOptions(partial, parentNode, grandParentNode) {
    if (parentNode.type === liquid_html_parser_1.NodeTypes.HtmlDanglingMarkerClose) {
        return grandParentCloseOption(grandParentNode);
    }
    const grandParentName = getGrandParentName(grandParentNode);
    return docset_1.HtmlData.tags
        .filter((tag) => tag.name.startsWith(partial))
        .concat(grandParentName && partial === ''
        ? {
            name: '/' + grandParentName,
            description: '',
            attributes: [],
            references: [],
        }
        : []);
}
function toCompletionItem(tag) {
    return {
        label: tag.name,
        kind: vscode_languageserver_1.CompletionItemKind.Property,
        documentation: {
            kind: 'markdown',
            value: (0, docset_1.renderHtmlEntry)(tag),
        },
    };
}
function grandParentCloseOption(grandParentNode) {
    var _a;
    const grandParentName = getGrandParentName(grandParentNode);
    if (grandParentName) {
        return [
            (_a = docset_1.HtmlData.tags.find((tag) => tag.name === grandParentName)) !== null && _a !== void 0 ? _a : {
                name: grandParentName,
                description: '',
                attributes: [],
                references: [],
            },
        ];
    }
    else {
        return [];
    }
}
function getGrandParentName(grandParentNode) {
    if (grandParentNode &&
        grandParentNode.type === liquid_html_parser_1.NodeTypes.HtmlElement &&
        grandParentNode.name.length === 1 &&
        (0, utils_1.isTextNode)(grandParentNode.name[0])) {
        return grandParentNode.name[0].value.replace(params_1.CURSOR, '');
    }
}
function isElementOrDanglingClose(node) {
    return [liquid_html_parser_1.NodeTypes.HtmlElement, liquid_html_parser_1.NodeTypes.HtmlDanglingMarkerClose].includes(node.type);
}
//# sourceMappingURL=HtmlTagCompletionProvider.js.map

/***/ }),

/***/ 4152:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidDocParamTypeCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const theme_check_common_1 = __webpack_require__(5309);
class LiquidDocParamTypeCompletionProvider {
    constructor() { }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        if (!node ||
            !parentNode ||
            node.type !== liquid_html_parser_1.NodeTypes.TextNode ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.LiquidRawTag ||
            parentNode.name !== 'doc') {
            return [];
        }
        /**
         * We need to make sure we're trying to code complete after
         * the param tag's `{` character.
         *
         * We will be removing any spaces in case there are any formatting issues.
         */
        const fragments = node.value.split(' ').filter(Boolean);
        if (fragments.length > 2 ||
            fragments[0] !== `@${theme_check_common_1.SupportedDocTagTypes.Param}` ||
            !/^\{[a-zA-Z]*$/.test(fragments[1])) {
            return [];
        }
        return Object.values(theme_check_common_1.SupportedParamTypes).map((label) => ({
            label,
            kind: vscode_languageserver_1.CompletionItemKind.EnumMember,
            insertText: label,
        }));
    }
}
exports.LiquidDocParamTypeCompletionProvider = LiquidDocParamTypeCompletionProvider;
//# sourceMappingURL=LiquidDocParamTypeCompletionProvider.js.map

/***/ }),

/***/ 693:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidDocTagCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const liquidDoc_1 = __webpack_require__(8359);
class LiquidDocTagCompletionProvider {
    constructor() { }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        if (!node ||
            !parentNode ||
            node.type !== liquid_html_parser_1.NodeTypes.TextNode ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.LiquidRawTag ||
            parentNode.name !== 'doc' ||
            !node.value.startsWith('@')) {
            return [];
        }
        // Need to offset the '@' symbol by 1
        let start = params.document.textDocument.positionAt(node.position.start + 1);
        let end = params.document.textDocument.positionAt(node.position.end);
        return Object.entries(liquidDoc_1.SUPPORTED_LIQUID_DOC_TAG_HANDLES)
            .filter(([label]) => label.startsWith(node.value.slice(1)))
            .map(([label, { description, example, template }]) => ({
            label,
            kind: vscode_languageserver_1.CompletionItemKind.EnumMember,
            documentation: {
                kind: vscode_languageserver_1.MarkupKind.Markdown,
                value: (0, liquidDoc_1.formatLiquidDocTagHandle)(label, description, example),
            },
            textEdit: vscode_languageserver_1.TextEdit.replace(vscode_languageserver_1.Range.create(start, end), template),
            insertTextFormat: vscode_languageserver_1.InsertTextFormat.Snippet,
        }));
    }
}
exports.LiquidDocTagCompletionProvider = LiquidDocTagCompletionProvider;
//# sourceMappingURL=LiquidDocTagCompletionProvider.js.map

/***/ }),

/***/ 3158:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidTagsCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const utils_1 = __webpack_require__(6813);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
class LiquidTagsCompletionProvider {
    constructor(themeDocset) {
        this.themeDocset = themeDocset;
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        if (!node || node.type !== liquid_html_parser_1.NodeTypes.LiquidTag) {
            return [];
        }
        if (typeof node.markup !== 'string' || node.markup !== '') {
            return [];
        }
        const partial = node.name.replace(params_1.CURSOR, '');
        const blockParent = findParentNode(partial, ancestors);
        const tags = await this.themeDocset.tags();
        return tags
            .filter(({ name }) => name.startsWith(partial))
            .sort(common_1.sortByName)
            .map(toCompletionItem(params, node, ancestors, partial))
            .concat(blockParent && `end${blockParent.name}`.startsWith(partial)
            ? {
                label: `end${blockParent.name}`,
                kind: vscode_languageserver_1.CompletionItemKind.Keyword,
                sortText: `!end${blockParent.name}`, // we want this first.
            }
            : []);
    }
}
exports.LiquidTagsCompletionProvider = LiquidTagsCompletionProvider;
function findParentNode(partial, ancestors) {
    if (!'end'.startsWith(partial))
        return;
    const potentialParentName = partial.replace(/^e(nd?)?/, '');
    const parentNode = ancestors.at(-1);
    const grandParentNode = ancestors.at(-2);
    // This covers the scenario where we have an open liquid tag as a parent
    //
    // e.g.
    // {% liquid
    //   echo 'hello'
    // %}
    //
    // In that scenario, we have the following tree:
    //
    // type: Document
    // children:
    //   - LiquidTag#liquid
    if (parentNode && parentNode.type === 'LiquidTag' && parentNode.name === liquid_html_parser_1.NamedTags.liquid) {
        return;
    }
    // This covers the scenario where we have a dangling conditional tag
    //
    // e.g.
    // {% if cond %}
    //   hello
    // {% end %}
    //
    // In that scenario, we have the following tree:
    //
    // type: Document
    // children:
    //   - LiquidTag#if
    //     children:
    //       - LiquidBranch
    //         children:
    //           - TextNode#hello
    //           - LiquidTag#end
    if (parentNode &&
        parentNode.type === 'LiquidBranch' &&
        grandParentNode &&
        grandParentNode.type === 'LiquidTag' &&
        grandParentNode.name.startsWith(potentialParentName)) {
        return grandParentNode;
    }
    // This covers the scenario where we have a dangling block tag
    //
    // e.g.
    // {% form "cart", cart %}
    //   hello
    // {% end %}
    //
    // In that scenario, we have the following tree:
    //
    // type: Document
    // children:
    //   - LiquidTag#form
    //     children:
    //       - TextNode#hello
    //       - LiquidTag#end
    if (parentNode &&
        parentNode.type === 'LiquidTag' &&
        parentNode.name.startsWith(potentialParentName)) {
        return parentNode;
    }
    // This covers the case where a raw tag is being parsed as a LiquidTag
    // because of the missing endtag.
    //
    // e.g.
    // {% comment %}
    //   hello
    // {% end %}
    //
    // In that scenario, we have the following tree:
    //
    // type: Document
    // children:
    //   - LiquidTag#comment
    //   - TextNode#hello
    //   - LiquidTag#end
    let previousNode;
    if (parentNode &&
        'children' in parentNode &&
        Array.isArray(parentNode.children) &&
        (previousNode = (0, utils_1.findLast)(parentNode.children, (node) => node.type === 'LiquidTag' &&
            node.name.startsWith(potentialParentName) &&
            (liquid_html_parser_1.BLOCKS.includes(node.name) || liquid_html_parser_1.RAW_TAGS.includes(node.name))))) {
        return previousNode;
    }
}
function toCompletionItem(params, node, ancestors, partial) {
    const { textDocument, source } = params.document;
    /** Are we in a {% liquid %} context? Where new lines imply new tags? */
    const isInLiquidLiquidTag = ancestors.some(isLiquidLiquidTag);
    /** 0-indexed offset of cursor position */
    const cursorOffset = textDocument.offsetAt(params.position);
    /** Position of where the start of the word being completed is */
    const startOfPartial = textDocument.positionAt(cursorOffset - partial.length);
    /** Position of the rightmost position in the doc... in {% partial %} it would be after '%}' */
    const endOfBlockStart = findEndOfBlockStart(params, node, isInLiquidLiquidTag);
    /** whitespaceStart is '-' or '' depending on if it strips whitespace to the left of the tag */
    const whitespaceStart = node.whitespaceStart;
    /** whitespaceEnd is '-' or '' depending on if it strips whitespace to the right of the tag */
    const whitespaceEnd = inferWhitespaceEnd(textDocument, endOfBlockStart, params, whitespaceStart, source, isInLiquidLiquidTag);
    return (tag) => {
        const extraProperties = {
            kind: vscode_languageserver_1.CompletionItemKind.Keyword,
            insertTextFormat: vscode_languageserver_1.InsertTextFormat.PlainText,
        };
        if (shouldSnippetComplete(params, endOfBlockStart)) {
            extraProperties.insertTextFormat = vscode_languageserver_1.InsertTextFormat.Snippet;
            extraProperties.insertTextMode = vscode_languageserver_1.InsertTextMode.adjustIndentation;
            extraProperties.textEdit = vscode_languageserver_1.TextEdit.replace(vscode_languageserver_1.Range.create(startOfPartial, endOfBlockStart), toSnippetCompleteText(tag, node, params, whitespaceStart, whitespaceEnd, textDocument, isInLiquidLiquidTag));
        }
        return (0, common_1.createCompletionItem)(tag, extraProperties, 'tag');
    };
}
/**
 * Turns out it's hard to tell if something needs an `end$tag` or not.
 *
 * The safest way to guess that something shouldn't be completed is to check whether markup already exists.
 *
 * Probably shouldn't snippet complete:
 * {% if| cond %}{% endif %}
 * {% render| 'product' %}
 *
 * Probably should snippet complete:
 * {% if| %}
 * {% render| %}
 *
 * It's not perfect, but it covers swapping if for unless and so on.
 */
function shouldSnippetComplete(params, endOfBlockStart) {
    const { completionContext } = params;
    const { node, ancestors } = completionContext !== null && completionContext !== void 0 ? completionContext : {};
    if (!node || !ancestors || node.type !== liquid_html_parser_1.NodeTypes.LiquidTag)
        return false;
    /**
     * If the tag has non-empty markup, we can assume that the name is being
     * edited. So adding the close tag would be very weird.
     *
     * User replaces `if` with `unless`.
     *
     * Input
     *   {% if some_cond %}
     *   {% endif %}
     *
     * ❌ Stuff we DON'T want:
     *   {% unless some_cond %}
     *     expression
     *   {% endunless %}
     *   {% endif %}
     *
     * ✅ Stuff we DO want:
     *   {% unless some_cond %}
     *   {% endif %}
     *
     * We'll solve the negate condition differently.
     */
    const markup = existingMarkup(params, endOfBlockStart);
    return markup.trim() === '';
}
function toSnippetCompleteText(tag, node, params, whitespaceStart, whitespaceEnd, textDocument, isInLiquidLiquidTag) {
    let snippet = toSnippet(tag);
    if (shouldInline(textDocument, params, node, isInLiquidLiquidTag)) {
        // Then we need to remove the newlines from the snippet
        snippet = snippet.replace(/\n\s*/g, '');
    }
    if (isInLiquidLiquidTag) {
        // then we need to get rid of all the {% and %} from the snippet
        snippet = snippet.replace(/\{%-?[ \t]*/g, '').replace(/[ \t]*-?%\}/g, '');
    }
    if (tag.syntax_keywords) {
        // Then we need to replace the keywords from the snippet with ${n:keyword}
        let i = 1;
        for (const { keyword } of tag.syntax_keywords) {
            if (keyword.includes('expression') ||
                keyword.includes('code') ||
                keyword.includes('content')) {
                // first_expression, second_expression, javascript_code,
                // forloop_content... we don't want those. Just the cursor position.
                snippet = snippet.replace(keyword, `\$${i}`);
            }
            else {
                snippet = snippet.replace(keyword, `\${${i}:${keyword}}`);
            }
            i++;
        }
    }
    // We need to add the whitespace stripping characters to the snippet if there are any to add
    snippet = withCorrectWhitespaceStrippingCharacters(snippet, whitespaceStart, whitespaceEnd);
    if (isInLiquidLiquidTag) {
        return snippet.trimStart();
    }
    else {
        // VS Code doesn't like it when the snippet starts before the word
        // being completed. So the completion item we offer starts off after
        // the {%-?\s part.
        return snippet.slice(2 + whitespaceStart.length + 1);
    }
}
function toSnippet(tag) {
    // Some of those are exceptional and we don't really want to use the same syntax used on shopify.dev
    switch (tag.name) {
        case 'echo':
            return '{% echo $1 %}';
        case 'cycle':
            return "{% cycle '$1', '$2'$3 %}";
        case 'content_for':
            return "{% content_for '$1'$2 %}";
        case 'render':
            return "{% render '$1'$2 %}";
        case 'elsif':
            return '{% elsif ${1:condition} %}';
        case 'else':
            return '{% else %}';
    }
    if (tag.syntax) {
        return tag.syntax;
    }
    else if (isBlockTag(tag.name)) {
        return `{% ${tag.name}$1 %}\n  $2\n{% end${tag.name} %}`;
    }
    else {
        return `{% ${tag.name}$1 %}`;
    }
}
/**
 * If the tag is on a new line, then we can use the snippet with newline.
 * If there's more content on that line, then we inline the snippet in one line.
 */
function shouldInline(textDocument, params, node, isInLiquidLiquidTag) {
    if (isInLiquidLiquidTag)
        return false;
    const endPosition = textDocument.positionAt(node.blockStartPosition.start);
    const startPosition = vscode_languageserver_1.Position.create(endPosition.line, 0);
    const textBeforeTag = textDocument.getText(vscode_languageserver_1.Range.create(startPosition, endPosition));
    return textBeforeTag.trim() !== '';
}
/**
 * We mirror the whitespace stripping of the start tag.
 * {% if -%} => {% if -%}{%- endif %}
 */
function withCorrectWhitespaceStrippingCharacters(snippet, whitespaceStart, whitespaceEnd) {
    var _a, _b;
    let starti = 0;
    let endi = 0;
    let countOfEndTags = (_b = (_a = snippet.match(/%\}/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
    snippet = snippet
        .replace(/\{%/g, () => {
        if (starti++ === 0) {
            // mirror outside stripping
            return '{%' + whitespaceStart;
        }
        else {
            // mirror inside stripping
            return '{%' + whitespaceEnd;
        }
    })
        .replace(/%\}/g, () => {
        if (countOfEndTags > 1 && endi++ === countOfEndTags - 1) {
            // mirror outside stripping
            return whitespaceStart + '%}';
        }
        else {
            // mirror inside stripping
            return whitespaceEnd + '%}';
        }
    });
    return snippet;
}
function findEndOfBlockStart(context, node, isInLiquidLiquidTag) {
    const doc = context.document.textDocument;
    const source = context.document.source;
    const start = node.position.start;
    if (isInLiquidLiquidTag) {
        return doc.positionAt(source.indexOf('\n', start));
    }
    const end = source.indexOf('%}', start);
    const endOpen = source.indexOf('{%', start + 2);
    const isThere = end !== -1 && (endOpen === -1 || end < endOpen);
    if (isThere) {
        // %} => + 2
        return doc.positionAt(end + 2);
    }
    else {
        // return cursor position.
        return context.position;
    }
}
function existingMarkup(params, endOfBlockStart) {
    const { document } = params;
    const { source, textDocument } = document;
    return source
        .slice(textDocument.offsetAt(params.position), textDocument.offsetAt(endOfBlockStart))
        .replace(/-?%\}/, '');
}
// We're trying to infer if we should trim the whitespace to the right given what the user has already written
// {%  if|        => ''
// {%- if|        => '-'
// {%- if|  %}    => ''
// {%- if| -%}    => '-'
// {%  if| -%}    => '-'
// {% liquid
//       if|      => ''
// %}
function inferWhitespaceEnd(textDocument, endOfBlockStart, params, whitespaceStart, source, isInLiquidLiquidTag) {
    if (isInLiquidLiquidTag) {
        return '';
    }
    else if (textDocument.offsetAt(endOfBlockStart) === textDocument.offsetAt(params.position)) {
        return whitespaceStart; // if the %} wasn't auto inserted, copy whatever was there on the other side
    }
    else if (source.charAt(textDocument.offsetAt(endOfBlockStart) - 3) === '-') {
        return '-';
    }
    else {
        return '';
    }
}
function isLiquidLiquidTag(parent) {
    return parent.type === liquid_html_parser_1.NodeTypes.LiquidTag && parent.name === liquid_html_parser_1.NamedTags.liquid;
}
function isBlockTag(name) {
    return liquid_html_parser_1.BLOCKS.includes(name);
}
//# sourceMappingURL=LiquidTagsCompletionProvider.js.map

/***/ }),

/***/ 4908:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectAttributeCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const TypeSystem_1 = __webpack_require__(9242);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
const ArrayCoreProperties = ['size', 'first', 'last'];
const StringCoreProperties = ['size'];
class ObjectAttributeCompletionProvider {
    constructor(typeSystem, getThemeSettingsSchema) {
        this.typeSystem = typeSystem;
        this.getThemeSettingsSchema = getThemeSettingsSchema;
    }
    async completions(params) {
        var _a;
        if (!params.completionContext)
            return [];
        const { partialAst, node } = params.completionContext;
        if (!node || node.type !== liquid_html_parser_1.NodeTypes.VariableLookup) {
            return [];
        }
        if (node.lookups.length === 0) {
            // We only do lookups in this one
            return [];
        }
        const lastLookup = node.lookups.at(-1);
        if (lastLookup.type !== liquid_html_parser_1.NodeTypes.String) {
            // We don't complete numbers, or variable lookups
            return [];
        }
        const partial = lastLookup.value.replace(params_1.CURSOR, '');
        // Fake a VariableLookup up to the last one.
        const parentLookup = { ...node };
        parentLookup.lookups = [...parentLookup.lookups];
        parentLookup.lookups.pop();
        const parentType = await this.typeSystem.inferType(parentLookup, partialAst, params.textDocument.uri);
        if ((0, TypeSystem_1.isArrayType)(parentType)) {
            return completionItems(ArrayCoreProperties.map((name) => ({ name })), partial);
        }
        else if (parentType === 'string') {
            return completionItems(StringCoreProperties.map((name) => ({ name })), partial);
        }
        const objectMap = await this.typeSystem.objectMap(params.textDocument.uri, partialAst);
        const parentTypeProperties = ((_a = objectMap[parentType]) === null || _a === void 0 ? void 0 : _a.properties) || [];
        return completionItems(parentTypeProperties, partial);
    }
}
exports.ObjectAttributeCompletionProvider = ObjectAttributeCompletionProvider;
function completionItems(options, partial) {
    return options
        .filter(({ name }) => name.startsWith(partial))
        .sort(common_1.sortByName)
        .map(toPropertyCompletionItem);
}
function toPropertyCompletionItem(object) {
    return (0, common_1.createCompletionItem)(object, { kind: vscode_languageserver_1.CompletionItemKind.Variable });
}
//# sourceMappingURL=ObjectAttributeCompletionProvider.js.map

/***/ }),

/***/ 5132:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const params_1 = __webpack_require__(5306);
const common_1 = __webpack_require__(4210);
class ObjectCompletionProvider {
    constructor(typeSystem) {
        this.typeSystem = typeSystem;
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { partialAst, node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        if (!node || node.type !== liquid_html_parser_1.NodeTypes.VariableLookup) {
            return [];
        }
        if (!node.name || node.lookups.length > 0) {
            // We only do top level in this one.
            return [];
        }
        // ContentFor and Render uses VariableLookup to support completion of NamedParams.
        if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === liquid_html_parser_1.NodeTypes.ContentForMarkup ||
            (parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === liquid_html_parser_1.NodeTypes.RenderMarkup) {
            return [];
        }
        const partial = node.name.replace(params_1.CURSOR, '');
        const options = await this.typeSystem.availableVariables(partialAst, partial, node, params.textDocument.uri);
        return options.map(({ entry, type }) => (0, common_1.createCompletionItem)(entry, { kind: vscode_languageserver_1.CompletionItemKind.Variable }, 'object', type));
    }
}
exports.ObjectCompletionProvider = ObjectCompletionProvider;
//# sourceMappingURL=ObjectCompletionProvider.js.map

/***/ }),

/***/ 5443:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderSnippetCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
class RenderSnippetCompletionProvider {
    constructor(getSnippetNamesForURI = async () => []) {
        this.getSnippetNamesForURI = getSnippetNamesForURI;
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        if (!node ||
            !parentNode ||
            node.type !== liquid_html_parser_1.NodeTypes.String ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.RenderMarkup) {
            return [];
        }
        const options = await this.getSnippetNamesForURI(params.textDocument.uri);
        const partial = node.value;
        return options
            .filter((option) => option.startsWith(partial))
            .map((option) => ({
            label: option,
            kind: vscode_languageserver_1.CompletionItemKind.Snippet,
            documentation: {
                kind: 'markdown',
                value: `snippets/${option}.liquid`,
            },
        }));
    }
}
exports.RenderSnippetCompletionProvider = RenderSnippetCompletionProvider;
//# sourceMappingURL=RenderSnippetCompletionProvider.js.map

/***/ }),

/***/ 444:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderSnippetParameterCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const params_1 = __webpack_require__(5306);
const liquidDoc_1 = __webpack_require__(8359);
const theme_check_common_1 = __webpack_require__(5309);
class RenderSnippetParameterCompletionProvider {
    constructor(getSnippetDefinitionForURI) {
        this.getSnippetDefinitionForURI = getSnippetDefinitionForURI;
    }
    async completions(params) {
        var _a, _b;
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        if (!node ||
            !parentNode ||
            node.type !== liquid_html_parser_1.NodeTypes.VariableLookup ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.RenderMarkup ||
            parentNode.snippet.type !== 'String') {
            return [];
        }
        const userInputStr = ((_a = node.name) === null || _a === void 0 ? void 0 : _a.replace(params_1.CURSOR, '')) || '';
        const snippetDefinition = await this.getSnippetDefinitionForURI(params.textDocument.uri, parentNode.snippet.value);
        const liquidDocParams = (_b = snippetDefinition === null || snippetDefinition === void 0 ? void 0 : snippetDefinition.liquidDoc) === null || _b === void 0 ? void 0 : _b.parameters;
        if (!liquidDocParams) {
            return [];
        }
        let offset = node.name === params_1.CURSOR ? 1 : 0;
        let start = params.document.textDocument.positionAt(node.position.start);
        let end = params.document.textDocument.positionAt(node.position.end - offset);
        // We need to find out existing params in the render tag so we don't offer it again for completion
        const existingRenderParams = parentNode.args
            .filter((arg) => arg.type === liquid_html_parser_1.NodeTypes.NamedArgument)
            .map((arg) => arg.name);
        return liquidDocParams
            .filter((liquidDocParam) => !existingRenderParams.includes(liquidDocParam.name))
            .filter((liquidDocParam) => liquidDocParam.name.startsWith(userInputStr))
            .map((liquidDocParam) => {
            const paramDefaultValue = (0, theme_check_common_1.getDefaultValueForType)(liquidDocParam.type);
            const paramValueTemplate = paramDefaultValue === "''" ? `'$1'$0` : `\${1:${paramDefaultValue}}$0`;
            return {
                label: liquidDocParam.name,
                kind: vscode_languageserver_1.CompletionItemKind.Property,
                documentation: {
                    kind: vscode_languageserver_1.MarkupKind.Markdown,
                    value: (0, liquidDoc_1.formatLiquidDocParameter)(liquidDocParam, true),
                },
                textEdit: vscode_languageserver_1.TextEdit.replace(vscode_languageserver_1.Range.create(start, end), `${liquidDocParam.name}: ${paramValueTemplate}`),
                insertTextFormat: vscode_languageserver_1.InsertTextFormat.Snippet,
            };
        });
    }
}
exports.RenderSnippetParameterCompletionProvider = RenderSnippetParameterCompletionProvider;
//# sourceMappingURL=RenderSnippetParameterCompletionProvider.js.map

/***/ }),

/***/ 5162:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TranslationCompletionProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const translations_1 = __webpack_require__(9135);
const theme_check_common_1 = __webpack_require__(5309);
class TranslationCompletionProvider {
    constructor(documentManager, getTranslationsForURI) {
        this.documentManager = documentManager;
        this.getTranslationsForURI = getTranslationsForURI;
    }
    async completions(params) {
        if (!params.completionContext)
            return [];
        const { node, ancestors } = params.completionContext;
        const parentNode = ancestors.at(-1);
        const document = this.documentManager.get(params.textDocument.uri);
        if (!node ||
            node.type !== liquid_html_parser_1.NodeTypes.String ||
            !parentNode ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.LiquidVariable ||
            !document) {
            return [];
        }
        const ast = document.ast;
        const textDocument = document.textDocument;
        const translations = await this.getTranslationsForURI(params.textDocument.uri);
        const partial = node.value;
        // We only want to show standard translations to complete if the translation
        // is prefixed by shopify. Otherwise it's too noisy.
        const options = (0, translations_1.translationOptions)(translations).filter((option) => { var _a; return !((_a = option.path[0]) === null || _a === void 0 ? void 0 : _a.startsWith('shopify')) || partial.startsWith('shopify'); });
        const [_currentNode, realAncestors] = ast instanceof Error
            ? [null, []]
            : (0, theme_check_common_1.findCurrentNode)(ast, textDocument.offsetAt(params.position));
        // That part feels kind of gross, let me explain...
        // When we complete translations, we also want to append the `| t` after the
        // string, but we should only ever do that if the variable didn't _already_ have that.
        // But since our completion engine works on incomplete code, we need to temporarily
        // fetch the real node to do the optional | t completion.
        const realParentNode = realAncestors.at(-1);
        let shouldAppendTranslateFilter = (realParentNode === null || realParentNode === void 0 ? void 0 : realParentNode.type) === liquid_html_parser_1.NodeTypes.LiquidVariable && (realParentNode === null || realParentNode === void 0 ? void 0 : realParentNode.filters.length) === 0;
        const quote = node.single ? "'" : '"';
        let postFix = quote + ' | t';
        let replaceRange;
        if (shouldAppendTranslateFilter) {
            postFix = quote + ' | t';
            replaceRange = {
                start: textDocument.positionAt(node.position.start + 1),
                end: textDocument.positionAt(node.position.end), // including quote
            };
        }
        else {
            postFix = '';
            replaceRange = {
                start: textDocument.positionAt(node.position.start + 1),
                end: textDocument.positionAt(node.position.end - 1), // excluding quote
            };
        }
        const insertTextStartIndex = partial.lastIndexOf('.') + 1;
        return options.map(({ path, translation }) => {
            var _a;
            const params = (0, translations_1.extractParams)(typeof translation === 'string' ? translation : (_a = Object.values(translation)[0]) !== null && _a !== void 0 ? _a : '');
            const parameters = (0, translations_1.paramsString)(params);
            return {
                label: quote + path.join('.') + quote + ' | t',
                insertText: path.join('.').slice(insertTextStartIndex),
                kind: vscode_languageserver_1.CompletionItemKind.Field,
                textEdit: vscode_languageserver_1.TextEdit.replace(replaceRange, path.join('.') + postFix + (shouldAppendTranslateFilter ? parameters : '')),
                documentation: {
                    kind: 'markdown',
                    value: (0, translations_1.renderTranslation)(translation),
                },
            };
        });
    }
}
exports.TranslationCompletionProvider = TranslationCompletionProvider;
//# sourceMappingURL=TranslationCompletionProvider.js.map

/***/ }),

/***/ 1552:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCompletionItem = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const docset_1 = __webpack_require__(5338);
// ASCII tokens that make a string appear lower in the list.
//
// It's setup so that we can show array filters before "global" filters,
// and similarly array deprecated filters before "global" deprecated
// filters.
var SortTokens;
(function (SortTokens) {
    SortTokens["normal"] = "";
    SortTokens["deprioritized"] = "{";
    SortTokens["deprecated"] = "|";
    SortTokens["deprecatedAndDeprioritized"] = "}";
})(SortTokens || (SortTokens = {}));
function createCompletionItem(entry, extraProperties = {}, docsetEntryType, entryType) {
    // prettier-ignore
    const sortToken = entry.deprecated
        ? entry.deprioritized
            ? SortTokens.deprecatedAndDeprioritized
            : SortTokens.deprecated
        : entry.deprioritized
            ? SortTokens.deprioritized
            : SortTokens.normal;
    return {
        label: entry.name,
        sortText: `${sortToken}${entry.name}`,
        ...documentationProperties(entry, docsetEntryType, entryType),
        ...deprecatedProperties(entry),
        ...extraProperties,
    };
}
exports.createCompletionItem = createCompletionItem;
function documentationProperties(entry, docsetEntryType, entryType) {
    const value = (0, docset_1.render)(entry, entryType, docsetEntryType);
    return {
        documentation: {
            kind: 'markdown',
            value,
        },
    };
}
function deprecatedProperties(entry) {
    if (!entry.deprecated)
        return {};
    const tags = [vscode_languageserver_1.CompletionItemTag.Deprecated];
    return {
        tags,
    };
}
//# sourceMappingURL=CompletionItemProperties.js.map

/***/ }),

/***/ 4210:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sortByName = exports.createCompletionItem = void 0;
var CompletionItemProperties_1 = __webpack_require__(1552);
Object.defineProperty(exports, "createCompletionItem", ({ enumerable: true, get: function () { return CompletionItemProperties_1.createCompletionItem; } }));
function sortByName({ name: nameA }, { name: nameB }) {
    if (nameA < nameB) {
        return -1;
    }
    if (nameA > nameB) {
        return 1;
    }
    // names must be equal
    return 0;
}
exports.sortByName = sortByName;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9714:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_COMPLETION_OPTIONS = void 0;
/**
 * These definitions are not currently available in the generated Liquid Docs
 * so we're hardcoding them here in the interim.
 */
exports.DEFAULT_COMPLETION_OPTIONS = {
    type: "The type (name) of an existing theme block in your theme’s /blocks folder. Only applicable when `content_type` is 'block'.",
    id: "A unique identifier and literal string within the section or block that contains the static blocks. Only applicable when `content_type` is 'block'.",
    closest: 'A path that provides a way to access the closest resource of a given type.',
};
//# sourceMappingURL=contentForParameterCompletionOptions.js.map

/***/ }),

/***/ 6896:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderSnippetCompletionProvider = exports.TranslationCompletionProvider = exports.ObjectCompletionProvider = exports.ObjectAttributeCompletionProvider = exports.LiquidTagsCompletionProvider = exports.FilterNamedParameterCompletionProvider = exports.FilterCompletionProvider = exports.HtmlAttributeValueCompletionProvider = exports.HtmlAttributeCompletionProvider = exports.HtmlTagCompletionProvider = exports.ContentForParameterCompletionProvider = exports.ContentForBlockTypeCompletionProvider = exports.ContentForCompletionProvider = void 0;
var ContentForCompletionProvider_1 = __webpack_require__(4183);
Object.defineProperty(exports, "ContentForCompletionProvider", ({ enumerable: true, get: function () { return ContentForCompletionProvider_1.ContentForCompletionProvider; } }));
var ContentForBlockTypeCompletionProvider_1 = __webpack_require__(4032);
Object.defineProperty(exports, "ContentForBlockTypeCompletionProvider", ({ enumerable: true, get: function () { return ContentForBlockTypeCompletionProvider_1.ContentForBlockTypeCompletionProvider; } }));
var ContentForParameterCompletionProvider_1 = __webpack_require__(9402);
Object.defineProperty(exports, "ContentForParameterCompletionProvider", ({ enumerable: true, get: function () { return ContentForParameterCompletionProvider_1.ContentForParameterCompletionProvider; } }));
var HtmlTagCompletionProvider_1 = __webpack_require__(841);
Object.defineProperty(exports, "HtmlTagCompletionProvider", ({ enumerable: true, get: function () { return HtmlTagCompletionProvider_1.HtmlTagCompletionProvider; } }));
var HtmlAttributeCompletionProvider_1 = __webpack_require__(4818);
Object.defineProperty(exports, "HtmlAttributeCompletionProvider", ({ enumerable: true, get: function () { return HtmlAttributeCompletionProvider_1.HtmlAttributeCompletionProvider; } }));
var HtmlAttributeValueCompletionProvider_1 = __webpack_require__(9423);
Object.defineProperty(exports, "HtmlAttributeValueCompletionProvider", ({ enumerable: true, get: function () { return HtmlAttributeValueCompletionProvider_1.HtmlAttributeValueCompletionProvider; } }));
var FilterCompletionProvider_1 = __webpack_require__(6637);
Object.defineProperty(exports, "FilterCompletionProvider", ({ enumerable: true, get: function () { return FilterCompletionProvider_1.FilterCompletionProvider; } }));
var FilterNamedParameterCompletionProvider_1 = __webpack_require__(7801);
Object.defineProperty(exports, "FilterNamedParameterCompletionProvider", ({ enumerable: true, get: function () { return FilterNamedParameterCompletionProvider_1.FilterNamedParameterCompletionProvider; } }));
var LiquidTagsCompletionProvider_1 = __webpack_require__(3158);
Object.defineProperty(exports, "LiquidTagsCompletionProvider", ({ enumerable: true, get: function () { return LiquidTagsCompletionProvider_1.LiquidTagsCompletionProvider; } }));
var ObjectAttributeCompletionProvider_1 = __webpack_require__(4908);
Object.defineProperty(exports, "ObjectAttributeCompletionProvider", ({ enumerable: true, get: function () { return ObjectAttributeCompletionProvider_1.ObjectAttributeCompletionProvider; } }));
var ObjectCompletionProvider_1 = __webpack_require__(5132);
Object.defineProperty(exports, "ObjectCompletionProvider", ({ enumerable: true, get: function () { return ObjectCompletionProvider_1.ObjectCompletionProvider; } }));
var TranslationCompletionProvider_1 = __webpack_require__(5162);
Object.defineProperty(exports, "TranslationCompletionProvider", ({ enumerable: true, get: function () { return TranslationCompletionProvider_1.TranslationCompletionProvider; } }));
var RenderSnippetCompletionProvider_1 = __webpack_require__(5443);
Object.defineProperty(exports, "RenderSnippetCompletionProvider", ({ enumerable: true, get: function () { return RenderSnippetCompletionProvider_1.RenderSnippetCompletionProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 3565:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticsManager = void 0;
const offenseToDiagnostic_1 = __webpack_require__(80);
class DiagnosticsManager {
    constructor(connection) {
        this.connection = connection;
        this.diagnostics = new Map();
    }
    get(uri) {
        return this.diagnostics.get(uri);
    }
    set(uri, version, offenses) {
        const anomalies = offenses.map((offense, index) => ({
            offense,
            diagnostic: (0, offenseToDiagnostic_1.offenseToDiagnostic)(offense),
            id: index,
        }));
        this.diagnostics.set(uri, {
            uri,
            version,
            anomalies,
        });
        this.connection.sendDiagnostics({
            uri,
            version,
            diagnostics: anomalies.map((a) => a.diagnostic),
        });
    }
    clear(uri) {
        this.diagnostics.delete(uri);
        this.connection.sendDiagnostics({
            uri,
            version: undefined,
            diagnostics: [],
        });
    }
}
exports.DiagnosticsManager = DiagnosticsManager;
//# sourceMappingURL=DiagnosticsManager.js.map

/***/ }),

/***/ 3028:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeRunChecks = exports.DiagnosticsManager = void 0;
var DiagnosticsManager_1 = __webpack_require__(3565);
Object.defineProperty(exports, "DiagnosticsManager", ({ enumerable: true, get: function () { return DiagnosticsManager_1.DiagnosticsManager; } }));
var runChecks_1 = __webpack_require__(36);
Object.defineProperty(exports, "makeRunChecks", ({ enumerable: true, get: function () { return runChecks_1.makeRunChecks; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 80:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.offenseToDiagnostic = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const theme_check_common_1 = __webpack_require__(5309);
const checkToDocsUrl = theme_check_common_1.allChecks.reduce((acc, checkDescription) => {
    const url = checkDescription.meta.docs.url;
    const code = checkDescription.meta.code;
    if (url !== undefined) {
        acc[code] = url;
    }
    return acc;
}, {});
function offenseToDiagnostic(offense) {
    const diagnostic = vscode_languageserver_1.Diagnostic.create(diagnosticRange(offense), offense.message, diagnosticSeverity(offense), offense.check, 'theme-check');
    const url = checkToDocsUrl[offense.check];
    if (url) {
        diagnostic.codeDescription = { href: url };
    }
    return diagnostic;
}
exports.offenseToDiagnostic = offenseToDiagnostic;
function diagnosticRange({ start, end }) {
    return {
        start: {
            line: start.line,
            character: start.character,
        },
        end: {
            line: end.line,
            character: end.character,
        },
    };
}
function diagnosticSeverity(offense) {
    switch (offense.severity) {
        case theme_check_common_1.Severity.INFO: {
            return vscode_languageserver_1.DiagnosticSeverity.Information;
        }
        case theme_check_common_1.Severity.WARNING: {
            return vscode_languageserver_1.DiagnosticSeverity.Warning;
        }
        case theme_check_common_1.Severity.ERROR: {
            return vscode_languageserver_1.DiagnosticSeverity.Error;
        }
        default: {
            return (0, theme_check_common_1.assertNever)(offense.severity);
        }
    }
}
//# sourceMappingURL=offenseToDiagnostic.js.map

/***/ }),

/***/ 36:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.makeRunChecks = void 0;
const theme_check_common_1 = __webpack_require__(5309);
function makeRunChecks(documentManager, diagnosticsManager, { fs, loadConfig, themeDocset, jsonValidationSet, getMetafieldDefinitions, }) {
    return async function runChecks(triggerURIs) {
        // This function takes an array of triggerURIs so that we can correctly
        // recheck on file renames that came from out of bounds in a
        // workspaces.
        //
        // e.g. if a user renames
        //  theme1/snippets/a.liquid to
        //  theme1/snippets/b.liquid
        //
        // then we recheck theme1
        const fileExists = (0, theme_check_common_1.makeFileExists)(fs);
        const rootURIs = await Promise.all(triggerURIs.map((uri) => (0, theme_check_common_1.findRoot)(uri, fileExists)));
        const deduplicatedRootURIs = new Set(rootURIs);
        await Promise.all([...deduplicatedRootURIs].map(runChecksForRoot));
        return;
        async function runChecksForRoot(configFileRootUri) {
            const config = await loadConfig(configFileRootUri, fs);
            const theme = documentManager.theme(config.rootUri);
            const offenses = await (0, theme_check_common_1.check)(theme, config, {
                fs,
                themeDocset,
                jsonValidationSet,
                getMetafieldDefinitions,
                // TODO should do something for app blocks?
                async getBlockSchema(name) {
                    // We won't preload here. If it's available, we'll give it. Otherwise expect nothing.
                    const uri = theme_check_common_1.path.join(config.rootUri, 'blocks', `${name}.liquid`);
                    const doc = documentManager.get(uri);
                    if ((doc === null || doc === void 0 ? void 0 : doc.type) !== theme_check_common_1.SourceCodeType.LiquidHtml)
                        return undefined;
                    const schema = await doc.getSchema();
                    return schema;
                },
                async getSectionSchema(name) {
                    // We won't preload here. If it's available, we'll give it. Otherwise expect nothing.
                    const uri = theme_check_common_1.path.join(config.rootUri, 'sections', `${name}.liquid`);
                    const doc = documentManager.get(uri);
                    if ((doc === null || doc === void 0 ? void 0 : doc.type) !== theme_check_common_1.SourceCodeType.LiquidHtml)
                        return undefined;
                    const schema = await doc.getSchema();
                    return schema;
                },
            });
            // We iterate over the theme files (as opposed to offenses) because if
            // there were offenses before, we need to send an empty array to clear
            // them.
            for (const sourceCode of theme) {
                const sourceCodeOffenses = offenses.filter((offense) => offense.uri === sourceCode.uri);
                diagnosticsManager.set(sourceCode.uri, sourceCode.version, sourceCodeOffenses);
            }
        }
    };
}
exports.makeRunChecks = makeRunChecks;
//# sourceMappingURL=runChecks.js.map

/***/ }),

/***/ 8303:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlData = void 0;
const htmlData = __importStar(__webpack_require__(3495));
exports.HtmlData = htmlData;
//# sourceMappingURL=HtmlDocset.js.map

/***/ }),

/***/ 4446:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.renderHtmlEntry = exports.render = void 0;
const TypeSystem_1 = __webpack_require__(9242);
const HORIZONTAL_SEPARATOR = '\n\n---\n\n';
function render(entry, returnType, docsetEntryType) {
    return [title(entry, returnType), docsetEntryBody(entry, returnType, docsetEntryType)]
        .filter(Boolean)
        .join('\n');
}
exports.render = render;
function renderHtmlEntry(entry, parentEntry) {
    return [title(entry, 'untyped'), htmlEntryBody(entry, parentEntry)].join('\n');
}
exports.renderHtmlEntry = renderHtmlEntry;
function title(entry, returnType) {
    returnType = returnType !== null && returnType !== void 0 ? returnType : (0, TypeSystem_1.docsetEntryReturnType)(entry, 'untyped');
    if ((0, TypeSystem_1.isArrayType)(returnType)) {
        return `### ${entry.name}: \`${returnType.valueType}[]\``;
    }
    else if (returnType !== 'untyped') {
        return `### ${entry.name}: \`${returnType}\``;
    }
    return `### ${entry.name}`;
}
function sanitize(s) {
    return s === null || s === void 0 ? void 0 : s.replace(/(^|\n+)&gt;/g, ' ').replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/\]\(\//g, '](https://shopify.dev/').trim();
}
function docsetEntryBody(entry, returnType, docsetEntryType) {
    return [
        syntax(entry),
        entry.deprecation_reason,
        entry.summary,
        entry.description,
        shopifyDevReference(entry, returnType, docsetEntryType),
    ]
        .map(sanitize)
        .filter(Boolean)
        .join(HORIZONTAL_SEPARATOR);
}
function htmlEntryBody(entry, parentEntry) {
    return [description(entry), references(entry), references(parentEntry)]
        .filter(Boolean)
        .join(HORIZONTAL_SEPARATOR);
}
function syntax(entry) {
    if (!('syntax' in entry) || !entry.syntax) {
        return undefined;
    }
    // TagEntry entries already have liquid tags as a part of the syntax
    // explanation so we can return them directly.
    if (entry.syntax.startsWith('{%')) {
        return `\`\`\`liquid\n${entry.syntax}\n\`\`\``;
    }
    // Wrap the syntax in liquid tags to ensure we get proper syntax highlighting
    // if it's available.
    return `\`\`\`liquid\n{{ ${entry.syntax} }}\n\`\`\``;
}
function description(entry) {
    if (!entry.description || typeof entry.description === 'string') {
        return entry.description;
    }
    return entry.description.value;
}
const shopifyDevRoot = `https://shopify.dev/docs/api/liquid`;
function shopifyDevReference(entry, returnType, docsetEntryType) {
    switch (docsetEntryType) {
        case 'tag': {
            if (entry.name === 'else' && 'category' in entry) {
                return `[Shopify Reference](${shopifyDevRoot}/tags/${entry.category}-${entry.name})`;
            }
            else if ('category' in entry) {
                return `[Shopify Reference](${shopifyDevRoot}/tags/${entry.name})`;
            }
            else {
                return undefined;
            }
        }
        case 'object': {
            if (!returnType) {
                return `[Shopify Reference](${shopifyDevRoot}/objects/${entry.name})`;
            }
            else if ((0, TypeSystem_1.isArrayType)(returnType)) {
                return `[Shopify Reference](${shopifyDevRoot}/objects/${returnType.valueType})`;
            }
            else if ('access' in entry) {
                return `[Shopify Reference](${shopifyDevRoot}/objects/${returnType})`;
            }
            else {
                return undefined;
            }
        }
        case 'filter': {
            if ('category' in entry) {
                return `[Shopify Reference](${shopifyDevRoot}/filters/${entry.name})`;
            }
            else {
                return undefined;
            }
        }
        default: {
            return undefined;
        }
    }
}
function references(entry) {
    if (!entry || !('references' in entry) || !entry.references || entry.references.length === 0) {
        return undefined;
    }
    if (entry.references.length === 1) {
        const [ref] = entry.references;
        return `[${ref.name}](${ref.url})`;
    }
    return [`#### Learn more`, entry.references.map((ref) => `- [${ref.name}](${ref.url})`)].join('\n\n');
}
//# sourceMappingURL=MarkdownRenderer.js.map

/***/ }),

/***/ 5338:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.renderHtmlEntry = exports.render = void 0;
var MarkdownRenderer_1 = __webpack_require__(4446);
Object.defineProperty(exports, "render", ({ enumerable: true, get: function () { return MarkdownRenderer_1.render; } }));
Object.defineProperty(exports, "renderHtmlEntry", ({ enumerable: true, get: function () { return MarkdownRenderer_1.renderHtmlEntry; } }));
__exportStar(__webpack_require__(8303), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4915:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentHighlightsProvider = exports.PREVENT_DEFAULT = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const theme_check_common_2 = __webpack_require__(5309);
const providers_1 = __webpack_require__(7573);
/**
 * The default behaviour for documentHighlights is to highlight every occurence
 * of the word under the cursor. We want to prevent that since it doesn't really
 * make sense in our context. We don't want to highlight every occurence of
 * `assign` when you put your cursor over it.
 */
exports.PREVENT_DEFAULT = [];
/**
 * Informs the client to highlight ranges in a document.
 *
 * This is a pretty abstract concept, but you could use it to highlight all
 * instances of a variable in a template, to highlight the matching
 * opening/closing liquid tags, html tags, etc.
 */
class DocumentHighlightsProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
        this.providers = [
            new providers_1.HtmlTagNameDocumentHighlightsProvider(documentManager),
            new providers_1.LiquidBlockTagDocumentHighlightsProvider(documentManager),
        ];
    }
    async documentHighlights(params) {
        var _a;
        const document = this.documentManager.get(params.textDocument.uri);
        if (!document || document.type !== theme_check_common_1.SourceCodeType.LiquidHtml || document.ast instanceof Error) {
            return exports.PREVENT_DEFAULT;
        }
        const [currentNode, ancestors] = (0, theme_check_common_2.findCurrentNode)(document.ast, document.textDocument.offsetAt(params.position));
        const promises = this.providers.map((p) => p.documentHighlights(currentNode, ancestors, params).catch(() => null));
        const results = await Promise.all(promises);
        return (_a = results.find(Boolean)) !== null && _a !== void 0 ? _a : exports.PREVENT_DEFAULT;
    }
}
exports.DocumentHighlightsProvider = DocumentHighlightsProvider;
//# sourceMappingURL=DocumentHighlightsProvider.js.map

/***/ }),

/***/ 3036:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlTagNameDocumentHighlightsProvider = void 0;
const htmlTagNames_1 = __webpack_require__(2936);
class HtmlTagNameDocumentHighlightsProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
    }
    async documentHighlights(node, ancestors, params) {
        var _a;
        const textDocument = (_a = this.documentManager.get(params.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.textDocument;
        if (!textDocument)
            return null;
        const ranges = (0, htmlTagNames_1.getHtmlElementNameRanges)(node, ancestors, params, textDocument);
        if (!ranges)
            return null;
        return ranges.map((range) => ({ range }));
    }
}
exports.HtmlTagNameDocumentHighlightsProvider = HtmlTagNameDocumentHighlightsProvider;
//# sourceMappingURL=HtmlTagNameDocumentHighlightsProvider.js.map

/***/ }),

/***/ 7903:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidBlockTagDocumentHighlightsProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
class LiquidBlockTagDocumentHighlightsProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
    }
    async documentHighlights(node, ancestors, params) {
        var _a;
        const textDocument = (_a = this.documentManager.get(params.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.textDocument;
        if (!textDocument)
            return null;
        if (isLiquidBranch(node)) {
            node = ancestors.at(-1);
        }
        if (!isLiquidBlock(node) || !node.blockEndPosition) {
            return null;
        }
        const nameOffset = node.source.indexOf(node.name, node.blockStartPosition.start);
        const endblockNameOffset = node.source.indexOf('end' + node.name, node.blockEndPosition.start);
        const ranges = [
            vscode_languageserver_1.Range.create(textDocument.positionAt(nameOffset), textDocument.positionAt(nameOffset + node.name.length)),
            vscode_languageserver_1.Range.create(textDocument.positionAt(endblockNameOffset), 
            // "end" is 3 characters, end$name is 3 + node.name.length.
            textDocument.positionAt(endblockNameOffset + 3 + node.name.length)),
        ];
        // highlighting the elsif/else branches as well
        if (isLiquidTag(node) && node.children && node.children.every(isLiquidBranch)) {
            for (const branch of node.children.filter((x) => x.name !== null)) {
                const branchNameOffset = node.source.indexOf(branch.name, branch.blockStartPosition.start);
                ranges.push(vscode_languageserver_1.Range.create(textDocument.positionAt(branchNameOffset), textDocument.positionAt(branchNameOffset + branch.name.length)));
            }
        }
        return ranges.map((range) => ({ range }));
    }
}
exports.LiquidBlockTagDocumentHighlightsProvider = LiquidBlockTagDocumentHighlightsProvider;
function isLiquidBranch(node) {
    return node.type === liquid_html_parser_1.NodeTypes.LiquidBranch;
}
function isLiquidBlock(node) {
    return node.type === liquid_html_parser_1.NodeTypes.LiquidTag || node.type === liquid_html_parser_1.NodeTypes.LiquidRawTag;
}
function isLiquidTag(node) {
    return node.type === liquid_html_parser_1.NodeTypes.LiquidTag;
}
//# sourceMappingURL=LiquidBlockTagDocumentHighlightsProvider.js.map

/***/ }),

/***/ 7573:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidBlockTagDocumentHighlightsProvider = exports.HtmlTagNameDocumentHighlightsProvider = void 0;
var HtmlTagNameDocumentHighlightsProvider_1 = __webpack_require__(3036);
Object.defineProperty(exports, "HtmlTagNameDocumentHighlightsProvider", ({ enumerable: true, get: function () { return HtmlTagNameDocumentHighlightsProvider_1.HtmlTagNameDocumentHighlightsProvider; } }));
var LiquidBlockTagDocumentHighlightsProvider_1 = __webpack_require__(7903);
Object.defineProperty(exports, "LiquidBlockTagDocumentHighlightsProvider", ({ enumerable: true, get: function () { return LiquidBlockTagDocumentHighlightsProvider_1.LiquidBlockTagDocumentHighlightsProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4437:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentLinksProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_1 = __webpack_require__(7532);
const vscode_uri_1 = __webpack_require__(2186);
const theme_check_common_2 = __webpack_require__(5309);
class DocumentLinksProvider {
    constructor(documentManager, findThemeRootURI) {
        this.documentManager = documentManager;
        this.findThemeRootURI = findThemeRootURI;
    }
    async documentLinks(uriString) {
        const sourceCode = this.documentManager.get(uriString);
        if (!sourceCode ||
            sourceCode.type !== theme_check_common_1.SourceCodeType.LiquidHtml ||
            sourceCode.ast instanceof Error) {
            return [];
        }
        const rootUri = await this.findThemeRootURI(uriString);
        const visitor = documentLinksVisitor(sourceCode.textDocument, vscode_uri_1.URI.parse(rootUri));
        return (0, theme_check_common_2.visit)(sourceCode.ast, visitor);
    }
}
exports.DocumentLinksProvider = DocumentLinksProvider;
function documentLinksVisitor(textDocument, root) {
    return {
        LiquidTag(node) {
            // {% render 'snippet' %}
            // {% include 'snippet' %}
            if ((node.name === 'render' || node.name === 'include') &&
                typeof node.markup !== 'string' &&
                isLiquidString(node.markup.snippet)) {
                const snippet = node.markup.snippet;
                return vscode_languageserver_1.DocumentLink.create(range(textDocument, snippet), vscode_uri_1.Utils.resolvePath(root, 'snippets', snippet.value + '.liquid').toString());
            }
            // {% section 'section' %}
            if (node.name === 'section' &&
                typeof node.markup !== 'string' &&
                isLiquidString(node.markup)) {
                const sectionName = node.markup;
                return vscode_languageserver_1.DocumentLink.create(range(textDocument, sectionName), vscode_uri_1.Utils.resolvePath(root, 'sections', sectionName.value + '.liquid').toString());
            }
            // {% content_for 'block', type: 'block_name' %}
            if (node.name === liquid_html_parser_1.NamedTags.content_for && typeof node.markup !== 'string') {
                const typeArg = node.markup.args.find((arg) => arg.name === 'type');
                if (typeArg && typeArg.value.type === 'String') {
                    return vscode_languageserver_1.DocumentLink.create(range(textDocument, typeArg.value), vscode_uri_1.Utils.resolvePath(root, 'blocks', typeArg.value.value + '.liquid').toString());
                }
            }
        },
        // {{ 'theme.js' | asset_url }}
        LiquidVariable(node) {
            if (node.filters.length === 0 || node.filters[0].name !== 'asset_url') {
                return;
            }
            if (!isLiquidString(node.expression)) {
                return;
            }
            const expression = node.expression;
            return vscode_languageserver_1.DocumentLink.create(range(textDocument, node.expression), vscode_uri_1.Utils.resolvePath(root, 'assets', expression.value).toString());
        },
    };
}
function range(textDocument, node) {
    const start = textDocument.positionAt(node.position.start + 1);
    const end = textDocument.positionAt(node.position.end - 1);
    return vscode_languageserver_1.Range.create(start, end);
}
function isLiquidString(node) {
    return node.type === liquid_html_parser_1.NodeTypes.String;
}
//# sourceMappingURL=DocumentLinksProvider.js.map

/***/ }),

/***/ 774:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentLinksProvider = void 0;
var DocumentLinksProvider_1 = __webpack_require__(4437);
Object.defineProperty(exports, "DocumentLinksProvider", ({ enumerable: true, get: function () { return DocumentLinksProvider_1.DocumentLinksProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8374:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentManager = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_textdocument_1 = __webpack_require__(8041);
const progress_1 = __webpack_require__(1760);
const theme_check_common_2 = __webpack_require__(5309);
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
class DocumentManager {
    constructor(fs, connection, clientCapabilities, getModeForUri, isValidSchema) {
        this.fs = fs;
        this.connection = connection;
        this.clientCapabilities = clientCapabilities;
        this.getModeForUri = getModeForUri;
        this.isValidSchema = isValidSchema;
        /**
         * The preload method is used to pre-load and pre-parse all the files in the
         * theme. It is smart and only will load files that are not already in the
         * DocumentManager.
         *
         * Files that are loaded from the AbstractFileSystem will have a version of `undefined`.
         */
        this.preload = (0, theme_check_common_1.memoize)(async (rootUri) => {
            if (!this.fs)
                throw new Error('Cannot call preload without a FileSystem');
            const { fs, connection, clientCapabilities } = this;
            const progress = progress_1.Progress.create(connection, clientCapabilities, `preload#${rootUri}`);
            progress.start('Initializing Liquid LSP');
            // We'll only load the files that aren't already in the store. No need to
            // parse a file we already parsed.
            const filesToLoad = await (0, theme_check_common_1.recursiveReadDirectory)(this.fs, rootUri, ([uri]) => /\.(liquid|json)$/.test(uri) && !this.sourceCodes.has(uri));
            progress.report(10, 'Preloading files');
            let [i, n] = [0, filesToLoad.length];
            await Promise.all(filesToLoad.map(async (file) => {
                // This is what is important, we are loading the file from the file system
                // And setting their initial version to `undefined` to mean "on disk".
                this.set(file, await fs.readFile(file), undefined);
                // This is just doing progress reporting
                if (++i % 10 === 0) {
                    const message = `Preloading files [${i}/${n}]`;
                    progress.report((0, progress_1.percent)(i, n, 10), message);
                }
            }));
            progress.end('Completed');
        }, (rootUri) => rootUri);
        this.sourceCodes = new Map();
        this.recentlyRenamed = new Set();
    }
    open(uri, source, version) {
        return this.set(uri, source, version);
    }
    change(uri, source, version) {
        return this.set(uri, source, version);
    }
    async changeFromDisk(uri) {
        if (!this.fs)
            throw new Error('Cannot call changeFromDisk without a FileSystem');
        this.change(uri, await this.fs.readFile(uri), undefined);
    }
    close(uri) {
        const sourceCode = this.sourceCodes.get(uri);
        if (!sourceCode)
            return;
        return this.set(uri, sourceCode.source, undefined);
    }
    delete(uri) {
        return this.sourceCodes.delete(uri);
    }
    rename(oldUri, newUri) {
        this.trackRename(oldUri, newUri);
        const sourceCode = this.sourceCodes.get(oldUri);
        if (!sourceCode)
            return;
        this.sourceCodes.delete(oldUri);
        this.set(newUri, sourceCode.source, sourceCode.version);
    }
    theme(root, includeFilesFromDisk = false) {
        return [...this.sourceCodes.values()]
            .filter((sourceCode) => sourceCode.uri.startsWith(root))
            .filter((sourceCode) => includeFilesFromDisk || sourceCode.version !== undefined);
    }
    get openDocuments() {
        return [...this.sourceCodes.values()].filter((sourceCode) => sourceCode.version !== undefined);
    }
    get(uri) {
        return this.sourceCodes.get(theme_check_common_1.path.normalize(uri));
    }
    has(uri) {
        return this.sourceCodes.has(theme_check_common_1.path.normalize(uri));
    }
    /** Used to prevent cache busting twice for the same operation */
    hasRecentRename(uri) {
        return this.recentlyRenamed.has(uri);
    }
    clearRecentRename(uri) {
        this.recentlyRenamed.delete(uri);
    }
    set(uri, source, version) {
        uri = theme_check_common_1.path.normalize(uri);
        // We only support json and liquid files.
        if (!/\.(json|liquid)$/.test(uri) || /\.(s?css|js).liquid$/.test(uri)) {
            return;
        }
        this.sourceCodes.set(uri, this.augmentedSourceCode(uri, source, version));
    }
    augmentedSourceCode(uri, source, version) {
        var _a;
        const sourceCode = (0, theme_check_common_1.toSourceCode)(uri, source, version);
        const textDocument = vscode_languageserver_textdocument_1.TextDocument.create(uri, sourceCode.type, (_a = sourceCode.version) !== null && _a !== void 0 ? _a : 0, // create doesn't let us put undefined here.
        sourceCode.source);
        switch (sourceCode.type) {
            case theme_check_common_1.SourceCodeType.JSON:
                return {
                    ...sourceCode,
                    textDocument,
                };
            case theme_check_common_1.SourceCodeType.LiquidHtml:
                return {
                    ...sourceCode,
                    textDocument,
                    /** Lazy and only computed once per file version */
                    getSchema: (0, theme_check_common_1.memo)(async () => {
                        if (!this.getModeForUri || !this.isValidSchema)
                            return undefined;
                        const mode = await this.getModeForUri(uri);
                        return (0, theme_check_common_1.toSchema)(mode, uri, sourceCode, this.isValidSchema, false);
                    }),
                    /** Lazy and only computed once per file version */
                    getLiquidDoc: (0, theme_check_common_1.memo)(async (snippetName) => {
                        if ((0, theme_check_common_1.isError)(sourceCode.ast))
                            return undefined;
                        return (0, theme_check_common_2.getSnippetDefinition)(sourceCode.ast, snippetName);
                    }),
                };
            default:
                return (0, theme_check_common_1.assertNever)(sourceCode);
        }
    }
    /**
     * The workspace/onDidRenameFile notification is sent when a file is renamed in the workspace (via a user gesture)
     * The workspace/onDidChangeWatchedFiles notification is sent when a file is renamed on disk (via a file system event)
     *
     * The order is not guaranteed, but it seems to be true that onDidRenameFile happens before onDidChangeWatchedFiles.
     *
     * In the off-chance that the order is reversed, we'll have the sleep timer to clean up the state.
     */
    trackRename(oldUri, newUri) {
        this.recentlyRenamed.add(oldUri);
        this.recentlyRenamed.add(newUri);
        sleep(2000).then(() => {
            this.clearRecentRename(oldUri);
            this.clearRecentRename(newUri);
        });
    }
}
exports.DocumentManager = DocumentManager;
//# sourceMappingURL=DocumentManager.js.map

/***/ }),

/***/ 1682:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DocumentManager = void 0;
var DocumentManager_1 = __webpack_require__(8374);
Object.defineProperty(exports, "DocumentManager", ({ enumerable: true, get: function () { return DocumentManager_1.DocumentManager; } }));
__exportStar(__webpack_require__(7663), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7663:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isJsonSourceCode = exports.isLiquidSourceCode = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const isLiquidSourceCode = (file) => file.type === theme_check_common_1.SourceCodeType.LiquidHtml;
exports.isLiquidSourceCode = isLiquidSourceCode;
const isJsonSourceCode = (file) => file.type === theme_check_common_1.SourceCodeType.JSON;
exports.isJsonSourceCode = isJsonSourceCode;
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 6648:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnTypeFormattingProvider = void 0;
const BracketsAutoclosingOnTypeFormattingProvider_1 = __webpack_require__(8344);
const HtmlElementAutoclosingOnTypeFormattingProvider_1 = __webpack_require__(4748);
class OnTypeFormattingProvider {
    constructor(documentManager, setCursorPosition = async () => { }) {
        this.documentManager = documentManager;
        this.setCursorPosition = setCursorPosition;
        this.providers = [
            new BracketsAutoclosingOnTypeFormattingProvider_1.BracketsAutoclosingOnTypeFormattingProvider(),
            new HtmlElementAutoclosingOnTypeFormattingProvider_1.HtmlElementAutoclosingOnTypeFormattingProvider(setCursorPosition),
        ];
    }
    async onTypeFormatting(params) {
        var _a;
        const document = this.documentManager.get(params.textDocument.uri);
        if (!document)
            return null;
        const results = this.providers.map((provider) => provider.onTypeFormatting(document, params));
        return (_a = results.find((result) => result !== null)) !== null && _a !== void 0 ? _a : null;
    }
}
exports.OnTypeFormattingProvider = OnTypeFormattingProvider;
//# sourceMappingURL=OnTypeFormattingProvider.js.map

/***/ }),

/***/ 9343:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnTypeFormattingProvider = void 0;
var OnTypeFormattingProvider_1 = __webpack_require__(6648);
Object.defineProperty(exports, "OnTypeFormattingProvider", ({ enumerable: true, get: function () { return OnTypeFormattingProvider_1.OnTypeFormattingProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8344:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BracketsAutoclosingOnTypeFormattingProvider = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
class BracketsAutoclosingOnTypeFormattingProvider {
    /**
     * This very complex piece of code here exists to provide a good autoclosing UX.
     *
     * The story is kind of long so here goes...
     *
     * What we want:
     * 1. Basic autoclosing of {{, {% with the corresponding pair (and spaces)
     *   - user types: {{
     *   - user sees: {{ | }} (with cursor position at |)
     * 2. Autoclosing of {{- with -}}, {%- with -%}
     *   - user types: {{-
     *   - user sees: {{- | -}} (with cursor at |)
     * 3. User adds whitespace stripping on one side of the braces of an existing tag
     *   - user types: - at | in `{{| drop }}`
     *   - user sees: {{- drop }}
     *
     * Why we can't do it with autoclosingPairs:
     *   - VS Code's settings accepts autoclosingPairs and autocloseBefore
     *     - autoclosingPairs is a set of pairs that should be autoclosed (e.g. ['{%', '%}'])
     *     - autocloseBefore is a character set of 'allowed next characters' that would cause a closing pair
     *   - If we put a space (' ') the autoclosingPairs set, then (3) from above becomes funky:
     *     - assume autoclosingPairs = {|}, {{|}}, {{ | }}
     *     - user types: a space at | in `{{| drop }}`
     *     - user sees: {{   }}drop }}
     *   - This happens because the space is an autocloseBefore character, it sees a space after the cursor
     *     so it closes '{{ ' with ' }}' at the cursor position, resulting in '{{  }}drop }}'
     *   - Something similar happens if we include the `-` in the autoclosing pairs
     *   - This is annoying!
     *
     * So our solution is the following:
     * 1. We change the pairs to include the closing space (this way our cursor remains where we want it to be)
     *    - {{| }}
     *    - {%| %}
     * 2. We add this OnTypeFormattingProvider that does the following "fixes":
     *    - {{| }}   into {{ | }}
     *    - {{ -| }} into {{- | -}}
     *    - {%| %}   into {% | %}
     *    - {% -| %} into {%- | -%}
     *
     * This lets us avoid the unnecessary close and accomplish 1, 2 and 3 :)
     *
     * Fallback for editor.onTypeFormatting: false is to let the user type the `-` on both sides manually
     */
    onTypeFormatting(document, params) {
        const textDocument = document.textDocument;
        const ch = params.ch;
        // position is position of cursor so 1 ahead of char
        const { line, character } = params.position;
        // This is an early return to avoid doing currentLine.at(-1);
        if ((ch === ' ' && character <= 2) || character <= 1)
            return null;
        const currentLineRange = vscode_languageserver_protocol_1.Range.create(vscode_languageserver_protocol_1.Position.create(line, 0), vscode_languageserver_protocol_1.Position.create(line + 1, 0));
        const currentLine = textDocument.getText(currentLineRange);
        const charIdx = ch === ' ' ? character - 2 : character - 1;
        const char = currentLine.at(charIdx);
        switch (char) {
            // here we fix {{| }} with {{ | }}
            // here we fix {%| %} with {% | %}
            case '{':
            case '%': {
                const chars = currentLine.slice(charIdx - 1, charIdx + 4);
                if (chars === '{{ }}' || chars === '{% %}') {
                    return [vscode_languageserver_protocol_1.TextEdit.insert(vscode_languageserver_protocol_1.Position.create(line, charIdx + 1), ' ')];
                }
            }
            // here we fix {{ -| }} to {{- | -}}
            // here we fix {% -| }} to {%- | -%}
            case '-': {
                // remember 0-index means 4th char
                if (charIdx < 3)
                    return null;
                const chars = currentLine.slice(charIdx - 3, charIdx + 4);
                if (chars === '{{ - }}' || chars === '{% - %}') {
                    // Here we're being clever and doing the {{- -}} if the first character
                    // you type is a `-`, leaving your cursor in the middle :)
                    return [
                        // Start with
                        //   {{ - }}
                        //     ^ start replace
                        //       ^ end replace (excluded)
                        // Replace with '- ', get
                        //   {{- }}
                        vscode_languageserver_protocol_1.TextEdit.replace(vscode_languageserver_protocol_1.Range.create(vscode_languageserver_protocol_1.Position.create(line, charIdx - 1), vscode_languageserver_protocol_1.Position.create(line, charIdx + 1)), '- '),
                        // Start with
                        //   {{ - }}
                        //      ^ char
                        //        ^ insertion point
                        // Insert ' ' , get
                        //   {{ - -}}
                        // Both together and you get {{- -}} with your cursor in the middle
                        vscode_languageserver_protocol_1.TextEdit.insert(vscode_languageserver_protocol_1.Position.create(line, charIdx + 2), '-'),
                    ];
                }
            }
        }
        return null;
    }
}
exports.BracketsAutoclosingOnTypeFormattingProvider = BracketsAutoclosingOnTypeFormattingProvider;
//# sourceMappingURL=BracketsAutoclosingOnTypeFormattingProvider.js.map

/***/ }),

/***/ 4748:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlElementAutoclosingOnTypeFormattingProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const theme_check_common_1 = __webpack_require__(5309);
const defer = (fn) => setTimeout(fn, 10);
/**
 * This class is responsible for closing dangling HTML elements.
 *
 * Say user types <script>, then we'd want `</script>` to be inserted.
 *
 * Thing is we want to do that only if the `</script>` isn't already present in the file.
 * If the user goes to edit `<script>` and types `>`, we don't want to insert `</script>` again.
 *
 * The "trick" we use here is to only add the `</script>` part if the
 * document.ast is an instance of LiquidHTMLASTParsingError and that the
 * unclosed element is of the correct name.
 *
 * @example:
 * ```html
 *   <div id="main">
 *     <div id="inner">|
 *   </div>
 * ```
 * - The user just finished typing `<div id="inner">` inside the div#main.
 * - This parses as though the div#inner is closed and div#main isn't.
 * - That's OK.
 * - This makes a LiquidHTMLASTParsingError with unclosed div (the div#main).
 * - Since
 *     - the cursor is at the end of a div, and
 *     - the unclosed element is a div,
 *   Then we can insert one automatically after the cursor and fix the AST.
 *
 * ```html
 *  <div id="main">
 *    <div id="inner">|</div>
 *  </div>
 * ```
 */
class HtmlElementAutoclosingOnTypeFormattingProvider {
    constructor(setCursorPosition) {
        this.setCursorPosition = setCursorPosition;
    }
    onTypeFormatting(document, params) {
        const textDocument = document.textDocument;
        const ch = params.ch;
        // position is position of cursor so 1 ahead of char
        const { line, character } = params.position;
        switch (ch) {
            // here we fix `>` with `</$unclosed>`
            case '>': {
                const ast = document.ast;
                if (ast instanceof liquid_html_parser_1.LiquidHTMLASTParsingError &&
                    ast.unclosed &&
                    ast.unclosed.type === liquid_html_parser_1.NodeTypes.HtmlElement &&
                    (ast.unclosed.blockStartPosition.end === textDocument.offsetAt(params.position) ||
                        shouldClose(ast.unclosed, nodeAtCursor(textDocument, params.position)))) {
                    defer(() => this.setCursorPosition(textDocument, params.position));
                    return [vscode_languageserver_protocol_1.TextEdit.insert(vscode_languageserver_protocol_1.Position.create(line, character), `</${ast.unclosed.name}>`)];
                }
                else if (!(ast instanceof Error)) {
                    // Even though we accept dangling <div>s inside {% if condition %}, we prefer to auto-insert the </div>
                    const [node] = (0, theme_check_common_1.findCurrentNode)(ast, textDocument.offsetAt(params.position));
                    if (isDanglingHtmlElement(node)) {
                        defer(() => this.setCursorPosition(textDocument, params.position));
                        return [vscode_languageserver_protocol_1.TextEdit.insert(vscode_languageserver_protocol_1.Position.create(line, character), `</${(0, liquid_html_parser_1.getName)(node)}>`)];
                    }
                }
            }
        }
        return null;
    }
}
exports.HtmlElementAutoclosingOnTypeFormattingProvider = HtmlElementAutoclosingOnTypeFormattingProvider;
function nodeAtCursor(textDocument, position) {
    var _a;
    const text = textDocument.getText(vscode_languageserver_protocol_1.Range.create(vscode_languageserver_protocol_1.Position.create(0, 0), position));
    try {
        const ast = (0, liquid_html_parser_1.toLiquidHtmlAST)(text, {
            allowUnclosedDocumentNode: true,
            mode: 'tolerant',
        });
        const [node, ancestors] = (0, theme_check_common_1.findCurrentNode)(ast, textDocument.offsetAt(position));
        if (((_a = ancestors.at(-1)) === null || _a === void 0 ? void 0 : _a.type) === liquid_html_parser_1.NodeTypes.HtmlElement)
            return ancestors.at(-1);
        if (node.type === liquid_html_parser_1.NodeTypes.LiquidBranch)
            return ancestors.at(-1);
        return node;
    }
    catch {
        return null;
    }
}
function shouldClose(unclosed, node) {
    if (node === null || !('blockStartPosition' in node))
        return false;
    return ([liquid_html_parser_1.NodeTypes.HtmlElement, liquid_html_parser_1.NodeTypes.LiquidTag, liquid_html_parser_1.NodeTypes.HtmlRawNode].includes(unclosed.type) &&
        (0, liquid_html_parser_1.getName)(node) === unclosed.name);
}
function isDanglingHtmlElement(node) {
    return (node !== null &&
        node.type === liquid_html_parser_1.NodeTypes.HtmlElement &&
        node.blockEndPosition.start === node.blockEndPosition.end);
}
//# sourceMappingURL=HtmlElementAutoclosingOnTypeFormattingProvider.js.map

/***/ }),

/***/ 5377:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HoverProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const TypeSystem_1 = __webpack_require__(9242);
const providers_1 = __webpack_require__(2571);
const HtmlAttributeValueHoverProvider_1 = __webpack_require__(163);
const theme_check_common_2 = __webpack_require__(5309);
const LiquidDocTagHoverProvider_1 = __webpack_require__(3486);
class HoverProvider {
    constructor(documentManager, themeDocset, getMetafieldDefinitions, getTranslationsForURI = async () => ({}), getSettingsSchemaForURI = async () => [], getSnippetDefinitionForURI = async (_uri, snippetName) => ({
        name: snippetName,
    })) {
        this.documentManager = documentManager;
        this.themeDocset = themeDocset;
        this.getMetafieldDefinitions = getMetafieldDefinitions;
        this.getTranslationsForURI = getTranslationsForURI;
        this.getSettingsSchemaForURI = getSettingsSchemaForURI;
        this.getSnippetDefinitionForURI = getSnippetDefinitionForURI;
        this.providers = [];
        const typeSystem = new TypeSystem_1.TypeSystem(themeDocset, getSettingsSchemaForURI, getMetafieldDefinitions);
        this.providers = [
            new providers_1.LiquidTagHoverProvider(themeDocset),
            new providers_1.LiquidFilterHoverProvider(themeDocset),
            new providers_1.LiquidObjectHoverProvider(typeSystem),
            new providers_1.LiquidObjectAttributeHoverProvider(typeSystem),
            new providers_1.HtmlTagHoverProvider(),
            new providers_1.HtmlAttributeHoverProvider(),
            new HtmlAttributeValueHoverProvider_1.HtmlAttributeValueHoverProvider(),
            new providers_1.TranslationHoverProvider(getTranslationsForURI, documentManager),
            new providers_1.RenderSnippetHoverProvider(getSnippetDefinitionForURI),
            new providers_1.RenderSnippetParameterHoverProvider(getSnippetDefinitionForURI),
            new LiquidDocTagHoverProvider_1.LiquidDocTagHoverProvider(),
        ];
    }
    async hover(params) {
        var _a;
        const uri = params.textDocument.uri;
        const document = this.documentManager.get(uri);
        // Supports only Liquid resources
        if ((document === null || document === void 0 ? void 0 : document.type) !== theme_check_common_1.SourceCodeType.LiquidHtml || document.ast instanceof Error) {
            return null;
        }
        const [currentNode, ancestors] = (0, theme_check_common_2.findCurrentNode)(document.ast, document.textDocument.offsetAt(params.position));
        const promises = this.providers.map((p) => p.hover(currentNode, ancestors, params));
        const results = await Promise.all(promises);
        return (_a = results.find(Boolean)) !== null && _a !== void 0 ? _a : null;
    }
}
exports.HoverProvider = HoverProvider;
//# sourceMappingURL=HoverProvider.js.map

/***/ }),

/***/ 2014:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HoverProvider = void 0;
var HoverProvider_1 = __webpack_require__(5377);
Object.defineProperty(exports, "HoverProvider", ({ enumerable: true, get: function () { return HoverProvider_1.HoverProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5417:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlAttributeHoverProvider = void 0;
const docset_1 = __webpack_require__(5338);
const utils_1 = __webpack_require__(6813);
class HtmlAttributeHoverProvider {
    async hover(currentNode, ancestors) {
        var _a;
        const attributeNode = ancestors.at(-1);
        const tagNode = (0, utils_1.findLast)(ancestors, utils_1.isNamedHtmlElementNode);
        if (!attributeNode ||
            !tagNode ||
            !(0, utils_1.isTextNode)(currentNode) ||
            !(0, utils_1.isHtmlAttribute)(attributeNode) ||
            !attributeNode.name.includes(currentNode) ||
            attributeNode.name.length > 1 ||
            !(0, utils_1.isNamedHtmlElementNode)(tagNode)) {
            return null;
        }
        const name = currentNode.value;
        const tagName = (0, utils_1.getCompoundName)(tagNode);
        const tagEntry = docset_1.HtmlData.tags.find((tag) => tag.name === tagName);
        const tagEntryAttributes = (tagEntry === null || tagEntry === void 0 ? void 0 : tagEntry.attributes) || [];
        const attribute = (_a = docset_1.HtmlData.globalAttributes.find((attr) => attr.name === name)) !== null && _a !== void 0 ? _a : tagEntryAttributes.find((attr) => attr.name === name);
        if (!attribute) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, docset_1.renderHtmlEntry)(attribute, 'references' in attribute ? undefined : tagEntry),
            },
        };
    }
}
exports.HtmlAttributeHoverProvider = HtmlAttributeHoverProvider;
//# sourceMappingURL=HtmlAttributeHoverProvider.js.map

/***/ }),

/***/ 163:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlAttributeValueHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const docset_1 = __webpack_require__(5338);
const utils_1 = __webpack_require__(6813);
class HtmlAttributeValueHoverProvider {
    async hover(currentNode, ancestors) {
        var _a;
        const attributeNode = (0, utils_1.findLast)(ancestors, utils_1.isHtmlAttribute);
        const tagNode = (0, utils_1.findLast)(ancestors, utils_1.isNamedHtmlElementNode);
        if (!(0, utils_1.isTextNode)(currentNode) ||
            !attributeNode ||
            !tagNode ||
            !(0, utils_1.isHtmlAttribute)(attributeNode) ||
            !(0, utils_1.isNamedHtmlElementNode)(tagNode) ||
            attributeNode.type === liquid_html_parser_1.NodeTypes.AttrEmpty ||
            attributeNode.value.length !== 1 ||
            !attributeNode.value.includes(currentNode)) {
            return null;
        }
        const valueName = currentNode.value;
        const attrName = (0, utils_1.getCompoundName)(attributeNode);
        const tagName = (0, utils_1.getCompoundName)(tagNode);
        const tagEntry = docset_1.HtmlData.tags.find((tag) => tag.name === tagName);
        const attribute = (_a = docset_1.HtmlData.globalAttributes.find((attr) => attr.name === attrName)) !== null && _a !== void 0 ? _a : tagEntry === null || tagEntry === void 0 ? void 0 : tagEntry.attributes.find((attr) => attr.name === attrName);
        const valueSetName = attribute === null || attribute === void 0 ? void 0 : attribute.valueSet;
        const valueSetEntry = docset_1.HtmlData.valueSets.find((valueSet) => valueSet.name === valueSetName);
        const valueEntry = valueSetEntry === null || valueSetEntry === void 0 ? void 0 : valueSetEntry.values.find((value) => value.name === valueName);
        if (!valueEntry) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, docset_1.renderHtmlEntry)(valueEntry, (attribute === null || attribute === void 0 ? void 0 : attribute.references) ? attribute : tagEntry),
            },
        };
    }
}
exports.HtmlAttributeValueHoverProvider = HtmlAttributeValueHoverProvider;
//# sourceMappingURL=HtmlAttributeValueHoverProvider.js.map

/***/ }),

/***/ 5469:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlTagHoverProvider = void 0;
const docset_1 = __webpack_require__(5338);
const utils_1 = __webpack_require__(6813);
class HtmlTagHoverProvider {
    async hover(currentNode, ancestors) {
        let name;
        const parentNode = ancestors.at(-1);
        if ((0, utils_1.isNamedHtmlElementNode)(currentNode) && typeof currentNode.name === 'string') {
            name = currentNode.name;
        }
        else if ((0, utils_1.isTextNode)(currentNode) &&
            parentNode &&
            (0, utils_1.isNamedHtmlElementNode)(parentNode) &&
            typeof parentNode.name !== 'string' &&
            parentNode.name.includes(currentNode) &&
            parentNode.name.length === 1) {
            name = currentNode.value;
        }
        if (!name) {
            return null;
        }
        const entry = docset_1.HtmlData.tags.find((tag) => tag.name === name);
        if (!entry) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, docset_1.renderHtmlEntry)(entry),
            },
        };
    }
}
exports.HtmlTagHoverProvider = HtmlTagHoverProvider;
//# sourceMappingURL=HtmlTagHoverProvider.js.map

/***/ }),

/***/ 3486:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidDocTagHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const liquidDoc_1 = __webpack_require__(8359);
class LiquidDocTagHoverProvider {
    constructor() { }
    async hover(currentNode, ancestors) {
        const parentNode = ancestors.at(-1);
        let docTagNode;
        // We could be hovering on the liquidDoc tag itself
        if (currentNode.type === liquid_html_parser_1.NodeTypes.LiquidDocParamNode ||
            currentNode.type === liquid_html_parser_1.NodeTypes.LiquidDocDescriptionNode ||
            currentNode.type === liquid_html_parser_1.NodeTypes.LiquidDocExampleNode) {
            docTagNode = currentNode;
        }
        // or we could be hovering on the liquidDoc tag's text
        if (((parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === liquid_html_parser_1.NodeTypes.LiquidDocParamNode ||
            (parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === liquid_html_parser_1.NodeTypes.LiquidDocDescriptionNode ||
            (parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === liquid_html_parser_1.NodeTypes.LiquidDocExampleNode) &&
            currentNode.type === liquid_html_parser_1.NodeTypes.TextNode) {
            docTagNode = parentNode;
        }
        if (!docTagNode) {
            return null;
        }
        const docTagData = liquidDoc_1.SUPPORTED_LIQUID_DOC_TAG_HANDLES[docTagNode.name];
        if (!docTagData) {
            return null;
        }
        return {
            contents: {
                kind: vscode_languageserver_1.MarkupKind.Markdown,
                value: (0, liquidDoc_1.formatLiquidDocTagHandle)(docTagNode.name, docTagData.description, docTagData.example),
            },
        };
    }
}
exports.LiquidDocTagHoverProvider = LiquidDocTagHoverProvider;
//# sourceMappingURL=LiquidDocTagHoverProvider.js.map

/***/ }),

/***/ 6394:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidFilterHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const docset_1 = __webpack_require__(5338);
class LiquidFilterHoverProvider {
    constructor(themeDocset) {
        this.themeDocset = themeDocset;
    }
    async hover(currentNode) {
        if (currentNode.type !== liquid_html_parser_1.NodeTypes.LiquidFilter) {
            return null;
        }
        const name = currentNode.name;
        const entries = await this.themeDocset.filters();
        const entry = entries.find((entry) => entry.name === name);
        if (!entry) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, docset_1.render)(entry, undefined, 'filter'),
            },
        };
    }
}
exports.LiquidFilterHoverProvider = LiquidFilterHoverProvider;
//# sourceMappingURL=LiquidFilterHoverProvider.js.map

/***/ }),

/***/ 6459:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidObjectAttributeHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const TypeSystem_1 = __webpack_require__(9242);
const docset_1 = __webpack_require__(5338);
class LiquidObjectAttributeHoverProvider {
    constructor(typeSystem) {
        this.typeSystem = typeSystem;
    }
    async hover(currentNode, ancestors, params) {
        var _a;
        const parentNode = ancestors.at(-1);
        if (currentNode.type !== liquid_html_parser_1.NodeTypes.String ||
            !parentNode ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.VariableLookup ||
            !parentNode.lookups.includes(currentNode)) {
            return null;
        }
        const lookupIndex = parentNode.lookups.findIndex((lookup) => lookup === currentNode);
        const node = {
            ...parentNode,
            lookups: parentNode.lookups.slice(0, lookupIndex),
        };
        const parentType = await this.typeSystem.inferType(node, ancestors[0], params.textDocument.uri);
        if ((0, TypeSystem_1.isArrayType)(parentType)) {
            return null;
        }
        const objectMap = await this.typeSystem.objectMap(params.textDocument.uri, ancestors[0]);
        const parentEntry = objectMap[parentType];
        if (!parentEntry) {
            return null;
        }
        const parentTypeProperties = ((_a = objectMap[parentType]) === null || _a === void 0 ? void 0 : _a.properties) || [];
        const entry = parentTypeProperties.find((p) => p.name === currentNode.value);
        if (!entry) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, docset_1.render)(entry),
            },
        };
    }
}
exports.LiquidObjectAttributeHoverProvider = LiquidObjectAttributeHoverProvider;
//# sourceMappingURL=LiquidObjectAttributeHoverProvider.js.map

/***/ }),

/***/ 6377:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidObjectHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const TypeSystem_1 = __webpack_require__(9242);
const docset_1 = __webpack_require__(5338);
class LiquidObjectHoverProvider {
    constructor(typeSystem) {
        this.typeSystem = typeSystem;
    }
    async hover(currentNode, ancestors, params) {
        var _a;
        if (currentNode.type !== liquid_html_parser_1.NodeTypes.VariableLookup &&
            currentNode.type !== liquid_html_parser_1.NodeTypes.AssignMarkup) {
            return null;
        }
        if (!currentNode.name) {
            return null;
        }
        let node = currentNode;
        if (node.type === liquid_html_parser_1.NodeTypes.VariableLookup) {
            node = {
                ...currentNode,
                lookups: [],
            };
        }
        const type = await this.typeSystem.inferType(node, ancestors[0], params.textDocument.uri);
        const objectMap = await this.typeSystem.objectMap(params.textDocument.uri, ancestors[0]);
        const entry = objectMap[(0, TypeSystem_1.isArrayType)(type) ? type.valueType : type];
        if (type === 'untyped') {
            return null;
        }
        if (!entry) {
            const entryByName = (_a = objectMap[currentNode.name]) !== null && _a !== void 0 ? _a : {};
            return {
                contents: {
                    kind: 'markdown',
                    value: (0, docset_1.render)({
                        ...entryByName,
                        name: currentNode.name,
                    }, type, 'object'),
                },
            };
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, docset_1.render)({ ...entry, name: currentNode.name }, type, 'object'),
            },
        };
    }
}
exports.LiquidObjectHoverProvider = LiquidObjectHoverProvider;
//# sourceMappingURL=LiquidObjectHoverProvider.js.map

/***/ }),

/***/ 9620:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidTagHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const docset_1 = __webpack_require__(5338);
class LiquidTagHoverProvider {
    constructor(themeDocset) {
        this.themeDocset = themeDocset;
    }
    async hover(currentNode) {
        if (currentNode.type !== liquid_html_parser_1.NodeTypes.LiquidTag &&
            currentNode.type !== liquid_html_parser_1.NodeTypes.LiquidRawTag &&
            currentNode.type !== liquid_html_parser_1.NodeTypes.LiquidBranch) {
            return null;
        }
        const name = currentNode.name;
        const entries = await this.themeDocset.tags();
        const entry = entries.find((entry) => entry.name === name);
        if (!entry) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, docset_1.render)(entry, undefined, 'tag'),
            },
        };
    }
}
exports.LiquidTagHoverProvider = LiquidTagHoverProvider;
//# sourceMappingURL=LiquidTagHoverProvider.js.map

/***/ }),

/***/ 1459:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderSnippetHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const liquidDoc_1 = __webpack_require__(8359);
class RenderSnippetHoverProvider {
    constructor(getSnippetDefinitionForURI) {
        this.getSnippetDefinitionForURI = getSnippetDefinitionForURI;
    }
    async hover(currentNode, ancestors, params) {
        var _a, _b, _c;
        const parentNode = ancestors.at(-1);
        if (currentNode.type !== liquid_html_parser_1.NodeTypes.String ||
            !parentNode ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.RenderMarkup) {
            return null;
        }
        const snippetName = currentNode.value;
        const snippetDefinition = await this.getSnippetDefinitionForURI(params.textDocument.uri, snippetName);
        if (!snippetDefinition) {
            return null;
        }
        const liquidDoc = snippetDefinition.liquidDoc;
        if (!liquidDoc) {
            return {
                contents: {
                    kind: 'markdown',
                    value: `### ${snippetDefinition.name}`,
                },
            };
        }
        const parts = [`### ${snippetDefinition.name}`];
        if ((_a = liquidDoc.parameters) === null || _a === void 0 ? void 0 : _a.length) {
            const parameters = this.buildParameters(liquidDoc.parameters);
            parts.push('', '**Parameters:**', parameters);
        }
        if ((_b = liquidDoc.examples) === null || _b === void 0 ? void 0 : _b.length) {
            const examples = (_c = liquidDoc.examples) === null || _c === void 0 ? void 0 : _c.map(({ content }) => `\`\`\`liquid${content}\`\`\``).join('\n');
            parts.push('', '**Examples:**', examples);
        }
        return {
            contents: {
                kind: 'markdown',
                value: parts.join('\n'),
            },
        };
    }
    buildParameters(parameters) {
        return parameters.map((param) => (0, liquidDoc_1.formatLiquidDocParameter)(param)).join('\n');
    }
}
exports.RenderSnippetHoverProvider = RenderSnippetHoverProvider;
//# sourceMappingURL=RenderSnippetHoverProvider.js.map

/***/ }),

/***/ 2700:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderSnippetParameterHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const liquidDoc_1 = __webpack_require__(8359);
class RenderSnippetParameterHoverProvider {
    constructor(getSnippetDefinitionForURI) {
        this.getSnippetDefinitionForURI = getSnippetDefinitionForURI;
    }
    async hover(currentNode, ancestors, params) {
        var _a, _b;
        const parentNode = ancestors.at(-1);
        if (currentNode.type !== liquid_html_parser_1.NodeTypes.NamedArgument ||
            !parentNode ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.RenderMarkup ||
            parentNode.snippet.type !== liquid_html_parser_1.NodeTypes.String) {
            return null;
        }
        const snippetName = parentNode.snippet.value;
        const snippetDefinition = await this.getSnippetDefinitionForURI(params.textDocument.uri, snippetName);
        if (!((_b = (_a = snippetDefinition === null || snippetDefinition === void 0 ? void 0 : snippetDefinition.liquidDoc) === null || _a === void 0 ? void 0 : _a.parameters) === null || _b === void 0 ? void 0 : _b.length)) {
            return null;
        }
        const paramName = currentNode.name;
        const hoveredParameter = snippetDefinition.liquidDoc.parameters.find((parameter) => parameter.name === paramName);
        if (!hoveredParameter) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, liquidDoc_1.formatLiquidDocParameter)(hoveredParameter, true),
            },
        };
    }
}
exports.RenderSnippetParameterHoverProvider = RenderSnippetParameterHoverProvider;
//# sourceMappingURL=RenderSnippetParameterHoverProvider.js.map

/***/ }),

/***/ 1541:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TranslationHoverProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const translations_1 = __webpack_require__(9135);
class TranslationHoverProvider {
    constructor(getTranslationsForUri, documentManager) {
        this.getTranslationsForUri = getTranslationsForUri;
        this.documentManager = documentManager;
    }
    async hover(currentNode, ancestors, params) {
        var _a;
        const parentNode = ancestors.at(-1);
        if (currentNode.type !== liquid_html_parser_1.NodeTypes.String ||
            !parentNode ||
            parentNode.type !== liquid_html_parser_1.NodeTypes.LiquidVariable) {
            return null;
        }
        if (!parentNode.filters[0] || !['t', 'translate'].includes(parentNode.filters[0].name)) {
            return null;
        }
        const translations = await this.getTranslationsForUri(params.textDocument.uri);
        const translation = (0, translations_1.translationValue)(currentNode.value, translations);
        const document = (_a = this.documentManager.get(params.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.textDocument;
        if (!translation || !document) {
            return null;
        }
        return {
            contents: {
                kind: 'markdown',
                value: (0, translations_1.renderTranslation)(translation),
            },
            range: {
                start: document.positionAt(currentNode.position.start),
                end: document.positionAt(currentNode.position.end),
            },
        };
    }
}
exports.TranslationHoverProvider = TranslationHoverProvider;
//# sourceMappingURL=TranslationHoverProvider.js.map

/***/ }),

/***/ 2571:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderSnippetParameterHoverProvider = exports.RenderSnippetHoverProvider = exports.TranslationHoverProvider = exports.HtmlAttributeValueHoverProvider = exports.HtmlAttributeHoverProvider = exports.HtmlTagHoverProvider = exports.LiquidObjectAttributeHoverProvider = exports.LiquidObjectHoverProvider = exports.LiquidFilterHoverProvider = exports.LiquidTagHoverProvider = void 0;
var LiquidTagHoverProvider_1 = __webpack_require__(9620);
Object.defineProperty(exports, "LiquidTagHoverProvider", ({ enumerable: true, get: function () { return LiquidTagHoverProvider_1.LiquidTagHoverProvider; } }));
var LiquidFilterHoverProvider_1 = __webpack_require__(6394);
Object.defineProperty(exports, "LiquidFilterHoverProvider", ({ enumerable: true, get: function () { return LiquidFilterHoverProvider_1.LiquidFilterHoverProvider; } }));
var LiquidObjectHoverProvider_1 = __webpack_require__(6377);
Object.defineProperty(exports, "LiquidObjectHoverProvider", ({ enumerable: true, get: function () { return LiquidObjectHoverProvider_1.LiquidObjectHoverProvider; } }));
var LiquidObjectAttributeHoverProvider_1 = __webpack_require__(6459);
Object.defineProperty(exports, "LiquidObjectAttributeHoverProvider", ({ enumerable: true, get: function () { return LiquidObjectAttributeHoverProvider_1.LiquidObjectAttributeHoverProvider; } }));
var HtmlTagHoverProvider_1 = __webpack_require__(5469);
Object.defineProperty(exports, "HtmlTagHoverProvider", ({ enumerable: true, get: function () { return HtmlTagHoverProvider_1.HtmlTagHoverProvider; } }));
var HtmlAttributeHoverProvider_1 = __webpack_require__(5417);
Object.defineProperty(exports, "HtmlAttributeHoverProvider", ({ enumerable: true, get: function () { return HtmlAttributeHoverProvider_1.HtmlAttributeHoverProvider; } }));
var HtmlAttributeValueHoverProvider_1 = __webpack_require__(163);
Object.defineProperty(exports, "HtmlAttributeValueHoverProvider", ({ enumerable: true, get: function () { return HtmlAttributeValueHoverProvider_1.HtmlAttributeValueHoverProvider; } }));
var TranslationHoverProvider_1 = __webpack_require__(1541);
Object.defineProperty(exports, "TranslationHoverProvider", ({ enumerable: true, get: function () { return TranslationHoverProvider_1.TranslationHoverProvider; } }));
var RenderSnippetHoverProvider_1 = __webpack_require__(1459);
Object.defineProperty(exports, "RenderSnippetHoverProvider", ({ enumerable: true, get: function () { return RenderSnippetHoverProvider_1.RenderSnippetHoverProvider; } }));
var RenderSnippetParameterHoverProvider_1 = __webpack_require__(2700);
Object.defineProperty(exports, "RenderSnippetParameterHoverProvider", ({ enumerable: true, get: function () { return RenderSnippetParameterHoverProvider_1.RenderSnippetParameterHoverProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6691:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileType = exports.allChecks = exports.recommendedChecks = exports.startServer = exports.parseJSON = exports.memo = exports.debounce = exports.visit = void 0;
const theme_check_common_1 = __webpack_require__(5309);
Object.defineProperty(exports, "allChecks", ({ enumerable: true, get: function () { return theme_check_common_1.allChecks; } }));
Object.defineProperty(exports, "recommendedChecks", ({ enumerable: true, get: function () { return theme_check_common_1.recommended; } }));
Object.defineProperty(exports, "FileType", ({ enumerable: true, get: function () { return theme_check_common_1.FileType; } }));
__exportStar(__webpack_require__(1074), exports);
var theme_check_common_2 = __webpack_require__(5309);
Object.defineProperty(exports, "visit", ({ enumerable: true, get: function () { return theme_check_common_2.visit; } }));
var utils_1 = __webpack_require__(6813);
Object.defineProperty(exports, "debounce", ({ enumerable: true, get: function () { return utils_1.debounce; } }));
Object.defineProperty(exports, "memo", ({ enumerable: true, get: function () { return utils_1.memo; } }));
Object.defineProperty(exports, "parseJSON", ({ enumerable: true, get: function () { return utils_1.parseJSON; } }));
var server_1 = __webpack_require__(4495);
Object.defineProperty(exports, "startServer", ({ enumerable: true, get: function () { return server_1.startServer; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 1931:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONContributions = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const BlockTypeCompletionProvider_1 = __webpack_require__(217);
const ReferencedBlockTypeCompletionProvider_1 = __webpack_require__(9424);
const SchemaTranslationCompletionProvider_1 = __webpack_require__(8754);
const SchemaTranslationHoverProvider_1 = __webpack_require__(5037);
const TranslationPathHoverProvider_1 = __webpack_require__(483);
const utils_1 = __webpack_require__(9407);
const SettingsPropertyCompletionProvider_1 = __webpack_require__(3508);
const SettingsHoverProvider_1 = __webpack_require__(3522);
const BlockSettingsPropertyCompletionProvider_1 = __webpack_require__(1101);
const BlockSettingsHoverProvider_1 = __webpack_require__(5491);
/** The getInfoContribution API will only fallback if we return undefined synchronously */
const SKIP_CONTRIBUTION = undefined;
/**
 * I'm not a fan of how json-languageservice does its feature contributions. It's too different
 * from everything else we do in here.
 *
 * Instead, we'll have this little adapter that makes the completions and hover providers feel
 * a bit more familiar.
 */
class JSONContributions {
    constructor(documentManager, getDefaultSchemaTranslations, getThemeBlockNames, getThemeBlockSchema) {
        this.documentManager = documentManager;
        this.hoverProviders = [
            new TranslationPathHoverProvider_1.TranslationPathHoverProvider(),
            new SchemaTranslationHoverProvider_1.SchemaTranslationHoverProvider(getDefaultSchemaTranslations),
            new SettingsHoverProvider_1.SettingsHoverProvider(getDefaultSchemaTranslations),
            new BlockSettingsHoverProvider_1.BlockSettingsHoverProvider(getDefaultSchemaTranslations, getThemeBlockSchema),
        ];
        this.completionProviders = [
            new SchemaTranslationCompletionProvider_1.SchemaTranslationsCompletionProvider(getDefaultSchemaTranslations),
            new BlockTypeCompletionProvider_1.BlockTypeCompletionProvider(getThemeBlockNames),
            new ReferencedBlockTypeCompletionProvider_1.ReferencedBlockTypeCompletionProvider(getThemeBlockNames, getThemeBlockSchema),
            new BlockSettingsPropertyCompletionProvider_1.BlockSettingsPropertyCompletionProvider(getDefaultSchemaTranslations, getThemeBlockSchema),
            new SettingsPropertyCompletionProvider_1.SettingsPropertyCompletionProvider(getDefaultSchemaTranslations),
        ];
    }
    getInfoContribution(uri, location) {
        const doc = this.documentManager.get(uri);
        if (!doc)
            return SKIP_CONTRIBUTION;
        const context = this.getContext(doc);
        const provider = this.hoverProviders.find((p) => p.canHover(context, location));
        if (!provider)
            return SKIP_CONTRIBUTION;
        return provider.hover(context, location);
    }
    async collectPropertyCompletions(uri, location, 
    // Don't know what those three are for.
    _currentWord, _addValue, _isLast, result) {
        const doc = this.documentManager.get(uri);
        if (!doc || doc.ast instanceof Error)
            return;
        const items = await Promise.all(this.completionProviders
            .filter((provider) => provider.completeProperty)
            .map((provider) => provider.completeProperty(this.getContext(doc), location)));
        for (const item of items.flat()) {
            result.add(item);
        }
    }
    async collectValueCompletions(uri, location, propertyKey, result) {
        const doc = this.documentManager.get(uri);
        if (!doc || doc.ast instanceof Error)
            return;
        const items = await Promise.all(this.completionProviders
            .filter((provider) => provider.completeValue)
            .map((provider) => provider.completeValue(this.getContext(doc), location.concat(propertyKey))));
        for (const item of items.flat()) {
            result.add(item);
        }
    }
    /** I'm not sure we want to do anything with that... but TS requires us to have it */
    async collectDefaultCompletions(_uri, _result) { }
    getContext(doc) {
        const context = {
            doc,
        };
        if (doc.type === theme_check_common_1.SourceCodeType.LiquidHtml && !(doc.ast instanceof Error)) {
            const schema = (0, utils_1.findSchemaNode)(doc.ast);
            if (!schema)
                return SKIP_CONTRIBUTION;
            const jsonString = schema === null || schema === void 0 ? void 0 : schema.source.slice(schema.blockStartPosition.end, schema.blockEndPosition.start);
            context.schema = schema;
            context.parsed = (0, theme_check_common_1.parseJSON)(jsonString);
        }
        return context;
    }
}
exports.JSONContributions = JSONContributions;
//# sourceMappingURL=JSONContributions.js.map

/***/ }),

/***/ 2553:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONLanguageService = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const theme_check_common_1 = __webpack_require__(5309);
const vscode_json_languageservice_1 = __webpack_require__(2624);
const vscode_languageserver_textdocument_1 = __webpack_require__(8041);
const JSONContributions_1 = __webpack_require__(1931);
class JSONLanguageService {
    constructor(documentManager, jsonValidationSet, getDefaultSchemaTranslations, getModeForURI, getThemeBlockNames, getThemeBlockSchema) {
        this.documentManager = documentManager;
        this.jsonValidationSet = jsonValidationSet;
        this.getDefaultSchemaTranslations = getDefaultSchemaTranslations;
        this.getModeForURI = getModeForURI;
        this.getThemeBlockNames = getThemeBlockNames;
        this.getThemeBlockSchema = getThemeBlockSchema;
        this.isValidSchema = async (uri, jsonString) => {
            const mode = await this.getModeForURI(uri);
            const service = this.services[mode];
            if (!service)
                return false;
            return (0, theme_check_common_1.isValid)(service, uri, jsonString);
        };
        this.services = Object.fromEntries(theme_check_common_1.Modes.map((mode) => [mode, null]));
        this.schemas = {};
    }
    async setup(clientCapabilities) {
        await Promise.all(theme_check_common_1.Modes.map(async (mode) => {
            const schemas = await this.jsonValidationSet.schemas(mode);
            for (const schema of schemas) {
                this.schemas[schema.uri] = schema;
            }
            if (!schemas.length)
                return;
            const service = (0, vscode_json_languageservice_1.getLanguageService)({
                clientCapabilities,
                // Map URIs to schemas without making network requests. Removes the
                // network dependency.
                schemaRequestService: this.getSchemaForURI.bind(this),
                // This is how we make sure that our "$ref": "./inputSettings.json" in
                // our JSON schemas resolve correctly.
                workspaceContext: {
                    resolveRelativePath: (relativePath, resource) => {
                        const url = new URL(relativePath, resource);
                        return url.toString();
                    },
                },
                contributions: [
                    new JSONContributions_1.JSONContributions(this.documentManager, this.getDefaultSchemaTranslations, this.getThemeBlockNames, this.getThemeBlockSchema),
                ],
            });
            service.configure({
                // This is what we use to map file names to JSON schemas. Without
                // this, we'd need folks to use the `$schema` field in their JSON
                // blobs. That ain't fun nor is going to happen.
                schemas: schemas.map((schemaDefinition) => ({
                    uri: schemaDefinition.uri,
                    fileMatch: schemaDefinition.fileMatch,
                })),
            });
            this.services[mode] = service;
        }));
    }
    async completions(params) {
        const mode = await this.getModeForURI(params.textDocument.uri);
        const service = this.services[mode];
        if (!service)
            return null;
        const documents = this.getDocuments(params, service);
        if (!documents)
            return null;
        const [jsonTextDocument, jsonDocument] = documents;
        return service.doComplete(jsonTextDocument, params.position, jsonDocument);
    }
    async hover(params) {
        const mode = await this.getModeForURI(params.textDocument.uri);
        const service = this.services[mode];
        if (!service)
            return null;
        const documents = this.getDocuments(params, service);
        if (!documents)
            return null;
        const [jsonTextDocument, jsonDocument] = documents;
        return service.doHover(jsonTextDocument, params.position, jsonDocument);
    }
    getDocuments(params, service) {
        const document = this.documentManager.get(params.textDocument.uri);
        if (!document)
            return null;
        switch (document.type) {
            case theme_check_common_1.SourceCodeType.JSON: {
                const jsonTextDocument = document.textDocument;
                const jsonDocument = service.parseJSONDocument(jsonTextDocument);
                return [jsonTextDocument, jsonDocument];
            }
            case theme_check_common_1.SourceCodeType.LiquidHtml: {
                if (document.ast instanceof Error)
                    return null;
                const textDocument = document.textDocument;
                const offset = textDocument.offsetAt(params.position);
                const [_, ancestors] = (0, theme_check_common_1.findCurrentNode)(document.ast, offset);
                const schema = ancestors.find((node) => node.type === liquid_html_parser_1.NodeTypes.LiquidRawTag && node.name === 'schema');
                if (!schema)
                    return null;
                const schemaLineNumber = textDocument.positionAt(schema.blockStartPosition.end).line;
                // Hacking away "same line numbers" here by prefixing the file with newlines
                // This way params.position will be at the same line number in this fake jsonTextDocument
                // Which means that the completions will be at the same line number in the Liquid document
                const jsonString = Array(schemaLineNumber).fill('\n').join('') +
                    schema.source.slice(schema.blockStartPosition.end, schema.blockEndPosition.start);
                const jsonTextDocument = vscode_languageserver_textdocument_1.TextDocument.create(textDocument.uri, 'json', textDocument.version, jsonString);
                const jsonDocument = service.parseJSONDocument(jsonTextDocument);
                return [jsonTextDocument, jsonDocument];
            }
        }
    }
    async getSchemaForURI(uri) {
        var _a;
        const schema = (_a = this.schemas[uri]) === null || _a === void 0 ? void 0 : _a.schema;
        if (!schema)
            return `Could not get schema for '${uri}'`;
        return schema;
    }
}
exports.JSONLanguageService = JSONLanguageService;
//# sourceMappingURL=JSONLanguageService.js.map

/***/ }),

/***/ 6072:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isJSONRequestContext = exports.isLiquidRequestContext = void 0;
const theme_check_common_1 = __webpack_require__(5309);
function isLiquidRequestContext(context) {
    const { doc, schema, parsed } = context;
    return (doc.type === theme_check_common_1.SourceCodeType.LiquidHtml && !!schema && !(0, theme_check_common_1.isError)(doc.ast) && !(0, theme_check_common_1.isError)(parsed));
}
exports.isLiquidRequestContext = isLiquidRequestContext;
function isJSONRequestContext(context) {
    const { doc } = context;
    return doc.type === theme_check_common_1.SourceCodeType.JSON && !(0, theme_check_common_1.isError)(doc.ast);
}
exports.isJSONRequestContext = isJSONRequestContext;
//# sourceMappingURL=RequestContext.js.map

/***/ }),

/***/ 1101:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockSettingsPropertyCompletionProvider = void 0;
const utils_1 = __webpack_require__(9407);
const theme_check_common_1 = __webpack_require__(5309);
const BlockTypeCompletionProvider_1 = __webpack_require__(217);
const schemaSettings_1 = __webpack_require__(1875);
/**
 * The BlockSettingsPropertyCompletionProvider offers value completions of the
 * `presets.[].(recursive blocks.[]).settings` keys and `defaults.blocks.[].settings` keys inside
 * `{% schema %}` tags.
 *
 * @example
 * {% schema %}
 * {
 *   "presets": [
 *     {
 *       "blocks": [
 *         {
 *           "type": "block-type",
 *           "settings": {
 *             "█"
 *           }
 *         },
 *       ]
 *     },
 *   ],
 *   "default": {
 *     "blocks": [
 *       {
 *         "type": "block-type",
 *         "settings": {
 *           "█"
 *         }
 *       },
 *     ]
 *   }
 * }
 * {% endschema %}
 */
class BlockSettingsPropertyCompletionProvider {
    constructor(getDefaultSchemaTranslations, getThemeBlockSchema) {
        this.getDefaultSchemaTranslations = getDefaultSchemaTranslations;
        this.getThemeBlockSchema = getThemeBlockSchema;
    }
    async completeProperty(context, path) {
        var _a, _b;
        const { doc } = context;
        if (doc.type !== theme_check_common_1.SourceCodeType.LiquidHtml)
            return [];
        // section files can have schemas with `presets` and `default`
        // block files can have schemas with `presets` only
        if (!((0, utils_1.isSectionFile)(doc.uri) &&
            (isPresetsBlocksSettingsPath(path) || isDefaultBlocksSettingsPath(path))) &&
            !((0, utils_1.isBlockFile)(doc.uri) && isPresetsBlocksSettingsPath(path))) {
            return [];
        }
        if ((0, utils_1.isSectionFile)(doc.uri) && !isDefaultBlocksSettingsPath(path)) {
        }
        const schema = await doc.getSchema();
        if (!schema || !(0, BlockTypeCompletionProvider_1.isSectionOrBlockSchema)(schema) || (0, theme_check_common_1.isError)(schema.parsed)) {
            return [];
        }
        const blockType = (0, theme_check_common_1.deepGet)(schema.parsed, [...path.slice(0, -1), 'type']);
        if (!blockType) {
            return [];
        }
        const blockOriginSchema = await this.getThemeBlockSchema(doc.uri, blockType);
        if (!blockOriginSchema ||
            (0, theme_check_common_1.isError)(blockOriginSchema.parsed) ||
            !(0, BlockTypeCompletionProvider_1.isSectionOrBlockSchema)(blockOriginSchema)) {
            return [];
        }
        if (!((_a = blockOriginSchema.parsed) === null || _a === void 0 ? void 0 : _a.settings) || !Array.isArray((_b = blockOriginSchema.parsed) === null || _b === void 0 ? void 0 : _b.settings)) {
            return [];
        }
        const translations = await this.getDefaultSchemaTranslations(doc.textDocument.uri);
        return (0, schemaSettings_1.schemaSettingsPropertyCompletionItems)(blockOriginSchema.parsed, translations);
    }
}
exports.BlockSettingsPropertyCompletionProvider = BlockSettingsPropertyCompletionProvider;
// `blocks` can be nested within other `blocks`
// We need to ensure the last leg of the path is { "blocks": [{ "settings": { "█" } }] }
function isPresetsBlocksSettingsPath(path) {
    return path.at(0) === 'presets' && path.at(-3) === 'blocks' && path.at(-1) === 'settings';
}
// `blocks` inside `default` can't be nested within other `blocks`
function isDefaultBlocksSettingsPath(path) {
    return path.at(0) === 'default' && path.at(1) === 'blocks' && path.at(3) === 'settings';
}
//# sourceMappingURL=BlockSettingsPropertyCompletionProvider.js.map

/***/ }),

/***/ 217:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isSectionOrBlockSchema = exports.isLocalBlockDefinition = exports.hasLocalBlockDefinitions = exports.isBlockTypePath = exports.isPresetBlockPath = exports.isBlockDefinitionPath = exports.createBlockNameCompletionItems = exports.BlockTypeCompletionProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const RequestContext_1 = __webpack_require__(6072);
const utils_1 = __webpack_require__(9407);
/**
 * The BlockTypeCompletionProvider offers value completions of the
 * `blocks.[].type` property inside section and theme block `{% schema %}` tags.
 *
 * @example
 * {% schema %}
 * {
 *   "blocks": [
 *     { "type": "█" },
 *   ]
 * }
 * {% endschema %}
 */
class BlockTypeCompletionProvider {
    constructor(getThemeBlockNames) {
        this.getThemeBlockNames = getThemeBlockNames;
    }
    async completeValue(context, path) {
        if (!(0, utils_1.isSectionOrBlockFile)(context.doc.uri) ||
            !(0, RequestContext_1.isLiquidRequestContext)(context) ||
            !isBlockDefinitionPath(path)) {
            return [];
        }
        const { doc } = context;
        const schema = await doc.getSchema();
        // Can't complete if we can't parse the schema
        if (!schema || (0, theme_check_common_1.isError)(schema.parsed) || !isSectionOrBlockSchema(schema)) {
            return [];
        }
        // Local blocks have their type defined in the schema, there's nothing to complete
        if (hasLocalBlockDefinitions(schema))
            return [];
        const blockNames = await this.getThemeBlockNames(doc.uri, true);
        return createBlockNameCompletionItems(blockNames);
    }
}
exports.BlockTypeCompletionProvider = BlockTypeCompletionProvider;
function createBlockNameCompletionItems(blockNames) {
    return blockNames.map((name) => ({
        kind: vscode_languageserver_protocol_1.CompletionItemKind.Value,
        label: `"${name}"`,
        insertText: `"${name}"`,
    }));
}
exports.createBlockNameCompletionItems = createBlockNameCompletionItems;
function isBlockDefinitionPath(path) {
    return path.at(0) === 'blocks';
}
exports.isBlockDefinitionPath = isBlockDefinitionPath;
function isPresetBlockPath(path) {
    return path.at(0) === 'presets';
}
exports.isPresetBlockPath = isPresetBlockPath;
function isBlockTypePath(path) {
    // We have these cases to support:
    // - top level blocks.[].type
    // - presets.[](recursive .blocks.[].type)
    // - presets.[](recursive .blocks.{}.type)
    const topLevel = path.at(0);
    if (topLevel !== 'blocks' && topLevel !== 'presets')
        return false;
    if (path.length < 4)
        return false; // minimum path length
    const [shouldBeBlocks, _idOrIndex, shouldBeType] = path.slice(-3);
    return shouldBeBlocks === 'blocks' && shouldBeType === 'type';
}
exports.isBlockTypePath = isBlockTypePath;
function hasLocalBlockDefinitions(schema) {
    if (schema.type !== theme_check_common_1.ThemeSchemaType.Section || (0, theme_check_common_1.isError)(schema.parsed))
        return false;
    const blocks = (0, theme_check_common_1.deepGet)(schema.parsed, ['blocks']);
    if (!blocks || !Array.isArray(blocks))
        return false;
    return blocks.some((block) => block && block.name !== undefined);
}
exports.hasLocalBlockDefinitions = hasLocalBlockDefinitions;
function isLocalBlockDefinition(schema, blockTypePath) {
    if (schema.type !== theme_check_common_1.ThemeSchemaType.Section)
        return false;
    const blockNamePath = [...blockTypePath.slice(0, -1), 'name'];
    const name = (0, theme_check_common_1.deepGet)(schema.parsed, blockNamePath);
    return name !== undefined;
}
exports.isLocalBlockDefinition = isLocalBlockDefinition;
const SectionOrBlockSchemaTypes = [theme_check_common_1.ThemeSchemaType.Section, theme_check_common_1.ThemeSchemaType.Block];
function isSectionOrBlockSchema(schema) {
    return SectionOrBlockSchemaTypes.includes(schema.type);
}
exports.isSectionOrBlockSchema = isSectionOrBlockSchema;
//# sourceMappingURL=BlockTypeCompletionProvider.js.map

/***/ }),

/***/ 9424:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReferencedBlockTypeCompletionProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const RequestContext_1 = __webpack_require__(6072);
const utils_1 = __webpack_require__(9407);
const BlockTypeCompletionProvider_1 = __webpack_require__(217);
/**
 * The ReferencedBlockTypeCompletionProvider offers value completions of the
 * `presets.[](recursive .blocks.[]).type` value and `default.blocks.[].type` value inside
 * section and theme block `{% schema %}` tags.
 *
 * @example
 * {% schema %}
 * {
 *   "presets": [
 *     {
 *       "blocks": [
 *         { "type": "█" },
 *       ]
 *     },
 *   ],
 *   "default": {
 *     "blocks": [
 *       { "type": "█" },
 *     ]
 *   }
 * }
 * {% endschema %}
 */
class ReferencedBlockTypeCompletionProvider {
    constructor(getThemeBlockNames, getThemeBlockSchema) {
        this.getThemeBlockNames = getThemeBlockNames;
        this.getThemeBlockSchema = getThemeBlockSchema;
    }
    async completeValue(context, path) {
        if (!(0, utils_1.isSectionOrBlockFile)(context.doc.uri) ||
            !(0, RequestContext_1.isLiquidRequestContext)(context) ||
            !isBlockTypePath(path)) {
            return [];
        }
        const { doc } = context;
        const schema = await doc.getSchema();
        if (!schema || (0, theme_check_common_1.isError)(schema.parsed) || !(0, BlockTypeCompletionProvider_1.isSectionOrBlockSchema)(schema)) {
            return [];
        }
        let parsedBlockSchema = schema.parsed;
        if (isNestedBlockPath(path)) {
            const parentBlockName = getParentBlockName(schema.parsed, path);
            if (!parentBlockName) {
                return [];
            }
            const parentBlockSchema = await this.getThemeBlockSchema(doc.uri, parentBlockName);
            if (!parentBlockSchema ||
                (0, theme_check_common_1.isError)(parentBlockSchema.parsed) ||
                !(0, BlockTypeCompletionProvider_1.isSectionOrBlockSchema)(parentBlockSchema)) {
                return [];
            }
            parsedBlockSchema = parentBlockSchema.parsed;
        }
        const blocks = parsedBlockSchema.blocks || [];
        const blockGroups = {
            themeBlocks: false,
            specificBlockNames: [],
        };
        blocks.forEach((block) => {
            if (block.type === '@theme') {
                blockGroups.themeBlocks = true;
            }
            else if (!block.type.startsWith('@')) {
                blockGroups.specificBlockNames.push(block.type);
            }
        });
        let blockNames = blockGroups.specificBlockNames;
        if (blockGroups.themeBlocks) {
            blockNames.push(...(await this.getThemeBlockNames(doc.uri, false)));
        }
        return (0, BlockTypeCompletionProvider_1.createBlockNameCompletionItems)(blockNames);
    }
}
exports.ReferencedBlockTypeCompletionProvider = ReferencedBlockTypeCompletionProvider;
// `blocks` can be nested within other `blocks`
// We need to ensure the last leg of the path is { "blocks": [{ "type": "█" }] }
function isBlockTypePath(path) {
    return ((path.at(0) === 'presets' || path.at(0) === 'default') &&
        path.at(-3) === 'blocks' &&
        path.at(-1) === 'type');
}
function isNestedBlockPath(path) {
    return path.at(-5) === 'blocks' && path.at(-3) === 'blocks' && path.at(-1) === 'type';
}
function getParentBlockName(parsedSchema, path) {
    return (0, theme_check_common_1.deepGet)(parsedSchema, [...path.slice(0, -3), 'type']);
}
//# sourceMappingURL=ReferencedBlockTypeCompletionProvider.js.map

/***/ }),

/***/ 8754:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SchemaTranslationsCompletionProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_json_languageservice_1 = __webpack_require__(2624);
const translations_1 = __webpack_require__(9135);
const RequestContext_1 = __webpack_require__(6072);
const utils_1 = __webpack_require__(9407);
class SchemaTranslationsCompletionProvider {
    constructor(getDefaultSchemaTranslations) {
        this.getDefaultSchemaTranslations = getDefaultSchemaTranslations;
    }
    async completeValue(context, path) {
        var _a;
        if (!(0, utils_1.isSectionOrBlockFile)(context.doc.uri) || !(0, RequestContext_1.isLiquidRequestContext)(context)) {
            return [];
        }
        const { doc, parsed } = context;
        const label = (0, theme_check_common_1.deepGet)(parsed, path);
        if (!label || typeof label !== 'string' || !label.startsWith('t:')) {
            return [];
        }
        const partial = (_a = /^t:(.*)/.exec(label)) === null || _a === void 0 ? void 0 : _a[1];
        if (partial === undefined)
            return [];
        const translations = await this.getDefaultSchemaTranslations(doc.uri);
        // We'll let the frontend do the filtering. But we'll only include shopify
        // translations if the shopify prefix is present
        const options = (0, translations_1.translationOptions)(translations);
        return options.map((option) => {
            const tLabel = `t:${option.path.join('.')}`;
            return {
                label: tLabel,
                kind: vscode_json_languageservice_1.CompletionItemKind.Value,
                filterText: `"${tLabel}"`,
                insertText: `"${tLabel}"`,
                insertTextFormat: 1,
                documentation: {
                    kind: 'markdown',
                    value: (0, translations_1.renderTranslation)(option.translation),
                },
            };
        });
    }
}
exports.SchemaTranslationsCompletionProvider = SchemaTranslationsCompletionProvider;
//# sourceMappingURL=SchemaTranslationCompletionProvider.js.map

/***/ }),

/***/ 3508:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingsPropertyCompletionProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const utils_1 = __webpack_require__(9407);
const BlockTypeCompletionProvider_1 = __webpack_require__(217);
const schemaSettings_1 = __webpack_require__(1875);
/**
 * The SettingsPropertyCompletionProvider offers property completions for:
 * - `presets.[].settings.[]` objects inside `{% schema %}` tag in sections and blocks
 * - `default.settings` object inside `{% schema %}` tag in sections
 *
 * @example
 * {% schema %}
 * {
 *   "presets": [
 *     {
 *       "settings": [
 *         { "█" },
 *       ]
 *     },
 *   ],
 *   "default": {
 *     "settings": {
 *       "█"
 *     }
 *   }
 * }
 * {% endschema %}
 */
class SettingsPropertyCompletionProvider {
    constructor(getDefaultSchemaTranslations) {
        this.getDefaultSchemaTranslations = getDefaultSchemaTranslations;
    }
    async completeProperty(context, path) {
        const { doc } = context;
        if (doc.type !== theme_check_common_1.SourceCodeType.LiquidHtml)
            return [];
        // section files can have schemas with `presets` and `default`
        // block files can have schemas with `presets` only
        if (!((0, utils_1.isSectionFile)(doc.uri) && (isPresetSettingsPath(path) || isDefaultSettingsPath(path))) &&
            !((0, utils_1.isBlockFile)(doc.uri) && isPresetSettingsPath(path))) {
            return [];
        }
        const schema = await doc.getSchema();
        if (!schema || !(0, BlockTypeCompletionProvider_1.isSectionOrBlockSchema)(schema) || (0, theme_check_common_1.isError)(schema.parsed)) {
            return [];
        }
        const parsedSchema = schema.parsed;
        if (!(parsedSchema === null || parsedSchema === void 0 ? void 0 : parsedSchema.settings) || !Array.isArray(parsedSchema.settings)) {
            return [];
        }
        const translations = await this.getDefaultSchemaTranslations(doc.textDocument.uri);
        return (0, schemaSettings_1.schemaSettingsPropertyCompletionItems)(parsedSchema, translations);
    }
}
exports.SettingsPropertyCompletionProvider = SettingsPropertyCompletionProvider;
function isPresetSettingsPath(path) {
    return path.length === 3 && path.at(0) === 'presets' && path.at(2) === 'settings';
}
function isDefaultSettingsPath(path) {
    return path.length === 2 && path.at(0) === 'default' && path.at(1) === 'settings';
}
//# sourceMappingURL=SettingsPropertyCompletionProvider.js.map

/***/ }),

/***/ 1875:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.schemaSettingsPropertyCompletionItems = void 0;
const vscode_json_languageservice_1 = __webpack_require__(2624);
const translations_1 = __webpack_require__(9135);
function schemaSettingsPropertyCompletionItems(parsedSchema, translations) {
    return parsedSchema.settings
        .filter((setting) => setting.id)
        .map((setting) => {
        let docValue = '';
        if (setting.label) {
            if (setting.label.startsWith('t:')) {
                const translation = (0, translations_1.translationValue)(setting.label.substring(2), translations);
                if (translation) {
                    docValue = (0, translations_1.renderTranslation)(translation);
                }
            }
            else {
                docValue = setting.label;
            }
        }
        const completionText = setting.id ? `"${setting.id}"` : '';
        return {
            kind: vscode_json_languageservice_1.CompletionItemKind.Property,
            label: completionText,
            insertText: completionText,
            documentation: {
                kind: vscode_json_languageservice_1.MarkupKind.Markdown,
                value: docValue,
            },
        };
    });
}
exports.schemaSettingsPropertyCompletionItems = schemaSettingsPropertyCompletionItems;
//# sourceMappingURL=schemaSettings.js.map

/***/ }),

/***/ 5491:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockSettingsHoverProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const translations_1 = __webpack_require__(9135);
const RequestContext_1 = __webpack_require__(6072);
const utils_1 = __webpack_require__(9407);
const BlockTypeCompletionProvider_1 = __webpack_require__(217);
class BlockSettingsHoverProvider {
    constructor(getDefaultSchemaTranslations, getThemeBlockSchema) {
        this.getDefaultSchemaTranslations = getDefaultSchemaTranslations;
        this.getThemeBlockSchema = getThemeBlockSchema;
    }
    canHover(context, path) {
        return ((0, utils_1.isSectionOrBlockFile)(context.doc.uri) &&
            (0, RequestContext_1.isLiquidRequestContext)(context) &&
            path.length !== 0 &&
            isBlocksSettingsPath(path));
    }
    async hover(context, path) {
        var _a;
        if (!this.canHover(context, path))
            return [];
        const { doc } = context;
        const schema = await doc.getSchema();
        if (!isValidSchema(schema))
            return [];
        const blockType = (0, theme_check_common_1.deepGet)(schema.parsed, [...path.slice(0, -2), 'type']);
        if (!blockType)
            return [];
        const themeBlockSchema = await this.getThemeBlockSchema(doc.uri, blockType);
        if (!isValidSchema(themeBlockSchema))
            return [];
        if (!hasValidSchemaSettings(themeBlockSchema))
            return [];
        const label = (_a = themeBlockSchema.parsed.settings.find((setting) => (setting === null || setting === void 0 ? void 0 : setting.id) === path.at(-1))) === null || _a === void 0 ? void 0 : _a.label;
        if (!label)
            return [];
        if (!label.startsWith('t:')) {
            return [label];
        }
        return this.getDefaultSchemaTranslations(doc.uri).then((translations) => {
            const path = label.substring(2);
            const value = (0, translations_1.translationValue)(path, translations);
            if (!value)
                return undefined;
            return [(0, translations_1.renderTranslation)(value)];
        });
    }
}
exports.BlockSettingsHoverProvider = BlockSettingsHoverProvider;
function isBlocksSettingsPath(path) {
    return ((path.at(0) === 'presets' || path.at(0) === 'default') &&
        path.at(-4) === 'blocks' &&
        path.at(-2) === 'settings' &&
        path.at(-1) !== undefined &&
        typeof path.at(-1) === 'string');
}
function isValidSchema(schema) {
    return !!schema && !(0, theme_check_common_1.isError)(schema.parsed) && (0, BlockTypeCompletionProvider_1.isSectionOrBlockSchema)(schema);
}
function hasValidSchemaSettings(schema) {
    var _a;
    return ((_a = schema.parsed) === null || _a === void 0 ? void 0 : _a.settings) !== undefined && Array.isArray(schema.parsed.settings);
}
//# sourceMappingURL=BlockSettingsHoverProvider.js.map

/***/ }),

/***/ 5037:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SchemaTranslationHoverProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const translations_1 = __webpack_require__(9135);
const RequestContext_1 = __webpack_require__(6072);
const utils_1 = __webpack_require__(9407);
class SchemaTranslationHoverProvider {
    constructor(getDefaultSchemaTranslations) {
        this.getDefaultSchemaTranslations = getDefaultSchemaTranslations;
    }
    canHover(context, path) {
        const label = (0, theme_check_common_1.deepGet)(context.parsed, path);
        return ((0, utils_1.isSectionOrBlockFile)(context.doc.uri) &&
            (0, RequestContext_1.isLiquidRequestContext)(context) &&
            path.length !== 0 &&
            label &&
            typeof label === 'string' &&
            label.startsWith('t:'));
    }
    async hover(context, path) {
        if (!this.canHover(context, path))
            return [];
        // Can assert is a string because of `canHover` check above
        const label = (0, theme_check_common_1.deepGet)(context.parsed, path);
        return this.getDefaultSchemaTranslations(context.doc.uri).then((translations) => {
            const path = label.slice(2); // remove `t:`
            const value = (0, translations_1.translationValue)(path, translations);
            if (!value)
                return undefined;
            return [(0, translations_1.renderTranslation)(value)];
        });
    }
}
exports.SchemaTranslationHoverProvider = SchemaTranslationHoverProvider;
//# sourceMappingURL=SchemaTranslationHoverProvider.js.map

/***/ }),

/***/ 3522:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingsHoverProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const translations_1 = __webpack_require__(9135);
const RequestContext_1 = __webpack_require__(6072);
const utils_1 = __webpack_require__(9407);
const BlockTypeCompletionProvider_1 = __webpack_require__(217);
class SettingsHoverProvider {
    constructor(getDefaultSchemaTranslations) {
        this.getDefaultSchemaTranslations = getDefaultSchemaTranslations;
    }
    canHover(context, path) {
        return ((0, utils_1.isSectionOrBlockFile)(context.doc.uri) &&
            (0, RequestContext_1.isLiquidRequestContext)(context) &&
            path.length !== 0 &&
            (isPresetsSettingsPath(path) || isDefaultSettingsPath(path)));
    }
    async hover(context, path) {
        if (!this.canHover(context, path))
            return [];
        const { doc } = context;
        const label = await getSettingsLabel(doc, path.at(-1));
        if (!label)
            return [];
        if (!label.startsWith('t:')) {
            return [label];
        }
        return this.getDefaultSchemaTranslations(doc.uri).then((translations) => {
            const path = label.substring(2);
            const value = (0, translations_1.translationValue)(path, translations);
            if (!value)
                return undefined;
            return [(0, translations_1.renderTranslation)(value)];
        });
    }
}
exports.SettingsHoverProvider = SettingsHoverProvider;
function isPresetsSettingsPath(path) {
    return (path.at(0) === 'presets' &&
        path.at(2) === 'settings' &&
        path.at(3) !== undefined &&
        typeof path.at(3) === 'string');
}
function isDefaultSettingsPath(path) {
    return (path.at(0) === 'default' &&
        path.at(1) === 'settings' &&
        path.at(2) !== undefined &&
        typeof path.at(2) === 'string');
}
async function getSettingsLabel(doc, label) {
    var _a;
    const schema = await doc.getSchema();
    if (!schema ||
        !(0, BlockTypeCompletionProvider_1.isSectionOrBlockSchema)(schema) ||
        (0, theme_check_common_1.isError)(schema.parsed) ||
        schema.parsed.settings === undefined ||
        !Array.isArray(schema.parsed.settings)) {
        return;
    }
    return (_a = schema.parsed.settings.find((setting) => (setting === null || setting === void 0 ? void 0 : setting.id) === label)) === null || _a === void 0 ? void 0 : _a.label;
}
//# sourceMappingURL=SettingsHoverProvider.js.map

/***/ }),

/***/ 483:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.contextualizedLabel = exports.TranslationPathHoverProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const translations_1 = __webpack_require__(9135);
const RequestContext_1 = __webpack_require__(6072);
const utils_1 = __webpack_require__(9407);
class TranslationPathHoverProvider {
    constructor() {
        this.filePatterns = [/^.*\/locales\/[^\/]*\.json$/];
    }
    canHover(context, path) {
        return ((0, utils_1.fileMatch)(context.doc.uri, this.filePatterns) &&
            path.length > 0 &&
            (0, RequestContext_1.isJSONRequestContext)(context));
    }
    async hover(context, path) {
        // Redundant use for type assertion
        if (!this.canHover(context, path))
            return [];
        const { doc } = context;
        const ast = doc.ast;
        const node = (0, theme_check_common_1.nodeAtPath)(ast, path);
        switch (true) {
            // Because the JSON language service doesn't support composition of hover info,
            // We have to hardcode the docs for the translation file schema here.
            case ['zero', 'one', 'two', 'few', 'many', 'other'].includes(path.at(-1)): {
                if (!node || node.type !== 'Literal' || typeof node.value !== 'string') {
                    return [`Pluralized translations should have a string value`];
                }
                return [contextualizedLabel(doc.uri, path.slice(0, -1), node.value)];
            }
            case path.at(-1).toString().endsWith('_html'): {
                if (!node || node.type !== 'Literal' || typeof node.value !== 'string') {
                    return [`Translations ending in '_html' should have a string value`];
                }
                return [
                    contextualizedLabel(doc.uri, path, node.value),
                    `The '_html' suffix prevents the HTML content from being escaped.`,
                ];
            }
            default: {
                if (!node || node.type !== 'Literal' || typeof node.value !== 'string') {
                    return [`Translation group: ${path.join('.')}`];
                }
                return [contextualizedLabel(doc.uri, path, node.value)];
            }
        }
    }
}
exports.TranslationPathHoverProvider = TranslationPathHoverProvider;
function contextualizedLabel(uri, str, value) {
    if (uri.includes('.schema')) {
        return marked(`"t:${str.join('.')}"`, 'json');
    }
    else {
        const params = (0, translations_1.extractParams)(value);
        return marked(`{{ '${str.join('.')}' | t${(0, translations_1.paramsString)(params)} }}`, 'liquid');
    }
}
exports.contextualizedLabel = contextualizedLabel;
function marked(value, language = 'liquid') {
    return { language, value };
}
//# sourceMappingURL=TranslationPathHoverProvider.js.map

/***/ }),

/***/ 9407:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findSchemaNode = exports.isSectionOrBlockFile = exports.isBlockFile = exports.isSectionFile = exports.fileMatch = void 0;
const theme_check_common_1 = __webpack_require__(5309);
function fileMatch(uri, patterns) {
    return patterns.some((pattern) => pattern.test(uri));
}
exports.fileMatch = fileMatch;
function isSectionFile(uri) {
    return /\/sections\/[^/]*\.liquid$/.test(uri);
}
exports.isSectionFile = isSectionFile;
function isBlockFile(uri) {
    return /\/blocks\/[^/]*\.liquid$/.test(uri);
}
exports.isBlockFile = isBlockFile;
function isSectionOrBlockFile(uri) {
    return isSectionFile(uri) || isBlockFile(uri);
}
exports.isSectionOrBlockFile = isSectionOrBlockFile;
function findSchemaNode(ast) {
    const nodes = (0, theme_check_common_1.visit)(ast, {
        LiquidRawTag(node) {
            if (node.name === 'schema') {
                return node;
            }
        },
    });
    return nodes[0];
}
exports.findSchemaNode = findSchemaNode;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 8737:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangesProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const theme_check_common_2 = __webpack_require__(5309);
const providers_1 = __webpack_require__(6420);
class LinkedEditingRangesProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
        this.providers = [
            new providers_1.HtmlTagNameLinkedRangesProvider(documentManager),
            new providers_1.EmptyHtmlTagLinkedRangesProvider(documentManager),
        ];
    }
    async linkedEditingRanges(params) {
        var _a;
        const document = this.documentManager.get(params.textDocument.uri);
        if (!document || document.type !== theme_check_common_1.SourceCodeType.LiquidHtml) {
            return null;
        }
        let currentNode = null;
        let ancestors = null;
        if (!(document.ast instanceof Error)) {
            [currentNode, ancestors] = (0, theme_check_common_2.findCurrentNode)(document.ast, document.textDocument.offsetAt(params.position));
        }
        const promises = this.providers.map((p) => p.linkedEditingRanges(currentNode, ancestors, params).catch(() => null));
        const results = await Promise.all(promises);
        return (_a = results.find(Boolean)) !== null && _a !== void 0 ? _a : null;
    }
}
exports.LinkedEditingRangesProvider = LinkedEditingRangesProvider;
//# sourceMappingURL=LinkedEditingRangesProvider.js.map

/***/ }),

/***/ 5868:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmptyHtmlTagLinkedRangesProvider = void 0;
const vscode_languageserver_1 = __webpack_require__(7532);
const wordPattern_1 = __webpack_require__(6819);
class EmptyHtmlTagLinkedRangesProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
    }
    async linkedEditingRanges(node, ancestors, { textDocument: { uri }, position }) {
        // We're strictly checking for <></> and cursor in either branch, that's a parse error
        // ... but it's fine because <></> is rather easy to find.
        if (node !== null || ancestors !== null)
            return null;
        const document = this.documentManager.get(uri);
        const textDocument = document === null || document === void 0 ? void 0 : document.textDocument;
        if (!document || !textDocument)
            return null;
        const openRange = vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(position.line, position.character - 1), vscode_languageserver_1.Position.create(position.line, position.character + 1));
        if (!['<>', '< '].includes(textDocument.getText(openRange)))
            return null;
        const closeOffset = document.source.indexOf('</>', textDocument.offsetAt(position));
        if (closeOffset === -1)
            return null;
        const afterSlashOffset = closeOffset + 2;
        const afterSlashPosition = textDocument.positionAt(afterSlashOffset);
        return {
            ranges: [
                vscode_languageserver_1.Range.create(position, position),
                vscode_languageserver_1.Range.create(afterSlashPosition, afterSlashPosition),
            ],
            wordPattern: wordPattern_1.htmlElementNameWordPattern,
        };
    }
}
exports.EmptyHtmlTagLinkedRangesProvider = EmptyHtmlTagLinkedRangesProvider;
//# sourceMappingURL=EmptyHtmlTagLinkedRangesProvider.js.map

/***/ }),

/***/ 9586:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlTagNameLinkedRangesProvider = void 0;
const htmlTagNames_1 = __webpack_require__(2936);
const wordPattern_1 = __webpack_require__(6819);
class HtmlTagNameLinkedRangesProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
    }
    async linkedEditingRanges(node, ancestors, params) {
        var _a;
        if (!node || !ancestors)
            return null;
        const textDocument = (_a = this.documentManager.get(params.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.textDocument;
        if (!textDocument)
            return null;
        const ranges = (0, htmlTagNames_1.getHtmlElementNameRanges)(node, ancestors, params, textDocument);
        if (!ranges)
            return null;
        return {
            ranges,
            wordPattern: wordPattern_1.htmlElementNameWordPattern,
        };
    }
}
exports.HtmlTagNameLinkedRangesProvider = HtmlTagNameLinkedRangesProvider;
//# sourceMappingURL=HtmlTagNameLinkedRangesProvider.js.map

/***/ }),

/***/ 6420:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlTagNameLinkedRangesProvider = exports.EmptyHtmlTagLinkedRangesProvider = void 0;
var EmptyHtmlTagLinkedRangesProvider_1 = __webpack_require__(5868);
Object.defineProperty(exports, "EmptyHtmlTagLinkedRangesProvider", ({ enumerable: true, get: function () { return EmptyHtmlTagLinkedRangesProvider_1.EmptyHtmlTagLinkedRangesProvider; } }));
var HtmlTagNameLinkedRangesProvider_1 = __webpack_require__(9586);
Object.defineProperty(exports, "HtmlTagNameLinkedRangesProvider", ({ enumerable: true, get: function () { return HtmlTagNameLinkedRangesProvider_1.HtmlTagNameLinkedRangesProvider; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6819:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.htmlElementNameWordPattern = void 0;
const nameCharStart = '[a-zA-Z]';
const nameChar = '[a-zA-Z0-9-]';
exports.htmlElementNameWordPattern = `${nameCharStart}${nameChar}*`;
//# sourceMappingURL=wordPattern.js.map

/***/ }),

/***/ 1760:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.percent = exports.Progress = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
/**
 * A short hand for handling progress reporting to the language client.
 *
 * It handles all the LSP protocol details for you.
 *
 * @example
 * const progress = Progress.create(connection, capabilities, progressToken);
 * await progress.start('Starting progress');
 * await progress.report(50, 'Halfway there');
 * await progress.end('Finished');
 */
class Progress {
    constructor(connection, progressToken) {
        this.connection = connection;
        this.progressToken = progressToken;
    }
    static create(connection, capabilities, progressToken) {
        if (!connection || !capabilities || !capabilities.hasProgressSupport) {
            // If you don't have a connection, we give you a mock that doesn't do anything.
            return {
                start: async () => { },
                report: async () => { },
                end: async () => { },
            };
        }
        return new Progress(connection, progressToken);
    }
    async start(title) {
        await this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, {
            token: this.progressToken,
        });
        await this.connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this.progressToken, {
            kind: 'begin',
            title,
        });
    }
    async report(percentage, message) {
        await this.connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this.progressToken, {
            kind: 'report',
            message,
            percentage,
        });
    }
    async end(message) {
        await this.connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this.progressToken, {
            kind: 'end',
            message,
        });
    }
}
exports.Progress = Progress;
/**
 * Given a current/total and an offset, report the percent complete
 * @param current - number of items processed from total
 * @param total   - total number of items
 * @param offset  - offset % to start at
 *
 * @example
 * const offset = 50 // Start at 50%
 * const current = 0
 * const total = 100 // files or whatever
 * percent(0, total, offset)   // 50 %
 * percent(50, total, offset)  // 75 %
 * percent(100, total, offset) // 100 %
 */
function percent(current, total, offset = 0) {
    return Math.round(offset + (current / total) * (100 - offset));
}
exports.percent = percent;
//# sourceMappingURL=progress.js.map

/***/ }),

/***/ 3371:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameProvider = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const theme_check_common_2 = __webpack_require__(5309);
const HtmlTagNameRenameProvider_1 = __webpack_require__(1044);
const LiquidVariableRenameProvider_1 = __webpack_require__(4708);
/**
 * RenameProvider is responsible for providing rename support for the theme language server.
 *
 * Rename is a pretty abstract concept, it can be renaming a tag name, a variable, a class name, etc.
 */
class RenameProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
        this.providers = [
            new HtmlTagNameRenameProvider_1.HtmlTagNameRenameProvider(documentManager),
            new LiquidVariableRenameProvider_1.LiquidVariableRenameProvider(documentManager),
        ];
    }
    /** Prepare is for telling if you can rename this thing or not, and what text to rename */
    async prepare(params) {
        var _a;
        const [currentNode, ancestors] = this.nodes(params);
        if (currentNode === null || ancestors === null) {
            return null;
        }
        const promises = this.providers.map((provider) => provider
            .prepare(currentNode, ancestors, params)
            .catch(() => null));
        const results = await Promise.all(promises);
        return (_a = results.find(Boolean)) !== null && _a !== void 0 ? _a : null;
    }
    /** Rename is for actually renaming something */
    async rename(params) {
        var _a;
        const [currentNode, ancestors] = this.nodes(params);
        if (currentNode === null || ancestors === null) {
            return null;
        }
        const promises = this.providers.map((provider) => provider
            .rename(currentNode, ancestors, params)
            .catch(() => null));
        const results = await Promise.all(promises);
        return (_a = results.find(Boolean)) !== null && _a !== void 0 ? _a : null;
    }
    /** a helper for getting the node under the cursor and its ancestry */
    nodes(params) {
        const document = this.documentManager.get(params.textDocument.uri);
        if (!document || document.type !== theme_check_common_1.SourceCodeType.LiquidHtml) {
            return [null, null];
        }
        if (!(document.ast instanceof Error)) {
            return (0, theme_check_common_2.findCurrentNode)(document.ast, document.textDocument.offsetAt(params.position));
        }
        return [null, null];
    }
}
exports.RenameProvider = RenameProvider;
//# sourceMappingURL=RenameProvider.js.map

/***/ }),

/***/ 1044:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlTagNameRenameProvider = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const htmlTagNames_1 = __webpack_require__(2936);
class HtmlTagNameRenameProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
    }
    async prepare(node, ancestors, params) {
        var _a;
        const textDocument = (_a = this.documentManager.get(params.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.textDocument;
        if (!textDocument || !node || !ancestors)
            return null;
        const ranges = (0, htmlTagNames_1.getHtmlElementNameRanges)(node, ancestors, params, textDocument);
        if (!ranges || !ranges[0])
            return null;
        return {
            range: ranges[0],
            placeholder: textDocument.getText(ranges[0]),
        };
    }
    async rename(node, ancestors, params) {
        var _a;
        const textDocument = (_a = this.documentManager.get(params.textDocument.uri)) === null || _a === void 0 ? void 0 : _a.textDocument;
        if (!textDocument || !node || !ancestors)
            return null;
        const ranges = (0, htmlTagNames_1.getHtmlElementNameRanges)(node, ancestors, params, textDocument);
        if (!ranges)
            return null;
        const textDocumentEdit = vscode_languageserver_protocol_1.TextDocumentEdit.create({ uri: textDocument.uri, version: textDocument.version }, toTextEdits(ranges, params.newName));
        return {
            documentChanges: [textDocumentEdit],
        };
    }
}
exports.HtmlTagNameRenameProvider = HtmlTagNameRenameProvider;
function toTextEdits(ranges, newText) {
    return ranges.map((range) => vscode_languageserver_protocol_1.TextEdit.replace(range, newText));
}
//# sourceMappingURL=HtmlTagNameRenameProvider.js.map

/***/ }),

/***/ 4708:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidVariableRenameProvider = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const theme_check_common_1 = __webpack_require__(5309);
class LiquidVariableRenameProvider {
    constructor(documentManager) {
        this.documentManager = documentManager;
    }
    async prepare(node, ancestors, params) {
        const document = this.documentManager.get(params.textDocument.uri);
        const textDocument = document === null || document === void 0 ? void 0 : document.textDocument;
        if (!textDocument || !node || !ancestors)
            return null;
        if (!supportedTags(node))
            return null;
        const oldName = variableName(node);
        const offsetOfVariableNameEnd = node.position.start + oldName.length;
        // The cursor could be past the end of the variable name
        if (textDocument.offsetAt(params.position) > offsetOfVariableNameEnd)
            return null;
        return {
            range: vscode_languageserver_1.Range.create(textDocument.positionAt(node.position.start), textDocument.positionAt(offsetOfVariableNameEnd)),
            placeholder: oldName,
        };
    }
    async rename(node, ancestors, params) {
        const document = this.documentManager.get(params.textDocument.uri);
        const textDocument = document === null || document === void 0 ? void 0 : document.textDocument;
        if (!textDocument || !node || !ancestors)
            return null;
        if (document.ast instanceof Error)
            return null;
        if (!supportedTags(node))
            return null;
        const oldName = variableName(node);
        const scope = variableNameBlockScope(oldName, ancestors);
        const replaceRange = textReplaceRange(oldName, textDocument, scope);
        const ranges = (0, theme_check_common_1.visit)(document.ast, {
            VariableLookup: replaceRange,
            AssignMarkup: replaceRange,
            ForMarkup: replaceRange,
        });
        const textDocumentEdit = vscode_languageserver_protocol_1.TextDocumentEdit.create({ uri: textDocument.uri, version: textDocument.version }, ranges.map((range) => vscode_languageserver_protocol_1.TextEdit.replace(range, params.newName)));
        return {
            documentChanges: [textDocumentEdit],
        };
    }
}
exports.LiquidVariableRenameProvider = LiquidVariableRenameProvider;
function supportedTags(node) {
    return (node.type === liquid_html_parser_1.NodeTypes.AssignMarkup ||
        node.type === liquid_html_parser_1.NodeTypes.VariableLookup ||
        node.type === liquid_html_parser_1.NodeTypes.ForMarkup);
}
function variableName(node) {
    var _a, _b;
    switch (node.type) {
        case liquid_html_parser_1.NodeTypes.VariableLookup:
        case liquid_html_parser_1.NodeTypes.AssignMarkup:
            return (_a = node.name) !== null && _a !== void 0 ? _a : '';
        case liquid_html_parser_1.NodeTypes.ForMarkup:
            return (_b = node.variableName) !== null && _b !== void 0 ? _b : '';
        default:
            return '';
    }
}
/*
 * Find the scope where the variable name is used. Looks at defined in `tablerow` and `for` tags.
 */
function variableNameBlockScope(variableName, ancestors) {
    let scopedAncestor;
    for (let i = ancestors.length - 1; i >= 0; i--) {
        const ancestor = ancestors[i];
        if (ancestor.type === liquid_html_parser_1.NodeTypes.LiquidTag &&
            (ancestor.name === liquid_html_parser_1.NamedTags.tablerow || ancestor.name === liquid_html_parser_1.NamedTags.for) &&
            typeof ancestor.markup !== 'string' &&
            ancestor.markup.variableName === variableName) {
            scopedAncestor = ancestor;
            break;
        }
    }
    if (!scopedAncestor || !scopedAncestor.blockEndPosition)
        return;
    return {
        start: scopedAncestor.blockStartPosition.start,
        end: scopedAncestor.blockEndPosition.end,
    };
}
function textReplaceRange(oldName, textDocument, selectedVariableScope) {
    return (node, ancestors) => {
        if (variableName(node) !== oldName)
            return;
        const ancestorScope = variableNameBlockScope(oldName, ancestors);
        if ((ancestorScope === null || ancestorScope === void 0 ? void 0 : ancestorScope.start) !== (selectedVariableScope === null || selectedVariableScope === void 0 ? void 0 : selectedVariableScope.start) ||
            (ancestorScope === null || ancestorScope === void 0 ? void 0 : ancestorScope.end) !== (selectedVariableScope === null || selectedVariableScope === void 0 ? void 0 : selectedVariableScope.end)) {
            return;
        }
        return vscode_languageserver_1.Range.create(textDocument.positionAt(node.position.start), textDocument.positionAt(node.position.start + oldName.length));
    };
}
//# sourceMappingURL=LiquidVariableRenameProvider.js.map

/***/ }),

/***/ 1080:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenameHandler = void 0;
const AssetRenameHandler_1 = __webpack_require__(5534);
const BlockRenameHandler_1 = __webpack_require__(3169);
const SnippetRenameHandler_1 = __webpack_require__(1221);
const SectionRenameHandler_1 = __webpack_require__(1099);
/**
 * The RenameHandler is responsible for handling workspace/didRenameFiles notifications.
 *
 * Stuff we'll handle:
 * - When a snippet is renamed, then we'll change all the render calls
 * - When an asset is renamed, then we'll change the asset_url calls
 * - etc.
 */
class RenameHandler {
    constructor(connection, capabilities, documentManager, findThemeRootURI) {
        this.handlers = [
            new SnippetRenameHandler_1.SnippetRenameHandler(documentManager, connection, capabilities, findThemeRootURI),
            new AssetRenameHandler_1.AssetRenameHandler(documentManager, connection, capabilities, findThemeRootURI),
            new BlockRenameHandler_1.BlockRenameHandler(documentManager, connection, capabilities, findThemeRootURI),
            new SectionRenameHandler_1.SectionRenameHandler(documentManager, connection, capabilities, findThemeRootURI),
        ];
    }
    async onDidRenameFiles(params) {
        try {
            const promises = this.handlers.map((handler) => handler.onDidRenameFiles(params));
            await Promise.all(promises);
        }
        catch (error) {
            console.error(error);
            return;
        }
    }
}
exports.RenameHandler = RenameHandler;
//# sourceMappingURL=RenameHandler.js.map

/***/ }),

/***/ 5534:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AssetRenameHandler = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const documents_1 = __webpack_require__(1682);
const uri_1 = __webpack_require__(3255);
/**
 * The AssetRenameHandler will handle asset renames.
 *
 * We'll change all the `| asset_url` that reference the old asset:
 *   {{ 'oldName.js' | asset_url }} -> {{ 'newName.js' | asset_url }}
 *
 * We'll do that for `.(css|js).liquid` files as well
 *
 * We'll do this by visiting all the liquid files in the theme and looking for
 * string | asset_url Variable nodes that reference the old asset. We'll then create a
 * WorkspaceEdit that changes the references to the new asset.
 */
class AssetRenameHandler {
    constructor(documentManager, connection, capabilities, findThemeRootURI) {
        this.documentManager = documentManager;
        this.connection = connection;
        this.capabilities = capabilities;
        this.findThemeRootURI = findThemeRootURI;
    }
    async onDidRenameFiles(params) {
        var _a;
        if (!this.capabilities.hasApplyEditSupport)
            return;
        const relevantRenames = params.files.filter((file) => (0, uri_1.isAsset)(file.oldUri) && (0, uri_1.isAsset)(file.newUri));
        // Only preload if you have something to do (folder renames are not supported)
        if (relevantRenames.length !== 1)
            return;
        const rename = relevantRenames[0];
        const rootUri = await this.findThemeRootURI(theme_check_common_1.path.dirname(params.files[0].oldUri));
        await this.documentManager.preload(rootUri);
        const theme = this.documentManager.theme(rootUri, true);
        const liquidSourceCodes = theme.filter(documents_1.isLiquidSourceCode);
        const oldAssetName = (0, uri_1.assetName)(rename.oldUri);
        const newAssetName = (0, uri_1.assetName)(rename.newUri);
        const editLabel = `Rename asset '${oldAssetName}' to '${newAssetName}'`;
        const annotationId = 'renameAsset';
        const workspaceEdit = {
            documentChanges: [],
            changeAnnotations: {
                [annotationId]: {
                    label: editLabel,
                    needsConfirmation: false,
                },
            },
        };
        for (const sourceCode of liquidSourceCodes) {
            if (sourceCode.ast instanceof Error)
                continue;
            const textDocument = sourceCode.textDocument;
            const edits = (0, theme_check_common_1.visit)(sourceCode.ast, {
                LiquidVariable(node) {
                    if (node.filters.length === 0)
                        return;
                    if (node.expression.type !== liquid_html_parser_1.NodeTypes.String)
                        return;
                    if (node.filters[0].name !== 'asset_url')
                        return;
                    const assetName = node.expression.value;
                    if (assetName !== oldAssetName)
                        return;
                    return {
                        newText: newAssetName,
                        range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(node.expression.position.start + 1), // +1 to skip the opening quote
                        textDocument.positionAt(node.expression.position.end - 1)),
                    };
                },
            });
            if (edits.length === 0)
                continue;
            workspaceEdit.documentChanges.push({
                textDocument: {
                    uri: textDocument.uri,
                    version: (_a = sourceCode.version) !== null && _a !== void 0 ? _a : null /* null means file from disk in this API */,
                },
                annotationId,
                edits,
            });
        }
        if (workspaceEdit.documentChanges.length === 0) {
            console.error('Nothing to do!');
            return;
        }
        await this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, {
            label: editLabel,
            edit: workspaceEdit,
        });
    }
}
exports.AssetRenameHandler = AssetRenameHandler;
//# sourceMappingURL=AssetRenameHandler.js.map

/***/ }),

/***/ 3169:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockRenameHandler = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const documents_1 = __webpack_require__(1682);
const uri_1 = __webpack_require__(3255);
const utils_1 = __webpack_require__(4075);
const annotationId = 'renameBlock';
/**
 * The BlockRenameHandler will handle block renames.
 *
 * Whenever a block gets renamed, a lot of things need to happen:
 *   1. References in files with a {% schema %} must be changed
 *   2. References in template files must be changed
 *   3. References in section groups must be changed
 *   4. References in {% content_for "block", type: "oldName" %} must be changed
 *
 * Things we're not doing:
 *   5. If isPublic(oldName) && isPrivate(newName) && "schema.blocks" accepts "@theme",
 *      Then the block should be added to the "blocks" array
 *
 *    Reasoning: this is more noisy than useful. a now-private block
 *      could be used by a preset, template or section group. Doing a
 *      toil-free rename would require visiting all preset, templates and
 *      section groups to see if a parent that uses the new block name
 *      was supporting "@theme" blocks. It's a lot. It's O(S*(S+T+SG)) where
 *      S is the number of sections, T is the number of templates and SG is the
 *      number of section groups. It's not worth it.
 *
 *      This stuff is complicated enough as it is 😅.
 */
class BlockRenameHandler {
    constructor(documentManager, connection, capabilities, findThemeRootURI) {
        this.documentManager = documentManager;
        this.connection = connection;
        this.capabilities = capabilities;
        this.findThemeRootURI = findThemeRootURI;
    }
    async onDidRenameFiles(params) {
        if (!this.capabilities.hasApplyEditSupport)
            return;
        const relevantRenames = params.files.filter((file) => (0, uri_1.isBlock)(file.oldUri) && (0, uri_1.isBlock)(file.newUri));
        // Only preload if you have something to do (folder renames not supported yet).
        if (relevantRenames.length !== 1)
            return;
        const rename = relevantRenames[0];
        const rootUri = await this.findThemeRootURI(theme_check_common_1.path.dirname(params.files[0].oldUri));
        await this.documentManager.preload(rootUri);
        const theme = this.documentManager.theme(rootUri, true);
        const liquidFiles = theme.filter(documents_1.isLiquidSourceCode);
        const sectionsAndBlocks = liquidFiles.filter((file) => (0, uri_1.isBlock)(file.uri) || (0, uri_1.isSection)(file.uri));
        const templates = theme.filter(documents_1.isJsonSourceCode).filter((file) => (0, uri_1.isTemplate)(file.uri));
        const sectionGroups = theme.filter(documents_1.isJsonSourceCode).filter((file) => (0, uri_1.isSectionGroup)(file.uri));
        const oldBlockName = (0, uri_1.blockName)(rename.oldUri);
        const newBlockName = (0, uri_1.blockName)(rename.newUri);
        const editLabel = `Rename block '${oldBlockName}' to '${newBlockName}'`;
        const workspaceEdit = {
            documentChanges: [],
            changeAnnotations: {
                [annotationId]: {
                    label: editLabel,
                    needsConfirmation: false,
                },
            },
        };
        // We need to keep track of sections that have local blocks, because we
        // shouldn't rename those. Only uses of "@theme" or specifically named blocks
        // should be renamed when the blocks/*.liquid file is renamed.
        const sectionsWithLocalBlocks = new Set();
        const sectionAndBlocksChanges = await Promise.all(sectionsAndBlocks.map(this.getSchemaChanges(sectionsWithLocalBlocks, oldBlockName, newBlockName)));
        // All the templates/*.json files need to be updated with the new block name
        // when the old block name wasn't a local block.
        const [templateChanges, sectionGroupChanges, contentForChanges] = await Promise.all([
            Promise.all(templates.map(this.getTemplateChanges(oldBlockName, newBlockName, sectionsWithLocalBlocks))),
            Promise.all(sectionGroups.map(this.getSectionGroupChanges(oldBlockName, newBlockName, sectionsWithLocalBlocks))),
            Promise.all(liquidFiles.map(this.getContentForChanges(oldBlockName, newBlockName))),
        ]);
        for (const docChange of [
            ...sectionAndBlocksChanges,
            ...templateChanges,
            ...sectionGroupChanges,
        ]) {
            if (docChange !== null) {
                workspaceEdit.documentChanges.push(docChange);
            }
        }
        // Because contentForChanges could make a change to an existing document, we need
        // to group the edits together by document. Or else we might have index
        // drifting issues.
        for (const docChange of contentForChanges) {
            if (docChange !== null) {
                const existingDocChange = workspaceEdit.documentChanges.find((dc) => dc.textDocument.uri === (docChange === null || docChange === void 0 ? void 0 : docChange.textDocument.uri));
                if (existingDocChange) {
                    existingDocChange.edits.push(...docChange.edits);
                }
                else {
                    workspaceEdit.documentChanges.push(docChange);
                }
            }
        }
        if (workspaceEdit.documentChanges.length === 0) {
            console.error('Nothing to do!');
            return;
        }
        await this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, {
            label: editLabel,
            edit: workspaceEdit,
        });
    }
    getSchemaChanges(sectionsWithLocalBlocks, oldBlockName, newBlockName) {
        return async (sourceCode) => {
            if (sourceCode.ast instanceof Error)
                return null;
            const textDocument = sourceCode.textDocument;
            const schema = await sourceCode.getSchema();
            if (!(0, theme_check_common_1.isBlockSchema)(schema) && !(0, theme_check_common_1.isSectionSchema)(schema))
                return null;
            if ((0, theme_check_common_1.isError)(schema.validSchema) || (0, theme_check_common_1.isError)(schema.ast))
                return null;
            const { validSchema, ast, offset } = schema;
            const edits = [];
            if (validSchema.blocks) {
                for (let i = 0; i < validSchema.blocks.length; i++) {
                    const blockDef = validSchema.blocks[i];
                    if (isLocalBlock(blockDef)) {
                        // If the section has a local blocks, we shouldn't rename
                        // anything in this file.
                        if ((0, theme_check_common_1.isSectionSchema)(schema)) {
                            sectionsWithLocalBlocks.add(schema.name);
                        }
                        return null;
                    }
                    if (blockDef.type !== oldBlockName)
                        continue;
                    const node = (0, theme_check_common_1.nodeAtPath)(ast, ['blocks', i, 'type']);
                    edits.push({
                        annotationId,
                        newText: newBlockName,
                        range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(offset + node.loc.start.offset + 1), textDocument.positionAt(offset + node.loc.end.offset - 1)),
                    });
                }
            }
            const presetEdits = (presetBlock, path) => {
                if (!presetBlock || !('blocks' in presetBlock))
                    return [];
                if (Array.isArray(presetBlock.blocks)) {
                    return presetBlock.blocks.flatMap((block, index) => {
                        const edits = presetEdits(block, [...path, 'blocks', index]);
                        if (block.type === oldBlockName) {
                            const node = (0, theme_check_common_1.nodeAtPath)(ast, [...path, 'blocks', index, 'type']);
                            edits.push({
                                annotationId,
                                newText: newBlockName,
                                range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(offset + node.loc.start.offset + 1), textDocument.positionAt(offset + node.loc.end.offset - 1)),
                            });
                        }
                        return edits;
                    });
                }
                else if (typeof presetBlock.blocks === 'object') {
                    return Object.entries(presetBlock.blocks).flatMap(([key, block]) => {
                        const edits = presetEdits(block, [...path, 'blocks', key]);
                        if (block.type === oldBlockName) {
                            const node = (0, theme_check_common_1.nodeAtPath)(ast, [...path, 'blocks', key, 'type']);
                            edits.push({
                                annotationId,
                                newText: newBlockName,
                                range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(offset + node.loc.start.offset + 1), textDocument.positionAt(offset + node.loc.end.offset - 1)),
                            });
                        }
                        return edits;
                    });
                }
                else {
                    return [];
                }
            };
            if (validSchema.presets) {
                edits.push(...validSchema.presets.flatMap((preset, i) => presetEdits(preset, ['presets', i])));
            }
            if (edits.length === 0)
                return null;
            return documentChanges(sourceCode, edits);
        };
    }
    getTemplateChanges(oldBlockName, newBlockName, sectionsWithLocalBlocks) {
        return async (sourceCode) => {
            // assuming that the JSON is valid...
            const { textDocument, ast, source } = sourceCode;
            const parsed = (0, theme_check_common_1.parseJSON)(source);
            if (!parsed || (0, theme_check_common_1.isError)(parsed) || (0, theme_check_common_1.isError)(ast))
                return null;
            const getBlocksEdits = getBlocksEditsFactory(oldBlockName, newBlockName, textDocument, ast);
            const edits = !(0, utils_1.isValidTemplate)(parsed)
                ? []
                : Object.entries(parsed.sections).flatMap(([key, section]) => {
                    if ('blocks' in section &&
                        !!section.blocks &&
                        !sectionsWithLocalBlocks.has(section.type) // don't rename local blocks
                    ) {
                        return getBlocksEdits(section.blocks, ['sections', key, 'blocks']);
                    }
                    else {
                        return [];
                    }
                });
            if (edits.length === 0)
                return null;
            return documentChanges(sourceCode, edits);
        };
    }
    getSectionGroupChanges(oldBlockName, newBlockName, sectionsWithLocalBlocks) {
        return async (sourceCode) => {
            const { textDocument, ast, source } = sourceCode;
            const parsed = (0, theme_check_common_1.parseJSON)(source);
            if (!parsed || (0, theme_check_common_1.isError)(parsed) || (0, theme_check_common_1.isError)(ast))
                return null;
            const getBlocksEdits = getBlocksEditsFactory(oldBlockName, newBlockName, textDocument, ast);
            const edits = !(0, utils_1.isValidSectionGroup)(parsed)
                ? []
                : Object.entries(parsed.sections).flatMap(([key, section]) => {
                    if ('blocks' in section &&
                        !!section.blocks &&
                        !sectionsWithLocalBlocks.has(section.type) // don't rename local blocks
                    ) {
                        return getBlocksEdits(section.blocks, ['sections', key, 'blocks']);
                    }
                    else {
                        return [];
                    }
                });
            if (edits.length === 0)
                return null;
            return documentChanges(sourceCode, edits);
        };
    }
    getContentForChanges(oldBlockName, newBlockName) {
        return async (sourceCode) => {
            const { textDocument, ast } = sourceCode;
            if ((0, theme_check_common_1.isError)(ast))
                return null;
            const edits = (0, theme_check_common_1.visit)(ast, {
                LiquidTag(node) {
                    if (node.name !== 'content_for')
                        return;
                    if (typeof node.markup === 'string')
                        return;
                    if (node.markup.contentForType.value !== 'block')
                        return;
                    const typeNode = node.markup.args.find((arg) => arg.name === 'type');
                    if (!typeNode ||
                        typeNode.value.type !== liquid_html_parser_1.NodeTypes.String ||
                        typeNode.value.value !== oldBlockName) {
                        return;
                    }
                    return {
                        annotationId,
                        newText: newBlockName,
                        range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(typeNode.value.position.start + 1), textDocument.positionAt(typeNode.value.position.end - 1)),
                    };
                },
            });
            if (edits.length === 0)
                return null;
            return documentChanges(sourceCode, edits);
        };
    }
}
exports.BlockRenameHandler = BlockRenameHandler;
function isLocalBlock(blockDef) {
    return 'name' in blockDef && typeof blockDef.name === 'string';
}
function getBlocksEditsFactory(oldBlockName, newBlockName, textDocument, ast) {
    return function getBlocksEdits(blocks, path) {
        if (!blocks)
            return [];
        return Object.entries(blocks).flatMap(([key, block]) => {
            const edits = getBlocksEdits(block.blocks, [...path, key, 'blocks']);
            if (block.type === oldBlockName) {
                const node = (0, theme_check_common_1.nodeAtPath)(ast, [...path, key, 'type']);
                edits.push({
                    annotationId,
                    newText: newBlockName,
                    range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(node.loc.start.offset + 1), textDocument.positionAt(node.loc.end.offset - 1)),
                });
            }
            return edits;
        });
    };
}
function documentChanges(sourceCode, edits) {
    var _a;
    return {
        textDocument: {
            uri: sourceCode.uri,
            version: (_a = sourceCode.version) !== null && _a !== void 0 ? _a : null /* null means file from disk in this API */,
        },
        edits,
    };
}
//# sourceMappingURL=BlockRenameHandler.js.map

/***/ }),

/***/ 1099:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SectionRenameHandler = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const documents_1 = __webpack_require__(1682);
const uri_1 = __webpack_require__(3255);
const utils_1 = __webpack_require__(4075);
const annotationId = 'renameSection';
/**
 * The SectionRenameHandler will handle section renames
 *
 * Whenever a section gets renamed, a lot of things need to happen:
 *   2. References in template files must be changed
 *   3. References in section groups must be changed
 *   4. References like {% section "oldName" %} must be changed
 */
class SectionRenameHandler {
    constructor(documentManager, connection, capabilities, findThemeRootURI) {
        this.documentManager = documentManager;
        this.connection = connection;
        this.capabilities = capabilities;
        this.findThemeRootURI = findThemeRootURI;
    }
    async onDidRenameFiles(params) {
        if (!this.capabilities.hasApplyEditSupport)
            return;
        const relevantRenames = params.files.filter((file) => (0, uri_1.isSection)(file.oldUri) && (0, uri_1.isSection)(file.newUri));
        // Only preload if you have something to do (folder renames not supported yet).
        if (relevantRenames.length !== 1)
            return;
        const rename = relevantRenames[0];
        const rootUri = await this.findThemeRootURI(theme_check_common_1.path.dirname(params.files[0].oldUri));
        await this.documentManager.preload(rootUri);
        const theme = this.documentManager.theme(rootUri, true);
        const liquidFiles = theme.filter(documents_1.isLiquidSourceCode);
        const templates = theme.filter(documents_1.isJsonSourceCode).filter((file) => (0, uri_1.isTemplate)(file.uri));
        const sectionGroups = theme.filter(documents_1.isJsonSourceCode).filter((file) => (0, uri_1.isSectionGroup)(file.uri));
        const oldSectionName = (0, uri_1.sectionName)(rename.oldUri);
        const newSectionName = (0, uri_1.sectionName)(rename.newUri);
        const editLabel = `Rename section '${oldSectionName}' to '${newSectionName}'`;
        const workspaceEdit = {
            documentChanges: [],
            changeAnnotations: {
                [annotationId]: {
                    label: editLabel,
                    needsConfirmation: false,
                },
            },
        };
        // All the templates/*.json files need to be updated with the new block name
        // when the old block name wasn't a local block.
        const [templateChanges, sectionGroupChanges, sectionTagChanges] = await Promise.all([
            Promise.all(templates.map(this.getTemplateChanges(oldSectionName, newSectionName))),
            Promise.all(sectionGroups.map(this.getSectionGroupChanges(oldSectionName, newSectionName))),
            Promise.all(liquidFiles.map(this.getSectionTagChanges(oldSectionName, newSectionName))),
        ]);
        for (const docChange of [...templateChanges, ...sectionGroupChanges]) {
            if (docChange !== null) {
                workspaceEdit.documentChanges.push(docChange);
            }
        }
        // Because section tag changes could make a change to an existing document,
        // we need to group the edits together by document. Or else we might have
        // index drifting issues.
        for (const docChange of sectionTagChanges) {
            if (docChange !== null) {
                const existingDocChange = workspaceEdit.documentChanges.find((dc) => dc.textDocument.uri === (docChange === null || docChange === void 0 ? void 0 : docChange.textDocument.uri));
                if (existingDocChange) {
                    existingDocChange.edits.push(...docChange.edits);
                }
                else {
                    workspaceEdit.documentChanges.push(docChange);
                }
            }
        }
        if (workspaceEdit.documentChanges.length === 0) {
            console.error('Nothing to do!');
            return;
        }
        await this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, {
            label: editLabel,
            edit: workspaceEdit,
        });
    }
    getTemplateChanges(oldSectionName, newSectionName) {
        return async (sourceCode) => {
            const { textDocument, ast, source } = sourceCode;
            const parsed = (0, theme_check_common_1.parseJSON)(source);
            if (!parsed || (0, theme_check_common_1.isError)(parsed) || (0, theme_check_common_1.isError)(ast))
                return null;
            const edits = !(0, utils_1.isValidTemplate)(parsed)
                ? []
                : Object.entries(parsed.sections)
                    .filter(([_key, section]) => section.type === oldSectionName)
                    .map(([key]) => {
                    const node = (0, theme_check_common_1.nodeAtPath)(ast, ['sections', key, 'type']);
                    return {
                        annotationId,
                        newText: newSectionName,
                        range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(node.loc.start.offset + 1), textDocument.positionAt(node.loc.end.offset - 1)),
                    };
                });
            if (edits.length === 0)
                return null;
            return documentChanges(sourceCode, edits);
        };
    }
    // Awfully similar except for the isValidSectionGroup check and the types of the objects.
    // Feels like a coincidence that the types are so similar. I'm not sure this should be DRY'd up.
    getSectionGroupChanges(oldSectionName, newSectionName) {
        return async (sourceCode) => {
            const { textDocument, ast, source } = sourceCode;
            const parsed = (0, theme_check_common_1.parseJSON)(source);
            if (!parsed || (0, theme_check_common_1.isError)(parsed) || (0, theme_check_common_1.isError)(ast))
                return null;
            const edits = !(0, utils_1.isValidSectionGroup)(parsed)
                ? []
                : Object.entries(parsed.sections)
                    .filter(([_key, section]) => section.type === oldSectionName)
                    .map(([key]) => {
                    const node = (0, theme_check_common_1.nodeAtPath)(ast, ['sections', key, 'type']);
                    return {
                        annotationId,
                        newText: newSectionName,
                        range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(node.loc.start.offset + 1), textDocument.positionAt(node.loc.end.offset - 1)),
                    };
                });
            if (edits.length === 0)
                return null;
            return documentChanges(sourceCode, edits);
        };
    }
    getSectionTagChanges(oldSectionName, newSectionName) {
        return async (sourceCode) => {
            const { textDocument, ast } = sourceCode;
            if ((0, theme_check_common_1.isError)(ast))
                return null;
            const edits = (0, theme_check_common_1.visit)(ast, {
                LiquidTag(node) {
                    if (node.name !== 'section')
                        return;
                    if (typeof node.markup === 'string')
                        return;
                    // Note the type assertion to the LHS of the expression.
                    // The type assertions above are enough for this to be true.
                    // But I'm making the explicit annotation here to make it clear.
                    const typeNode = node.markup;
                    if (typeNode.value !== oldSectionName)
                        return;
                    return {
                        annotationId,
                        newText: newSectionName,
                        range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(typeNode.position.start + 1), textDocument.positionAt(typeNode.position.end - 1)),
                    };
                },
            });
            if (edits.length === 0)
                return null;
            return documentChanges(sourceCode, edits);
        };
    }
}
exports.SectionRenameHandler = SectionRenameHandler;
function documentChanges(sourceCode, edits) {
    var _a;
    return {
        textDocument: {
            uri: sourceCode.uri,
            version: (_a = sourceCode.version) !== null && _a !== void 0 ? _a : null /* null means file from disk in this API */,
        },
        edits,
    };
}
//# sourceMappingURL=SectionRenameHandler.js.map

/***/ }),

/***/ 1221:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SnippetRenameHandler = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_protocol_1 = __webpack_require__(5501);
const documents_1 = __webpack_require__(1682);
const uri_1 = __webpack_require__(3255);
/**
 * The SnippetRenameHandler will handle snippet renames.
 *
 * We'll change all the render and include tags that reference the old snippet
 * to reference the new snippet.
 *
 *   {% render 'oldName' %} -> {% render 'newName' %}
 *
 * We'll do this by visiting all the liquid files in the theme and looking for
 * render and include tags that reference the old snippet. We'll then create a
 * WorkspaceEdit that changes the references to the new snippet.
 */
class SnippetRenameHandler {
    constructor(documentManager, connection, capabilities, findThemeRootURI) {
        this.documentManager = documentManager;
        this.connection = connection;
        this.capabilities = capabilities;
        this.findThemeRootURI = findThemeRootURI;
    }
    async onDidRenameFiles(params) {
        var _a;
        if (!this.capabilities.hasApplyEditSupport)
            return;
        const relevantRenames = params.files.filter((file) => (0, uri_1.isSnippet)(file.oldUri) && (0, uri_1.isSnippet)(file.newUri));
        // Only preload if you have something to do (folder renames are not supported)
        if (relevantRenames.length !== 1)
            return;
        const rename = relevantRenames[0];
        const rootUri = await this.findThemeRootURI(theme_check_common_1.path.dirname(params.files[0].oldUri));
        await this.documentManager.preload(rootUri);
        const theme = this.documentManager.theme(rootUri, true);
        const liquidSourceCodes = theme.filter(documents_1.isLiquidSourceCode);
        const oldSnippetName = (0, uri_1.snippetName)(rename.oldUri);
        const newSnippetName = (0, uri_1.snippetName)(rename.newUri);
        const editLabel = `Rename snippet '${oldSnippetName}' to '${newSnippetName}'`;
        const annotationId = 'renameSnippet';
        const workspaceEdit = {
            documentChanges: [],
            changeAnnotations: {
                [annotationId]: {
                    label: editLabel,
                    needsConfirmation: false,
                },
            },
        };
        for (const sourceCode of liquidSourceCodes) {
            if (sourceCode.ast instanceof Error)
                continue;
            const textDocument = sourceCode.textDocument;
            const edits = (0, theme_check_common_1.visit)(sourceCode.ast, {
                LiquidTag(node) {
                    if (node.name !== liquid_html_parser_1.NamedTags.render && node.name !== liquid_html_parser_1.NamedTags.include) {
                        return;
                    }
                    if (typeof node.markup === 'string') {
                        return;
                    }
                    const snippet = node.markup.snippet;
                    if (snippet.type === liquid_html_parser_1.NodeTypes.String && snippet.value === oldSnippetName) {
                        return {
                            newText: `${newSnippetName}`,
                            range: vscode_languageserver_protocol_1.Range.create(textDocument.positionAt(snippet.position.start + 1), // +1 to skip the opening quote
                            textDocument.positionAt(snippet.position.end - 1)),
                        };
                    }
                },
            });
            if (edits.length === 0)
                continue;
            workspaceEdit.documentChanges.push({
                textDocument: {
                    uri: textDocument.uri,
                    version: (_a = sourceCode.version) !== null && _a !== void 0 ? _a : null /* null means file from disk in this API */,
                },
                annotationId,
                edits,
            });
        }
        if (workspaceEdit.documentChanges.length === 0) {
            console.error('Nothing to do!');
            return;
        }
        await this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, {
            label: editLabel,
            edit: workspaceEdit,
        });
    }
}
exports.SnippetRenameHandler = SnippetRenameHandler;
//# sourceMappingURL=SnippetRenameHandler.js.map

/***/ }),

/***/ 4075:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isValidSectionGroup = exports.isValidTemplate = void 0;
// this is very very optimistic...
function isValidTemplate(parsed) {
    return (typeof parsed === 'object' &&
        parsed !== null &&
        'sections' in parsed &&
        'order' in parsed &&
        Array.isArray(parsed.order));
}
exports.isValidTemplate = isValidTemplate;
function isValidSectionGroup(parsed) {
    return (typeof parsed === 'object' &&
        parsed !== null &&
        'sections' in parsed &&
        'order' in parsed &&
        Array.isArray(parsed.order));
}
exports.isValidSectionGroup = isValidSectionGroup;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5221:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CachedFileSystem = void 0;
class CachedFileSystem {
    constructor(fs) {
        this.readFile = cachedByUri(fs.readFile.bind(fs));
        this.readDirectory = cachedByUri(fs.readDirectory.bind(fs));
        this.stat = cachedByUri(fs.stat.bind(fs));
    }
}
exports.CachedFileSystem = CachedFileSystem;
function cachedByUri(fn) {
    const cache = new Map();
    function cached(uri) {
        if (!cache.has(uri)) {
            // I'm intentionally leaving this comment here for debugging purposes :)
            // console.error('cache miss', fn.name, uri);
            cache.set(uri, fn(uri));
        }
        return cache.get(uri);
    }
    cached.invalidate = (uri) => {
        // I'm intentionally leaving this comment here for debugging purposes :)
        // console.error('cache invalidate', fn.name, uri);
        cache.delete(uri);
    };
    return cached;
}
//# sourceMappingURL=CachedFileSystem.js.map

/***/ }),

/***/ 1985:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Configuration = exports.ConfigurationKeys = exports.PRELOAD_ON_BOOT = exports.CHECK_ON_CHANGE = exports.CHECK_ON_SAVE = exports.CHECK_ON_OPEN = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_1 = __webpack_require__(7532);
exports.CHECK_ON_OPEN = 'themeCheck.checkOnOpen';
exports.CHECK_ON_SAVE = 'themeCheck.checkOnSave';
exports.CHECK_ON_CHANGE = 'themeCheck.checkOnChange';
exports.PRELOAD_ON_BOOT = 'themeCheck.preloadOnBoot';
exports.ConfigurationKeys = [
    exports.CHECK_ON_OPEN,
    exports.CHECK_ON_SAVE,
    exports.CHECK_ON_CHANGE,
    exports.PRELOAD_ON_BOOT,
];
class Configuration {
    constructor(connection, capabilities) {
        this.connection = connection;
        this.capabilities = capabilities;
        this[_a] = true;
        this[_b] = true;
        this[_c] = true;
        this[_d] = true;
        this.fetchConfiguration = (0, theme_check_common_1.memo)(async () => {
            if (!this.capabilities.hasWorkspaceConfigurationSupport)
                return;
            const configs = await this.connection.workspace.getConfiguration(exports.ConfigurationKeys.map((key) => ({ section: key })));
            for (let i = 0; i < exports.ConfigurationKeys.length; i++) {
                const key = exports.ConfigurationKeys[i];
                if (configs[i] !== null) {
                    this[key] = configs[i];
                }
            }
        });
        this.registerDidChangeCapability = (0, theme_check_common_1.memo)(async () => {
            if (!this.capabilities.hasDidChangeConfigurationDynamicRegistrationSupport)
                return;
            return this.connection.client.register(vscode_languageserver_1.DidChangeConfigurationNotification.type);
        });
        this.registerDidChangeWatchedFilesNotification = async (options) => {
            if (!this.capabilities.hasDidChangeWatchedFilesDynamicRegistrationSupport)
                return;
            return this.connection.client.register(vscode_languageserver_1.DidChangeWatchedFilesNotification.type, options);
        };
        this.connection = connection;
        this.capabilities = capabilities;
    }
    setup() {
        this[exports.CHECK_ON_OPEN] = this.capabilities.initializationOption(exports.CHECK_ON_OPEN, true);
        this[exports.CHECK_ON_SAVE] = this.capabilities.initializationOption(exports.CHECK_ON_SAVE, true);
        this[exports.CHECK_ON_CHANGE] = this.capabilities.initializationOption(exports.CHECK_ON_CHANGE, true);
        this[exports.PRELOAD_ON_BOOT] = this.capabilities.initializationOption(exports.PRELOAD_ON_BOOT, true);
    }
    async shouldCheckOnOpen() {
        await this.fetchConfiguration();
        return this[exports.CHECK_ON_OPEN];
    }
    async shouldCheckOnSave() {
        await this.fetchConfiguration();
        return this[exports.CHECK_ON_SAVE];
    }
    async shouldCheckOnChange() {
        await this.fetchConfiguration();
        return this[exports.CHECK_ON_CHANGE];
    }
    async shouldPreloadOnBoot() {
        await this.fetchConfiguration();
        return this[exports.PRELOAD_ON_BOOT];
    }
    clearCache() {
        this.fetchConfiguration.clearCache();
    }
}
exports.Configuration = Configuration;
_a = exports.CHECK_ON_OPEN, _b = exports.CHECK_ON_SAVE, _c = exports.CHECK_ON_CHANGE, _d = exports.PRELOAD_ON_BOOT;
//# sourceMappingURL=Configuration.js.map

/***/ }),

/***/ 4495:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.startServer = void 0;
var startServer_1 = __webpack_require__(7272);
Object.defineProperty(exports, "startServer", ({ enumerable: true, get: function () { return startServer_1.startServer; } }));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2058:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safe = void 0;
/**
 * This function wraps a function that might throw an error and handles it by
 * returning the default value instead.
 *
 * There are cases, such as fs.readDirectory, that might throw an error if the
 * directory doesn't exist. Since there _is_ a difference between a directory that
 * doesn't exist and a directory that is empty, we don't want to change the API
 * of fs.readDirectory either.
 *
 * In such cases, we can use this helper to wrap the function and gracefully handle
 * the error by returning a default value instead.
 *
 * @param fn
 * @param defaultReturnValue
 *
 * @example
 * const getThemeBlockNames = safe(async function () { ... }, []);
 */
const safe = (fn, defaultReturnValue) => {
    return async function safeFn(...args) {
        try {
            return await fn(...args);
        }
        catch (error) {
            return defaultReturnValue;
        }
    };
};
exports.safe = safe;
//# sourceMappingURL=safe.js.map

/***/ }),

/***/ 7272:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.startServer = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const vscode_languageserver_1 = __webpack_require__(7532);
const ClientCapabilities_1 = __webpack_require__(6558);
const codeActions_1 = __webpack_require__(8940);
const commands_1 = __webpack_require__(8042);
const completions_1 = __webpack_require__(3515);
const diagnostics_1 = __webpack_require__(3028);
const DocumentHighlightsProvider_1 = __webpack_require__(4915);
const documentLinks_1 = __webpack_require__(774);
const documents_1 = __webpack_require__(1682);
const formatting_1 = __webpack_require__(9343);
const hover_1 = __webpack_require__(2014);
const JSONLanguageService_1 = __webpack_require__(2553);
const LinkedEditingRangesProvider_1 = __webpack_require__(8737);
const RenameProvider_1 = __webpack_require__(3371);
const RenameHandler_1 = __webpack_require__(1080);
const utils_1 = __webpack_require__(6813);
const uri_1 = __webpack_require__(3255);
const version_1 = __webpack_require__(507);
const CachedFileSystem_1 = __webpack_require__(5221);
const Configuration_1 = __webpack_require__(1985);
const safe_1 = __webpack_require__(2058);
const defaultLogger = () => { };
/**
 * The `git:` VFS does not support the `fs.readDirectory` call and makes most things break.
 * `git` URIs are the ones you'd encounter when doing a git diff in VS Code. They're not
 * real files, they're just a way to represent changes in a git repository. As such, I don't
 * think we want to sync those in our document manager or try to offer document links, etc.
 *
 * A middleware would be nice but it'd be a bit of a pain to implement.
 */
const hasUnsupportedDocument = (params) => {
    return ('textDocument' in params &&
        'uri' in params.textDocument &&
        typeof params.textDocument.uri === 'string' &&
        params.textDocument.uri.startsWith('git:'));
};
/**
 * This code runs in node and the browser, it can't talk to the file system
 * or make requests. Stuff like that should be injected.
 *
 * In browser, theme-check-js wants these things:
 *   - fileExists(path)
 *   - defaultTranslations
 *
 * Which means we gotta provide 'em from here too!
 */
function startServer(connection, { fs: injectedFs, loadConfig, log = defaultLogger, jsonValidationSet, themeDocset: remoteThemeDocset, fetchMetafieldDefinitionsForURI, }) {
    const fs = new CachedFileSystem_1.CachedFileSystem(injectedFs);
    const fileExists = (0, theme_check_common_1.makeFileExists)(fs);
    const clientCapabilities = new ClientCapabilities_1.ClientCapabilities();
    const configuration = new Configuration_1.Configuration(connection, clientCapabilities);
    const documentManager = new documents_1.DocumentManager(fs, connection, clientCapabilities, getModeForURI, isValidSchema);
    const diagnosticsManager = new diagnostics_1.DiagnosticsManager(connection);
    const documentLinksProvider = new documentLinks_1.DocumentLinksProvider(documentManager, findThemeRootURI);
    const codeActionsProvider = new codeActions_1.CodeActionsProvider(documentManager, diagnosticsManager);
    const onTypeFormattingProvider = new formatting_1.OnTypeFormattingProvider(documentManager, async function setCursorPosition(textDocument, position) {
        if (!clientCapabilities.hasShowDocumentSupport)
            return;
        connection.sendRequest(vscode_languageserver_1.ShowDocumentRequest.type, {
            uri: textDocument.uri,
            takeFocus: true,
            selection: {
                start: position,
                end: position,
            },
        });
    });
    const linkedEditingRangesProvider = new LinkedEditingRangesProvider_1.LinkedEditingRangesProvider(documentManager);
    const documentHighlightProvider = new DocumentHighlightsProvider_1.DocumentHighlightsProvider(documentManager);
    const renameProvider = new RenameProvider_1.RenameProvider(documentManager);
    const renameHandler = new RenameHandler_1.RenameHandler(connection, clientCapabilities, documentManager, findThemeRootURI);
    async function findThemeRootURI(uri) {
        const rootUri = await (0, theme_check_common_1.findRoot)(uri, fileExists);
        const config = await loadConfig(rootUri, fs);
        return config.rootUri;
    }
    const getMetafieldDefinitionsForRootUri = (0, theme_check_common_1.memoize)((0, theme_check_common_1.makeGetMetafieldDefinitions)(fs), (rootUri) => rootUri);
    const getMetafieldDefinitions = async (uri) => {
        const rootUri = await findThemeRootURI(uri);
        return getMetafieldDefinitionsForRootUri(rootUri);
    };
    // These are augmented here so that the caching is maintained over different runs.
    const themeDocset = new theme_check_common_1.AugmentedThemeDocset(remoteThemeDocset);
    const runChecks = (0, utils_1.debounce)((0, diagnostics_1.makeRunChecks)(documentManager, diagnosticsManager, {
        fs,
        loadConfig,
        themeDocset,
        jsonValidationSet,
        getMetafieldDefinitions,
    }), 100);
    const getTranslationsForURI = async (uri) => {
        const rootURI = await findThemeRootURI(uri);
        const theme = documentManager.theme(rootURI);
        const getDefaultTranslations = (0, theme_check_common_1.makeGetDefaultTranslations)(fs, theme, rootURI);
        const [defaultTranslations, shopifyTranslations] = await Promise.all([
            getDefaultTranslations(),
            themeDocset.systemTranslations(),
        ]);
        return { ...shopifyTranslations, ...defaultTranslations };
    };
    const getSchemaTranslationsForURI = async (uri) => {
        const rootURI = await findThemeRootURI(uri);
        const theme = documentManager.theme(rootURI);
        const getDefaultSchemaTranslations = (0, theme_check_common_1.makeGetDefaultSchemaTranslations)(fs, theme, rootURI);
        return getDefaultSchemaTranslations();
    };
    const getSnippetDefinitionForURI = async (uri, snippetName) => {
        const rootUri = await findThemeRootURI(uri);
        const snippetURI = theme_check_common_1.path.join(rootUri, 'snippets', `${snippetName}.liquid`);
        const snippet = documentManager.get(snippetURI);
        if (!snippet || snippet.type !== theme_check_common_1.SourceCodeType.LiquidHtml || (0, theme_check_common_1.isError)(snippet.ast)) {
            return undefined;
        }
        return snippet.getLiquidDoc(snippetName);
    };
    const snippetFilter = ([uri]) => /\.liquid$/.test(uri) && /snippets/.test(uri);
    const getSnippetNamesForURI = (0, safe_1.safe)(async (uri) => {
        const rootUri = await findThemeRootURI(uri);
        const snippetUris = await (0, theme_check_common_1.recursiveReadDirectory)(fs, rootUri, snippetFilter);
        return snippetUris.map(uri_1.snippetName);
    }, []);
    const getThemeSettingsSchemaForURI = (0, safe_1.safe)(async (uri) => {
        const rootUri = await findThemeRootURI(uri);
        const settingsSchemaUri = theme_check_common_1.path.join(rootUri, 'config', 'settings_schema.json');
        const contents = await fs.readFile(settingsSchemaUri);
        const json = (0, theme_check_common_1.parseJSON)(contents);
        if ((0, theme_check_common_1.isError)(json) || !Array.isArray(json)) {
            throw new Error('Settings JSON file not in correct format');
        }
        return json;
    }, []);
    async function getModeForURI(uri) {
        const rootUri = await (0, theme_check_common_1.findRoot)(uri, fileExists);
        const config = await loadConfig(rootUri, fs);
        return config.context;
    }
    const getThemeBlockNames = (0, safe_1.safe)(async (uri, includePrivate) => {
        const rootUri = await findThemeRootURI(uri);
        const blocks = await fs.readDirectory(theme_check_common_1.path.join(rootUri, 'blocks'));
        const blockNames = blocks.map(([uri]) => theme_check_common_1.path.basename(uri, '.liquid'));
        if (includePrivate) {
            return blockNames;
        }
        return blockNames.filter((blockName) => !blockName.startsWith('_'));
    }, []);
    async function getThemeBlockSchema(uri, name) {
        const rootUri = await findThemeRootURI(uri);
        const blockUri = theme_check_common_1.path.join(rootUri, 'blocks', `${name}.liquid`);
        const doc = documentManager.get(blockUri);
        if (!doc || doc.type !== theme_check_common_1.SourceCodeType.LiquidHtml) {
            return;
        }
        return doc.getSchema();
    }
    // Defined as a function to solve a circular dependency (doc manager & json
    // lang service both need each other)
    async function isValidSchema(uri, jsonString) {
        return jsonLanguageService.isValidSchema(uri, jsonString);
    }
    const jsonLanguageService = new JSONLanguageService_1.JSONLanguageService(documentManager, jsonValidationSet, getSchemaTranslationsForURI, getModeForURI, getThemeBlockNames, getThemeBlockSchema);
    const completionsProvider = new completions_1.CompletionsProvider({
        documentManager,
        themeDocset,
        getTranslationsForURI,
        getSnippetNamesForURI,
        getThemeSettingsSchemaForURI,
        log,
        getThemeBlockNames,
        getMetafieldDefinitions,
        getSnippetDefinitionForURI,
    });
    const hoverProvider = new hover_1.HoverProvider(documentManager, themeDocset, getMetafieldDefinitions, getTranslationsForURI, getThemeSettingsSchemaForURI, getSnippetDefinitionForURI);
    const executeCommandProvider = new commands_1.ExecuteCommandProvider(documentManager, diagnosticsManager, clientCapabilities, runChecks, connection);
    const fetchMetafieldDefinitionsForWorkspaceFolders = async (folders) => {
        if (!fetchMetafieldDefinitionsForURI)
            return;
        for (let folder of folders) {
            const mode = await getModeForURI(folder.uri);
            if (mode === 'theme') {
                fetchMetafieldDefinitionsForURI(folder.uri);
            }
        }
    };
    connection.onInitialize((params) => {
        clientCapabilities.setup(params.capabilities, params.initializationOptions);
        jsonLanguageService.setup(params.capabilities);
        configuration.setup();
        const fileOperationRegistrationOptions = {
            filters: [
                {
                    pattern: {
                        glob: '**/*.{liquid,json}',
                    },
                },
                {
                    pattern: {
                        glob: '**/assets/*',
                    },
                },
            ],
        };
        const result = {
            capabilities: {
                textDocumentSync: {
                    change: vscode_languageserver_1.TextDocumentSyncKind.Full,
                    save: true,
                    openClose: true,
                },
                codeActionProvider: {
                    codeActionKinds: [...codeActions_1.CodeActionKinds],
                },
                completionProvider: {
                    triggerCharacters: ['.', '{{ ', '{% ', '<', '/', '[', '"', "'", ':'],
                },
                documentOnTypeFormattingProvider: {
                    firstTriggerCharacter: ' ',
                    moreTriggerCharacter: ['{', '%', '-', '>'],
                },
                documentLinkProvider: {
                    resolveProvider: false,
                    workDoneProgress: false,
                },
                documentHighlightProvider: true,
                linkedEditingRangeProvider: true,
                renameProvider: {
                    prepareProvider: true,
                },
                executeCommandProvider: {
                    commands: [...commands_1.Commands],
                },
                hoverProvider: {
                    workDoneProgress: false,
                },
                workspace: {
                    workspaceFolders: {
                        supported: true,
                        changeNotifications: true,
                    },
                    fileOperations: {
                        didRename: fileOperationRegistrationOptions,
                    },
                },
            },
            serverInfo: {
                name: 'theme-language-server',
                version: version_1.VERSION,
            },
        };
        return result;
    });
    connection.onInitialized(() => {
        log(`[SERVER] Let's roll!`);
        configuration.fetchConfiguration();
        configuration.registerDidChangeCapability();
        configuration.registerDidChangeWatchedFilesNotification({
            watchers: [
                {
                    globPattern: '**/.shopify/*',
                },
                {
                    globPattern: '**/*.liquid',
                },
                {
                    globPattern: '**/{locales,sections,templates,customers}/*.json',
                },
                {
                    globPattern: '**/config/settings_{data,schema}.json',
                },
            ],
        });
        if (clientCapabilities.hasWorkspaceFoldersSupport) {
            connection.workspace.getWorkspaceFolders().then(async (folders) => {
                if (!folders)
                    return;
                fetchMetafieldDefinitionsForWorkspaceFolders(folders);
            });
            connection.workspace.onDidChangeWorkspaceFolders(async (params) => {
                fetchMetafieldDefinitionsForWorkspaceFolders(params.added);
            });
        }
    });
    connection.onDidChangeConfiguration((_params) => {
        configuration.clearCache();
    });
    connection.onDidOpenTextDocument(async (params) => {
        if (hasUnsupportedDocument(params))
            return;
        const { uri, text, version } = params.textDocument;
        documentManager.open(uri, text, version);
        if (await configuration.shouldCheckOnOpen()) {
            runChecks([uri]);
        }
        // The objective at the time of writing this is to make {Asset,Snippet}Rename
        // fast when you eventually need it.
        //
        // I'm choosing the textDocument/didOpen notification as a hook because
        // I'm not sure we have a better solution than this. Yes we have the
        // initialize request with the workspace folders, but you might have opened
        // an app folder. The root of a theme app extension would probably be
        // at ${workspaceRoot}/extensions/${appExtensionName}. It'd be hard to
        // figure out from the initialize request params.
        //
        // If we open a file that we know is liquid, then we can kind of guarantee
        // we'll find a theme root and we'll preload that.
        if (await configuration.shouldPreloadOnBoot()) {
            const rootUri = await findThemeRootURI(uri);
            documentManager.preload(rootUri);
        }
    });
    connection.onDidChangeTextDocument(async (params) => {
        if (hasUnsupportedDocument(params))
            return;
        const { uri, version } = params.textDocument;
        documentManager.change(uri, params.contentChanges[0].text, version);
        if (await configuration.shouldCheckOnChange()) {
            runChecks([uri]);
        }
        else {
            // The diagnostics may be stale! Clear em!
            diagnosticsManager.clear(params.textDocument.uri);
        }
    });
    connection.onDidSaveTextDocument(async (params) => {
        if (hasUnsupportedDocument(params))
            return;
        const { uri } = params.textDocument;
        if (await configuration.shouldCheckOnSave()) {
            runChecks([uri]);
        }
    });
    connection.onDidCloseTextDocument((params) => {
        if (hasUnsupportedDocument(params))
            return;
        const { uri } = params.textDocument;
        documentManager.close(uri);
        diagnosticsManager.clear(uri);
    });
    connection.onDocumentLinks(async (params) => {
        if (hasUnsupportedDocument(params))
            return [];
        return documentLinksProvider.documentLinks(params.textDocument.uri);
    });
    connection.onCodeAction(async (params) => {
        return codeActionsProvider.codeActions(params);
    });
    connection.onExecuteCommand(async (params) => {
        await executeCommandProvider.execute(params);
    });
    connection.onCompletion(async (params) => {
        var _a;
        if (hasUnsupportedDocument(params))
            return [];
        return ((_a = (await jsonLanguageService.completions(params))) !== null && _a !== void 0 ? _a : (await completionsProvider.completions(params)));
    });
    connection.onHover(async (params) => {
        var _a;
        if (hasUnsupportedDocument(params))
            return null;
        return (_a = (await jsonLanguageService.hover(params))) !== null && _a !== void 0 ? _a : (await hoverProvider.hover(params));
    });
    connection.onDocumentOnTypeFormatting(async (params) => {
        if (hasUnsupportedDocument(params))
            return null;
        return onTypeFormattingProvider.onTypeFormatting(params);
    });
    connection.onDocumentHighlight(async (params) => {
        if (hasUnsupportedDocument(params))
            return [];
        return documentHighlightProvider.documentHighlights(params);
    });
    connection.onPrepareRename(async (params) => {
        if (hasUnsupportedDocument(params))
            return null;
        return renameProvider.prepare(params);
    });
    connection.onRenameRequest(async (params) => {
        if (hasUnsupportedDocument(params))
            return null;
        return renameProvider.rename(params);
    });
    connection.languages.onLinkedEditingRange(async (params) => {
        if (hasUnsupportedDocument(params))
            return null;
        return linkedEditingRangesProvider.linkedEditingRanges(params);
    });
    connection.workspace.onDidRenameFiles(async (params) => {
        const triggerUris = params.files.map((fileRename) => fileRename.newUri);
        // Behold the cache invalidation monster
        for (const { oldUri, newUri } of params.files) {
            // When a file is renamed, we paste the content of the old file into the
            // new file in the document manager. We don't need to invalidate preload
            // because that's the only thing that changed.
            documentManager.rename(oldUri, newUri);
            // When a file is renamed, readDirectory to the parent folder is invalidated.
            fs.readDirectory.invalidate(theme_check_common_1.path.dirname(oldUri));
            fs.readDirectory.invalidate(theme_check_common_1.path.dirname(newUri));
            // When a file is renamed, readFile and stat for both the old and new URIs are invalidated.
            fs.readFile.invalidate(oldUri);
            fs.readFile.invalidate(newUri);
            fs.stat.invalidate(oldUri);
            fs.stat.invalidate(newUri);
        }
        // We should complete refactors before running theme check
        await renameHandler.onDidRenameFiles(params);
        // MissingAssets/MissingSnippet should be rerun when a file is deleted
        // since the file rename might cause an error.
        runChecks.force(triggerUris);
    });
    /**
     * onDidChangeWatchedFiles is triggered by file operations (in or out of the editor).
     *
     * For in-editor changes, happens redundantly with
     *   - onDidCreateFiles
     *   - onDidRenameFiles
     *   - onDidDeleteFiles
     *   - onDidSaveTextDocument
     *
     * Not redundant for operations that happen outside of the editor
     *   - git pull, checkout, reset, stash pop, etc.
     *   - shopify theme metafields pull
     *   - etc.
     *
     * It always runs and onDid* will never fire without a corresponding onDidChangeWatchedFiles.
     *
     * This is why the bulk of the cache invalidation logic is in this handler.
     */
    connection.onDidChangeWatchedFiles(async (params) => {
        var _a;
        if (params.changes.length === 0)
            return;
        const triggerUris = params.changes.map((change) => change.uri);
        const updates = [];
        for (const change of params.changes) {
            // Rename cache invalidation is handled by onDidRenameFiles
            if (documentManager.hasRecentRename(change.uri)) {
                documentManager.clearRecentRename(change.uri);
                continue;
            }
            switch (change.type) {
                case vscode_languageserver_1.FileChangeType.Created:
                    // A created file invalidates readDirectory, readFile and stat
                    fs.readDirectory.invalidate(theme_check_common_1.path.dirname(change.uri));
                    fs.readFile.invalidate(change.uri);
                    fs.stat.invalidate(change.uri);
                    // If a file is created under out feet, we update its contents.
                    updates.push(documentManager.changeFromDisk(change.uri));
                    break;
                case vscode_languageserver_1.FileChangeType.Changed:
                    // A changed file invalidates readFile and stat (but not readDirectory)
                    fs.readFile.invalidate(change.uri);
                    fs.stat.invalidate(change.uri);
                    // If the file is not open, we update its contents in the doc manager
                    // If it is open, then we don't need to update it because the document manager
                    // will have the version from the editor.
                    if (((_a = documentManager.get(change.uri)) === null || _a === void 0 ? void 0 : _a.version) === undefined) {
                        updates.push(documentManager.changeFromDisk(change.uri));
                    }
                    break;
                case vscode_languageserver_1.FileChangeType.Deleted:
                    // A deleted file invalides readDirectory, readFile, and stat
                    fs.readDirectory.invalidate(theme_check_common_1.path.dirname(change.uri));
                    fs.readFile.invalidate(change.uri);
                    fs.stat.invalidate(change.uri);
                    // If a file is deleted, it's removed from the document manager
                    documentManager.delete(change.uri);
                    break;
            }
            if (change.uri.endsWith('metafields.json')) {
                updates.push(findThemeRootURI(change.uri).then((rootUri) => getMetafieldDefinitionsForRootUri.invalidate(rootUri)));
            }
        }
        await Promise.all(updates);
        // MissingAssets/MissingSnippet should be rerun when a file is deleted
        // since an error might be introduced (and vice versa).
        runChecks.force(triggerUris);
    });
    connection.listen();
}
exports.startServer = startServer;
//# sourceMappingURL=startServer.js.map

/***/ }),

/***/ 7429:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isInputSetting = exports.isSettingsCategory = void 0;
function isSettingsCategory(x) {
    return 'settings' in x;
}
exports.isSettingsCategory = isSettingsCategory;
function isInputSetting(x) {
    return 'id' in x && 'type' in x && 'label' in x;
}
exports.isInputSetting = isInputSetting;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9135:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.paramsString = exports.extractParams = exports.translationOptions = exports.toOptions = exports.isPluralizedTranslation = exports.translationValue = exports.renderTranslation = exports.renderKey = exports.PluralizedTranslationKeys = void 0;
exports.PluralizedTranslationKeys = ['one', 'few', 'many', 'two', 'zero', 'other'];
function renderKey(translation, key) {
    if (translation[key]) {
        return `\`${key}:\` ${translation[key]}`;
    }
}
exports.renderKey = renderKey;
function renderTranslation(translation) {
    if (typeof translation === 'string')
        return translation;
    return [
        renderKey(translation, 'zero'),
        renderKey(translation, 'one'),
        renderKey(translation, 'two'),
        renderKey(translation, 'few'),
        renderKey(translation, 'many'),
        renderKey(translation, 'other'),
    ]
        .filter(Boolean)
        .join('\n\n---\n\n');
}
exports.renderTranslation = renderTranslation;
function translationValue(path, translations) {
    const parts = path.split('.');
    let current = translations;
    for (const key of parts) {
        if (!current || typeof current === 'string') {
            return undefined;
        }
        current = current[key];
    }
    return current;
}
exports.translationValue = translationValue;
function isPluralizedTranslation(translations) {
    return Object.keys(translations).every((key) => exports.PluralizedTranslationKeys.includes(key));
}
exports.isPluralizedTranslation = isPluralizedTranslation;
function toOptions(prefix, translations) {
    return Object.entries(translations).flatMap(([path, translation]) => {
        if (typeof translation === 'string' || isPluralizedTranslation(translation)) {
            return [{ path: prefix.concat(path), translation }];
        }
        else {
            return toOptions(prefix.concat(path), translation);
        }
    });
}
exports.toOptions = toOptions;
function translationOptions(translations) {
    return toOptions([], translations);
}
exports.translationOptions = translationOptions;
function extractParams(value) {
    const regex = /\{\{([^}]+?)\}\}/g;
    const results = [];
    let current;
    while ((current = regex.exec(value)) !== null) {
        results.push(current[1].trim());
    }
    return results;
}
exports.extractParams = extractParams;
function paramsString(params) {
    if (params.length === 0)
        return '';
    return `: ` + params.map((param) => `${param}: ${param}`).join(', ');
}
exports.paramsString = paramsString;
//# sourceMappingURL=translations.js.map

/***/ }),

/***/ 1074:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 6036:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findLast = void 0;
// Array.prototype.findLast is only available in es2023. Which feels too new?
function findLast(array, pred) {
    for (let i = array.length - 1; i >= 0; i--) {
        if (pred(array[i]))
            return array[i];
    }
}
exports.findLast = findLast;
//# sourceMappingURL=array.js.map

/***/ }),

/***/ 2618:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.debounce = void 0;
/**
 * debounce(fn, ms)
 *
 * A debounced function only executes once after a timer has expired. Repeated
 * call to the debounced function before its timer has expired result in a delayed
 * execution of the function.
 *
 * This is useful in cases where you have an "expensive" function that you only want
 * to execute after the user is idle for a little bit.
 *
 * e.g. Run theme check after the user has stopped typing for at least 100ms.
 *
 * The debounced function has the same type signature as its argument.
 *
 * The input function must return void (or else you might "bomb" when you resolve).
 *
 * @param fn a function that should be debounced
 * @param ms milliseconds after last function call for it to execute
 * @returns a function that will execute on the trailing edge of a timer with the last argument it was called with
 */
function debounce(fn, ms) {
    let timeoutId = null;
    let force = false; // force use a certain set of arguments in the next call
    const debouncedFn = (...args) => {
        if (timeoutId !== null && force)
            return;
        if (timeoutId !== null)
            clearTimeout(timeoutId);
        timeoutId = setTimeout(async () => {
            await Promise.resolve(fn(...args));
            timeoutId = null;
            force = false;
        }, ms);
    };
    debouncedFn.force = (...args) => {
        debouncedFn(...args);
        force = true;
    };
    return debouncedFn;
}
exports.debounce = debounce;
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ 2936:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isDanglingOpenHtmlElement = exports.getHtmlElementNameRanges = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
const vscode_languageserver_1 = __webpack_require__(7532);
const isCovered_1 = __webpack_require__(2815);
function getHtmlElementNameRanges(node, ancestors, params, textDocument) {
    let htmlElementNode = null;
    // Try parent node as HTML Element
    // <name> case
    const parentNode = ancestors.at(-1);
    if (parentNode &&
        parentNode.type === liquid_html_parser_1.NodeTypes.HtmlElement &&
        parentNode.name.length > 0 &&
        (0, isCovered_1.isCovered)(textDocument.offsetAt(params.position), {
            start: parentNode.name[0].position.start,
            end: parentNode.name.at(-1).position.end,
        })) {
        htmlElementNode = parentNode;
    }
    // </name> case
    if (node.type === liquid_html_parser_1.NodeTypes.HtmlElement &&
        node.name.length > 0 &&
        (0, isCovered_1.isCovered)(textDocument.offsetAt(params.position), node.blockEndPosition)) {
        htmlElementNode = node;
    }
    if (!htmlElementNode || isDanglingOpenHtmlElement(htmlElementNode))
        return null;
    const nameNodes = htmlElementNode.name;
    const firstNode = nameNodes.at(0);
    const lastNode = nameNodes.at(-1);
    const startRange = vscode_languageserver_1.Range.create(textDocument.positionAt(firstNode.position.start), textDocument.positionAt(lastNode.position.end));
    const endRange = vscode_languageserver_1.Range.create(
    // </ means offset 2 characters
    textDocument.positionAt(htmlElementNode.blockEndPosition.start + 2), textDocument.positionAt(htmlElementNode.blockEndPosition.end - 1));
    return [startRange, endRange];
}
exports.getHtmlElementNameRanges = getHtmlElementNameRanges;
function isDanglingOpenHtmlElement(node) {
    return (node.type === liquid_html_parser_1.NodeTypes.HtmlElement && node.blockEndPosition.start === node.blockEndPosition.end);
}
exports.isDanglingOpenHtmlElement = isDanglingOpenHtmlElement;
//# sourceMappingURL=htmlTagNames.js.map

/***/ }),

/***/ 6813:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseJSON = exports.memoize = exports.memo = void 0;
var theme_check_common_1 = __webpack_require__(5309);
Object.defineProperty(exports, "memo", ({ enumerable: true, get: function () { return theme_check_common_1.memo; } }));
Object.defineProperty(exports, "memoize", ({ enumerable: true, get: function () { return theme_check_common_1.memoize; } }));
Object.defineProperty(exports, "parseJSON", ({ enumerable: true, get: function () { return theme_check_common_1.parseJSON; } }));
__exportStar(__webpack_require__(2618), exports);
__exportStar(__webpack_require__(6036), exports);
__exportStar(__webpack_require__(8613), exports);
__exportStar(__webpack_require__(2815), exports);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2815:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isCovered = void 0;
function isCovered(offset, range) {
    return range.start <= offset && offset <= range.end;
}
exports.isCovered = isCovered;
//# sourceMappingURL=isCovered.js.map

/***/ }),

/***/ 8359:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SUPPORTED_LIQUID_DOC_TAG_HANDLES = exports.formatLiquidDocTagHandle = exports.formatLiquidDocParameter = void 0;
const theme_check_common_1 = __webpack_require__(5309);
function formatLiquidDocParameter({ name, type, description, required }, heading = false) {
    const nameStr = required ? `\`${name}\`` : `\`${name}\` (Optional)`;
    const typeStr = type ? `: ${type}` : '';
    if (heading) {
        const descStr = description ? `\n\n${description}` : '';
        return `### ${nameStr}${typeStr}${descStr}`;
    }
    const descStr = description ? ` - ${description}` : '';
    return `- ${nameStr}${typeStr}${descStr}`;
}
exports.formatLiquidDocParameter = formatLiquidDocParameter;
function formatLiquidDocTagHandle(label, description, example) {
    return `### @${label}\n\n${description}\n\n` + `**Example**\n\n\`\`\`liquid\n${example}\n\`\`\``;
}
exports.formatLiquidDocTagHandle = formatLiquidDocTagHandle;
exports.SUPPORTED_LIQUID_DOC_TAG_HANDLES = {
    [theme_check_common_1.SupportedDocTagTypes.Param]: {
        description: 'Provides information about a parameter for the snippet.\n' +
            `- The type of parameter is optional and can be ${Object.values(theme_check_common_1.SupportedParamTypes)
                .map((type) => `\`${type}\``)
                .join(', ')}\n` +
            '- An optional parameter is denoted by square brackets around the parameter name\n' +
            '- The description is optional Markdown text',
        example: '{% doc %}\n' +
            "  @param {string} name - The person's name\n" +
            "  @param {number} [fav_num] - The person's favorite number\n" +
            '{% enddoc %}\n',
        template: `param {$1} $2 - $0`,
    },
    [theme_check_common_1.SupportedDocTagTypes.Example]: {
        description: 'Provides an example on how to use the snippet.',
        example: '{% doc %}\n' + '  @example {% render "snippet-name", arg1: "value" %}\n' + '{% enddoc %}\n',
        template: `example\n$0`,
    },
    [theme_check_common_1.SupportedDocTagTypes.Description]: {
        description: 'Provides information on what the snippet does.',
        example: '{% doc %}\n' + '  @description This snippet renders a product image.\n' + '{% enddoc %}\n',
        template: `description $0`,
    },
};
//# sourceMappingURL=liquidDoc.js.map

/***/ }),

/***/ 8613:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isLiquidVariableOutput = exports.isNamedLiquidTag = exports.isHtmlAttribute = exports.getCompoundName = exports.isNamedHtmlElementNode = exports.isAttrEmpty = exports.isTextNode = exports.HtmlAttributeTypes = exports.HtmlElementTypes = void 0;
const liquid_html_parser_1 = __webpack_require__(4849);
exports.HtmlElementTypes = [
    liquid_html_parser_1.NodeTypes.HtmlElement,
    liquid_html_parser_1.NodeTypes.HtmlDanglingMarkerClose,
    liquid_html_parser_1.NodeTypes.HtmlSelfClosingElement,
    liquid_html_parser_1.NodeTypes.HtmlVoidElement,
    liquid_html_parser_1.NodeTypes.HtmlRawNode,
];
exports.HtmlAttributeTypes = [
    liquid_html_parser_1.NodeTypes.AttrUnquoted,
    liquid_html_parser_1.NodeTypes.AttrDoubleQuoted,
    liquid_html_parser_1.NodeTypes.AttrSingleQuoted,
    liquid_html_parser_1.NodeTypes.AttrEmpty,
];
function isTextNode(node) {
    return node.type === liquid_html_parser_1.NodeTypes.TextNode;
}
exports.isTextNode = isTextNode;
function isAttrEmpty(node) {
    return node.type === liquid_html_parser_1.NodeTypes.AttrEmpty;
}
exports.isAttrEmpty = isAttrEmpty;
function isNamedHtmlElementNode(node) {
    return exports.HtmlElementTypes.includes(node.type);
}
exports.isNamedHtmlElementNode = isNamedHtmlElementNode;
function getCompoundName(node) {
    if (typeof node.name === 'string')
        return node.name;
    const names = node.name;
    if (names.length === 0 || names.length > 1 || !isTextNode(names[0])) {
        return 'unknown';
    }
    return names[0].value;
}
exports.getCompoundName = getCompoundName;
function isHtmlAttribute(node) {
    return exports.HtmlAttributeTypes.some((type) => node.type === type);
}
exports.isHtmlAttribute = isHtmlAttribute;
function isNamedLiquidTag(node, name) {
    return node.type === liquid_html_parser_1.NodeTypes.LiquidTag && node.name === name && typeof node.markup !== 'string';
}
exports.isNamedLiquidTag = isNamedLiquidTag;
function isLiquidVariableOutput(node) {
    return node.type === liquid_html_parser_1.NodeTypes.LiquidVariableOutput && typeof node.markup !== 'string';
}
exports.isLiquidVariableOutput = isLiquidVariableOutput;
//# sourceMappingURL=node.js.map

/***/ }),

/***/ 3255:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isTemplate = exports.templateName = exports.isSectionGroup = exports.sectionGroupName = exports.isSection = exports.sectionName = exports.isBlock = exports.blockName = exports.isAsset = exports.assetName = exports.isSnippet = exports.snippetName = void 0;
const theme_check_common_1 = __webpack_require__(5309);
const snippetName = (uri) => theme_check_common_1.path.basename(uri, '.liquid');
exports.snippetName = snippetName;
const isSnippet = (uri) => /\bsnippets(\\|\/)[^\\\/]*\.liquid/.test(uri);
exports.isSnippet = isSnippet;
// asset urls have their `.liquid`` removed (if present) and require the other extension */
const assetName = (uri) => theme_check_common_1.path.basename(uri, '.liquid');
exports.assetName = assetName;
const isAsset = (uri) => /\bassets(\\|\/)[^\\\/]/.test(uri);
exports.isAsset = isAsset;
const blockName = (uri) => theme_check_common_1.path.basename(uri, '.liquid');
exports.blockName = blockName;
const isBlock = (uri) => /\bblocks(\\|\/)[^\\\/]/.test(uri);
exports.isBlock = isBlock;
const sectionName = (uri) => theme_check_common_1.path.basename(uri, '.liquid');
exports.sectionName = sectionName;
const isSection = (uri) => /\bsections(\\|\/)[^\\\/]/.test(uri) && /.liquid$/.test(uri);
exports.isSection = isSection;
const sectionGroupName = (uri) => theme_check_common_1.path.basename(uri, '.json');
exports.sectionGroupName = sectionGroupName;
const isSectionGroup = (uri) => /\bsections(\\|\/)[^\\\/]/.test(uri) && /.json$/.test(uri);
exports.isSectionGroup = isSectionGroup;
const templateName = (uri) => theme_check_common_1.path.basename(uri, '.json');
exports.templateName = templateName;
const isTemplate = (uri) => /\btemplates(\\|\/)[^\\\/]/.test(uri);
exports.isTemplate = isTemplate;
//# sourceMappingURL=uri.js.map

/***/ }),

/***/ 507:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VERSION = void 0;
const package_json_1 = __importDefault(__webpack_require__(2177));
exports.VERSION = package_json_1.default.version;
//# sourceMappingURL=version.js.map

/***/ }),

/***/ 9941:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assertValidPattern = void 0;
const MAX_PATTERN_LENGTH = 1024 * 64;
const assertValidPattern = (pattern) => {
    if (typeof pattern !== 'string') {
        throw new TypeError('invalid pattern');
    }
    if (pattern.length > MAX_PATTERN_LENGTH) {
        throw new TypeError('pattern is too long');
    }
};
exports.assertValidPattern = assertValidPattern;
//# sourceMappingURL=assert-valid-pattern.js.map

/***/ }),

/***/ 4815:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// parse a single path portion
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AST = void 0;
const brace_expressions_js_1 = __webpack_require__(1086);
const unescape_js_1 = __webpack_require__(7159);
const types = new Set(['!', '?', '+', '*', '@']);
const isExtglobType = (c) => types.has(c);
// Patterns that get prepended to bind to the start of either the
// entire string, or just a single path portion, to prevent dots
// and/or traversal patterns, when needed.
// Exts don't need the ^ or / bit, because the root binds that already.
const startNoTraversal = '(?!(?:^|/)\\.\\.?(?:$|/))';
const startNoDot = '(?!\\.)';
// characters that indicate a start of pattern needs the "no dots" bit,
// because a dot *might* be matched. ( is not in the list, because in
// the case of a child extglob, it will handle the prevention itself.
const addPatternStart = new Set(['[', '.']);
// cases where traversal is A-OK, no dot prevention needed
const justDots = new Set(['..', '.']);
const reSpecials = new Set('().*{}+?[]^$\\!');
const regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
// any single thing other than /
const qmark = '[^/]';
// * => any number of characters
const star = qmark + '*?';
// use + when we need to ensure that *something* matches, because the * is
// the only thing in the path portion.
const starNoEmpty = qmark + '+?';
// remove the \ chars that we added if we end up doing a nonmagic compare
// const deslash = (s: string) => s.replace(/\\(.)/g, '$1')
class AST {
    type;
    #root;
    #hasMagic;
    #uflag = false;
    #parts = [];
    #parent;
    #parentIndex;
    #negs;
    #filledNegs = false;
    #options;
    #toString;
    // set to true if it's an extglob with no children
    // (which really means one child of '')
    #emptyExt = false;
    constructor(type, parent, options = {}) {
        this.type = type;
        // extglobs are inherently magical
        if (type)
            this.#hasMagic = true;
        this.#parent = parent;
        this.#root = this.#parent ? this.#parent.#root : this;
        this.#options = this.#root === this ? options : this.#root.#options;
        this.#negs = this.#root === this ? [] : this.#root.#negs;
        if (type === '!' && !this.#root.#filledNegs)
            this.#negs.push(this);
        this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;
    }
    get hasMagic() {
        /* c8 ignore start */
        if (this.#hasMagic !== undefined)
            return this.#hasMagic;
        /* c8 ignore stop */
        for (const p of this.#parts) {
            if (typeof p === 'string')
                continue;
            if (p.type || p.hasMagic)
                return (this.#hasMagic = true);
        }
        // note: will be undefined until we generate the regexp src and find out
        return this.#hasMagic;
    }
    // reconstructs the pattern
    toString() {
        if (this.#toString !== undefined)
            return this.#toString;
        if (!this.type) {
            return (this.#toString = this.#parts.map(p => String(p)).join(''));
        }
        else {
            return (this.#toString =
                this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')');
        }
    }
    #fillNegs() {
        /* c8 ignore start */
        if (this !== this.#root)
            throw new Error('should only call on root');
        if (this.#filledNegs)
            return this;
        /* c8 ignore stop */
        // call toString() once to fill this out
        this.toString();
        this.#filledNegs = true;
        let n;
        while ((n = this.#negs.pop())) {
            if (n.type !== '!')
                continue;
            // walk up the tree, appending everthing that comes AFTER parentIndex
            let p = n;
            let pp = p.#parent;
            while (pp) {
                for (let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++) {
                    for (const part of n.#parts) {
                        /* c8 ignore start */
                        if (typeof part === 'string') {
                            throw new Error('string part in extglob AST??');
                        }
                        /* c8 ignore stop */
                        part.copyIn(pp.#parts[i]);
                    }
                }
                p = pp;
                pp = p.#parent;
            }
        }
        return this;
    }
    push(...parts) {
        for (const p of parts) {
            if (p === '')
                continue;
            /* c8 ignore start */
            if (typeof p !== 'string' && !(p instanceof AST && p.#parent === this)) {
                throw new Error('invalid part: ' + p);
            }
            /* c8 ignore stop */
            this.#parts.push(p);
        }
    }
    toJSON() {
        const ret = this.type === null
            ? this.#parts.slice().map(p => (typeof p === 'string' ? p : p.toJSON()))
            : [this.type, ...this.#parts.map(p => p.toJSON())];
        if (this.isStart() && !this.type)
            ret.unshift([]);
        if (this.isEnd() &&
            (this === this.#root ||
                (this.#root.#filledNegs && this.#parent?.type === '!'))) {
            ret.push({});
        }
        return ret;
    }
    isStart() {
        if (this.#root === this)
            return true;
        // if (this.type) return !!this.#parent?.isStart()
        if (!this.#parent?.isStart())
            return false;
        if (this.#parentIndex === 0)
            return true;
        // if everything AHEAD of this is a negation, then it's still the "start"
        const p = this.#parent;
        for (let i = 0; i < this.#parentIndex; i++) {
            const pp = p.#parts[i];
            if (!(pp instanceof AST && pp.type === '!')) {
                return false;
            }
        }
        return true;
    }
    isEnd() {
        if (this.#root === this)
            return true;
        if (this.#parent?.type === '!')
            return true;
        if (!this.#parent?.isEnd())
            return false;
        if (!this.type)
            return this.#parent?.isEnd();
        // if not root, it'll always have a parent
        /* c8 ignore start */
        const pl = this.#parent ? this.#parent.#parts.length : 0;
        /* c8 ignore stop */
        return this.#parentIndex === pl - 1;
    }
    copyIn(part) {
        if (typeof part === 'string')
            this.push(part);
        else
            this.push(part.clone(this));
    }
    clone(parent) {
        const c = new AST(this.type, parent);
        for (const p of this.#parts) {
            c.copyIn(p);
        }
        return c;
    }
    static #parseAST(str, ast, pos, opt) {
        let escaping = false;
        let inBrace = false;
        let braceStart = -1;
        let braceNeg = false;
        if (ast.type === null) {
            // outside of a extglob, append until we find a start
            let i = pos;
            let acc = '';
            while (i < str.length) {
                const c = str.charAt(i++);
                // still accumulate escapes at this point, but we do ignore
                // starts that are escaped
                if (escaping || c === '\\') {
                    escaping = !escaping;
                    acc += c;
                    continue;
                }
                if (inBrace) {
                    if (i === braceStart + 1) {
                        if (c === '^' || c === '!') {
                            braceNeg = true;
                        }
                    }
                    else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
                        inBrace = false;
                    }
                    acc += c;
                    continue;
                }
                else if (c === '[') {
                    inBrace = true;
                    braceStart = i;
                    braceNeg = false;
                    acc += c;
                    continue;
                }
                if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {
                    ast.push(acc);
                    acc = '';
                    const ext = new AST(c, ast);
                    i = AST.#parseAST(str, ext, i, opt);
                    ast.push(ext);
                    continue;
                }
                acc += c;
            }
            ast.push(acc);
            return i;
        }
        // some kind of extglob, pos is at the (
        // find the next | or )
        let i = pos + 1;
        let part = new AST(null, ast);
        const parts = [];
        let acc = '';
        while (i < str.length) {
            const c = str.charAt(i++);
            // still accumulate escapes at this point, but we do ignore
            // starts that are escaped
            if (escaping || c === '\\') {
                escaping = !escaping;
                acc += c;
                continue;
            }
            if (inBrace) {
                if (i === braceStart + 1) {
                    if (c === '^' || c === '!') {
                        braceNeg = true;
                    }
                }
                else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {
                    inBrace = false;
                }
                acc += c;
                continue;
            }
            else if (c === '[') {
                inBrace = true;
                braceStart = i;
                braceNeg = false;
                acc += c;
                continue;
            }
            if (isExtglobType(c) && str.charAt(i) === '(') {
                part.push(acc);
                acc = '';
                const ext = new AST(c, part);
                part.push(ext);
                i = AST.#parseAST(str, ext, i, opt);
                continue;
            }
            if (c === '|') {
                part.push(acc);
                acc = '';
                parts.push(part);
                part = new AST(null, ast);
                continue;
            }
            if (c === ')') {
                if (acc === '' && ast.#parts.length === 0) {
                    ast.#emptyExt = true;
                }
                part.push(acc);
                acc = '';
                ast.push(...parts, part);
                return i;
            }
            acc += c;
        }
        // unfinished extglob
        // if we got here, it was a malformed extglob! not an extglob, but
        // maybe something else in there.
        ast.type = null;
        ast.#hasMagic = undefined;
        ast.#parts = [str.substring(pos - 1)];
        return i;
    }
    static fromGlob(pattern, options = {}) {
        const ast = new AST(null, undefined, options);
        AST.#parseAST(pattern, ast, 0, options);
        return ast;
    }
    // returns the regular expression if there's magic, or the unescaped
    // string if not.
    toMMPattern() {
        // should only be called on root
        /* c8 ignore start */
        if (this !== this.#root)
            return this.#root.toMMPattern();
        /* c8 ignore stop */
        const glob = this.toString();
        const [re, body, hasMagic, uflag] = this.toRegExpSource();
        // if we're in nocase mode, and not nocaseMagicOnly, then we do
        // still need a regular expression if we have to case-insensitively
        // match capital/lowercase characters.
        const anyMagic = hasMagic ||
            this.#hasMagic ||
            (this.#options.nocase &&
                !this.#options.nocaseMagicOnly &&
                glob.toUpperCase() !== glob.toLowerCase());
        if (!anyMagic) {
            return body;
        }
        const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '');
        return Object.assign(new RegExp(`^${re}$`, flags), {
            _src: re,
            _glob: glob,
        });
    }
    // returns the string match, the regexp source, whether there's magic
    // in the regexp (so a regular expression is required) and whether or
    // not the uflag is needed for the regular expression (for posix classes)
    // TODO: instead of injecting the start/end at this point, just return
    // the BODY of the regexp, along with the start/end portions suitable
    // for binding the start/end in either a joined full-path makeRe context
    // (where we bind to (^|/), or a standalone matchPart context (where
    // we bind to ^, and not /).  Otherwise slashes get duped!
    //
    // In part-matching mode, the start is:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: ^(?!\.\.?$)
    // - if dots allowed or not possible: ^
    // - if dots possible and not allowed: ^(?!\.)
    // end is:
    // - if not isEnd(): nothing
    // - else: $
    //
    // In full-path matching mode, we put the slash at the START of the
    // pattern, so start is:
    // - if first pattern: same as part-matching mode
    // - if not isStart(): nothing
    // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
    // - if dots allowed or not possible: /
    // - if dots possible and not allowed: /(?!\.)
    // end is:
    // - if last pattern, same as part-matching mode
    // - else nothing
    //
    // Always put the (?:$|/) on negated tails, though, because that has to be
    // there to bind the end of the negated pattern portion, and it's easier to
    // just stick it in now rather than try to inject it later in the middle of
    // the pattern.
    //
    // We can just always return the same end, and leave it up to the caller
    // to know whether it's going to be used joined or in parts.
    // And, if the start is adjusted slightly, can do the same there:
    // - if not isStart: nothing
    // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
    // - if dots allowed or not possible: (?:/|^)
    // - if dots possible and not allowed: (?:/|^)(?!\.)
    //
    // But it's better to have a simpler binding without a conditional, for
    // performance, so probably better to return both start options.
    //
    // Then the caller just ignores the end if it's not the first pattern,
    // and the start always gets applied.
    //
    // But that's always going to be $ if it's the ending pattern, or nothing,
    // so the caller can just attach $ at the end of the pattern when building.
    //
    // So the todo is:
    // - better detect what kind of start is needed
    // - return both flavors of starting pattern
    // - attach $ at the end of the pattern when creating the actual RegExp
    //
    // Ah, but wait, no, that all only applies to the root when the first pattern
    // is not an extglob. If the first pattern IS an extglob, then we need all
    // that dot prevention biz to live in the extglob portions, because eg
    // +(*|.x*) can match .xy but not .yx.
    //
    // So, return the two flavors if it's #root and the first child is not an
    // AST, otherwise leave it to the child AST to handle it, and there,
    // use the (?:^|/) style of start binding.
    //
    // Even simplified further:
    // - Since the start for a join is eg /(?!\.) and the start for a part
    // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
    // or start or whatever) and prepend ^ or / at the Regexp construction.
    toRegExpSource(allowDot) {
        const dot = allowDot ?? !!this.#options.dot;
        if (this.#root === this)
            this.#fillNegs();
        if (!this.type) {
            const noEmpty = this.isStart() && this.isEnd();
            const src = this.#parts
                .map(p => {
                const [re, _, hasMagic, uflag] = typeof p === 'string'
                    ? AST.#parseGlob(p, this.#hasMagic, noEmpty)
                    : p.toRegExpSource(allowDot);
                this.#hasMagic = this.#hasMagic || hasMagic;
                this.#uflag = this.#uflag || uflag;
                return re;
            })
                .join('');
            let start = '';
            if (this.isStart()) {
                if (typeof this.#parts[0] === 'string') {
                    // this is the string that will match the start of the pattern,
                    // so we need to protect against dots and such.
                    // '.' and '..' cannot match unless the pattern is that exactly,
                    // even if it starts with . or dot:true is set.
                    const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);
                    if (!dotTravAllowed) {
                        const aps = addPatternStart;
                        // check if we have a possibility of matching . or ..,
                        // and prevent that.
                        const needNoTrav = 
                        // dots are allowed, and the pattern starts with [ or .
                        (dot && aps.has(src.charAt(0))) ||
                            // the pattern starts with \., and then [ or .
                            (src.startsWith('\\.') && aps.has(src.charAt(2))) ||
                            // the pattern starts with \.\., and then [ or .
                            (src.startsWith('\\.\\.') && aps.has(src.charAt(4)));
                        // no need to prevent dots if it can't match a dot, or if a
                        // sub-pattern will be preventing it anyway.
                        const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));
                        start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : '';
                    }
                }
            }
            // append the "end of path portion" pattern to negation tails
            let end = '';
            if (this.isEnd() &&
                this.#root.#filledNegs &&
                this.#parent?.type === '!') {
                end = '(?:$|\\/)';
            }
            const final = start + src + end;
            return [
                final,
                (0, unescape_js_1.unescape)(src),
                (this.#hasMagic = !!this.#hasMagic),
                this.#uflag,
            ];
        }
        // We need to calculate the body *twice* if it's a repeat pattern
        // at the start, once in nodot mode, then again in dot mode, so a
        // pattern like *(?) can match 'x.y'
        const repeated = this.type === '*' || this.type === '+';
        // some kind of extglob
        const start = this.type === '!' ? '(?:(?!(?:' : '(?:';
        let body = this.#partsToRegExp(dot);
        if (this.isStart() && this.isEnd() && !body && this.type !== '!') {
            // invalid extglob, has to at least be *something* present, if it's
            // the entire path portion.
            const s = this.toString();
            this.#parts = [s];
            this.type = null;
            this.#hasMagic = undefined;
            return [s, (0, unescape_js_1.unescape)(this.toString()), false, false];
        }
        // XXX abstract out this map method
        let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot
            ? ''
            : this.#partsToRegExp(true);
        if (bodyDotAllowed === body) {
            bodyDotAllowed = '';
        }
        if (bodyDotAllowed) {
            body = `(?:${body})(?:${bodyDotAllowed})*?`;
        }
        // an empty !() is exactly equivalent to a starNoEmpty
        let final = '';
        if (this.type === '!' && this.#emptyExt) {
            final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty;
        }
        else {
            const close = this.type === '!'
                ? // !() must match something,but !(x) can match ''
                    '))' +
                        (this.isStart() && !dot && !allowDot ? startNoDot : '') +
                        star +
                        ')'
                : this.type === '@'
                    ? ')'
                    : this.type === '?'
                        ? ')?'
                        : this.type === '+' && bodyDotAllowed
                            ? ')'
                            : this.type === '*' && bodyDotAllowed
                                ? `)?`
                                : `)${this.type}`;
            final = start + body + close;
        }
        return [
            final,
            (0, unescape_js_1.unescape)(body),
            (this.#hasMagic = !!this.#hasMagic),
            this.#uflag,
        ];
    }
    #partsToRegExp(dot) {
        return this.#parts
            .map(p => {
            // extglob ASTs should only contain parent ASTs
            /* c8 ignore start */
            if (typeof p === 'string') {
                throw new Error('string type in extglob ast??');
            }
            /* c8 ignore stop */
            // can ignore hasMagic, because extglobs are already always magic
            const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);
            this.#uflag = this.#uflag || uflag;
            return re;
        })
            .filter(p => !(this.isStart() && this.isEnd()) || !!p)
            .join('|');
    }
    static #parseGlob(glob, hasMagic, noEmpty = false) {
        let escaping = false;
        let re = '';
        let uflag = false;
        for (let i = 0; i < glob.length; i++) {
            const c = glob.charAt(i);
            if (escaping) {
                escaping = false;
                re += (reSpecials.has(c) ? '\\' : '') + c;
                continue;
            }
            if (c === '\\') {
                if (i === glob.length - 1) {
                    re += '\\\\';
                }
                else {
                    escaping = true;
                }
                continue;
            }
            if (c === '[') {
                const [src, needUflag, consumed, magic] = (0, brace_expressions_js_1.parseClass)(glob, i);
                if (consumed) {
                    re += src;
                    uflag = uflag || needUflag;
                    i += consumed - 1;
                    hasMagic = hasMagic || magic;
                    continue;
                }
            }
            if (c === '*') {
                if (noEmpty && glob === '*')
                    re += starNoEmpty;
                else
                    re += star;
                hasMagic = true;
                continue;
            }
            if (c === '?') {
                re += qmark;
                hasMagic = true;
                continue;
            }
            re += regExpEscape(c);
        }
        return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag];
    }
}
exports.AST = AST;
//# sourceMappingURL=ast.js.map

/***/ }),

/***/ 1086:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// translate the various posix character classes into unicode properties
// this works across all unicode locales
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseClass = void 0;
// { <posix class>: [<translation>, /u flag required, negated]
const posixClasses = {
    '[:alnum:]': ['\\p{L}\\p{Nl}\\p{Nd}', true],
    '[:alpha:]': ['\\p{L}\\p{Nl}', true],
    '[:ascii:]': ['\\x' + '00-\\x' + '7f', false],
    '[:blank:]': ['\\p{Zs}\\t', true],
    '[:cntrl:]': ['\\p{Cc}', true],
    '[:digit:]': ['\\p{Nd}', true],
    '[:graph:]': ['\\p{Z}\\p{C}', true, true],
    '[:lower:]': ['\\p{Ll}', true],
    '[:print:]': ['\\p{C}', true],
    '[:punct:]': ['\\p{P}', true],
    '[:space:]': ['\\p{Z}\\t\\r\\n\\v\\f', true],
    '[:upper:]': ['\\p{Lu}', true],
    '[:word:]': ['\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}', true],
    '[:xdigit:]': ['A-Fa-f0-9', false],
};
// only need to escape a few things inside of brace expressions
// escapes: [ \ ] -
const braceEscape = (s) => s.replace(/[[\]\\-]/g, '\\$&');
// escape all regexp magic characters
const regexpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
// everything has already been escaped, we just have to join
const rangesToString = (ranges) => ranges.join('');
// takes a glob string at a posix brace expression, and returns
// an equivalent regular expression source, and boolean indicating
// whether the /u flag needs to be applied, and the number of chars
// consumed to parse the character class.
// This also removes out of order ranges, and returns ($.) if the
// entire class just no good.
const parseClass = (glob, position) => {
    const pos = position;
    /* c8 ignore start */
    if (glob.charAt(pos) !== '[') {
        throw new Error('not in a brace expression');
    }
    /* c8 ignore stop */
    const ranges = [];
    const negs = [];
    let i = pos + 1;
    let sawStart = false;
    let uflag = false;
    let escaping = false;
    let negate = false;
    let endPos = pos;
    let rangeStart = '';
    WHILE: while (i < glob.length) {
        const c = glob.charAt(i);
        if ((c === '!' || c === '^') && i === pos + 1) {
            negate = true;
            i++;
            continue;
        }
        if (c === ']' && sawStart && !escaping) {
            endPos = i + 1;
            break;
        }
        sawStart = true;
        if (c === '\\') {
            if (!escaping) {
                escaping = true;
                i++;
                continue;
            }
            // escaped \ char, fall through and treat like normal char
        }
        if (c === '[' && !escaping) {
            // either a posix class, a collation equivalent, or just a [
            for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
                if (glob.startsWith(cls, i)) {
                    // invalid, [a-[] is fine, but not [a-[:alpha]]
                    if (rangeStart) {
                        return ['$.', false, glob.length - pos, true];
                    }
                    i += cls.length;
                    if (neg)
                        negs.push(unip);
                    else
                        ranges.push(unip);
                    uflag = uflag || u;
                    continue WHILE;
                }
            }
        }
        // now it's just a normal character, effectively
        escaping = false;
        if (rangeStart) {
            // throw this range away if it's not valid, but others
            // can still match.
            if (c > rangeStart) {
                ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c));
            }
            else if (c === rangeStart) {
                ranges.push(braceEscape(c));
            }
            rangeStart = '';
            i++;
            continue;
        }
        // now might be the start of a range.
        // can be either c-d or c-] or c<more...>] or c] at this point
        if (glob.startsWith('-]', i + 1)) {
            ranges.push(braceEscape(c + '-'));
            i += 2;
            continue;
        }
        if (glob.startsWith('-', i + 1)) {
            rangeStart = c;
            i += 2;
            continue;
        }
        // not the start of a range, just a single character
        ranges.push(braceEscape(c));
        i++;
    }
    if (endPos < i) {
        // didn't see the end of the class, not a valid class,
        // but might still be valid as a literal match.
        return ['', false, 0, false];
    }
    // if we got no ranges and no negates, then we have a range that
    // cannot possibly match anything, and that poisons the whole glob
    if (!ranges.length && !negs.length) {
        return ['$.', false, glob.length - pos, true];
    }
    // if we got one positive range, and it's a single character, then that's
    // not actually a magic pattern, it's just that one literal character.
    // we should not treat that as "magic", we should just return the literal
    // character. [_] is a perfectly valid way to escape glob magic chars.
    if (negs.length === 0 &&
        ranges.length === 1 &&
        /^\\?.$/.test(ranges[0]) &&
        !negate) {
        const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];
        return [regexpEscape(r), false, endPos - pos, false];
    }
    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']';
    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']';
    const comb = ranges.length && negs.length
        ? '(' + sranges + '|' + snegs + ')'
        : ranges.length
            ? sranges
            : snegs;
    return [comb, uflag, endPos - pos, true];
};
exports.parseClass = parseClass;
//# sourceMappingURL=brace-expressions.js.map

/***/ }),

/***/ 2292:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.escape = void 0;
/**
 * Escape all magic characters in a glob pattern.
 *
 * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}
 * option is used, then characters are escaped by wrapping in `[]`, because
 * a magic character wrapped in a character class can only be satisfied by
 * that exact character.  In this mode, `\` is _not_ escaped, because it is
 * not interpreted as a magic character, but instead as a path separator.
 */
const escape = (s, { windowsPathsNoEscape = false, } = {}) => {
    // don't need to escape +@! because we escape the parens
    // that make those magic, and escaping ! as [!] isn't valid,
    // because [!]] is a valid glob class meaning not ']'.
    return windowsPathsNoEscape
        ? s.replace(/[?*()[\]]/g, '[$&]')
        : s.replace(/[?*()[\]\\]/g, '\\$&');
};
exports.escape = escape;
//# sourceMappingURL=escape.js.map

/***/ }),

/***/ 7039:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unescape = exports.escape = exports.AST = exports.Minimatch = exports.match = exports.makeRe = exports.braceExpand = exports.defaults = exports.filter = exports.GLOBSTAR = exports.sep = exports.minimatch = void 0;
const brace_expansion_1 = __importDefault(__webpack_require__(473));
const assert_valid_pattern_js_1 = __webpack_require__(9941);
const ast_js_1 = __webpack_require__(4815);
const escape_js_1 = __webpack_require__(2292);
const unescape_js_1 = __webpack_require__(7159);
const minimatch = (p, pattern, options = {}) => {
    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
    // shortcut: comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
        return false;
    }
    return new Minimatch(pattern, options).match(p);
};
exports.minimatch = minimatch;
// Optimized checking for the most common glob patterns.
const starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/;
const starDotExtTest = (ext) => (f) => !f.startsWith('.') && f.endsWith(ext);
const starDotExtTestDot = (ext) => (f) => f.endsWith(ext);
const starDotExtTestNocase = (ext) => {
    ext = ext.toLowerCase();
    return (f) => !f.startsWith('.') && f.toLowerCase().endsWith(ext);
};
const starDotExtTestNocaseDot = (ext) => {
    ext = ext.toLowerCase();
    return (f) => f.toLowerCase().endsWith(ext);
};
const starDotStarRE = /^\*+\.\*+$/;
const starDotStarTest = (f) => !f.startsWith('.') && f.includes('.');
const starDotStarTestDot = (f) => f !== '.' && f !== '..' && f.includes('.');
const dotStarRE = /^\.\*+$/;
const dotStarTest = (f) => f !== '.' && f !== '..' && f.startsWith('.');
const starRE = /^\*+$/;
const starTest = (f) => f.length !== 0 && !f.startsWith('.');
const starTestDot = (f) => f.length !== 0 && f !== '.' && f !== '..';
const qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/;
const qmarksTestNocase = ([$0, ext = '']) => {
    const noext = qmarksTestNoExt([$0]);
    if (!ext)
        return noext;
    ext = ext.toLowerCase();
    return (f) => noext(f) && f.toLowerCase().endsWith(ext);
};
const qmarksTestNocaseDot = ([$0, ext = '']) => {
    const noext = qmarksTestNoExtDot([$0]);
    if (!ext)
        return noext;
    ext = ext.toLowerCase();
    return (f) => noext(f) && f.toLowerCase().endsWith(ext);
};
const qmarksTestDot = ([$0, ext = '']) => {
    const noext = qmarksTestNoExtDot([$0]);
    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);
};
const qmarksTest = ([$0, ext = '']) => {
    const noext = qmarksTestNoExt([$0]);
    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);
};
const qmarksTestNoExt = ([$0]) => {
    const len = $0.length;
    return (f) => f.length === len && !f.startsWith('.');
};
const qmarksTestNoExtDot = ([$0]) => {
    const len = $0.length;
    return (f) => f.length === len && f !== '.' && f !== '..';
};
/* c8 ignore start */
const defaultPlatform = (typeof process === 'object' && process
    ? (typeof process.env === 'object' &&
        process.env &&
        process.env.__MINIMATCH_TESTING_PLATFORM__) ||
        process.platform
    : 'posix');
const path = {
    win32: { sep: '\\' },
    posix: { sep: '/' },
};
/* c8 ignore stop */
exports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep;
exports.minimatch.sep = exports.sep;
exports.GLOBSTAR = Symbol('globstar **');
exports.minimatch.GLOBSTAR = exports.GLOBSTAR;
// any single thing other than /
// don't need to escape / when using new RegExp()
const qmark = '[^/]';
// * => any number of characters
const star = qmark + '*?';
// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
const twoStarDot = '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?';
// not a ^ or / followed by a dot,
// followed by anything, any number of times.
const twoStarNoDot = '(?:(?!(?:\\/|^)\\.).)*?';
const filter = (pattern, options = {}) => (p) => (0, exports.minimatch)(p, pattern, options);
exports.filter = filter;
exports.minimatch.filter = exports.filter;
const ext = (a, b = {}) => Object.assign({}, a, b);
const defaults = (def) => {
    if (!def || typeof def !== 'object' || !Object.keys(def).length) {
        return exports.minimatch;
    }
    const orig = exports.minimatch;
    const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));
    return Object.assign(m, {
        Minimatch: class Minimatch extends orig.Minimatch {
            constructor(pattern, options = {}) {
                super(pattern, ext(def, options));
            }
            static defaults(options) {
                return orig.defaults(ext(def, options)).Minimatch;
            }
        },
        AST: class AST extends orig.AST {
            /* c8 ignore start */
            constructor(type, parent, options = {}) {
                super(type, parent, ext(def, options));
            }
            /* c8 ignore stop */
            static fromGlob(pattern, options = {}) {
                return orig.AST.fromGlob(pattern, ext(def, options));
            }
        },
        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
        escape: (s, options = {}) => orig.escape(s, ext(def, options)),
        filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),
        defaults: (options) => orig.defaults(ext(def, options)),
        makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),
        braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),
        match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),
        sep: orig.sep,
        GLOBSTAR: exports.GLOBSTAR,
    });
};
exports.defaults = defaults;
exports.minimatch.defaults = exports.defaults;
// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
const braceExpand = (pattern, options = {}) => {
    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
    // Thanks to Yeting Li <https://github.com/yetingli> for
    // improving this regexp to avoid a ReDOS vulnerability.
    if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        // shortcut. no need to expand.
        return [pattern];
    }
    return (0, brace_expansion_1.default)(pattern);
};
exports.braceExpand = braceExpand;
exports.minimatch.braceExpand = exports.braceExpand;
// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
const makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();
exports.makeRe = makeRe;
exports.minimatch.makeRe = exports.makeRe;
const match = (list, pattern, options = {}) => {
    const mm = new Minimatch(pattern, options);
    list = list.filter(f => mm.match(f));
    if (mm.options.nonull && !list.length) {
        list.push(pattern);
    }
    return list;
};
exports.match = match;
exports.minimatch.match = exports.match;
// replace stuff like \* with *
const globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/;
const regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
class Minimatch {
    options;
    set;
    pattern;
    windowsPathsNoEscape;
    nonegate;
    negate;
    comment;
    empty;
    preserveMultipleSlashes;
    partial;
    globSet;
    globParts;
    nocase;
    isWindows;
    platform;
    windowsNoMagicRoot;
    regexp;
    constructor(pattern, options = {}) {
        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
        options = options || {};
        this.options = options;
        this.pattern = pattern;
        this.platform = options.platform || defaultPlatform;
        this.isWindows = this.platform === 'win32';
        this.windowsPathsNoEscape =
            !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;
        if (this.windowsPathsNoEscape) {
            this.pattern = this.pattern.replace(/\\/g, '/');
        }
        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;
        this.regexp = null;
        this.negate = false;
        this.nonegate = !!options.nonegate;
        this.comment = false;
        this.empty = false;
        this.partial = !!options.partial;
        this.nocase = !!this.options.nocase;
        this.windowsNoMagicRoot =
            options.windowsNoMagicRoot !== undefined
                ? options.windowsNoMagicRoot
                : !!(this.isWindows && this.nocase);
        this.globSet = [];
        this.globParts = [];
        this.set = [];
        // make the set of regexps etc.
        this.make();
    }
    hasMagic() {
        if (this.options.magicalBraces && this.set.length > 1) {
            return true;
        }
        for (const pattern of this.set) {
            for (const part of pattern) {
                if (typeof part !== 'string')
                    return true;
            }
        }
        return false;
    }
    debug(..._) { }
    make() {
        const pattern = this.pattern;
        const options = this.options;
        // empty patterns and comments match nothing.
        if (!options.nocomment && pattern.charAt(0) === '#') {
            this.comment = true;
            return;
        }
        if (!pattern) {
            this.empty = true;
            return;
        }
        // step 1: figure out negation, etc.
        this.parseNegate();
        // step 2: expand braces
        this.globSet = [...new Set(this.braceExpand())];
        if (options.debug) {
            this.debug = (...args) => console.error(...args);
        }
        this.debug(this.pattern, this.globSet);
        // step 3: now we have a set, so turn each one into a series of
        // path-portion matching patterns.
        // These will be regexps, except in the case of "**", which is
        // set to the GLOBSTAR object for globstar behavior,
        // and will not contain any / characters
        //
        // First, we preprocess to make the glob pattern sets a bit simpler
        // and deduped.  There are some perf-killing patterns that can cause
        // problems with a glob walk, but we can simplify them down a bit.
        const rawGlobParts = this.globSet.map(s => this.slashSplit(s));
        this.globParts = this.preprocess(rawGlobParts);
        this.debug(this.pattern, this.globParts);
        // glob --> regexps
        let set = this.globParts.map((s, _, __) => {
            if (this.isWindows && this.windowsNoMagicRoot) {
                // check if it's a drive or unc path.
                const isUNC = s[0] === '' &&
                    s[1] === '' &&
                    (s[2] === '?' || !globMagic.test(s[2])) &&
                    !globMagic.test(s[3]);
                const isDrive = /^[a-z]:/i.test(s[0]);
                if (isUNC) {
                    return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))];
                }
                else if (isDrive) {
                    return [s[0], ...s.slice(1).map(ss => this.parse(ss))];
                }
            }
            return s.map(ss => this.parse(ss));
        });
        this.debug(this.pattern, set);
        // filter out everything that didn't compile properly.
        this.set = set.filter(s => s.indexOf(false) === -1);
        // do not treat the ? in UNC paths as magic
        if (this.isWindows) {
            for (let i = 0; i < this.set.length; i++) {
                const p = this.set[i];
                if (p[0] === '' &&
                    p[1] === '' &&
                    this.globParts[i][2] === '?' &&
                    typeof p[3] === 'string' &&
                    /^[a-z]:$/i.test(p[3])) {
                    p[2] = '?';
                }
            }
        }
        this.debug(this.pattern, this.set);
    }
    // various transforms to equivalent pattern sets that are
    // faster to process in a filesystem walk.  The goal is to
    // eliminate what we can, and push all ** patterns as far
    // to the right as possible, even if it increases the number
    // of patterns that we have to process.
    preprocess(globParts) {
        // if we're not in globstar mode, then turn all ** into *
        if (this.options.noglobstar) {
            for (let i = 0; i < globParts.length; i++) {
                for (let j = 0; j < globParts[i].length; j++) {
                    if (globParts[i][j] === '**') {
                        globParts[i][j] = '*';
                    }
                }
            }
        }
        const { optimizationLevel = 1 } = this.options;
        if (optimizationLevel >= 2) {
            // aggressive optimization for the purpose of fs walking
            globParts = this.firstPhasePreProcess(globParts);
            globParts = this.secondPhasePreProcess(globParts);
        }
        else if (optimizationLevel >= 1) {
            // just basic optimizations to remove some .. parts
            globParts = this.levelOneOptimize(globParts);
        }
        else {
            globParts = this.adjascentGlobstarOptimize(globParts);
        }
        return globParts;
    }
    // just get rid of adjascent ** portions
    adjascentGlobstarOptimize(globParts) {
        return globParts.map(parts => {
            let gs = -1;
            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
                let i = gs;
                while (parts[i + 1] === '**') {
                    i++;
                }
                if (i !== gs) {
                    parts.splice(gs, i - gs);
                }
            }
            return parts;
        });
    }
    // get rid of adjascent ** and resolve .. portions
    levelOneOptimize(globParts) {
        return globParts.map(parts => {
            parts = parts.reduce((set, part) => {
                const prev = set[set.length - 1];
                if (part === '**' && prev === '**') {
                    return set;
                }
                if (part === '..') {
                    if (prev && prev !== '..' && prev !== '.' && prev !== '**') {
                        set.pop();
                        return set;
                    }
                }
                set.push(part);
                return set;
            }, []);
            return parts.length === 0 ? [''] : parts;
        });
    }
    levelTwoFileOptimize(parts) {
        if (!Array.isArray(parts)) {
            parts = this.slashSplit(parts);
        }
        let didSomething = false;
        do {
            didSomething = false;
            // <pre>/<e>/<rest> -> <pre>/<rest>
            if (!this.preserveMultipleSlashes) {
                for (let i = 1; i < parts.length - 1; i++) {
                    const p = parts[i];
                    // don't squeeze out UNC patterns
                    if (i === 1 && p === '' && parts[0] === '')
                        continue;
                    if (p === '.' || p === '') {
                        didSomething = true;
                        parts.splice(i, 1);
                        i--;
                    }
                }
                if (parts[0] === '.' &&
                    parts.length === 2 &&
                    (parts[1] === '.' || parts[1] === '')) {
                    didSomething = true;
                    parts.pop();
                }
            }
            // <pre>/<p>/../<rest> -> <pre>/<rest>
            let dd = 0;
            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
                const p = parts[dd - 1];
                if (p && p !== '.' && p !== '..' && p !== '**') {
                    didSomething = true;
                    parts.splice(dd - 1, 2);
                    dd -= 2;
                }
            }
        } while (didSomething);
        return parts.length === 0 ? [''] : parts;
    }
    // First phase: single-pattern processing
    // <pre> is 1 or more portions
    // <rest> is 1 or more portions
    // <p> is any portion other than ., .., '', or **
    // <e> is . or ''
    //
    // **/.. is *brutal* for filesystem walking performance, because
    // it effectively resets the recursive walk each time it occurs,
    // and ** cannot be reduced out by a .. pattern part like a regexp
    // or most strings (other than .., ., and '') can be.
    //
    // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
    // <pre>/<e>/<rest> -> <pre>/<rest>
    // <pre>/<p>/../<rest> -> <pre>/<rest>
    // **/**/<rest> -> **/<rest>
    //
    // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
    // this WOULD be allowed if ** did follow symlinks, or * didn't
    firstPhasePreProcess(globParts) {
        let didSomething = false;
        do {
            didSomething = false;
            // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
            for (let parts of globParts) {
                let gs = -1;
                while (-1 !== (gs = parts.indexOf('**', gs + 1))) {
                    let gss = gs;
                    while (parts[gss + 1] === '**') {
                        // <pre>/**/**/<rest> -> <pre>/**/<rest>
                        gss++;
                    }
                    // eg, if gs is 2 and gss is 4, that means we have 3 **
                    // parts, and can remove 2 of them.
                    if (gss > gs) {
                        parts.splice(gs + 1, gss - gs);
                    }
                    let next = parts[gs + 1];
                    const p = parts[gs + 2];
                    const p2 = parts[gs + 3];
                    if (next !== '..')
                        continue;
                    if (!p ||
                        p === '.' ||
                        p === '..' ||
                        !p2 ||
                        p2 === '.' ||
                        p2 === '..') {
                        continue;
                    }
                    didSomething = true;
                    // edit parts in place, and push the new one
                    parts.splice(gs, 1);
                    const other = parts.slice(0);
                    other[gs] = '**';
                    globParts.push(other);
                    gs--;
                }
                // <pre>/<e>/<rest> -> <pre>/<rest>
                if (!this.preserveMultipleSlashes) {
                    for (let i = 1; i < parts.length - 1; i++) {
                        const p = parts[i];
                        // don't squeeze out UNC patterns
                        if (i === 1 && p === '' && parts[0] === '')
                            continue;
                        if (p === '.' || p === '') {
                            didSomething = true;
                            parts.splice(i, 1);
                            i--;
                        }
                    }
                    if (parts[0] === '.' &&
                        parts.length === 2 &&
                        (parts[1] === '.' || parts[1] === '')) {
                        didSomething = true;
                        parts.pop();
                    }
                }
                // <pre>/<p>/../<rest> -> <pre>/<rest>
                let dd = 0;
                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {
                    const p = parts[dd - 1];
                    if (p && p !== '.' && p !== '..' && p !== '**') {
                        didSomething = true;
                        const needDot = dd === 1 && parts[dd + 1] === '**';
                        const splin = needDot ? ['.'] : [];
                        parts.splice(dd - 1, 2, ...splin);
                        if (parts.length === 0)
                            parts.push('');
                        dd -= 2;
                    }
                }
            }
        } while (didSomething);
        return globParts;
    }
    // second phase: multi-pattern dedupes
    // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
    // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
    // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
    //
    // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
    // ^-- not valid because ** doens't follow symlinks
    secondPhasePreProcess(globParts) {
        for (let i = 0; i < globParts.length - 1; i++) {
            for (let j = i + 1; j < globParts.length; j++) {
                const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);
                if (!matched)
                    continue;
                globParts[i] = matched;
                globParts[j] = [];
            }
        }
        return globParts.filter(gs => gs.length);
    }
    partsMatch(a, b, emptyGSMatch = false) {
        let ai = 0;
        let bi = 0;
        let result = [];
        let which = '';
        while (ai < a.length && bi < b.length) {
            if (a[ai] === b[bi]) {
                result.push(which === 'b' ? b[bi] : a[ai]);
                ai++;
                bi++;
            }
            else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {
                result.push(a[ai]);
                ai++;
            }
            else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {
                result.push(b[bi]);
                bi++;
            }
            else if (a[ai] === '*' &&
                b[bi] &&
                (this.options.dot || !b[bi].startsWith('.')) &&
                b[bi] !== '**') {
                if (which === 'b')
                    return false;
                which = 'a';
                result.push(a[ai]);
                ai++;
                bi++;
            }
            else if (b[bi] === '*' &&
                a[ai] &&
                (this.options.dot || !a[ai].startsWith('.')) &&
                a[ai] !== '**') {
                if (which === 'a')
                    return false;
                which = 'b';
                result.push(b[bi]);
                ai++;
                bi++;
            }
            else {
                return false;
            }
        }
        // if we fall out of the loop, it means they two are identical
        // as long as their lengths match
        return a.length === b.length && result;
    }
    parseNegate() {
        if (this.nonegate)
            return;
        const pattern = this.pattern;
        let negate = false;
        let negateOffset = 0;
        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {
            negate = !negate;
            negateOffset++;
        }
        if (negateOffset)
            this.pattern = pattern.slice(negateOffset);
        this.negate = negate;
    }
    // set partial to true to test if, for example,
    // "/a/b" matches the start of "/*/b/*/d"
    // Partial means, if you run out of file before you run
    // out of pattern, then that's fine, as long as all
    // the parts match.
    matchOne(file, pattern, partial = false) {
        const options = this.options;
        // UNC paths like //?/X:/... can match X:/... and vice versa
        // Drive letters in absolute drive or unc paths are always compared
        // case-insensitively.
        if (this.isWindows) {
            const fileDrive = typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0]);
            const fileUNC = !fileDrive &&
                file[0] === '' &&
                file[1] === '' &&
                file[2] === '?' &&
                /^[a-z]:$/i.test(file[3]);
            const patternDrive = typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0]);
            const patternUNC = !patternDrive &&
                pattern[0] === '' &&
                pattern[1] === '' &&
                pattern[2] === '?' &&
                typeof pattern[3] === 'string' &&
                /^[a-z]:$/i.test(pattern[3]);
            const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined;
            const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined;
            if (typeof fdi === 'number' && typeof pdi === 'number') {
                const [fd, pd] = [file[fdi], pattern[pdi]];
                if (fd.toLowerCase() === pd.toLowerCase()) {
                    pattern[pdi] = fd;
                    if (pdi > fdi) {
                        pattern = pattern.slice(pdi);
                    }
                    else if (fdi > pdi) {
                        file = file.slice(fdi);
                    }
                }
            }
        }
        // resolve and reduce . and .. portions in the file as well.
        // dont' need to do the second phase, because it's only one string[]
        const { optimizationLevel = 1 } = this.options;
        if (optimizationLevel >= 2) {
            file = this.levelTwoFileOptimize(file);
        }
        this.debug('matchOne', this, { file, pattern });
        this.debug('matchOne', file.length, pattern.length);
        for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
            this.debug('matchOne loop');
            var p = pattern[pi];
            var f = file[fi];
            this.debug(pattern, p, f);
            // should be impossible.
            // some invalid regexp stuff in the set.
            /* c8 ignore start */
            if (p === false) {
                return false;
            }
            /* c8 ignore stop */
            if (p === exports.GLOBSTAR) {
                this.debug('GLOBSTAR', [pattern, p, f]);
                // "**"
                // a/**/b/**/c would match the following:
                // a/b/x/y/z/c
                // a/x/y/z/b/c
                // a/b/x/b/x/c
                // a/b/c
                // To do this, take the rest of the pattern after
                // the **, and see if it would match the file remainder.
                // If so, return success.
                // If not, the ** "swallows" a segment, and try again.
                // This is recursively awful.
                //
                // a/**/b/**/c matching a/b/x/y/z/c
                // - a matches a
                // - doublestar
                //   - matchOne(b/x/y/z/c, b/**/c)
                //     - b matches b
                //     - doublestar
                //       - matchOne(x/y/z/c, c) -> no
                //       - matchOne(y/z/c, c) -> no
                //       - matchOne(z/c, c) -> no
                //       - matchOne(c, c) yes, hit
                var fr = fi;
                var pr = pi + 1;
                if (pr === pl) {
                    this.debug('** at the end');
                    // a ** at the end will just swallow the rest.
                    // We have found a match.
                    // however, it will not swallow /.x, unless
                    // options.dot is set.
                    // . and .. are *never* matched by **, for explosively
                    // exponential reasons.
                    for (; fi < fl; fi++) {
                        if (file[fi] === '.' ||
                            file[fi] === '..' ||
                            (!options.dot && file[fi].charAt(0) === '.'))
                            return false;
                    }
                    return true;
                }
                // ok, let's see if we can swallow whatever we can.
                while (fr < fl) {
                    var swallowee = file[fr];
                    this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);
                    // XXX remove this slice.  Just pass the start index.
                    if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                        this.debug('globstar found match!', fr, fl, swallowee);
                        // found a match.
                        return true;
                    }
                    else {
                        // can't swallow "." or ".." ever.
                        // can only swallow ".foo" when explicitly asked.
                        if (swallowee === '.' ||
                            swallowee === '..' ||
                            (!options.dot && swallowee.charAt(0) === '.')) {
                            this.debug('dot detected!', file, fr, pattern, pr);
                            break;
                        }
                        // ** swallows a segment, and continue.
                        this.debug('globstar swallow a segment, and continue');
                        fr++;
                    }
                }
                // no match was found.
                // However, in partial mode, we can't say this is necessarily over.
                /* c8 ignore start */
                if (partial) {
                    // ran out of file
                    this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
                    if (fr === fl) {
                        return true;
                    }
                }
                /* c8 ignore stop */
                return false;
            }
            // something other than **
            // non-magic patterns just have to match exactly
            // patterns with magic have been turned into regexps.
            let hit;
            if (typeof p === 'string') {
                hit = f === p;
                this.debug('string match', p, f, hit);
            }
            else {
                hit = p.test(f);
                this.debug('pattern match', p, f, hit);
            }
            if (!hit)
                return false;
        }
        // Note: ending in / means that we'll get a final ""
        // at the end of the pattern.  This can only match a
        // corresponding "" at the end of the file.
        // If the file ends in /, then it can only match a
        // a pattern that ends in /, unless the pattern just
        // doesn't have any more for it. But, a/b/ should *not*
        // match "a/b/*", even though "" matches against the
        // [^/]*? pattern, except in partial mode, where it might
        // simply not be reached yet.
        // However, a/b/ should still satisfy a/*
        // now either we fell off the end of the pattern, or we're done.
        if (fi === fl && pi === pl) {
            // ran out of pattern and filename at the same time.
            // an exact hit!
            return true;
        }
        else if (fi === fl) {
            // ran out of file, but still had pattern left.
            // this is ok if we're doing the match as part of
            // a glob fs traversal.
            return partial;
        }
        else if (pi === pl) {
            // ran out of pattern, still have file left.
            // this is only acceptable if we're on the very last
            // empty segment of a file with a trailing slash.
            // a/* should match a/b/
            return fi === fl - 1 && file[fi] === '';
            /* c8 ignore start */
        }
        else {
            // should be unreachable.
            throw new Error('wtf?');
        }
        /* c8 ignore stop */
    }
    braceExpand() {
        return (0, exports.braceExpand)(this.pattern, this.options);
    }
    parse(pattern) {
        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);
        const options = this.options;
        // shortcuts
        if (pattern === '**')
            return exports.GLOBSTAR;
        if (pattern === '')
            return '';
        // far and away, the most common glob pattern parts are
        // *, *.*, and *.<ext>  Add a fast check method for those.
        let m;
        let fastTest = null;
        if ((m = pattern.match(starRE))) {
            fastTest = options.dot ? starTestDot : starTest;
        }
        else if ((m = pattern.match(starDotExtRE))) {
            fastTest = (options.nocase
                ? options.dot
                    ? starDotExtTestNocaseDot
                    : starDotExtTestNocase
                : options.dot
                    ? starDotExtTestDot
                    : starDotExtTest)(m[1]);
        }
        else if ((m = pattern.match(qmarksRE))) {
            fastTest = (options.nocase
                ? options.dot
                    ? qmarksTestNocaseDot
                    : qmarksTestNocase
                : options.dot
                    ? qmarksTestDot
                    : qmarksTest)(m);
        }
        else if ((m = pattern.match(starDotStarRE))) {
            fastTest = options.dot ? starDotStarTestDot : starDotStarTest;
        }
        else if ((m = pattern.match(dotStarRE))) {
            fastTest = dotStarTest;
        }
        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern();
        return fastTest ? Object.assign(re, { test: fastTest }) : re;
    }
    makeRe() {
        if (this.regexp || this.regexp === false)
            return this.regexp;
        // at this point, this.set is a 2d array of partial
        // pattern strings, or "**".
        //
        // It's better to use .match().  This function shouldn't
        // be used, really, but it's pretty convenient sometimes,
        // when you just want to work with a regex.
        const set = this.set;
        if (!set.length) {
            this.regexp = false;
            return this.regexp;
        }
        const options = this.options;
        const twoStar = options.noglobstar
            ? star
            : options.dot
                ? twoStarDot
                : twoStarNoDot;
        const flags = new Set(options.nocase ? ['i'] : []);
        // regexpify non-globstar patterns
        // if ** is only item, then we just do one twoStar
        // if ** is first, and there are more, prepend (\/|twoStar\/)? to next
        // if ** is last, append (\/twoStar|) to previous
        // if ** is in the middle, append (\/|\/twoStar\/) to previous
        // then filter out GLOBSTAR symbols
        let re = set
            .map(pattern => {
            const pp = pattern.map(p => {
                if (p instanceof RegExp) {
                    for (const f of p.flags.split(''))
                        flags.add(f);
                }
                return typeof p === 'string'
                    ? regExpEscape(p)
                    : p === exports.GLOBSTAR
                        ? exports.GLOBSTAR
                        : p._src;
            });
            pp.forEach((p, i) => {
                const next = pp[i + 1];
                const prev = pp[i - 1];
                if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {
                    return;
                }
                if (prev === undefined) {
                    if (next !== undefined && next !== exports.GLOBSTAR) {
                        pp[i + 1] = '(?:\\/|' + twoStar + '\\/)?' + next;
                    }
                    else {
                        pp[i] = twoStar;
                    }
                }
                else if (next === undefined) {
                    pp[i - 1] = prev + '(?:\\/|' + twoStar + ')?';
                }
                else if (next !== exports.GLOBSTAR) {
                    pp[i - 1] = prev + '(?:\\/|\\/' + twoStar + '\\/)' + next;
                    pp[i + 1] = exports.GLOBSTAR;
                }
            });
            return pp.filter(p => p !== exports.GLOBSTAR).join('/');
        })
            .join('|');
        // need to wrap in parens if we had more than one thing with |,
        // otherwise only the first will be anchored to ^ and the last to $
        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', ''];
        // must match entire pattern
        // ending in a * or ** will make it less strict.
        re = '^' + open + re + close + '$';
        // can match anything, as long as it's not this.
        if (this.negate)
            re = '^(?!' + re + ').+$';
        try {
            this.regexp = new RegExp(re, [...flags].join(''));
            /* c8 ignore start */
        }
        catch (ex) {
            // should be impossible
            this.regexp = false;
        }
        /* c8 ignore stop */
        return this.regexp;
    }
    slashSplit(p) {
        // if p starts with // on windows, we preserve that
        // so that UNC paths aren't broken.  Otherwise, any number of
        // / characters are coalesced into one, unless
        // preserveMultipleSlashes is set to true.
        if (this.preserveMultipleSlashes) {
            return p.split('/');
        }
        else if (this.isWindows && /^\/\/[^\/]+/.test(p)) {
            // add an extra '' for the one we lose
            return ['', ...p.split(/\/+/)];
        }
        else {
            return p.split(/\/+/);
        }
    }
    match(f, partial = this.partial) {
        this.debug('match', f, this.pattern);
        // short-circuit in the case of busted things.
        // comments, etc.
        if (this.comment) {
            return false;
        }
        if (this.empty) {
            return f === '';
        }
        if (f === '/' && partial) {
            return true;
        }
        const options = this.options;
        // windows: need to use /, not \
        if (this.isWindows) {
            f = f.split('\\').join('/');
        }
        // treat the test path as a set of pathparts.
        const ff = this.slashSplit(f);
        this.debug(this.pattern, 'split', ff);
        // just ONE of the pattern sets in this.set needs to match
        // in order for it to be valid.  If negating, then just one
        // match means that we have failed.
        // Either way, return on the first hit.
        const set = this.set;
        this.debug(this.pattern, 'set', set);
        // Find the basename of the path by looking for the last non-empty segment
        let filename = ff[ff.length - 1];
        if (!filename) {
            for (let i = ff.length - 2; !filename && i >= 0; i--) {
                filename = ff[i];
            }
        }
        for (let i = 0; i < set.length; i++) {
            const pattern = set[i];
            let file = ff;
            if (options.matchBase && pattern.length === 1) {
                file = [filename];
            }
            const hit = this.matchOne(file, pattern, partial);
            if (hit) {
                if (options.flipNegate) {
                    return true;
                }
                return !this.negate;
            }
        }
        // didn't get any hits.  this is success if it's a negative
        // pattern, failure otherwise.
        if (options.flipNegate) {
            return false;
        }
        return this.negate;
    }
    static defaults(def) {
        return exports.minimatch.defaults(def).Minimatch;
    }
}
exports.Minimatch = Minimatch;
/* c8 ignore start */
var ast_js_2 = __webpack_require__(4815);
Object.defineProperty(exports, "AST", ({ enumerable: true, get: function () { return ast_js_2.AST; } }));
var escape_js_2 = __webpack_require__(2292);
Object.defineProperty(exports, "escape", ({ enumerable: true, get: function () { return escape_js_2.escape; } }));
var unescape_js_2 = __webpack_require__(7159);
Object.defineProperty(exports, "unescape", ({ enumerable: true, get: function () { return unescape_js_2.unescape; } }));
/* c8 ignore stop */
exports.minimatch.AST = ast_js_1.AST;
exports.minimatch.Minimatch = Minimatch;
exports.minimatch.escape = escape_js_1.escape;
exports.minimatch.unescape = unescape_js_1.unescape;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 7159:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unescape = void 0;
/**
 * Un-escape a string that has been escaped with {@link escape}.
 *
 * If the {@link windowsPathsNoEscape} option is used, then square-brace
 * escapes are removed, but not backslash escapes.  For example, it will turn
 * the string `'[*]'` into `*`, but it will not turn `'\\*'` into `'*'`,
 * becuase `\` is a path separator in `windowsPathsNoEscape` mode.
 *
 * When `windowsPathsNoEscape` is not set, then both brace escapes and
 * backslash escapes are removed.
 *
 * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped
 * or unescaped.
 */
const unescape = (s, { windowsPathsNoEscape = false, } = {}) => {
    return windowsPathsNoEscape
        ? s.replace(/\[([^\/\\])\]/g, '$1')
        : s.replace(/((?!\\).|^)\[([^\/\\])\]/g, '$1$2').replace(/\\([^\/])/g, '$1');
};
exports.unescape = unescape;
//# sourceMappingURL=unescape.js.map

/***/ }),

/***/ 8041:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextDocument: () => (/* binding */ TextDocument)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

class FullTextDocument {
    constructor(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    get uri() {
        return this._uri;
    }
    get languageId() {
        return this._languageId;
    }
    get version() {
        return this._version;
    }
    getText(range) {
        if (range) {
            const start = this.offsetAt(range.start);
            const end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    }
    update(changes, version) {
        for (let change of changes) {
            if (FullTextDocument.isIncremental(change)) {
                // makes sure start is before end
                const range = getWellformedRange(change.range);
                // update content
                const startOffset = this.offsetAt(range.start);
                const endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                // update the offsets
                const startLine = Math.max(range.start.line, 0);
                const endLine = Math.max(range.end.line, 0);
                let lineOffsets = this._lineOffsets;
                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                }
                else {
                    if (addedLineOffsets.length < 10000) {
                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
                    }
                    else { // avoid too many arguments for splice
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                const diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            }
            else if (FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = undefined;
            }
            else {
                throw new Error('Unknown change event received');
            }
        }
        this._version = version;
    }
    getLineOffsets() {
        if (this._lineOffsets === undefined) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    }
    positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        let lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
            return { line: 0, character: offset };
        }
        while (low < high) {
            let mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        let line = low - 1;
        return { line, character: offset - lineOffsets[line] };
    }
    offsetAt(position) {
        let lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        let lineOffset = lineOffsets[position.line];
        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    }
    get lineCount() {
        return this.getLineOffsets().length;
    }
    static isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    static isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
}
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */
    function update(document, changes, version) {
        if (document instanceof FullTextDocument) {
            document.update(changes, version);
            return document;
        }
        else {
            throw new Error('TextDocument.update: document must be created by TextDocument.create');
        }
    }
    TextDocument.update = update;
    function applyEdits(document, edits) {
        let text = document.getText();
        let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {
            let diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        let lastModifiedOffset = 0;
        const spans = [];
        for (const e of sortedEdits) {
            let startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error('Overlapping edit');
            }
            else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join('');
    }
    TextDocument.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare) {
    if (data.length <= 1) {
        // sorted
        return data;
    }
    const p = (data.length / 2) | 0;
    const left = data.slice(0, p);
    const right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    let leftIdx = 0;
    let rightIdx = 0;
    let i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
        let ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            // smaller_equal -> take left to preserve order
            data[i++] = left[leftIdx++];
        }
        else {
            // greater -> take right
            data[i++] = right[rightIdx++];
        }
    }
    while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
    const result = isAtLineStart ? [textOffset] : [];
    for (let i = 0; i < text.length; i++) {
        let ch = text.charCodeAt(i);
        if (ch === 13 /* CharCode.CarriageReturn */ || ch === 10 /* CharCode.LineFeed */) {
            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function getWellformedRange(range) {
    const start = range.start;
    const end = range.end;
    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {
        return { start: end, end: start };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    const range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return { newText: textEdit.newText, range };
    }
    return textEdit;
}


/***/ }),

/***/ 3495:
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"version":1.1,"tags":[{"name":"html","description":{"kind":"markdown","value":"The html element represents the root of an HTML document."},"attributes":[{"name":"manifest","description":{"kind":"markdown","value":"Specifies the URI of a resource manifest indicating resources that should be cached locally. See [Using the application cache](https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache) for details."}},{"name":"version","description":"Specifies the version of the HTML [Document Type Definition](https://developer.mozilla.org/en-US/docs/Glossary/DTD \\"Document Type Definition: In HTML, the doctype is the required \\"<!DOCTYPE html>\\" preamble found at the top of all documents. Its sole purpose is to prevent a browser from switching into so-called “quirks mode” when rendering a document; that is, the \\"<!DOCTYPE html>\\" doctype ensures that the browser makes a best-effort attempt at following the relevant specifications, rather than using a different rendering mode that is incompatible with some specifications.\\") that governs the current document. This attribute is not needed, because it is redundant with the version information in the document type declaration."},{"name":"xmlns","description":"Specifies the XML Namespace of the document. Default value is `\\"http://www.w3.org/1999/xhtml\\"`. This is required in documents parsed with XML parsers, and optional in text/html documents."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/html"}]},{"name":"head","description":{"kind":"markdown","value":"The head element represents a collection of metadata for the Document."},"attributes":[{"name":"profile","description":"The URIs of one or more metadata profiles, separated by white space."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/head"}]},{"name":"title","description":{"kind":"markdown","value":"The title element represents the document\'s title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user\'s history or bookmarks, or in search results. The document\'s title is often different from its first heading, since the first heading does not have to stand alone when taken out of context."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/title"}]},{"name":"base","description":{"kind":"markdown","value":"The base element allows authors to specify the document base URL for the purposes of resolving relative URLs, and the name of the default browsing context for the purposes of following hyperlinks. The element does not represent any content beyond this information."},"void":true,"attributes":[{"name":"href","description":{"kind":"markdown","value":"The base URL to be used throughout the document for relative URL addresses. If this attribute is specified, this element must come before any other elements with attributes whose values are URLs. Absolute and relative URLs are allowed."}},{"name":"target","valueSet":"target","description":{"kind":"markdown","value":"A name or keyword indicating the default location to display the result when hyperlinks or forms cause navigation, for elements that do not have an explicit target reference. It is a name of, or keyword for, a _browsing context_ (for example: tab, window, or inline frame). The following keywords have special meanings:\\n\\n*   `_self`: Load the result into the same browsing context as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the result into a new unnamed browsing context.\\n*   `_parent`: Load the result into the parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: Load the result into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`.\\n\\nIf this attribute is specified, this element must come before any other elements with attributes whose values are URLs."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/base"}]},{"name":"link","description":{"kind":"markdown","value":"The link element allows authors to link their document to other resources."},"void":true,"attributes":[{"name":"href","description":{"kind":"markdown","value":"This attribute specifies the [URL](https://developer.mozilla.org/en-US/docs/Glossary/URL \\"URL: Uniform Resource Locator (URL) is a text string specifying where a resource can be found on the Internet.\\") of the linked resource. A URL can be absolute or relative."}},{"name":"crossorigin","valueSet":"xo","description":{"kind":"markdown","value":"This enumerated attribute indicates whether [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \\"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\\") must be used when fetching the resource. [CORS-enabled images](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") element without being _tainted_. The allowed values are:\\n\\n`anonymous`\\n\\nA cross-origin request (i.e. with an [`Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin \\"The Origin request header indicates where a fetch originates from. It doesn\'t include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn\'t disclose the whole path.\\") HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (by not setting the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin \\"The Access-Control-Allow-Origin response header indicates whether the response can be shared with requesting code from the given origin.\\") HTTP header) the image will be tainted and its usage restricted.\\n\\n`use-credentials`\\n\\nA cross-origin request (i.e. with an `Origin` HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed). If the server does not give credentials to the origin site (through [`Access-Control-Allow-Credentials`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials \\"The Access-Control-Allow-Credentials response header tells browsers whether to expose the response to frontend JavaScript code when the request\'s credentials mode (Request.credentials) is \\"include\\".\\") HTTP header), the resource will be _tainted_ and its usage restricted.\\n\\nIf the attribute is not present, the resource is fetched without a [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \\"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\\") request (i.e. without sending the `Origin` HTTP header), preventing its non-tainted usage. If invalid, it is handled as if the enumerated keyword **anonymous** was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for additional information."}},{"name":"rel","description":{"kind":"markdown","value":"This attribute names a relationship of the linked document to the current document. The attribute must be a space-separated list of the [link types values](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)."}},{"name":"media","description":{"kind":"markdown","value":"This attribute specifies the media that the linked resource applies to. Its value must be a media type / [media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries). This attribute is mainly useful when linking to external stylesheets — it allows the user agent to pick the best adapted one for the device it runs on.\\n\\n**Notes:**\\n\\n*   In HTML 4, this can only be a simple white-space-separated list of media description literals, i.e., [media types and groups](https://developer.mozilla.org/en-US/docs/Web/CSS/@media), where defined and allowed as values for this attribute, such as `print`, `screen`, `aural`, `braille`. HTML5 extended this to any kind of [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries), which are a superset of the allowed values of HTML 4.\\n*   Browsers not supporting [CSS3 Media Queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries) won\'t necessarily recognize the adequate link; do not forget to set fallback links, the restricted set of media queries defined in HTML 4."}},{"name":"hreflang","description":{"kind":"markdown","value":"This attribute indicates the language of the linked resource. It is purely advisory. Allowed values are determined by [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt). Use this attribute only if the [`href`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) attribute is present."}},{"name":"type","description":{"kind":"markdown","value":"This attribute is used to define the type of the content linked to. The value of the attribute should be a MIME type such as **text/html**, **text/css**, and so on. The common use of this attribute is to define the type of stylesheet being referenced (such as **text/css**), but given that CSS is the only stylesheet language used on the web, not only is it possible to omit the `type` attribute, but is actually now recommended practice. It is also used on `rel=\\"preload\\"` link types, to make sure the browser only downloads file types that it supports."}},{"name":"sizes","description":{"kind":"markdown","value":"This attribute defines the sizes of the icons for visual media contained in the resource. It must be present only if the [`rel`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-rel) contains a value of `icon` or a non-standard type such as Apple\'s `apple-touch-icon`. It may have the following values:\\n\\n*   `any`, meaning that the icon can be scaled to any size as it is in a vector format, like `image/svg+xml`.\\n*   a white-space separated list of sizes, each in the format `_<width in pixels>_x_<height in pixels>_` or `_<width in pixels>_X_<height in pixels>_`. Each of these sizes must be contained in the resource.\\n\\n**Note:** Most icon formats are only able to store one single icon; therefore most of the time the [`sizes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-sizes) contains only one entry. MS\'s ICO format does, as well as Apple\'s ICNS. ICO is more ubiquitous; you should definitely use it."}},{"name":"as","description":"This attribute is only used when `rel=\\"preload\\"` or `rel=\\"prefetch\\"` has been set on the `<link>` element. It specifies the type of content being loaded by the `<link>`, which is necessary for content prioritization, request matching, application of correct [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), and setting of correct [`Accept`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept \\"The Accept request HTTP header advertises which content types, expressed as MIME types, the client is able to understand. Using content negotiation, the server then selects one of the proposals, uses it and informs the client of its choice with the Content-Type response header. Browsers set adequate values for this header depending on the context where the request is done: when fetching a CSS stylesheet a different value is set for the request than when fetching an image, video or a script.\\") request header."},{"name":"importance","description":"Indicates the relative importance of the resource. Priority hints are delegated using the values:"},{"name":"importance","description":"**`auto`**: Indicates **no preference**. The browser may use its own heuristics to decide the priority of the resource.\\n\\n**`high`**: Indicates to the browser that the resource is of **high** priority.\\n\\n**`low`**: Indicates to the browser that the resource is of **low** priority.\\n\\n**Note:** The `importance` attribute may only be used for the `<link>` element if `rel=\\"preload\\"` or `rel=\\"prefetch\\"` is present."},{"name":"integrity","description":"Contains inline metadata — a base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch. The browser can use this to verify that the fetched resource has been delivered free of unexpected manipulation. See [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)."},{"name":"referrerpolicy","description":"A string indicating which referrer to use when fetching the resource:\\n\\n*   `no-referrer` means that the [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade` means that no [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent’s default behavior, if no policy is otherwise specified.\\n*   `origin` means that the referrer will be the origin of the page, which is roughly the scheme, the host, and the port.\\n*   `origin-when-cross-origin` means that navigating to other origins will be limited to the scheme, the host, and the port, while navigating on the same origin will include the referrer\'s path.\\n*   `unsafe-url` means that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins."},{"name":"title","description":"The `title` attribute has special semantics on the `<link>` element. When used on a `<link rel=\\"stylesheet\\">` it defines a [preferred or an alternate stylesheet](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets). Incorrectly using it may [cause the stylesheet to be ignored](https://developer.mozilla.org/en-US/docs/Correctly_Using_Titles_With_External_Stylesheets)."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/link"}]},{"name":"meta","description":{"kind":"markdown","value":"The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements."},"void":true,"attributes":[{"name":"name","description":{"kind":"markdown","value":"This attribute defines the name of a piece of document-level metadata. It should not be set if one of the attributes [`itemprop`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-itemprop), [`http-equiv`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-http-equiv) or [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) is also set.\\n\\nThis metadata name is associated with the value contained by the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute. The possible values for the name attribute are:\\n\\n*   `application-name` which defines the name of the application running in the web page.\\n    \\n    **Note:**\\n    \\n    *   Browsers may use this to identify the application. It is different from the [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title \\"The HTML Title element (<title>) defines the document\'s title that is shown in a browser\'s title bar or a page\'s tab.\\") element, which usually contain the application name, but may also contain information like the document name or a status.\\n    *   Simple web pages shouldn\'t define an application-name.\\n    \\n*   `author` which defines the name of the document\'s author.\\n*   `description` which contains a short and accurate summary of the content of the page. Several browsers, like Firefox and Opera, use this as the default description of bookmarked pages.\\n*   `generator` which contains the identifier of the software that generated the page.\\n*   `keywords` which contains words relevant to the page\'s content separated by commas.\\n*   `referrer` which controls the [`Referer` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) attached to requests sent from the document:\\n    \\n    Values for the `content` attribute of `<meta name=\\"referrer\\">`\\n    \\n    `no-referrer`\\n    \\n    Do not send a HTTP `Referrer` header.\\n    \\n    `origin`\\n    \\n    Send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the document.\\n    \\n    `no-referrer-when-downgrade`\\n    \\n    Send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) as a referrer to URLs as secure as the current page, (https→https), but does not send a referrer to less secure URLs (https→http). This is the default behaviour.\\n    \\n    `origin-when-cross-origin`\\n    \\n    Send the full URL (stripped of parameters) for same-origin requests, but only send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) for other cases.\\n    \\n    `same-origin`\\n    \\n    A referrer will be sent for [same-site origins](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy), but cross-origin requests will contain no referrer information.\\n    \\n    `strict-origin`\\n    \\n    Only send the origin of the document as the referrer to a-priori as-much-secure destination (HTTPS->HTTPS), but don\'t send it to a less secure destination (HTTPS->HTTP).\\n    \\n    `strict-origin-when-cross-origin`\\n    \\n    Send a full URL when performing a same-origin request, only send the origin of the document to a-priori as-much-secure destination (HTTPS->HTTPS), and send no header to a less secure destination (HTTPS->HTTP).\\n    \\n    `unsafe-URL`\\n    \\n    Send the full URL (stripped of parameters) for same-origin or cross-origin requests.\\n    \\n    **Notes:**\\n    \\n    *   Some browsers support the deprecated values of `always`, `default`, and `never` for referrer.\\n    *   Dynamically inserting `<meta name=\\"referrer\\">` (with [`document.write`](https://developer.mozilla.org/en-US/docs/Web/API/Document/write) or [`appendChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)) makes the referrer behaviour unpredictable.\\n    *   When several conflicting policies are defined, the no-referrer policy is applied.\\n    \\n\\nThis attribute may also have a value taken from the extended list defined on [WHATWG Wiki MetaExtensions page](https://wiki.whatwg.org/wiki/MetaExtensions). Although none have been formally accepted yet, a few commonly used names are:\\n\\n*   `creator` which defines the name of the creator of the document, such as an organization or institution. If there are more than one, several [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") elements should be used.\\n*   `googlebot`, a synonym of `robots`, is only followed by Googlebot (the indexing crawler for Google).\\n*   `publisher` which defines the name of the document\'s publisher.\\n*   `robots` which defines the behaviour that cooperative crawlers, or \\"robots\\", should use with the page. It is a comma-separated list of the values below:\\n    \\n    Values for the content of `<meta name=\\"robots\\">`\\n    \\n    Value\\n    \\n    Description\\n    \\n    Used by\\n    \\n    `index`\\n    \\n    Allows the robot to index the page (default).\\n    \\n    All\\n    \\n    `noindex`\\n    \\n    Requests the robot to not index the page.\\n    \\n    All\\n    \\n    `follow`\\n    \\n    Allows the robot to follow the links on the page (default).\\n    \\n    All\\n    \\n    `nofollow`\\n    \\n    Requests the robot to not follow the links on the page.\\n    \\n    All\\n    \\n    `none`\\n    \\n    Equivalent to `noindex, nofollow`\\n    \\n    [Google](https://support.google.com/webmasters/answer/79812)\\n    \\n    `noodp`\\n    \\n    Prevents using the [Open Directory Project](https://www.dmoz.org/) description, if any, as the page description in search engine results.\\n    \\n    [Google](https://support.google.com/webmasters/answer/35624#nodmoz), [Yahoo](https://help.yahoo.com/kb/search-for-desktop/meta-tags-robotstxt-yahoo-search-sln2213.html#cont5), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `noarchive`\\n    \\n    Requests the search engine not to cache the page content.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives), [Yahoo](https://help.yahoo.com/kb/search-for-desktop/SLN2213.html), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `nosnippet`\\n    \\n    Prevents displaying any description of the page in search engine results.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `noimageindex`\\n    \\n    Requests this page not to appear as the referring page of an indexed image.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives)\\n    \\n    `nocache`\\n    \\n    Synonym of `noarchive`.\\n    \\n    [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    **Notes:**\\n    \\n    *   Only cooperative robots follow these rules. Do not expect to prevent e-mail harvesters with them.\\n    *   The robot still needs to access the page in order to read these rules. To prevent bandwidth consumption, use a _[robots.txt](https://developer.mozilla.org/en-US/docs/Glossary/robots.txt \\"robots.txt: Robots.txt is a file which is usually placed in the root of any website. It decides whether crawlers are permitted or forbidden access to the web site.\\")_ file.\\n    *   If you want to remove a page, `noindex` will work, but only after the robot visits the page again. Ensure that the `robots.txt` file is not preventing revisits.\\n    *   Some values are mutually exclusive, like `index` and `noindex`, or `follow` and `nofollow`. In these cases the robot\'s behaviour is undefined and may vary between them.\\n    *   Some crawler robots, like Google, Yahoo and Bing, support the same values for the HTTP header `X-Robots-Tag`; this allows non-HTML documents like images to use these rules.\\n    \\n*   `slurp`, is a synonym of `robots`, but only for Slurp - the crawler for Yahoo Search.\\n*   `viewport`, which gives hints about the size of the initial size of the [viewport](https://developer.mozilla.org/en-US/docs/Glossary/viewport \\"viewport: A viewport represents a polygonal (normally rectangular) area in computer graphics that is currently being viewed. In web browser terms, it refers to the part of the document you\'re viewing which is currently visible in its window (or the screen, if the document is being viewed in full screen mode). Content outside the viewport is not visible onscreen until scrolled into view.\\"). Used by mobile devices only.\\n    \\n    Values for the content of `<meta name=\\"viewport\\">`\\n    \\n    Value\\n    \\n    Possible subvalues\\n    \\n    Description\\n    \\n    `width`\\n    \\n    A positive integer number, or the text `device-width`\\n    \\n    Defines the pixel width of the viewport that you want the web site to be rendered at.\\n    \\n    `height`\\n    \\n    A positive integer, or the text `device-height`\\n    \\n    Defines the height of the viewport. Not used by any browser.\\n    \\n    `initial-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the ratio between the device width (`device-width` in portrait mode or `device-height` in landscape mode) and the viewport size.\\n    \\n    `maximum-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the maximum amount to zoom in. It must be greater or equal to the `minimum-scale` or the behaviour is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default.\\n    \\n    `minimum-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the minimum zoom level. It must be smaller or equal to the `maximum-scale` or the behaviour is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default.\\n    \\n    `user-scalable`\\n    \\n    `yes` or `no`\\n    \\n    If set to `no`, the user is not able to zoom in the webpage. The default is `yes`. Browser settings can ignore this rule, and iOS10+ ignores it by default.\\n    \\n    Specification\\n    \\n    Status\\n    \\n    Comment\\n    \\n    [CSS Device Adaptation  \\n    The definition of \'<meta name=\\"viewport\\">\' in that specification.](https://drafts.csswg.org/css-device-adapt/#viewport-meta)\\n    \\n    Working Draft\\n    \\n    Non-normatively describes the Viewport META element\\n    \\n    See also: [`@viewport`](https://developer.mozilla.org/en-US/docs/Web/CSS/@viewport \\"The @viewport CSS at-rule lets you configure the viewport through which the document is viewed. It\'s primarily used for mobile devices, but is also used by desktop browsers that support features like \\"snap to edge\\" (such as Microsoft Edge).\\")\\n    \\n    **Notes:**\\n    \\n    *   Though unstandardized, this declaration is respected by most mobile browsers due to de-facto dominance.\\n    *   The default values may vary between devices and browsers.\\n    *   To learn about this declaration in Firefox for Mobile, see [this article](https://developer.mozilla.org/en-US/docs/Mobile/Viewport_meta_tag \\"Mobile/Viewport meta tag\\")."}},{"name":"http-equiv","description":{"kind":"markdown","value":"Defines a pragma directive. The attribute is named `**http-equiv**(alent)` because all the allowed values are names of particular HTTP headers:\\n\\n*   `\\"content-language\\"`  \\n    Defines the default language of the page. It can be overridden by the [lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) attribute on any element.\\n    \\n    **Warning:** Do not use this value, as it is obsolete. Prefer the `lang` attribute on the [`<html>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html \\"The HTML <html> element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.\\") element.\\n    \\n*   `\\"content-security-policy\\"`  \\n    Allows page authors to define a [content policy](https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives) for the current page. Content policies mostly specify allowed server origins and script endpoints which help guard against cross-site scripting attacks.\\n*   `\\"content-type\\"`  \\n    Defines the [MIME type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type) of the document, followed by its character encoding. It follows the same syntax as the HTTP `content-type` entity-header field, but as it is inside a HTML page, most values other than `text/html` are impossible. Therefore the valid syntax for its `content` is the string \'`text/html`\' followed by a character set with the following syntax: \'`; charset=_IANAcharset_`\', where `IANAcharset` is the _preferred MIME name_ for a character set as [defined by the IANA.](https://www.iana.org/assignments/character-sets)\\n    \\n    **Warning:** Do not use this value, as it is obsolete. Use the [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) attribute on the [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element.\\n    \\n    **Note:** As [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") can\'t change documents\' types in XHTML or HTML5\'s XHTML serialization, never set the MIME type to an XHTML MIME type with `<meta>`.\\n    \\n*   `\\"refresh\\"`  \\n    This instruction specifies:\\n    *   The number of seconds until the page should be reloaded - only if the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute contains a positive integer.\\n    *   The number of seconds until the page should redirect to another - only if the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute contains a positive integer followed by the string \'`;url=`\', and a valid URL.\\n*   `\\"set-cookie\\"`  \\n    Defines a [cookie](https://developer.mozilla.org/en-US/docs/cookie) for the page. Its content must follow the syntax defined in the [IETF HTTP Cookie Specification](https://tools.ietf.org/html/draft-ietf-httpstate-cookie-14).\\n    \\n    **Warning:** Do not use this instruction, as it is obsolete. Use the HTTP header [`Set-Cookie`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) instead."}},{"name":"content","description":{"kind":"markdown","value":"This attribute contains the value for the [`http-equiv`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-http-equiv) or [`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-name) attribute, depending on which is used."}},{"name":"charset","description":{"kind":"markdown","value":"This attribute declares the page\'s character encoding. It must contain a [standard IANA MIME name for character encodings](https://www.iana.org/assignments/character-sets). Although the standard doesn\'t request a specific encoding, it suggests:\\n\\n*   Authors are encouraged to use [`UTF-8`](https://developer.mozilla.org/en-US/docs/Glossary/UTF-8).\\n*   Authors should not use ASCII-incompatible encodings to avoid security risk: browsers not supporting them may interpret harmful content as HTML. This happens with the `JIS_C6226-1983`, `JIS_X0212-1990`, `HZ-GB-2312`, `JOHAB`, the ISO-2022 family and the EBCDIC family.\\n\\n**Note:** ASCII-incompatible encodings are those that don\'t map the 8-bit code points `0x20` to `0x7E` to the `0x0020` to `0x007E` Unicode code points)\\n\\n*   Authors **must not** use `CESU-8`, `UTF-7`, `BOCU-1` and/or `SCSU` as [cross-site scripting](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting) attacks with these encodings have been demonstrated.\\n*   Authors should not use `UTF-32` because not all HTML5 encoding algorithms can distinguish it from `UTF-16`.\\n\\n**Notes:**\\n\\n*   The declared character encoding must match the one the page was saved with to avoid garbled characters and security holes.\\n*   The [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element declaring the encoding must be inside the [`<head>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head \\"The HTML <head> element provides general information (metadata) about the document, including its title and links to its scripts and style sheets.\\") element and **within the first 1024 bytes** of the HTML as some browsers only look at those bytes before choosing an encoding.\\n*   This [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element is only one part of the [algorithm to determine a page\'s character set](https://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#encoding-sniffing-algorithm \\"Algorithm charset page\\"). The [`Content-Type` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) and any [Byte-Order Marks](https://developer.mozilla.org/en-US/docs/Glossary/Byte-Order_Mark \\"The definition of that term (Byte-Order Marks) has not been written yet; please consider contributing it!\\") override this element.\\n*   It is strongly recommended to define the character encoding. If a page\'s encoding is undefined, cross-scripting techniques are possible, such as the [`UTF-7` fallback cross-scripting technique](https://code.google.com/p/doctype-mirror/wiki/ArticleUtf7).\\n*   The [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \\"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\\") element with a `charset` attribute is a synonym for the pre-HTML5 `<meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=_IANAcharset_\\">`, where _`IANAcharset`_ contains the value of the equivalent [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) attribute. This syntax is still allowed, although no longer recommended."}},{"name":"scheme","description":"This attribute defines the scheme in which metadata is described. A scheme is a context leading to the correct interpretations of the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) value, like a format.\\n\\n**Warning:** Do not use this value, as it is obsolete. There is no replacement as there was no real usage for it."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/meta"}]},{"name":"style","description":{"kind":"markdown","value":"The style element allows authors to embed style information in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user."},"attributes":[{"name":"media","description":{"kind":"markdown","value":"This attribute defines which media the style should be applied to. Its value is a [media query](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries), which defaults to `all` if the attribute is missing."}},{"name":"nonce","description":{"kind":"markdown","value":"A cryptographic nonce (number used once) used to whitelist inline styles in a [style-src Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src). The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource’s policy is otherwise trivial."}},{"name":"type","description":{"kind":"markdown","value":"This attribute defines the styling language as a MIME type (charset should not be specified). This attribute is optional and defaults to `text/css` if it is not specified — there is very little reason to include this in modern web documents."}},{"name":"scoped","valueSet":"v"},{"name":"title","description":"This attribute specifies [alternative style sheet](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets) sets."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/style"}]},{"name":"body","description":{"kind":"markdown","value":"The body element represents the content of the document."},"attributes":[{"name":"onafterprint","description":{"kind":"markdown","value":"Function to call after the user has printed the document."}},{"name":"onbeforeprint","description":{"kind":"markdown","value":"Function to call when the user requests printing of the document."}},{"name":"onbeforeunload","description":{"kind":"markdown","value":"Function to call when the document is about to be unloaded."}},{"name":"onhashchange","description":{"kind":"markdown","value":"Function to call when the fragment identifier part (starting with the hash (`\'#\'`) character) of the document\'s current address has changed."}},{"name":"onlanguagechange","description":{"kind":"markdown","value":"Function to call when the preferred languages changed."}},{"name":"onmessage","description":{"kind":"markdown","value":"Function to call when the document has received a message."}},{"name":"onoffline","description":{"kind":"markdown","value":"Function to call when network communication has failed."}},{"name":"ononline","description":{"kind":"markdown","value":"Function to call when network communication has been restored."}},{"name":"onpagehide"},{"name":"onpageshow"},{"name":"onpopstate","description":{"kind":"markdown","value":"Function to call when the user has navigated session history."}},{"name":"onstorage","description":{"kind":"markdown","value":"Function to call when the storage area has changed."}},{"name":"onunload","description":{"kind":"markdown","value":"Function to call when the document is going away."}},{"name":"alink","description":"Color of text for hyperlinks when selected. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property in conjunction with the [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/:active \\"The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user.\\") pseudo-class instead._"},{"name":"background","description":"URI of a image to use as a background. _This method is non-conforming, use CSS [`background`](https://developer.mozilla.org/en-US/docs/Web/CSS/background \\"The background shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\\") property on the element instead._"},{"name":"bgcolor","description":"Background color for the document. _This method is non-conforming, use CSS [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \\"The background-color CSS property sets the background color of an element.\\") property on the element instead._"},{"name":"bottommargin","description":"The margin of the bottom of the body. _This method is non-conforming, use CSS [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom \\"The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"},{"name":"leftmargin","description":"The margin of the left of the body. _This method is non-conforming, use CSS [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left \\"The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"},{"name":"link","description":"Color of text for unvisited hypertext links. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property in conjunction with the [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:link \\"The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited <a>, <area>, or <link> element that has an href attribute.\\") pseudo-class instead._"},{"name":"onblur","description":"Function to call when the document loses focus."},{"name":"onerror","description":"Function to call when the document fails to load properly."},{"name":"onfocus","description":"Function to call when the document receives focus."},{"name":"onload","description":"Function to call when the document has finished loading."},{"name":"onredo","description":"Function to call when the user has moved forward in undo transaction history."},{"name":"onresize","description":"Function to call when the document has been resized."},{"name":"onundo","description":"Function to call when the user has moved backward in undo transaction history."},{"name":"rightmargin","description":"The margin of the right of the body. _This method is non-conforming, use CSS [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right \\"The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"},{"name":"text","description":"Foreground color of text. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property on the element instead._"},{"name":"topmargin","description":"The margin of the top of the body. _This method is non-conforming, use CSS [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top \\"The margin-top CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") property on the element instead._"},{"name":"vlink","description":"Color of text for visited hypertext links. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \\"The color CSS property sets the foreground color value of an element\'s text and text decorations, and sets the currentcolor value.\\") property in conjunction with the [`:visited`](https://developer.mozilla.org/en-US/docs/Web/CSS/:visited \\"The :visited CSS pseudo-class represents links that the user has already visited. For privacy reasons, the styles that can be modified using this selector are very limited.\\") pseudo-class instead._"}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/body"}]},{"name":"article","description":{"kind":"markdown","value":"The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. Each article should be identified, typically by including a heading (h1–h6 element) as a child of the article element."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/article"}]},{"name":"section","description":{"kind":"markdown","value":"The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content. Each section should be identified, typically by including a heading ( h1- h6 element) as a child of the section element."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/section"}]},{"name":"nav","description":{"kind":"markdown","value":"The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/nav"}]},{"name":"aside","description":{"kind":"markdown","value":"The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/aside"}]},{"name":"h1","description":{"kind":"markdown","value":"The h1 element represents a section heading."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"}]},{"name":"h2","description":{"kind":"markdown","value":"The h2 element represents a section heading."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"}]},{"name":"h3","description":{"kind":"markdown","value":"The h3 element represents a section heading."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"}]},{"name":"h4","description":{"kind":"markdown","value":"The h4 element represents a section heading."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"}]},{"name":"h5","description":{"kind":"markdown","value":"The h5 element represents a section heading."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"}]},{"name":"h6","description":{"kind":"markdown","value":"The h6 element represents a section heading."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements"}]},{"name":"header","description":{"kind":"markdown","value":"The header element represents introductory content for its nearest ancestor sectioning content or sectioning root element. A header typically contains a group of introductory or navigational aids. When the nearest ancestor sectioning content or sectioning root element is the body element, then it applies to the whole page."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/header"}]},{"name":"footer","description":{"kind":"markdown","value":"The footer element represents a footer for its nearest ancestor sectioning content or sectioning root element. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/footer"}]},{"name":"address","description":{"kind":"markdown","value":"The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/address"}]},{"name":"p","description":{"kind":"markdown","value":"The p element represents a paragraph."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/p"}]},{"name":"hr","description":{"kind":"markdown","value":"The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book."},"void":true,"attributes":[{"name":"align","description":"Sets the alignment of the rule on the page. If no value is specified, the default value is `left`."},{"name":"color","description":"Sets the color of the rule through color name or hexadecimal value."},{"name":"noshade","description":"Sets the rule to have no shading."},{"name":"size","description":"Sets the height, in pixels, of the rule."},{"name":"width","description":"Sets the length of the rule on the page through a pixel or percentage value."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/hr"}]},{"name":"pre","description":{"kind":"markdown","value":"The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements."},"attributes":[{"name":"cols","description":"Contains the _preferred_ count of characters that a line should have. It was a non-standard synonym of [`width`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre#attr-width). To achieve such an effect, use CSS [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width \\"The width CSS property sets an element\'s width. By default it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.\\") instead."},{"name":"width","description":"Contains the _preferred_ count of characters that a line should have. Though technically still implemented, this attribute has no visual effect; to achieve such an effect, use CSS [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width \\"The width CSS property sets an element\'s width. By default it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.\\") instead."},{"name":"wrap","description":"Is a _hint_ indicating how the overflow must happen. In modern browser this hint is ignored and no visual effect results in its present; to achieve such an effect, use CSS [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space \\"The white-space CSS property sets how white space inside an element is handled.\\") instead."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/pre"}]},{"name":"blockquote","description":{"kind":"markdown","value":"The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations."},"attributes":[{"name":"cite","description":{"kind":"markdown","value":"A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/blockquote"}]},{"name":"ol","description":{"kind":"markdown","value":"The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document."},"attributes":[{"name":"reversed","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute specifies that the items of the list are specified in reversed order."}},{"name":"start","description":{"kind":"markdown","value":"This integer attribute specifies the start value for numbering the individual list items. Although the ordering type of list elements might be Roman numerals, such as XXXI, or letters, the value of start is always represented as a number. To start numbering elements from the letter \\"C\\", use `<ol start=\\"3\\">`.\\n\\n**Note**: This attribute was deprecated in HTML4, but reintroduced in HTML5."}},{"name":"type","valueSet":"lt","description":{"kind":"markdown","value":"Indicates the numbering type:\\n\\n*   `\'a\'` indicates lowercase letters,\\n*   `\'A\'` indicates uppercase letters,\\n*   `\'i\'` indicates lowercase Roman numerals,\\n*   `\'I\'` indicates uppercase Roman numerals,\\n*   and `\'1\'` indicates numbers (default).\\n\\nThe type set is used for the entire list unless a different [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li#attr-type) attribute is used within an enclosed [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li \\"The HTML <li> element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.\\") element.\\n\\n**Note:** This attribute was deprecated in HTML4, but reintroduced in HTML5.\\n\\nUnless the value of the list number matters (e.g. in legal or technical documents where items are to be referenced by their number/letter), the CSS [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type \\"The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\\") property should be used instead."}},{"name":"compact","description":"This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn\'t work in all browsers.\\n\\n**Warning:** Do not use this attribute, as it has been deprecated: the [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \\"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To give an effect similar to the `compact` attribute, the [CSS](https://developer.mozilla.org/en-US/docs/CSS) property [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height \\"The line-height CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\\") can be used with a value of `80%`."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/ol"}]},{"name":"ul","description":{"kind":"markdown","value":"The ul element represents a list of items, where the order of the items is not important — that is, where changing the order would not materially change the meaning of the document."},"attributes":[{"name":"compact","description":"This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn\'t work in all browsers.\\n\\n**Usage note: **Do not use this attribute, as it has been deprecated: the [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul \\"The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To give a similar effect as the `compact` attribute, the [CSS](https://developer.mozilla.org/en-US/docs/CSS) property [line-height](https://developer.mozilla.org/en-US/docs/CSS/line-height) can be used with a value of `80%`."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/ul"}]},{"name":"li","description":{"kind":"markdown","value":"The li element represents a list item. If its parent element is an ol, ul, or menu element, then the element is an item of the parent element\'s list, as defined for those elements. Otherwise, the list item has no defined list-related relationship to any other li element."},"attributes":[{"name":"value","description":{"kind":"markdown","value":"This integer attribute indicates the current ordinal value of the list item as defined by the [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \\"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\\") element. The only allowed value for this attribute is a number, even if the list is displayed with Roman numerals or letters. List items that follow this one continue numbering from the value set. The **value** attribute has no meaning for unordered lists ([`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul \\"The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list.\\")) or for menus ([`<menu>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu \\"The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.\\")).\\n\\n**Note**: This attribute was deprecated in HTML4, but reintroduced in HTML5.\\n\\n**Note:** Prior to Gecko 9.0, negative values were incorrectly converted to 0. Starting in Gecko 9.0 all integer values are correctly parsed."}},{"name":"type","description":"This character attribute indicates the numbering type:\\n\\n*   `a`: lowercase letters\\n*   `A`: uppercase letters\\n*   `i`: lowercase Roman numerals\\n*   `I`: uppercase Roman numerals\\n*   `1`: numbers\\n\\nThis type overrides the one used by its parent [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \\"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\\") element, if any.\\n\\n**Usage note:** This attribute has been deprecated: use the CSS [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type \\"The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\\") property instead."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/li"}]},{"name":"dl","description":{"kind":"markdown","value":"The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements) followed by one or more values (dd elements), ignoring any nodes other than dt and dd elements. Within a single dl element, there should not be more than one dt element for each name."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/dl"}]},{"name":"dt","description":{"kind":"markdown","value":"The dt element represents the term, or name, part of a term-description group in a description list (dl element)."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/dt"}]},{"name":"dd","description":{"kind":"markdown","value":"The dd element represents the description, definition, or value, part of a term-description group in a description list (dl element)."},"attributes":[{"name":"nowrap","description":"If the value of this attribute is set to `yes`, the definition text will not wrap. The default value is `no`."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/dd"}]},{"name":"figure","description":{"kind":"markdown","value":"The figure element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/figure"}]},{"name":"figcaption","description":{"kind":"markdown","value":"The figcaption element represents a caption or legend for the rest of the contents of the figcaption element\'s parent figure element, if any."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/figcaption"}]},{"name":"main","description":{"kind":"markdown","value":"The main element represents the main content of the body of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/main"}]},{"name":"div","description":{"kind":"markdown","value":"The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/div"}]},{"name":"a","description":{"kind":"markdown","value":"If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents."},"attributes":[{"name":"href","description":{"kind":"markdown","value":"Contains a URL or a URL fragment that the hyperlink points to.\\nA URL fragment is a name preceded by a hash mark (`#`), which specifies an internal target location (an [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id) of an HTML element) within the current document. URLs are not restricted to Web (HTTP)-based documents, but can use any protocol supported by the browser. For example, [`file:`](https://en.wikipedia.org/wiki/File_URI_scheme), `ftp:`, and `mailto:` work in most browsers.\\n\\n**Note:** You can use `href=\\"#top\\"` or the empty fragment `href=\\"#\\"` to link to the top of the current page. [This behavior is specified by HTML5](https://www.w3.org/TR/html5/single-page.html#scroll-to-fragid)."}},{"name":"target","valueSet":"target","description":{"kind":"markdown","value":"Specifies where to display the linked URL. It is a name of, or keyword for, a _browsing context_: a tab, window, or `<iframe>`. The following keywords have special meanings:\\n\\n*   `_self`: Load the URL into the same browsing context as the current one. This is the default behavior.\\n*   `_blank`: Load the URL into a new browsing context. This is usually a tab, but users can configure browsers to use new windows instead.\\n*   `_parent`: Load the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as `_self`.\\n*   `_top`: Load the URL into the top-level browsing context (that is, the \\"highest\\" browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this behaves the same way as `_self`.\\n\\n**Note:** When using `target`, consider adding `rel=\\"noreferrer\\"` to avoid exploitation of the `window.opener` API.\\n\\n**Note:** Linking to another page using `target=\\"_blank\\"` will run the new page on the same process as your page. If the new page is executing expensive JS, your page\'s performance may suffer. To avoid this use `rel=\\"noopener\\"`."}},{"name":"download","description":{"kind":"markdown","value":"This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want). There are no restrictions on allowed values, though `/` and `\\\\` are converted to underscores. Most file systems limit some punctuation in file names, and browsers will adjust the suggested name accordingly.\\n\\n**Notes:**\\n\\n*   This attribute only works for [same-origin URLs](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\\n*   Although HTTP(s) URLs need to be in the same-origin, [`blob:` URLs](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL) and [`data:` URLs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) are allowed so that content generated by JavaScript, such as pictures created in an image-editor Web app, can be downloaded.\\n*   If the HTTP header [`Content-Disposition:`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) gives a different filename than this attribute, the HTTP header takes priority over this attribute.\\n*   If `Content-Disposition:` is set to `inline`, Firefox prioritizes `Content-Disposition`, like the filename case, while Chrome prioritizes the `download` attribute."}},{"name":"ping","description":{"kind":"markdown","value":"Contains a space-separated list of URLs to which, when the hyperlink is followed, [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST \\"The HTTP POST method sends data to the server. The type of the body of the request is indicated by the Content-Type header.\\") requests with the body `PING` will be sent by the browser (in the background). Typically used for tracking."}},{"name":"rel","description":{"kind":"markdown","value":"Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types)."}},{"name":"hreflang","description":{"kind":"markdown","value":"This attribute indicates the human language of the linked resource. It is purely advisory, with no built-in functionality. Allowed values are determined by [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt \\"Tags for Identifying Languages\\")."}},{"name":"type","description":{"kind":"markdown","value":"Specifies the media type in the form of a [MIME type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type \\"MIME type: A MIME type (now properly called \\"media type\\", but also sometimes \\"content type\\") is a string sent along with a file indicating the type of the file (describing the content format, for example, a sound file might be labeled audio/ogg, or an image file image/png).\\") for the linked URL. It is purely advisory, with no built-in functionality."}},{"name":"referrerpolicy","description":"Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) to send when fetching the URL:\\n\\n*   `\'no-referrer\'` means the `Referer:` header will not be sent.\\n*   `\'no-referrer-when-downgrade\'` means no `Referer:` header will be sent when navigating to an origin without HTTPS. This is the default behavior.\\n*   `\'origin\'` means the referrer will be the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the page, not including information after the domain.\\n*   `\'origin-when-cross-origin\'` meaning that navigations to other origins will be limited to the scheme, the host and the port, while navigations on the same origin will include the referrer\'s path.\\n*   `\'strict-origin-when-cross-origin\'`\\n*   `\'unsafe-url\'` means the referrer will include the origin and path, but not the fragment, password, or username. This is unsafe because it can leak data from secure URLs to insecure ones."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/a"}]},{"name":"em","description":{"kind":"markdown","value":"The em element represents stress emphasis of its contents."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/em"}]},{"name":"strong","description":{"kind":"markdown","value":"The strong element represents strong importance, seriousness, or urgency for its contents."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/strong"}]},{"name":"small","description":{"kind":"markdown","value":"The small element represents side comments such as small print."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/small"}]},{"name":"s","description":{"kind":"markdown","value":"The s element represents contents that are no longer accurate or no longer relevant."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/s"}]},{"name":"cite","description":{"kind":"markdown","value":"The cite element represents a reference to a creative work. It must include the title of the work or the name of the author(person, people or organization) or an URL reference, or a reference in abbreviated form as per the conventions used for the addition of citation metadata."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/cite"}]},{"name":"q","description":{"kind":"markdown","value":"The q element represents some phrasing content quoted from another source."},"attributes":[{"name":"cite","description":{"kind":"markdown","value":"The value of this attribute is a URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/q"}]},{"name":"dfn","description":{"kind":"markdown","value":"The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/dfn"}]},{"name":"abbr","description":{"kind":"markdown","value":"The abbr element represents an abbreviation or acronym, optionally with its expansion. The title attribute may be used to provide an expansion of the abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and nothing else."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/abbr"}]},{"name":"ruby","description":{"kind":"markdown","value":"The ruby element allows one or more spans of phrasing content to be marked with ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily used in East Asian typography as a guide for pronunciation or to include other annotations. In Japanese, this form of typography is also known as furigana. Ruby text can appear on either side, and sometimes both sides, of the base text, and it is possible to control its position using CSS. A more complete introduction to ruby can be found in the Use Cases & Exploratory Approaches for Ruby Markup document as well as in CSS Ruby Module Level 1. [RUBY-UC] [CSSRUBY]"},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/ruby"}]},{"name":"rb","description":{"kind":"markdown","value":"The rb element marks the base text component of a ruby annotation. When it is the child of a ruby element, it doesn\'t represent anything itself, but its parent ruby element uses it as part of determining what it represents."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/rb"}]},{"name":"rt","description":{"kind":"markdown","value":"The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element or of an rtc element that is itself the child of a ruby element, it doesn\'t represent anything itself, but its ancestor ruby element uses it as part of determining what it represents."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/rt"}]},{"name":"rp","description":{"kind":"markdown","value":"The rp element is used to provide fallback text to be shown by user agents that don\'t support ruby annotations. One widespread convention is to provide parentheses around the ruby text component of a ruby annotation."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/rp"}]},{"name":"time","description":{"kind":"markdown","value":"The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below."},"attributes":[{"name":"datetime","description":{"kind":"markdown","value":"This attribute indicates the time and/or date of the element and must be in one of the formats described below."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/time"}]},{"name":"code","description":{"kind":"markdown","value":"The code element represents a fragment of computer code. This could be an XML element name, a file name, a computer program, or any other string that a computer would recognize."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/code"}]},{"name":"var","description":{"kind":"markdown","value":"The var element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/var"}]},{"name":"samp","description":{"kind":"markdown","value":"The samp element represents sample or quoted output from another program or computing system."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/samp"}]},{"name":"kbd","description":{"kind":"markdown","value":"The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands)."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/kbd"}]},{"name":"sub","description":{"kind":"markdown","value":"The sub element represents a subscript."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/sub"}]},{"name":"sup","description":{"kind":"markdown","value":"The sup element represents a superscript."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/sup"}]},{"name":"i","description":{"kind":"markdown","value":"The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/i"}]},{"name":"b","description":{"kind":"markdown","value":"The b element represents a span of text to which attention is being drawn for utilitarian purposes without conveying any extra importance and with no implication of an alternate voice or mood, such as key words in a document abstract, product names in a review, actionable words in interactive text-driven software, or an article lede."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/b"}]},{"name":"u","description":{"kind":"markdown","value":"The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/u"}]},{"name":"mark","description":{"kind":"markdown","value":"The mark element represents a run of text in one document marked or highlighted for reference purposes, due to its relevance in another context. When used in a quotation or other block of text referred to from the prose, it indicates a highlight that was not originally present but which has been added to bring the reader\'s attention to a part of the text that might not have been considered important by the original author when the block was originally written, but which is now under previously unexpected scrutiny. When used in the main prose of a document, it indicates a part of the document that has been highlighted due to its likely relevance to the user\'s current activity."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/mark"}]},{"name":"bdi","description":{"kind":"markdown","value":"The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]"},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/bdi"}]},{"name":"bdo","description":{"kind":"markdown","value":"The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]"},"attributes":[{"name":"dir","description":"The direction in which text should be rendered in this element\'s contents. Possible values are:\\n\\n*   `ltr`: Indicates that the text should go in a left-to-right direction.\\n*   `rtl`: Indicates that the text should go in a right-to-left direction."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/bdo"}]},{"name":"span","description":{"kind":"markdown","value":"The span element doesn\'t mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/span"}]},{"name":"br","description":{"kind":"markdown","value":"The br element represents a line break."},"void":true,"attributes":[{"name":"clear","description":"Indicates where to begin the next line after the break."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/br"}]},{"name":"wbr","description":{"kind":"markdown","value":"The wbr element represents a line break opportunity."},"void":true,"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/wbr"}]},{"name":"ins","description":{"kind":"markdown","value":"The ins element represents an addition to the document."},"attributes":[{"name":"cite","description":"This attribute defines the URI of a resource that explains the change, such as a link to meeting minutes or a ticket in a troubleshooting system."},{"name":"datetime","description":"This attribute indicates the time and date of the change and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp. For the format of the string without a time, see [Format of a valid date string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_date_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\"). The format of the string if it includes both date and time is covered in [Format of a valid local date and time string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_local_date_and_time_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\")."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/ins"}]},{"name":"del","description":{"kind":"markdown","value":"The del element represents a removal from the document."},"attributes":[{"name":"cite","description":{"kind":"markdown","value":"A URI for a resource that explains the change (for example, meeting minutes)."}},{"name":"datetime","description":{"kind":"markdown","value":"This attribute indicates the time and date of the change and must be a valid date string with an optional time. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp. For the format of the string without a time, see [Format of a valid date string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_date_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\"). The format of the string if it includes both date and time is covered in [Format of a valid local date and time string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_local_date_and_time_string \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \\"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\\")."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/del"}]},{"name":"picture","description":{"kind":"markdown","value":"The picture element is a container which provides multiple sources to its contained img element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/picture"}]},{"name":"img","description":{"kind":"markdown","value":"An img element represents an image."},"void":true,"attributes":[{"name":"alt","description":{"kind":"markdown","value":"This attribute defines an alternative text description of the image.\\n\\n**Note:** Browsers do not always display the image referenced by the element. This is the case for non-graphical browsers (including those used by people with visual impairments), if the user chooses not to display images, or if the browser cannot display the image because it is invalid or an [unsupported type](#Supported_image_formats). In these cases, the browser may replace the image with the text defined in this element\'s `alt` attribute. You should, for these reasons and others, provide a useful value for `alt` whenever possible.\\n\\n**Note:** Omitting this attribute altogether indicates that the image is a key part of the content, and no textual equivalent is available. Setting this attribute to an empty string (`alt=\\"\\"`) indicates that this image is _not_ a key part of the content (decorative), and that non-visual browsers may omit it from rendering."}},{"name":"src","description":{"kind":"markdown","value":"The image URL. This attribute is mandatory for the `<img>` element. On browsers supporting `srcset`, `src` is treated like a candidate image with a pixel density descriptor `1x` unless an image with this pixel density descriptor is already defined in `srcset,` or unless `srcset` contains \'`w`\' descriptors."}},{"name":"srcset","description":{"kind":"markdown","value":"A list of one or more strings separated by commas indicating a set of possible image sources for the user agent to use. Each string is composed of:\\n\\n1.  a URL to an image,\\n2.  optionally, whitespace followed by one of:\\n    *   A width descriptor, or a positive integer directly followed by \'`w`\'. The width descriptor is divided by the source size given in the `sizes` attribute to calculate the effective pixel density.\\n    *   A pixel density descriptor, which is a positive floating point number directly followed by \'`x`\'.\\n\\nIf no descriptor is specified, the source is assigned the default descriptor: `1x`.\\n\\nIt is incorrect to mix width descriptors and pixel density descriptors in the same `srcset` attribute. Duplicate descriptors (for instance, two sources in the same `srcset` which are both described with \'`2x`\') are also invalid.\\n\\nThe user agent selects any one of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions. See our [Responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images) tutorial for an example."}},{"name":"crossorigin","valueSet":"xo","description":{"kind":"markdown","value":"This enumerated attribute indicates if the fetching of the related image must be done using CORS or not. [CORS-enabled images](https://developer.mozilla.org/en-US/docs/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") element without being \\"[tainted](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image#What_is_a_tainted_canvas).\\" The allowed values are:\\n`anonymous`\\n\\nA cross-origin request (i.e., with `Origin:` HTTP header) is performed, but no credential is sent (i.e., no cookie, X.509 certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (by not setting the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin \\"The Access-Control-Allow-Origin response header indicates whether the response can be shared with requesting code from the given origin.\\") HTTP header), the image will be tainted and its usage restricted.\\n\\n`use-credentials`\\n\\nA cross-origin request (i.e., with the [`Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin \\"The Origin request header indicates where a fetch originates from. It doesn\'t include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn\'t disclose the whole path.\\") HTTP header) performed along with credentials sent (i.e., a cookie, certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (through the `Access-Control-Allow-Credentials` HTTP header), the image will be tainted and its usage restricted.\\n\\nIf the attribute is not present, the resource is fetched without a CORS request (i.e., without sending the `Origin` HTTP header), preventing its non-tainted usage in [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") elements. If invalid, it is handled as if the `anonymous` value was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes) for additional information."}},{"name":"usemap","description":{"kind":"markdown","value":"The partial URL (starting with \'#\') of an [image map](https://developer.mozilla.org/en-US/docs/HTML/Element/map) associated with the element.\\n\\n**Note:** You cannot use this attribute if the `<img>` element is a descendant of an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \\"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\\") or [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") element."}},{"name":"ismap","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates that the image is part of a server-side map. If so, the precise coordinates of a click are sent to the server.\\n\\n**Note:** This attribute is allowed only if the `<img>` element is a descendant of an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \\"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\\") element with a valid [`href`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) attribute."}},{"name":"width","description":{"kind":"markdown","value":"The intrinsic width of the image in pixels."}},{"name":"height","description":{"kind":"markdown","value":"The intrinsic height of the image in pixels."}},{"name":"decoding","valueSet":"decoding","description":{"kind":"markdown","value":"Provides an image decoding hint to the browser. The allowed values are:\\n`sync`\\n\\nDecode the image synchronously for atomic presentation with other content.\\n\\n`async`\\n\\nDecode the image asynchronously to reduce delay in presenting other content.\\n\\n`auto`\\n\\nDefault mode, which indicates no preference for the decoding mode. The browser decides what is best for the user."}},{"name":"loading","valueSet":"loading"},{"name":"referrerpolicy","valueSet":"referrerpolicy","description":{"kind":"markdown","value":"A string indicating which referrer to use when fetching the resource:\\n\\n*   `no-referrer:` The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade:` No `Referer` header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent’s default behavior if no policy is otherwise specified.\\n*   `origin:` The `Referer` header will include the page of origin\'s scheme, the host, and the port.\\n*   `origin-when-cross-origin:` Navigating to other origins will limit the included referral data to the scheme, the host and the port, while navigating from the same origin will include the referrer\'s full path.\\n*   `unsafe-url:` The `Referer` header will include the origin and the path, but not the fragment, password, or username. This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins."}},{"name":"sizes","description":{"kind":"markdown","value":"A list of one or more strings separated by commas indicating a set of source sizes. Each source size consists of:\\n\\n1.  a media condition. This must be omitted for the last item.\\n2.  a source size value.\\n\\nSource size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the `srcset` attribute, when those sources are described using width (\'`w`\') descriptors. The selected source size affects the intrinsic size of the image (the image’s display size if no CSS styling is applied). If the `srcset` attribute is absent, or contains no values with a width (`w`) descriptor, then the `sizes` attribute has no effect."}},{"name":"importance","description":"Indicates the relative importance of the resource. Priority hints are delegated using the values:"},{"name":"importance","description":"`auto`: Indicates **no preference**. The browser may use its own heuristics to decide the priority of the image.\\n\\n`high`: Indicates to the browser that the image is of **high** priority.\\n\\n`low`: Indicates to the browser that the image is of **low** priority."},{"name":"intrinsicsize","description":"This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it’s the size specified in the attribute. Specifically, the image would raster at these dimensions and `naturalWidth`/`naturalHeight` on images would return the values specified in this attribute. [Explainer](https://github.com/ojanvafai/intrinsicsize-attribute), [examples](https://googlechrome.github.io/samples/intrinsic-size/index.html)"}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/img"}]},{"name":"iframe","description":{"kind":"markdown","value":"The iframe element represents a nested browsing context."},"attributes":[{"name":"src","description":{"kind":"markdown","value":"The URL of the page to embed. Use a value of `about:blank` to embed an empty page that conforms to the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Inherited_origins). Also note that programatically removing an `<iframe>`\'s src attribute (e.g. via [`Element.removeAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute \\"The Element method removeAttribute() removes the attribute with the specified name from the element.\\")) causes `about:blank` to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS."}},{"name":"srcdoc","description":{"kind":"markdown","value":"Inline HTML to embed, overriding the `src` attribute. If a browser does not support the `srcdoc` attribute, it will fall back to the URL in the `src` attribute."}},{"name":"name","description":{"kind":"markdown","value":"A targetable name for the embedded browsing context. This can be used in the `target` attribute of the [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \\"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\\"), [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\"), or [`<base>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base \\"The HTML <base> element specifies the base URL to use for all relative URLs contained within a document. There can be only one <base> element in a document.\\") elements; the `formtarget` attribute of the [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") or [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") elements; or the `windowName` parameter in the [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open \\"The Window interface\'s open() method loads the specified resource into the browsing context (window, <iframe> or tab) with the specified name. If the name doesn\'t exist, then a new window is opened and the specified resource is loaded into its browsing context.\\") method."}},{"name":"sandbox","valueSet":"sb","description":{"kind":"markdown","value":"Applies extra restrictions to the content in the frame. The value of the attribute can either be empty to apply all restrictions, or space-separated tokens to lift particular restrictions:\\n\\n*   `allow-forms`: Allows the resource to submit forms. If this keyword is not used, form submission is blocked.\\n*   `allow-modals`: Lets the resource [open modal windows](https://html.spec.whatwg.org/multipage/origin.html#sandboxed-modals-flag).\\n*   `allow-orientation-lock`: Lets the resource [lock the screen orientation](https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation).\\n*   `allow-pointer-lock`: Lets the resource use the [Pointer Lock API](https://developer.mozilla.org/en-US/docs/WebAPI/Pointer_Lock).\\n*   `allow-popups`: Allows popups (such as `window.open()`, `target=\\"_blank\\"`, or `showModalDialog()`). If this keyword is not used, the popup will silently fail to open.\\n*   `allow-popups-to-escape-sandbox`: Lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.\\n*   `allow-presentation`: Lets the resource start a [presentation session](https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest).\\n*   `allow-same-origin`: If this token is not used, the resource is treated as being from a special origin that always fails the [same-origin policy](https://developer.mozilla.org/en-US/docs/Glossary/same-origin_policy \\"same-origin policy: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\\").\\n*   `allow-scripts`: Lets the resource run scripts (but not create popup windows).\\n*   `allow-storage-access-by-user-activation` : Lets the resource request access to the parent\'s storage capabilities with the [Storage Access API](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API).\\n*   `allow-top-navigation`: Lets the resource navigate the top-level browsing context (the one named `_top`).\\n*   `allow-top-navigation-by-user-activation`: Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.\\n\\n**Notes about sandboxing:**\\n\\n*   When the embedded document has the same origin as the embedding page, it is **strongly discouraged** to use both `allow-scripts` and `allow-same-origin`, as that lets the embedded document remove the `sandbox` attribute — making it no more secure than not using the `sandbox` attribute at all.\\n*   Sandboxing is useless if the attacker can display content outside a sandboxed `iframe` — such as if the viewer opens the frame in a new tab. Such content should be also served from a _separate origin_ to limit potential damage.\\n*   The `sandbox` attribute is unsupported in Internet Explorer 9 and earlier."}},{"name":"seamless","valueSet":"v"},{"name":"allowfullscreen","valueSet":"v","description":{"kind":"markdown","value":"Set to `true` if the `<iframe>` can activate fullscreen mode by calling the [`requestFullscreen()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen \\"The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed in full-screen mode.\\") method.\\nThis attribute is considered a legacy attribute and redefined as `allow=\\"fullscreen\\"`."}},{"name":"width","description":{"kind":"markdown","value":"The width of the frame in CSS pixels. Default is `300`."}},{"name":"height","description":{"kind":"markdown","value":"The height of the frame in CSS pixels. Default is `150`."}},{"name":"allow","description":"Specifies a [feature policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy) for the `<iframe>`."},{"name":"allowpaymentrequest","description":"Set to `true` if a cross-origin `<iframe>` should be allowed to invoke the [Payment Request API](https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API)."},{"name":"allowpaymentrequest","description":"This attribute is considered a legacy attribute and redefined as `allow=\\"payment\\"`."},{"name":"csp","description":"A [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) enforced for the embedded resource. See [`HTMLIFrameElement.csp`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp \\"The csp property of the HTMLIFrameElement interface specifies the Content Security Policy that an embedded document must agree to enforce upon itself.\\") for details."},{"name":"importance","description":"The download priority of the resource in the `<iframe>`\'s `src` attribute. Allowed values:\\n\\n`auto` (default)\\n\\nNo preference. The browser uses its own heuristics to decide the priority of the resource.\\n\\n`high`\\n\\nThe resource should be downloaded before other lower-priority page resources.\\n\\n`low`\\n\\nThe resource should be downloaded after other higher-priority page resources."},{"name":"referrerpolicy","description":"Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer) to send when fetching the frame\'s resource:\\n\\n*   `no-referrer`: The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade` (default): The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent to [origin](https://developer.mozilla.org/en-US/docs/Glossary/origin \\"origin: Web content\'s origin is defined by the scheme (protocol), host (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, host, and port all match.\\")s without [TLS](https://developer.mozilla.org/en-US/docs/Glossary/TLS \\"TLS: Transport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols.\\") ([HTTPS](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS \\"HTTPS: HTTPS (HTTP Secure) is an encrypted version of the HTTP protocol. It usually uses SSL or TLS to encrypt all communication between a client and a server. This secure connection allows clients to safely exchange sensitive data with a server, for example for banking activities or online shopping.\\")).\\n*   `origin`: The sent referrer will be limited to the origin of the referring page: its [scheme](https://developer.mozilla.org/en-US/docs/Archive/Mozilla/URIScheme), [host](https://developer.mozilla.org/en-US/docs/Glossary/host \\"host: A host is a device connected to the Internet (or a local network). Some hosts called servers offer additional services like serving webpages or storing files and emails.\\"), and [port](https://developer.mozilla.org/en-US/docs/Glossary/port \\"port: For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.\\").\\n*   `origin-when-cross-origin`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\\n*   `same-origin`: A referrer will be sent for [same origin](https://developer.mozilla.org/en-US/docs/Glossary/Same-origin_policy \\"same origin: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\\"), but cross-origin requests will contain no referrer information.\\n*   `strict-origin`: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don\'t send it to a less secure destination (HTTPS→HTTP).\\n*   `strict-origin-when-cross-origin`: Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).\\n*   `unsafe-url`: The referrer will include the origin _and_ the path (but not the [fragment](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash), [password](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password), or [username](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/iframe"}]},{"name":"embed","description":{"kind":"markdown","value":"The embed element provides an integration point for an external (typically non-HTML) application or interactive content."},"void":true,"attributes":[{"name":"src","description":{"kind":"markdown","value":"The URL of the resource being embedded."}},{"name":"type","description":{"kind":"markdown","value":"The MIME type to use to select the plug-in to instantiate."}},{"name":"width","description":{"kind":"markdown","value":"The displayed width of the resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). This must be an absolute value; percentages are _not_ allowed."}},{"name":"height","description":{"kind":"markdown","value":"The displayed height of the resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). This must be an absolute value; percentages are _not_ allowed."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/embed"}]},{"name":"object","description":{"kind":"markdown","value":"The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image, as a nested browsing context, or as an external resource to be processed by a plugin."},"attributes":[{"name":"data","description":{"kind":"markdown","value":"The address of the resource as a valid URL. At least one of **data** and **type** must be defined."}},{"name":"type","description":{"kind":"markdown","value":"The [content type](https://developer.mozilla.org/en-US/docs/Glossary/Content_type) of the resource specified by **data**. At least one of **data** and **type** must be defined."}},{"name":"typemustmatch","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates if the **type** attribute and the actual [content type](https://developer.mozilla.org/en-US/docs/Glossary/Content_type) of the resource must match to be used."}},{"name":"name","description":{"kind":"markdown","value":"The name of valid browsing context (HTML5), or the name of the control (HTML 4)."}},{"name":"usemap","description":{"kind":"markdown","value":"A hash-name reference to a [`<map>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map \\"The HTML <map> element is used with <area> elements to define an image map (a clickable link area).\\") element; that is a \'#\' followed by the value of a [`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map#attr-name) of a map element."}},{"name":"form","description":{"kind":"markdown","value":"The form element, if any, that the object element is associated with (its _form owner_). The value of the attribute must be an ID of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element in the same document."}},{"name":"width","description":{"kind":"markdown","value":"The width of the display resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). -- (Absolute values only. [NO percentages](https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes))"}},{"name":"height","description":{"kind":"markdown","value":"The height of the displayed resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). -- (Absolute values only. [NO percentages](https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes))"}},{"name":"archive","description":"A space-separated list of URIs for archives of resources for the object."},{"name":"border","description":"The width of a border around the control, in pixels."},{"name":"classid","description":"The URI of the object\'s implementation. It can be used together with, or in place of, the **data** attribute."},{"name":"codebase","description":"The base path used to resolve relative URIs specified by **classid**, **data**, or **archive**. If not specified, the default is the base URI of the current document."},{"name":"codetype","description":"The content type of the data specified by **classid**."},{"name":"declare","description":"The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent `<object>` element. In HTML5, repeat the <object> element completely each that that the resource is reused."},{"name":"standby","description":"A message that the browser can show while loading the object\'s implementation and data."},{"name":"tabindex","description":"The position of the element in the tabbing navigation order for the current document."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/object"}]},{"name":"param","description":{"kind":"markdown","value":"The param element defines parameters for plugins invoked by object elements. It does not represent anything on its own."},"void":true,"attributes":[{"name":"name","description":{"kind":"markdown","value":"Name of the parameter."}},{"name":"value","description":{"kind":"markdown","value":"Specifies the value of the parameter."}},{"name":"type","description":"Only used if the `valuetype` is set to \\"ref\\". Specifies the MIME type of values found at the URI specified by value."},{"name":"valuetype","description":"Specifies the type of the `value` attribute. Possible values are:\\n\\n*   data: Default value. The value is passed to the object\'s implementation as a string.\\n*   ref: The value is a URI to a resource where run-time values are stored.\\n*   object: An ID of another [`<object>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object \\"The HTML <object> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.\\") in the same document."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/param"}]},{"name":"video","description":{"kind":"markdown","value":"A video element is used for playing videos or movies, and audio files with captions."},"attributes":[{"name":"src"},{"name":"crossorigin","valueSet":"xo"},{"name":"poster"},{"name":"preload","valueSet":"pl"},{"name":"autoplay","valueSet":"v","description":{"kind":"markdown","value":"A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data.\\n**Note**: Sites that automatically play audio (or video with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.\\n\\nTo disable video autoplay, `autoplay=\\"false\\"` will not work; the video will autoplay if the attribute is there in the `<video>` tag at all. To remove autoplay the attribute needs to be removed altogether.\\n\\nIn some browsers (e.g. Chrome 70.0) autoplay is not working if no `muted` attribute is present."}},{"name":"mediagroup"},{"name":"loop","valueSet":"v"},{"name":"muted","valueSet":"v"},{"name":"controls","valueSet":"v"},{"name":"width"},{"name":"height"}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/video"}]},{"name":"audio","description":{"kind":"markdown","value":"An audio element represents a sound or audio stream."},"attributes":[{"name":"src","description":{"kind":"markdown","value":"The URL of the audio to embed. This is subject to [HTTP access controls](https://developer.mozilla.org/en-US/docs/HTTP_access_control). This is optional; you may instead use the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \\"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\\") element within the audio block to specify the audio to embed."}},{"name":"crossorigin","valueSet":"xo","description":{"kind":"markdown","value":"This enumerated attribute indicates whether to use CORS to fetch the related image. [CORS-enabled resources](https://developer.mozilla.org/en-US/docs/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") element without being _tainted_. The allowed values are:\\n\\nanonymous\\n\\nSends a cross-origin request without a credential. In other words, it sends the `Origin:` HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the `Access-Control-Allow-Origin:` HTTP header), the image will be _tainted_, and its usage restricted.\\n\\nuse-credentials\\n\\nSends a cross-origin request with a credential. In other words, it sends the `Origin:` HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through `Access-Control-Allow-Credentials:` HTTP header), the image will be _tainted_ and its usage restricted.\\n\\nWhen not present, the resource is fetched without a CORS request (i.e. without sending the `Origin:` HTTP header), preventing its non-tainted used in [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \\"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\\") elements. If invalid, it is handled as if the enumerated keyword **anonymous** was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes) for additional information."}},{"name":"preload","valueSet":"pl","description":{"kind":"markdown","value":"This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:\\n\\n*   `none`: Indicates that the audio should not be preloaded.\\n*   `metadata`: Indicates that only audio metadata (e.g. length) is fetched.\\n*   `auto`: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it.\\n*   _empty string_: A synonym of the `auto` value.\\n\\nIf not set, `preload`\'s default value is browser-defined (i.e. each browser may have its own default value). The spec advises it to be set to `metadata`.\\n\\n**Usage notes:**\\n\\n*   The `autoplay` attribute has precedence over `preload`. If `autoplay` is specified, the browser would obviously need to start downloading the audio for playback.\\n*   The browser is not forced by the specification to follow the value of this attribute; it is a mere hint."}},{"name":"autoplay","valueSet":"v","description":{"kind":"markdown","value":"A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.\\n\\n**Note**: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control."}},{"name":"mediagroup"},{"name":"loop","valueSet":"v","description":{"kind":"markdown","value":"A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio."}},{"name":"muted","valueSet":"v","description":{"kind":"markdown","value":"A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is `false`."}},{"name":"controls","valueSet":"v","description":{"kind":"markdown","value":"If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/audio"}]},{"name":"source","description":{"kind":"markdown","value":"The source element allows authors to specify multiple alternative media resources for media elements. It does not represent anything on its own."},"void":true,"attributes":[{"name":"src","description":{"kind":"markdown","value":"Required for [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio \\"The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.\\") and [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video \\"The HTML Video element (<video>) embeds a media player which supports video playback into the document.\\"), address of the media resource. The value of this attribute is ignored when the `<source>` element is placed inside a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."}},{"name":"type","description":{"kind":"markdown","value":"The MIME-type of the resource, optionally with a `codecs` parameter. See [RFC 4281](https://tools.ietf.org/html/rfc4281) for information about how to specify codecs."}},{"name":"sizes","description":"Is a list of source sizes that describes the final rendered width of the image represented by the source. Each source size consists of a comma-separated list of media condition-length pairs. This information is used by the browser to determine, before laying the page out, which image defined in [`srcset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-srcset) to use.  \\nThe `sizes` attribute has an effect only when the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \\"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\\") element is the direct child of a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."},{"name":"srcset","description":"A list of one or more strings separated by commas indicating a set of possible images represented by the source for the browser to use. Each string is composed of:\\n\\n1.  one URL to an image,\\n2.  a width descriptor, that is a positive integer directly followed by `\'w\'`. The default value, if missing, is the infinity.\\n3.  a pixel density descriptor, that is a positive floating number directly followed by `\'x\'`. The default value, if missing, is `1x`.\\n\\nEach string in the list must have at least a width descriptor or a pixel density descriptor to be valid. Among the list, there must be only one string containing the same tuple of width descriptor and pixel density descriptor.  \\nThe browser chooses the most adequate image to display at a given point of time.  \\nThe `srcset` attribute has an effect only when the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \\"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\\") element is the direct child of a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."},{"name":"media","description":"[Media query](https://developer.mozilla.org/en-US/docs/CSS/Media_queries) of the resource\'s intended media; this should be used only in a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\") element."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/source"}]},{"name":"track","description":{"kind":"markdown","value":"The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own."},"void":true,"attributes":[{"name":"default","valueSet":"v","description":{"kind":"markdown","value":"This attribute indicates that the track should be enabled unless the user\'s preferences indicate that another track is more appropriate. This may only be used on one `track` element per media element."}},{"name":"kind","valueSet":"tk","description":{"kind":"markdown","value":"How the text track is meant to be used. If omitted the default kind is `subtitles`. If the attribute is not present, it will use the `subtitles`. If the attribute contains an invalid value, it will use `metadata`. (Versions of Chrome earlier than 52 treated an invalid value as `subtitles`.) The following keywords are allowed:\\n\\n*   `subtitles`\\n    *   Subtitles provide translation of content that cannot be understood by the viewer. For example dialogue or text that is not English in an English language film.\\n    *   Subtitles may contain additional content, usually extra background information. For example the text at the beginning of the Star Wars films, or the date, time, and location of a scene.\\n*   `captions`\\n    *   Closed captions provide a transcription and possibly a translation of audio.\\n    *   It may include important non-verbal information such as music cues or sound effects. It may indicate the cue\'s source (e.g. music, text, character).\\n    *   Suitable for users who are deaf or when the sound is muted.\\n*   `descriptions`\\n    *   Textual description of the video content.\\n    *   Suitable for users who are blind or where the video cannot be seen.\\n*   `chapters`\\n    *   Chapter titles are intended to be used when the user is navigating the media resource.\\n*   `metadata`\\n    *   Tracks used by scripts. Not visible to the user."}},{"name":"label","description":{"kind":"markdown","value":"A user-readable title of the text track which is used by the browser when listing available text tracks."}},{"name":"src","description":{"kind":"markdown","value":"Address of the track (`.vtt` file). Must be a valid URL. This attribute must be specified and its URL value must have the same origin as the document — unless the [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio \\"The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.\\") or [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video \\"The HTML Video element (<video>) embeds a media player which supports video playback into the document.\\") parent element of the `track` element has a [`crossorigin`](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) attribute."}},{"name":"srclang","description":{"kind":"markdown","value":"Language of the track text data. It must be a valid [BCP 47](https://r12a.github.io/app-subtags/) language tag. If the `kind` attribute is set to `subtitles,` then `srclang` must be defined."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/track"}]},{"name":"map","description":{"kind":"markdown","value":"The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children."},"attributes":[{"name":"name","description":{"kind":"markdown","value":"The name attribute gives the map a name so that it can be referenced. The attribute must be present and must have a non-empty value with no space characters. The value of the name attribute must not be a compatibility-caseless match for the value of the name attribute of another map element in the same document. If the id attribute is also specified, both attributes must have the same value."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/map"}]},{"name":"area","description":{"kind":"markdown","value":"The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map."},"void":true,"attributes":[{"name":"alt"},{"name":"coords"},{"name":"shape","valueSet":"sh"},{"name":"href"},{"name":"target","valueSet":"target"},{"name":"download"},{"name":"ping"},{"name":"rel"},{"name":"hreflang"},{"name":"type"},{"name":"accesskey","description":"Specifies a keyboard navigation accelerator for the element. Pressing ALT or a similar key in association with the specified character selects the form control correlated with that key sequence. Page designers are forewarned to avoid key sequences already bound to browsers. This attribute is global since HTML5."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/area"}]},{"name":"table","description":{"kind":"markdown","value":"The table element represents data with more than one dimension, in the form of a table."},"attributes":[{"name":"border"},{"name":"align","description":"This enumerated attribute indicates how the table must be aligned inside the containing document. It may have the following values:\\n\\n*   left: the table is displayed on the left side of the document;\\n*   center: the table is displayed in the center of the document;\\n*   right: the table is displayed on the right side of the document.\\n\\n**Usage Note**\\n\\n*   **Do not use this attribute**, as it has been deprecated. The [`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table \\"The HTML <table> element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). Set [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left \\"The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") and [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right \\"The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\\") to `auto` or [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin \\"The margin CSS property sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right, margin-bottom, and margin-left.\\") to `0 auto` to achieve an effect that is similar to the align attribute.\\n*   Prior to Firefox 4, Firefox also supported the `middle`, `absmiddle`, and `abscenter` values as synonyms of `center`, in quirks mode only."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/table"}]},{"name":"caption","description":{"kind":"markdown","value":"The caption element represents the title of the table that is its parent, if it has a parent and that is a table element."},"attributes":[{"name":"align","description":"This enumerated attribute indicates how the caption must be aligned with respect to the table. It may have one of the following values:\\n\\n`left`\\n\\nThe caption is displayed to the left of the table.\\n\\n`top`\\n\\nThe caption is displayed above the table.\\n\\n`right`\\n\\nThe caption is displayed to the right of the table.\\n\\n`bottom`\\n\\nThe caption is displayed below the table.\\n\\n**Usage note:** Do not use this attribute, as it has been deprecated. The [`<caption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption \\"The HTML Table Caption element (<caption>) specifies the caption (or title) of a table, and if used is always the first child of a <table>.\\") element should be styled using the [CSS](https://developer.mozilla.org/en-US/docs/CSS) properties [`caption-side`](https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side \\"The caption-side CSS property puts the content of a table\'s <caption> on the specified side. The values are relative to the writing-mode of the table.\\") and [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\")."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/caption"}]},{"name":"colgroup","description":{"kind":"markdown","value":"The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element."},"attributes":[{"name":"span"},{"name":"align","description":"This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, the `left` value is assumed. The descendant [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \\"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\\") elements may override this value using their own [`align`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-align) attribute.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values:\\n    *   Do not try to set the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on a selector giving a [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \\"The HTML <colgroup> element defines a group of columns within a table.\\") element. Because [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \\"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\\") elements are not descendant of the [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \\"The HTML <colgroup> element defines a group of columns within a table.\\") element, they won\'t inherit it.\\n    *   If the table doesn\'t use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, use one `td:nth-child(an+b)` CSS selector per column, where a is the total number of the columns in the table and b is the ordinal position of this column in the table. Only after this selector the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property can be used.\\n    *   If the table does use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, the effect can be achieved by combining adequate CSS attribute selectors like `[colspan=n]`, though this is not trivial.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/colgroup"}]},{"name":"col","description":{"kind":"markdown","value":"If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup."},"void":true,"attributes":[{"name":"span"},{"name":"align","description":"This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, its value is inherited from the [`align`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup#attr-align) of the [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \\"The HTML <colgroup> element defines a group of columns within a table.\\") element this `<col>` element belongs too. If there are none, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values:\\n    *   Do not try to set the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on a selector giving a [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \\"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\\") element. Because [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \\"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\\") elements are not descendant of the [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \\"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\\") element, they won\'t inherit it.\\n    *   If the table doesn\'t use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, use the `td:nth-child(an+b)` CSS selector. Set `a` to zero and `b` to the position of the column in the table, e.g. `td:nth-child(2) { text-align: right; }` to right-align the second column.\\n    *   If the table does use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, the effect can be achieved by combining adequate CSS attribute selectors like `[colspan=n]`, though this is not trivial.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/col"}]},{"name":"tbody","description":{"kind":"markdown","value":"The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table."},"attributes":[{"name":"align","description":"This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-charoff) attributes.\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/tbody"}]},{"name":"thead","description":{"kind":"markdown","value":"The thead element represents the block of rows that consist of the column labels (headers) for the parent table element, if the thead element has a parent and it is a table."},"attributes":[{"name":"align","description":"This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/thead"}]},{"name":"tfoot","description":{"kind":"markdown","value":"The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table."},"attributes":[{"name":"align","description":"This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property Unimplemented."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/tfoot"}]},{"name":"tr","description":{"kind":"markdown","value":"The tr element represents a row of cells in a table."},"attributes":[{"name":"align","description":"A [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString \\"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.\\") which specifies how the cell\'s context should be aligned horizontally within the cells in the row; this is shorthand for using `align` on every cell in the row individually. Possible values are:\\n\\n`left`\\n\\nAlign the content of each cell at its left edge.\\n\\n`center`\\n\\nCenter the contents of each cell between their left and right edges.\\n\\n`right`\\n\\nAlign the content of each cell at its right edge.\\n\\n`justify`\\n\\nWiden whitespaces within the text of each cell so that the text fills the full width of each cell (full justification).\\n\\n`char`\\n\\nAlign each cell in the row on a specific character (such that each row in the column that is configured this way will horizontally align its cells on that character). This uses the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr#attr-charoff) to establish the alignment character (typically \\".\\" or \\",\\" when aligning numerical data) and the number of characters that should follow the alignment character. This alignment type was never widely supported.\\n\\nIf no value is expressly set for `align`, the parent node\'s value is inherited.\\n\\nInstead of using the obsolete `align` attribute, you should instead use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to establish `left`, `center`, `right`, or `justify` alignment for the row\'s cells. To apply character-based alignment, set the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to the alignment character (such as `\\".\\"` or `\\",\\"`)."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/tr"}]},{"name":"td","description":{"kind":"markdown","value":"The td element represents a data cell in a table."},"attributes":[{"name":"colspan"},{"name":"rowspan"},{"name":"headers"},{"name":"abbr","description":"This attribute contains a short abbreviated description of the cell\'s content. Some user-agents, such as speech readers, may present this description before the content itself.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard. Alternatively, you can put the abbreviated description inside the cell and place the long content in the **title** attribute."},{"name":"align","description":"This enumerated attribute specifies how the cell content\'s horizontal alignment will be handled. Possible values are:\\n\\n*   `left`: The content is aligned to the left of the cell.\\n*   `center`: The content is centered in the cell.\\n*   `right`: The content is aligned to the right of the cell.\\n*   `justify` (with text only): The content is stretched out inside the cell so that it covers its entire width.\\n*   `char` (with text only): The content is aligned to a character inside the `<th>` element with minimal offset. This character is defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-charoff) attributes Unimplemented (see [bug 2212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \\"character alignment not implemented (align=char, charoff=, text-align:<string>)\\")).\\n\\nThe default value when this attribute is not specified is `left`.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, apply the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to the element.\\n*   To achieve the same effect as the `char` value, give the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property the same value you would use for the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-char). Unimplemented in CSS3."},{"name":"axis","description":"This attribute contains a list of space-separated strings. Each string is the `id` of a group of cells that this header applies to.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard."},{"name":"bgcolor","description":"This attribute defines the background color of each cell in a column. It consists of a 6-digit hexadecimal code as defined in [sRGB](https://www.w3.org/Graphics/Color/sRGB) and is prefixed by \'#\'. This attribute may be used with one of sixteen predefined color strings:\\n\\n \\n\\n`black` = \\"#000000\\"\\n\\n \\n\\n`green` = \\"#008000\\"\\n\\n \\n\\n`silver` = \\"#C0C0C0\\"\\n\\n \\n\\n`lime` = \\"#00FF00\\"\\n\\n \\n\\n`gray` = \\"#808080\\"\\n\\n \\n\\n`olive` = \\"#808000\\"\\n\\n \\n\\n`white` = \\"#FFFFFF\\"\\n\\n \\n\\n`yellow` = \\"#FFFF00\\"\\n\\n \\n\\n`maroon` = \\"#800000\\"\\n\\n \\n\\n`navy` = \\"#000080\\"\\n\\n \\n\\n`red` = \\"#FF0000\\"\\n\\n \\n\\n`blue` = \\"#0000FF\\"\\n\\n \\n\\n`purple` = \\"#800080\\"\\n\\n \\n\\n`teal` = \\"#008080\\"\\n\\n \\n\\n`fuchsia` = \\"#FF00FF\\"\\n\\n \\n\\n`aqua` = \\"#00FFFF\\"\\n\\n**Note:** Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: The [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \\"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To create a similar effect use the [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \\"The background-color CSS property sets the background color of an element.\\") property in [CSS](https://developer.mozilla.org/en-US/docs/CSS) instead."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/td"}]},{"name":"th","description":{"kind":"markdown","value":"The th element represents a header cell in a table."},"attributes":[{"name":"colspan"},{"name":"rowspan"},{"name":"headers"},{"name":"scope","valueSet":"s"},{"name":"sorted"},{"name":"abbr","description":{"kind":"markdown","value":"This attribute contains a short abbreviated description of the cell\'s content. Some user-agents, such as speech readers, may present this description before the content itself."}},{"name":"align","description":"This enumerated attribute specifies how the cell content\'s horizontal alignment will be handled. Possible values are:\\n\\n*   `left`: The content is aligned to the left of the cell.\\n*   `center`: The content is centered in the cell.\\n*   `right`: The content is aligned to the right of the cell.\\n*   `justify` (with text only): The content is stretched out inside the cell so that it covers its entire width.\\n*   `char` (with text only): The content is aligned to a character inside the `<th>` element with minimal offset. This character is defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-charoff) attributes.\\n\\nThe default value when this attribute is not specified is `left`.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, apply the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property to the element.\\n*   To achieve the same effect as the `char` value, give the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \\"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\\") property the same value you would use for the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-char). Unimplemented in CSS3."},{"name":"axis","description":"This attribute contains a list of space-separated strings. Each string is the `id` of a group of cells that this header applies to.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard: use the [`scope`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope) attribute instead."},{"name":"bgcolor","description":"This attribute defines the background color of each cell in a column. It consists of a 6-digit hexadecimal code as defined in [sRGB](https://www.w3.org/Graphics/Color/sRGB) and is prefixed by \'#\'. This attribute may be used with one of sixteen predefined color strings:\\n\\n \\n\\n`black` = \\"#000000\\"\\n\\n \\n\\n`green` = \\"#008000\\"\\n\\n \\n\\n`silver` = \\"#C0C0C0\\"\\n\\n \\n\\n`lime` = \\"#00FF00\\"\\n\\n \\n\\n`gray` = \\"#808080\\"\\n\\n \\n\\n`olive` = \\"#808000\\"\\n\\n \\n\\n`white` = \\"#FFFFFF\\"\\n\\n \\n\\n`yellow` = \\"#FFFF00\\"\\n\\n \\n\\n`maroon` = \\"#800000\\"\\n\\n \\n\\n`navy` = \\"#000080\\"\\n\\n \\n\\n`red` = \\"#FF0000\\"\\n\\n \\n\\n`blue` = \\"#0000FF\\"\\n\\n \\n\\n`purple` = \\"#800080\\"\\n\\n \\n\\n`teal` = \\"#008080\\"\\n\\n \\n\\n`fuchsia` = \\"#FF00FF\\"\\n\\n \\n\\n`aqua` = \\"#00FFFF\\"\\n\\n**Note:** Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: The [`<th>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th \\"The HTML <th> element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes.\\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS). To create a similar effect use the [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \\"The background-color CSS property sets the background color of an element.\\") property in [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) instead."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/th"}]},{"name":"form","description":{"kind":"markdown","value":"The form element represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing."},"attributes":[{"name":"accept-charset","description":{"kind":"markdown","value":"A space- or comma-delimited list of character encodings that the server accepts. The browser uses them in the order in which they are listed. The default value, the reserved string `\\"UNKNOWN\\"`, indicates the same encoding as that of the document containing the form element.  \\nIn previous versions of HTML, the different character encodings could be delimited by spaces or commas. In HTML5, only spaces are allowed as delimiters."}},{"name":"action","description":{"kind":"markdown","value":"The URI of a program that processes the form information. This value can be overridden by a [`formaction`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formaction) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."}},{"name":"autocomplete","valueSet":"o","description":{"kind":"markdown","value":"Indicates whether input elements can by default have their values automatically completed by the browser. This setting can be overridden by an `autocomplete` attribute on an element belonging to the form. Possible values are:\\n\\n*   `off`: The user must explicitly enter a value into each field for every use, or the document provides its own auto-completion method; the browser does not automatically complete entries.\\n*   `on`: The browser can automatically complete values based on values that the user has previously entered in the form.\\n\\nFor most modern browsers (including Firefox 38+, Google Chrome 34+, IE 11+) setting the autocomplete attribute will not prevent a browser\'s password manager from asking the user if they want to store login fields (username and password), if the user permits the storage the browser will autofill the login the next time the user visits the page. See [The autocomplete attribute and login fields](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#The_autocomplete_attribute_and_login_fields).\\n**Note:** If you set `autocomplete` to `off` in a form because the document provides its own auto-completion, then you should also set `autocomplete` to `off` for each of the form\'s `input` elements that the document can auto-complete. For details, see the note regarding Google Chrome in the [Browser Compatibility chart](#compatChart)."}},{"name":"enctype","valueSet":"et","description":{"kind":"markdown","value":"When the value of the `method` attribute is `post`, enctype is the [MIME type](https://en.wikipedia.org/wiki/Mime_type) of content that is used to submit the form to the server. Possible values are:\\n\\n*   `application/x-www-form-urlencoded`: The default value if the attribute is not specified.\\n*   `multipart/form-data`: The value used for an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element with the `type` attribute set to \\"file\\".\\n*   `text/plain`: (HTML5)\\n\\nThis value can be overridden by a [`formenctype`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formenctype) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."}},{"name":"method","valueSet":"m","description":{"kind":"markdown","value":"The [HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP) method that the browser uses to submit the form. Possible values are:\\n\\n*   `post`: Corresponds to the HTTP [POST method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5) ; form data are included in the body of the form and sent to the server.\\n*   `get`: Corresponds to the HTTP [GET method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3); form data are appended to the `action` attribute URI with a \'?\' as separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters.\\n*   `dialog`: Use when the form is inside a [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog \\"The HTML <dialog> element represents a dialog box or other interactive component, such as an inspector or window.\\") element to close the dialog when submitted.\\n\\nThis value can be overridden by a [`formmethod`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formmethod) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."}},{"name":"name","description":{"kind":"markdown","value":"The name of the form. In HTML 4, its use is deprecated (`id` should be used instead). It must be unique among the forms in a document and not just an empty string in HTML 5."}},{"name":"novalidate","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates that the form is not to be validated when submitted. If this attribute is not specified (and therefore the form is validated), this default setting can be overridden by a [`formnovalidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formnovalidate) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element belonging to the form."}},{"name":"target","valueSet":"target","description":{"kind":"markdown","value":"A name or keyword indicating where to display the response that is received after submitting the form. In HTML 4, this is the name/keyword for a frame. In HTML5, it is a name/keyword for a _browsing context_ (for example, tab, window, or inline frame). The following keywords have special meanings:\\n\\n*   `_self`: Load the response into the same HTML 4 frame (or HTML5 browsing context) as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the response into a new unnamed HTML 4 window or HTML5 browsing context.\\n*   `_parent`: Load the response into the HTML 4 frameset parent of the current frame, or HTML5 parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: HTML 4: Load the response into the full original window, and cancel all other frames. HTML5: Load the response into the top-level browsing context (i.e., the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`.\\n*   _iframename_: The response is displayed in a named [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe \\"The HTML Inline Frame element (<iframe>) represents a nested browsing context, embedding another HTML page into the current one.\\").\\n\\nHTML5: This value can be overridden by a [`formtarget`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formtarget) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."}},{"name":"accept","description":"A comma-separated list of content types that the server accepts.\\n\\n**Usage note:** This attribute has been removed in HTML5 and should no longer be used. Instead, use the [`accept`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept) attribute of the specific [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element."},{"name":"autocapitalize","description":"This is a nonstandard attribute used by iOS Safari Mobile which controls whether and how the text value for textual form control descendants should be automatically capitalized as it is entered/edited by the user. If the `autocapitalize` attribute is specified on an individual form control descendant, it trumps the form-wide `autocapitalize` setting. The non-deprecated values are available in iOS 5 and later. The default value is `sentences`. Possible values are:\\n\\n*   `none`: Completely disables automatic capitalization\\n*   `sentences`: Automatically capitalize the first letter of sentences.\\n*   `words`: Automatically capitalize the first letter of words.\\n*   `characters`: Automatically capitalize all characters.\\n*   `on`: Deprecated since iOS 5.\\n*   `off`: Deprecated since iOS 5."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/form"}]},{"name":"label","description":{"kind":"markdown","value":"The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element\'s labeled control, either using the for attribute, or by putting the form control inside the label element itself."},"attributes":[{"name":"form","description":{"kind":"markdown","value":"The [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element with which the label is associated (its _form owner_). If specified, the value of the attribute is the `id` of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element in the same document. This lets you place label elements anywhere within a document, not just as descendants of their form elements."}},{"name":"for","description":{"kind":"markdown","value":"The [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id) of a [labelable](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Form_labelable) form-related element in the same document as the `<label>` element. The first element in the document with an `id` matching the value of the `for` attribute is the _labeled control_ for this label element, if it is a labelable element. If it is not labelable then the `for` attribute has no effect. If there are other elements which also match the `id` value, later in the document, they are not considered.\\n\\n**Note**: A `<label>` element can have both a `for` attribute and a contained control element, as long as the `for` attribute points to the contained control element."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/label"}]},{"name":"input","description":{"kind":"markdown","value":"The input element represents a typed data field, usually with a form control to allow the user to edit the data."},"void":true,"attributes":[{"name":"accept"},{"name":"alt"},{"name":"autocomplete","valueSet":"inputautocomplete"},{"name":"autofocus","valueSet":"v"},{"name":"checked","valueSet":"v"},{"name":"dirname"},{"name":"disabled","valueSet":"v"},{"name":"form"},{"name":"formaction"},{"name":"formenctype","valueSet":"et"},{"name":"formmethod","valueSet":"fm"},{"name":"formnovalidate","valueSet":"v"},{"name":"formtarget"},{"name":"height"},{"name":"inputmode","valueSet":"im"},{"name":"list"},{"name":"max"},{"name":"maxlength"},{"name":"min"},{"name":"minlength"},{"name":"multiple","valueSet":"v"},{"name":"name"},{"name":"pattern"},{"name":"placeholder"},{"name":"readonly","valueSet":"v"},{"name":"required","valueSet":"v"},{"name":"size"},{"name":"src"},{"name":"step"},{"name":"type","valueSet":"t"},{"name":"value"},{"name":"width"}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/input"}]},{"name":"button","description":{"kind":"markdown","value":"The button element represents a button labeled by its contents."},"attributes":[{"name":"autofocus","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute lets you specify that the button should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified."}},{"name":"disabled","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates that the user cannot interact with the button. If this attribute is not specified, the button inherits its setting from the containing element, for example [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset \\"The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.\\"); if there is no containing element with the **disabled** attribute set, then the button is enabled.\\n\\nFirefox will, unlike other browsers, by default, [persist the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") across page loads. Use the [`autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this feature."}},{"name":"form","description":{"kind":"markdown","value":"The form element that the button is associated with (its _form owner_). The value of the attribute must be the **id** attribute of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element in the same document. If this attribute is not specified, the `<button>` element will be associated to an ancestor [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element, if one exists. This attribute enables you to associate `<button>` elements to [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") elements anywhere within a document, not just as descendants of [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") elements."}},{"name":"formaction","description":{"kind":"markdown","value":"The URI of a program that processes the information submitted by the button. If specified, it overrides the [`action`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action) attribute of the button\'s form owner."}},{"name":"formenctype","valueSet":"et","description":{"kind":"markdown","value":"If the button is a submit button, this attribute specifies the type of content that is used to submit the form to the server. Possible values are:\\n\\n*   `application/x-www-form-urlencoded`: The default value if the attribute is not specified.\\n*   `multipart/form-data`: Use this value if you are using an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") element with the [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type) attribute set to `file`.\\n*   `text/plain`\\n\\nIf this attribute is specified, it overrides the [`enctype`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype) attribute of the button\'s form owner."}},{"name":"formmethod","valueSet":"fm","description":{"kind":"markdown","value":"If the button is a submit button, this attribute specifies the HTTP method that the browser uses to submit the form. Possible values are:\\n\\n*   `post`: The data from the form are included in the body of the form and sent to the server.\\n*   `get`: The data from the form are appended to the **form** attribute URI, with a \'?\' as a separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters.\\n\\nIf specified, this attribute overrides the [`method`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method) attribute of the button\'s form owner."}},{"name":"formnovalidate","valueSet":"v","description":{"kind":"markdown","value":"If the button is a submit button, this Boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the [`novalidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate) attribute of the button\'s form owner."}},{"name":"formtarget","description":{"kind":"markdown","value":"If the button is a submit button, this attribute is a name or keyword indicating where to display the response that is received after submitting the form. This is a name of, or keyword for, a _browsing context_ (for example, tab, window, or inline frame). If this attribute is specified, it overrides the [`target`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-target) attribute of the button\'s form owner. The following keywords have special meanings:\\n\\n*   `_self`: Load the response into the same browsing context as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the response into a new unnamed browsing context.\\n*   `_parent`: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`."}},{"name":"name","description":{"kind":"markdown","value":"The name of the button, which is submitted with the form data."}},{"name":"type","valueSet":"bt","description":{"kind":"markdown","value":"The type of the button. Possible values are:\\n\\n*   `submit`: The button submits the form data to the server. This is the default if the attribute is not specified, or if the attribute is dynamically changed to an empty or invalid value.\\n*   `reset`: The button resets all the controls to their initial values.\\n*   `button`: The button has no default behavior. It can have client-side scripts associated with the element\'s events, which are triggered when the events occur."}},{"name":"value","description":{"kind":"markdown","value":"The initial value of the button. It defines the value associated with the button which is submitted with the form data. This value is passed to the server in params when the form is submitted."}},{"name":"autocomplete","description":"The use of this attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") is nonstandard and Firefox-specific. By default, unlike other browsers, [Firefox persists the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \\"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\\") across page loads. Setting the value of this attribute to `off` (i.e. `autocomplete=\\"off\\"`) disables this feature. See [bug 654072](https://bugzilla.mozilla.org/show_bug.cgi?id=654072 \\"if disabled state is changed with javascript, the normal state doesn\'t return after refreshing the page\\")."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/button"}]},{"name":"select","description":{"kind":"markdown","value":"The select element represents a control for selecting amongst a set of options."},"attributes":[{"name":"autocomplete","valueSet":"inputautocomplete","description":{"kind":"markdown","value":"A [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString \\"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.\\") providing a hint for a [user agent\'s](https://developer.mozilla.org/en-US/docs/Glossary/user_agent \\"user agent\'s: A user agent is a computer program representing a person, for example, a browser in a Web context.\\") autocomplete feature. See [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for a complete list of values and details on how to use autocomplete."}},{"name":"autofocus","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the `autofocus` attribute."}},{"name":"disabled","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example `fieldset`; if there is no containing element with the `disabled` attribute set, then the control is enabled."}},{"name":"form","description":{"kind":"markdown","value":"This attribute lets you specify the form element to which the select element is associated (that is, its \\"form owner\\"). If this attribute is specified, its value must be the same as the `id` of a form element in the same document. This enables you to place select elements anywhere within a document, not just as descendants of their form elements."}},{"name":"multiple","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When `multiple` is specified, most browsers will show a scrolling list box instead of a single line dropdown."}},{"name":"name","description":{"kind":"markdown","value":"This attribute is used to specify the name of the control."}},{"name":"required","valueSet":"v","description":{"kind":"markdown","value":"A Boolean attribute indicating that an option with a non-empty string value must be selected."}},{"name":"size","description":{"kind":"markdown","value":"If the control is presented as a scrolling list box (e.g. when `multiple` is specified), this attribute represents the number of rows in the list that should be visible at one time. Browsers are not required to present a select element as a scrolled list box. The default value is 0.\\n\\n**Note:** According to the HTML5 specification, the default value for size should be 1; however, in practice, this has been found to break some web sites, and no other browser currently does that, so Mozilla has opted to continue to return 0 for the time being with Firefox."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/select"}]},{"name":"datalist","description":{"kind":"markdown","value":"The datalist element represents a set of option elements that represent predefined options for other controls. In the rendering, the datalist element represents nothing and it, along with its children, should be hidden."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/datalist"}]},{"name":"optgroup","description":{"kind":"markdown","value":"The optgroup element represents a group of option elements with a common label."},"attributes":[{"name":"disabled","valueSet":"v","description":{"kind":"markdown","value":"If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won\'t receive any browsing events, like mouse clicks or focus-related ones."}},{"name":"label","description":{"kind":"markdown","value":"The name of the group of options, which the browser can use when labeling the options in the user interface. This attribute is mandatory if this element is used."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/optgroup"}]},{"name":"option","description":{"kind":"markdown","value":"The option element represents an option in a select element or as part of a list of suggestions in a datalist element."},"attributes":[{"name":"disabled","valueSet":"v","description":{"kind":"markdown","value":"If this Boolean attribute is set, this option is not checkable. Often browsers grey out such control and it won\'t receive any browsing event, like mouse clicks or focus-related ones. If this attribute is not set, the element can still be disabled if one of its ancestors is a disabled [`<optgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup \\"The HTML <optgroup> element creates a grouping of options within a <select> element.\\") element."}},{"name":"label","description":{"kind":"markdown","value":"This attribute is text for the label indicating the meaning of the option. If the `label` attribute isn\'t defined, its value is that of the element text content."}},{"name":"selected","valueSet":"v","description":{"kind":"markdown","value":"If present, this Boolean attribute indicates that the option is initially selected. If the `<option>` element is the descendant of a [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select \\"The HTML <select> element represents a control that provides a menu of options\\") element whose [`multiple`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple) attribute is not set, only one single `<option>` of this [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select \\"The HTML <select> element represents a control that provides a menu of options\\") element may have the `selected` attribute."}},{"name":"value","description":{"kind":"markdown","value":"The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/option"}]},{"name":"textarea","description":{"kind":"markdown","value":"The textarea element represents a multiline plain text edit control for the element\'s raw value. The contents of the control represent the control\'s default value."},"attributes":[{"name":"autocomplete","valueSet":"inputautocomplete","description":{"kind":"markdown","value":"This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values are:\\n\\n*   `off`: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry.\\n*   `on`: The browser can automatically complete the value based on values that the user has entered during previous uses.\\n\\nIf the `autocomplete` attribute is not specified on a `<textarea>` element, then the browser uses the `autocomplete` attribute value of the `<textarea>` element\'s form owner. The form owner is either the [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element that this `<textarea>` element is a descendant of or the form element whose `id` is specified by the `form` attribute of the input element. For more information, see the [`autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-autocomplete) attribute in [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\")."}},{"name":"autofocus","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form-associated element in a document can have this attribute specified."}},{"name":"cols","description":{"kind":"markdown","value":"The visible width of the text control, in average character widths. If it is specified, it must be a positive integer. If it is not specified, the default value is `20`."}},{"name":"dirname"},{"name":"disabled","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset \\"The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.\\"); if there is no containing element when the `disabled` attribute is set, the control is enabled."}},{"name":"form","description":{"kind":"markdown","value":"The form element that the `<textarea>` element is associated with (its \\"form owner\\"). The value of the attribute must be the `id` of a form element in the same document. If this attribute is not specified, the `<textarea>` element must be a descendant of a form element. This attribute enables you to place `<textarea>` elements anywhere within a document, not just as descendants of form elements."}},{"name":"inputmode","valueSet":"im"},{"name":"maxlength","description":{"kind":"markdown","value":"The maximum number of characters (unicode code points) that the user can enter. If this value isn\'t specified, the user can enter an unlimited number of characters."}},{"name":"minlength","description":{"kind":"markdown","value":"The minimum number of characters (unicode code points) required that the user should enter."}},{"name":"name","description":{"kind":"markdown","value":"The name of the control."}},{"name":"placeholder","description":{"kind":"markdown","value":"A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.\\n\\n**Note:** Placeholders should only be used to show an example of the type of data that should be entered into a form; they are _not_ a substitute for a proper [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label \\"The HTML <label> element represents a caption for an item in a user interface.\\") element tied to the input. See [Labels and placeholders](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Labels_and_placeholders \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") in [<input>: The Input (Form Input) element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") for a full explanation."}},{"name":"readonly","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the `disabled` attribute, the `readonly` attribute does not prevent the user from clicking or selecting in the control. The value of a read-only control is still submitted with the form."}},{"name":"required","valueSet":"v","description":{"kind":"markdown","value":"This attribute specifies that the user must fill in a value before submitting a form."}},{"name":"rows","description":{"kind":"markdown","value":"The number of visible text lines for the control."}},{"name":"wrap","valueSet":"w","description":{"kind":"markdown","value":"Indicates how the control wraps text. Possible values are:\\n\\n*   `hard`: The browser automatically inserts line breaks (CR+LF) so that each line has no more than the width of the control; the `cols` attribute must also be specified for this to take effect.\\n*   `soft`: The browser ensures that all line breaks in the value consist of a CR+LF pair, but does not insert any additional line breaks.\\n*   `off` : Like `soft` but changes appearance to `white-space: pre` so line segments exceeding `cols` are not wrapped and the `<textarea>` becomes horizontally scrollable.\\n\\nIf this attribute is not specified, `soft` is its default value."}},{"name":"autocapitalize","description":"This is a non-standard attribute supported by WebKit on iOS (therefore nearly all browsers running on iOS, including Safari, Firefox, and Chrome), which controls whether and how the text value should be automatically capitalized as it is entered/edited by the user. The non-deprecated values are available in iOS 5 and later. Possible values are:\\n\\n*   `none`: Completely disables automatic capitalization.\\n*   `sentences`: Automatically capitalize the first letter of sentences.\\n*   `words`: Automatically capitalize the first letter of words.\\n*   `characters`: Automatically capitalize all characters.\\n*   `on`: Deprecated since iOS 5.\\n*   `off`: Deprecated since iOS 5."},{"name":"spellcheck","description":"Specifies whether the `<textarea>` is subject to spell checking by the underlying browser/OS. the value can be:\\n\\n*   `true`: Indicates that the element needs to have its spelling and grammar checked.\\n*   `default` : Indicates that the element is to act according to a default behavior, possibly based on the parent element\'s own `spellcheck` value.\\n*   `false` : Indicates that the element should not be spell checked."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/textarea"}]},{"name":"output","description":{"kind":"markdown","value":"The output element represents the result of a calculation performed by the application, or the result of a user action."},"attributes":[{"name":"for","description":{"kind":"markdown","value":"A space-separated list of other elements’ [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id)s, indicating that those elements contributed input values to (or otherwise affected) the calculation."}},{"name":"form","description":{"kind":"markdown","value":"The [form element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) that this element is associated with (its \\"form owner\\"). The value of the attribute must be an `id` of a form element in the same document. If this attribute is not specified, the output element must be a descendant of a form element. This attribute enables you to place output elements anywhere within a document, not just as descendants of their form elements."}},{"name":"name","description":{"kind":"markdown","value":"The name of the element, exposed in the [`HTMLFormElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement \\"The HTMLFormElement interface represents a <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.\\") API."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/output"}]},{"name":"progress","description":{"kind":"markdown","value":"The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed."},"attributes":[{"name":"value","description":{"kind":"markdown","value":"This attribute specifies how much of the task that has been completed. It must be a valid floating point number between 0 and `max`, or between 0 and 1 if `max` is omitted. If there is no `value` attribute, the progress bar is indeterminate; this indicates that an activity is ongoing with no indication of how long it is expected to take."}},{"name":"max","description":{"kind":"markdown","value":"This attribute describes how much work the task indicated by the `progress` element requires. The `max` attribute, if present, must have a value greater than zero and be a valid floating point number. The default value is 1."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/progress"}]},{"name":"meter","description":{"kind":"markdown","value":"The meter element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate."},"attributes":[{"name":"value","description":{"kind":"markdown","value":"The current numeric value. This must be between the minimum and maximum values (`min` attribute and `max` attribute) if they are specified. If unspecified or malformed, the value is 0. If specified, but not within the range given by the `min` attribute and `max` attribute, the value is equal to the nearest end of the range.\\n\\n**Usage note:** Unless the `value` attribute is between `0` and `1` (inclusive), the `min` and `max` attributes should define the range so that the `value` attribute\'s value is within it."}},{"name":"min","description":{"kind":"markdown","value":"The lower numeric bound of the measured range. This must be less than the maximum value (`max` attribute), if specified. If unspecified, the minimum value is 0."}},{"name":"max","description":{"kind":"markdown","value":"The upper numeric bound of the measured range. This must be greater than the minimum value (`min` attribute), if specified. If unspecified, the maximum value is 1."}},{"name":"low","description":{"kind":"markdown","value":"The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (`min` attribute), and it also must be less than the high value and maximum value (`high` attribute and `max` attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the `low` value is equal to the minimum value."}},{"name":"high","description":{"kind":"markdown","value":"The lower numeric bound of the high end of the measured range. This must be less than the maximum value (`max` attribute), and it also must be greater than the low value and minimum value (`low` attribute and **min** attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the `high` value is equal to the maximum value."}},{"name":"optimum","description":{"kind":"markdown","value":"This attribute indicates the optimal numeric value. It must be within the range (as defined by the `min` attribute and `max` attribute). When used with the `low` attribute and `high` attribute, it gives an indication where along the range is considered preferable. For example, if it is between the `min` attribute and the `low` attribute, then the lower range is considered preferred."}},{"name":"form","description":"This attribute associates the element with a `form` element that has ownership of the `meter` element. For example, a `meter` might be displaying a range corresponding to an `input` element of `type` _number_. This attribute is only used if the `meter` element is being used as a form-associated element; even then, it may be omitted if the element appears as a descendant of a `form` element."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/meter"}]},{"name":"fieldset","description":{"kind":"markdown","value":"The fieldset element represents a set of form controls optionally grouped under a common name."},"attributes":[{"name":"disabled","valueSet":"v","description":{"kind":"markdown","value":"If this Boolean attribute is set, all form controls that are descendants of the `<fieldset>`, are disabled, meaning they are not editable and won\'t be submitted along with the `<form>`. They won\'t receive any browsing events, like mouse clicks or focus-related events. By default browsers display such controls grayed out. Note that form elements inside the [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend \\"The HTML <legend> element represents a caption for the content of its parent <fieldset>.\\") element won\'t be disabled."}},{"name":"form","description":{"kind":"markdown","value":"This attribute takes the value of the `id` attribute of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \\"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\\") element you want the `<fieldset>` to be part of, even if it is not inside the form."}},{"name":"name","description":{"kind":"markdown","value":"The name associated with the group.\\n\\n**Note**: The caption for the fieldset is given by the first [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend \\"The HTML <legend> element represents a caption for the content of its parent <fieldset>.\\") element nested inside it."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/fieldset"}]},{"name":"legend","description":{"kind":"markdown","value":"The legend element represents a caption for the rest of the contents of the legend element\'s parent fieldset element, if any."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/legend"}]},{"name":"details","description":{"kind":"markdown","value":"The details element represents a disclosure widget from which the user can obtain additional information or controls."},"attributes":[{"name":"open","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute indicates whether or not the details — that is, the contents of the `<details>` element — are currently visible. The default, `false`, means the details are not visible."}}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/details"}]},{"name":"summary","description":{"kind":"markdown","value":"The summary element represents a summary, caption, or legend for the rest of the contents of the summary element\'s parent details element, if any."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/summary"}]},{"name":"dialog","description":{"kind":"markdown","value":"The dialog element represents a part of an application that a user interacts with to perform a task, for example a dialog box, inspector, or window."},"attributes":[{"name":"open","description":"Indicates that the dialog is active and available for interaction. When the `open` attribute is not set, the dialog shouldn\'t be shown to the user."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/dialog"}]},{"name":"script","description":{"kind":"markdown","value":"The script element allows authors to include dynamic script and data blocks in their documents. The element does not represent content for the user."},"attributes":[{"name":"src","description":{"kind":"markdown","value":"This attribute specifies the URI of an external script; this can be used as an alternative to embedding a script directly within a document.\\n\\nIf a `script` element has a `src` attribute specified, it should not have a script embedded inside its tags."}},{"name":"type","description":{"kind":"markdown","value":"This attribute indicates the type of script represented. The value of this attribute will be in one of the following categories:\\n\\n*   **Omitted or a JavaScript MIME type:** For HTML5-compliant browsers this indicates the script is JavaScript. HTML5 specification urges authors to omit the attribute rather than provide a redundant MIME type. In earlier browsers, this identified the scripting language of the embedded or imported (via the `src` attribute) code. JavaScript MIME types are [listed in the specification](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#JavaScript_types).\\n*   **`module`:** For HTML5-compliant browsers the code is treated as a JavaScript module. The processing of the script contents is not affected by the `charset` and `defer` attributes. For information on using `module`, see [ES6 in Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/). Code may behave differently when the `module` keyword is used.\\n*   **Any other value:** The embedded content is treated as a data block which won\'t be processed by the browser. Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks. The `src` attribute will be ignored.\\n\\n**Note:** in Firefox you could specify the version of JavaScript contained in a `<script>` element by including a non-standard `version` parameter inside the `type` attribute — for example `type=\\"text/javascript;version=1.8\\"`. This has been removed in Firefox 59 (see [bug 1428745](https://bugzilla.mozilla.org/show_bug.cgi?id=1428745 \\"FIXED: Remove support for version parameter from script loader\\"))."}},{"name":"charset"},{"name":"async","valueSet":"v","description":{"kind":"markdown","value":"This is a Boolean attribute indicating that the browser should, if possible, load the script asynchronously.\\n\\nThis attribute must not be used if the `src` attribute is absent (i.e. for inline scripts). If it is included in this case it will have no effect.\\n\\nBrowsers usually assume the worst case scenario and load scripts synchronously, (i.e. `async=\\"false\\"`) during HTML parsing.\\n\\nDynamically inserted scripts (using [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement \\"In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn\'t recognized.\\")) load asynchronously by default, so to turn on synchronous loading (i.e. scripts load in the order they were inserted) set `async=\\"false\\"`.\\n\\nSee [Browser compatibility](#Browser_compatibility) for notes on browser support. See also [Async scripts for asm.js](https://developer.mozilla.org/en-US/docs/Games/Techniques/Async_scripts)."}},{"name":"defer","valueSet":"v","description":{"kind":"markdown","value":"This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded \\"/en-US/docs/Web/Events/DOMContentLoaded\\").\\n\\nScripts with the `defer` attribute will prevent the `DOMContentLoaded` event from firing until the script has loaded and finished evaluating.\\n\\nThis attribute must not be used if the `src` attribute is absent (i.e. for inline scripts), in this case it would have no effect.\\n\\nTo achieve a similar effect for dynamically inserted scripts use `async=\\"false\\"` instead. Scripts with the `defer` attribute will execute in the order in which they appear in the document."}},{"name":"crossorigin","valueSet":"xo","description":{"kind":"markdown","value":"Normal `script` elements pass minimal information to the [`window.onerror`](https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror \\"The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.\\") for scripts which do not pass the standard [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \\"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\\") checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for a more descriptive explanation of its valid arguments."}},{"name":"nonce","description":{"kind":"markdown","value":"A cryptographic nonce (number used once) to whitelist inline scripts in a [script-src Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src). The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource\'s policy is otherwise trivial."}},{"name":"integrity","description":"This attribute contains inline metadata that a user agent can use to verify that a fetched resource has been delivered free of unexpected manipulation. See [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)."},{"name":"nomodule","description":"This Boolean attribute is set to indicate that the script should not be executed in browsers that support [ES2015 modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/) — in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code."},{"name":"referrerpolicy","description":"Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer) to send when fetching the script, or resources fetched by the script:\\n\\n*   `no-referrer`: The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent.\\n*   `no-referrer-when-downgrade` (default): The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\") header will not be sent to [origin](https://developer.mozilla.org/en-US/docs/Glossary/origin \\"origin: Web content\'s origin is defined by the scheme (protocol), host (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, host, and port all match.\\")s without [TLS](https://developer.mozilla.org/en-US/docs/Glossary/TLS \\"TLS: Transport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols.\\") ([HTTPS](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS \\"HTTPS: HTTPS (HTTP Secure) is an encrypted version of the HTTP protocol. It usually uses SSL or TLS to encrypt all communication between a client and a server. This secure connection allows clients to safely exchange sensitive data with a server, for example for banking activities or online shopping.\\")).\\n*   `origin`: The sent referrer will be limited to the origin of the referring page: its [scheme](https://developer.mozilla.org/en-US/docs/Archive/Mozilla/URIScheme), [host](https://developer.mozilla.org/en-US/docs/Glossary/host \\"host: A host is a device connected to the Internet (or a local network). Some hosts called servers offer additional services like serving webpages or storing files and emails.\\"), and [port](https://developer.mozilla.org/en-US/docs/Glossary/port \\"port: For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.\\").\\n*   `origin-when-cross-origin`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\\n*   `same-origin`: A referrer will be sent for [same origin](https://developer.mozilla.org/en-US/docs/Glossary/Same-origin_policy \\"same origin: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\\"), but cross-origin requests will contain no referrer information.\\n*   `strict-origin`: Only send the origin of the document as the referrer when the protocol security level stays the same (e.g. HTTPS→HTTPS), but don\'t send it to a less secure destination (e.g. HTTPS→HTTP).\\n*   `strict-origin-when-cross-origin`: Send a full URL when performing a same-origin request, but only send the origin when the protocol security level stays the same (e.g.HTTPS→HTTPS), and send no header to a less secure destination (e.g. HTTPS→HTTP).\\n*   `unsafe-url`: The referrer will include the origin _and_ the path (but not the [fragment](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash), [password](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password), or [username](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins.\\n\\n**Note**: An empty string value (`\\"\\"`) is both the default value, and a fallback value if `referrerpolicy` is not supported. If `referrerpolicy` is not explicitly specified on the `<script>` element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available, the empty string is treated as being equivalent to `no-referrer-when-downgrade`."},{"name":"text","description":"Like the `textContent` attribute, this attribute sets the text content of the element. Unlike the `textContent` attribute, however, this attribute is evaluated as executable code after the node is inserted into the DOM."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/script"}]},{"name":"noscript","description":{"kind":"markdown","value":"The noscript element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don\'t support scripting, by affecting how the document is parsed."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/noscript"}]},{"name":"template","description":{"kind":"markdown","value":"The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script."},"attributes":[],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/template"}]},{"name":"canvas","description":{"kind":"markdown","value":"The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly."},"attributes":[{"name":"width","description":{"kind":"markdown","value":"The width of the coordinate space in CSS pixels. Defaults to 300."}},{"name":"height","description":{"kind":"markdown","value":"The height of the coordinate space in CSS pixels. Defaults to 150."}},{"name":"moz-opaque","description":"Lets the canvas know whether or not translucency will be a factor. If the canvas knows there\'s no translucency, painting performance can be optimized. This is only supported by Mozilla-based browsers; use the standardized [`canvas.getContext(\'2d\', { alpha: false })`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext \\"The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.\\") instead."}],"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Element/canvas"}]}],"globalAttributes":[{"name":"accesskey","description":{"kind":"markdown","value":"Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/accesskey"}]},{"name":"autocapitalize","description":{"kind":"markdown","value":"Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:\\n\\n*   `off` or `none`, no autocapitalization is applied (all letters default to lowercase)\\n*   `on` or `sentences`, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase\\n*   `words`, the first letter of each word defaults to a capital letter; all other letters default to lowercase\\n*   `characters`, all letters should default to uppercase"},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/autocapitalize"}]},{"name":"class","description":{"kind":"markdown","value":"A space-separated list of the classes of the element. Classes allows CSS and JavaScript to select and access specific elements via the [class selectors](https://developer.mozilla.org/docs/Web/CSS/Class_selectors) or functions like the method [`Document.getElementsByClassName()`](https://developer.mozilla.org/docs/Web/API/Document/getElementsByClassName \\"returns an array-like object of all child elements which have all of the given class names.\\")."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/class"}]},{"name":"contenteditable","description":{"kind":"markdown","value":"An enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:\\n\\n*   `true` or the _empty string_, which indicates that the element must be editable;\\n*   `false`, which indicates that the element must not be editable."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/contenteditable"}]},{"name":"contextmenu","description":{"kind":"markdown","value":"The `[**id**](#attr-id)` of a [`<menu>`](https://developer.mozilla.org/docs/Web/HTML/Element/menu \\"The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.\\") to use as the contextual menu for this element."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/contextmenu"}]},{"name":"dir","description":{"kind":"markdown","value":"An enumerated attribute indicating the directionality of the element\'s text. It can have the following values:\\n\\n*   `ltr`, which means _left to right_ and is to be used for languages that are written from the left to the right (like English);\\n*   `rtl`, which means _right to left_ and is to be used for languages that are written from the right to the left (like Arabic);\\n*   `auto`, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element."},"valueSet":"d","references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/dir"}]},{"name":"draggable","description":{"kind":"markdown","value":"An enumerated attribute indicating whether the element can be dragged, using the [Drag and Drop API](https://developer.mozilla.org/docs/DragDrop/Drag_and_Drop). It can have the following values:\\n\\n*   `true`, which indicates that the element may be dragged\\n*   `false`, which indicates that the element may not be dragged."},"valueSet":"b","references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/draggable"}]},{"name":"dropzone","description":{"kind":"markdown","value":"An enumerated attribute indicating what types of content can be dropped on an element, using the [Drag and Drop API](https://developer.mozilla.org/docs/DragDrop/Drag_and_Drop). It can have the following values:\\n\\n*   `copy`, which indicates that dropping will create a copy of the element that was dragged\\n*   `move`, which indicates that the element that was dragged will be moved to this new location.\\n*   `link`, will create a link to the dragged data."}},{"name":"exportparts","description":{"kind":"markdown","value":"Used to transitively export shadow parts from a nested shadow tree into a containing light tree."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/exportparts"}]},{"name":"hidden","description":{"kind":"markdown","value":"A Boolean attribute indicates that the element is not yet, or is no longer, _relevant_. For example, it can be used to hide elements of the page that can\'t be used until the login process has been completed. The browser won\'t render such elements. This attribute must not be used to hide content that could legitimately be shown."},"valueSet":"v","references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/hidden"}]},{"name":"id","description":{"kind":"markdown","value":"Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS)."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/id"}]},{"name":"inputmode","description":{"kind":"markdown","value":"Provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on [`<input>`](https://developer.mozilla.org/docs/Web/HTML/Element/input \\"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\\") elements, but is usable on any element while in `[contenteditable](https://developer.mozilla.org/docs/Web/HTML/Global_attributes#attr-contenteditable)` mode."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode"}]},{"name":"is","description":{"kind":"markdown","value":"Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see [Using custom elements](https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements) for more details)."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/is"}]},{"name":"itemid","description":{"kind":"markdown","value":"The unique, global identifier of an item."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemid"}]},{"name":"itemprop","description":{"kind":"markdown","value":"Used to add properties to an item. Every HTML element may have an `itemprop` attribute specified, where an `itemprop` consists of a name and value pair."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemprop"}]},{"name":"itemref","description":{"kind":"markdown","value":"Properties that are not descendants of an element with the `itemscope` attribute can be associated with the item using an `itemref`. It provides a list of element ids (not `itemid`s) with additional properties elsewhere in the document."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemref"}]},{"name":"itemscope","description":{"kind":"markdown","value":"`itemscope` (usually) works along with `[itemtype](https://developer.mozilla.org/docs/Web/HTML/Global_attributes#attr-itemtype)` to specify that the HTML contained in a block is about a particular item. `itemscope` creates the Item and defines the scope of the `itemtype` associated with it. `itemtype` is a valid URL of a vocabulary (such as [schema.org](https://schema.org/)) that describes the item and its properties context."},"valueSet":"v","references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemscope"}]},{"name":"itemtype","description":{"kind":"markdown","value":"Specifies the URL of the vocabulary that will be used to define `itemprop`s (item properties) in the data structure. `[itemscope](https://developer.mozilla.org/docs/Web/HTML/Global_attributes#attr-itemscope)` is used to set the scope of where in the data structure the vocabulary set by `itemtype` will be active."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemtype"}]},{"name":"lang","description":{"kind":"markdown","value":"Helps define the language of an element: the language that non-editable elements are in, or the language that editable elements should be written in by the user. The attribute contains one “language tag” (made of hyphen-separated “language subtags”) in the format defined in [_Tags for Identifying Languages (BCP47)_](https://www.ietf.org/rfc/bcp/bcp47.txt). [**xml:lang**](#attr-xml:lang) has priority over it."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/lang"}]},{"name":"part","description":{"kind":"markdown","value":"A space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the [`::part`](https://developer.mozilla.org/docs/Web/CSS/::part \\"The ::part CSS pseudo-element represents any element within a shadow tree that has a matching part attribute.\\") pseudo-element."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/part"}]},{"name":"role","valueSet":"roles"},{"name":"slot","description":{"kind":"markdown","value":"Assigns a slot in a [shadow DOM](https://developer.mozilla.org/docs/Web/Web_Components/Shadow_DOM) shadow tree to an element: An element with a `slot` attribute is assigned to the slot created by the [`<slot>`](https://developer.mozilla.org/docs/Web/HTML/Element/slot \\"The HTML <slot> element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.\\") element whose `[name](https://developer.mozilla.org/docs/Web/HTML/Element/slot#attr-name)` attribute\'s value matches that `slot` attribute\'s value."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/slot"}]},{"name":"spellcheck","description":{"kind":"markdown","value":"An enumerated attribute defines whether the element may be checked for spelling errors. It may have the following values:\\n\\n*   `true`, which indicates that the element should be, if possible, checked for spelling errors;\\n*   `false`, which indicates that the element should not be checked for spelling errors."},"valueSet":"b","references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/spellcheck"}]},{"name":"style","description":{"kind":"markdown","value":"Contains [CSS](https://developer.mozilla.org/docs/Web/CSS) styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the [`<style>`](https://developer.mozilla.org/docs/Web/HTML/Element/style \\"The HTML <style> element contains style information for a document, or part of a document.\\") element have mainly the purpose of allowing for quick styling, for example for testing purposes."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/style"}]},{"name":"tabindex","description":{"kind":"markdown","value":"An integer attribute indicating if the element can take input focus (is _focusable_), if it should participate to sequential keyboard navigation, and if so, at what position. It can take several values:\\n\\n*   a _negative value_ means that the element should be focusable, but should not be reachable via sequential keyboard navigation;\\n*   `0` means that the element should be focusable and reachable via sequential keyboard navigation, but its relative order is defined by the platform convention;\\n*   a _positive value_ means that the element should be focusable and reachable via sequential keyboard navigation; the order in which the elements are focused is the increasing value of the [**tabindex**](#attr-tabindex). If several elements share the same tabindex, their relative order follows their relative positions in the document."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/tabindex"}]},{"name":"title","description":{"kind":"markdown","value":"Contains a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip."},"references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/title"}]},{"name":"translate","description":{"kind":"markdown","value":"An enumerated attribute that is used to specify whether an element\'s attribute values and the values of its [`Text`](https://developer.mozilla.org/docs/Web/API/Text \\"The Text interface represents the textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element\'s text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children.\\") node children are to be translated when the page is localized, or whether to leave them unchanged. It can have the following values:\\n\\n*   empty string and `yes`, which indicates that the element will be translated.\\n*   `no`, which indicates that the element will not be translated."},"valueSet":"y","references":[{"name":"MDN Reference","url":"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/translate"}]},{"name":"onabort","description":{"kind":"markdown","value":"The loading of a resource has been aborted."}},{"name":"onblur","description":{"kind":"markdown","value":"An element has lost focus (does not bubble)."}},{"name":"oncanplay","description":{"kind":"markdown","value":"The user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content."}},{"name":"oncanplaythrough","description":{"kind":"markdown","value":"The user agent can play the media up to its end without having to stop for further buffering of content."}},{"name":"onchange","description":{"kind":"markdown","value":"The change event is fired for <input>, <select>, and <textarea> elements when a change to the element\'s value is committed by the user."}},{"name":"onclick","description":{"kind":"markdown","value":"A pointing device button has been pressed and released on an element."}},{"name":"oncontextmenu","description":{"kind":"markdown","value":"The right button of the mouse is clicked (before the context menu is displayed)."}},{"name":"ondblclick","description":{"kind":"markdown","value":"A pointing device button is clicked twice on an element."}},{"name":"ondrag","description":{"kind":"markdown","value":"An element or text selection is being dragged (every 350ms)."}},{"name":"ondragend","description":{"kind":"markdown","value":"A drag operation is being ended (by releasing a mouse button or hitting the escape key)."}},{"name":"ondragenter","description":{"kind":"markdown","value":"A dragged element or text selection enters a valid drop target."}},{"name":"ondragleave","description":{"kind":"markdown","value":"A dragged element or text selection leaves a valid drop target."}},{"name":"ondragover","description":{"kind":"markdown","value":"An element or text selection is being dragged over a valid drop target (every 350ms)."}},{"name":"ondragstart","description":{"kind":"markdown","value":"The user starts dragging an element or text selection."}},{"name":"ondrop","description":{"kind":"markdown","value":"An element is dropped on a valid drop target."}},{"name":"ondurationchange","description":{"kind":"markdown","value":"The duration attribute has been updated."}},{"name":"onemptied","description":{"kind":"markdown","value":"The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it."}},{"name":"onended","description":{"kind":"markdown","value":"Playback has stopped because the end of the media was reached."}},{"name":"onerror","description":{"kind":"markdown","value":"A resource failed to load."}},{"name":"onfocus","description":{"kind":"markdown","value":"An element has received focus (does not bubble)."}},{"name":"onformchange"},{"name":"onforminput"},{"name":"oninput","description":{"kind":"markdown","value":"The value of an element changes or the content of an element with the attribute contenteditable is modified."}},{"name":"oninvalid","description":{"kind":"markdown","value":"A submittable element has been checked and doesn\'t satisfy its constraints."}},{"name":"onkeydown","description":{"kind":"markdown","value":"A key is pressed down."}},{"name":"onkeypress","description":{"kind":"markdown","value":"A key is pressed down and that key normally produces a character value (use input instead)."}},{"name":"onkeyup","description":{"kind":"markdown","value":"A key is released."}},{"name":"onload","description":{"kind":"markdown","value":"A resource and its dependent resources have finished loading."}},{"name":"onloadeddata","description":{"kind":"markdown","value":"The first frame of the media has finished loading."}},{"name":"onloadedmetadata","description":{"kind":"markdown","value":"The metadata has been loaded."}},{"name":"onloadstart","description":{"kind":"markdown","value":"Progress has begun."}},{"name":"onmousedown","description":{"kind":"markdown","value":"A pointing device button (usually a mouse) is pressed on an element."}},{"name":"onmousemove","description":{"kind":"markdown","value":"A pointing device is moved over an element."}},{"name":"onmouseout","description":{"kind":"markdown","value":"A pointing device is moved off the element that has the listener attached or off one of its children."}},{"name":"onmouseover","description":{"kind":"markdown","value":"A pointing device is moved onto the element that has the listener attached or onto one of its children."}},{"name":"onmouseup","description":{"kind":"markdown","value":"A pointing device button is released over an element."}},{"name":"onmousewheel"},{"name":"onmouseenter","description":{"kind":"markdown","value":"A pointing device is moved onto the element that has the listener attached."}},{"name":"onmouseleave","description":{"kind":"markdown","value":"A pointing device is moved off the element that has the listener attached."}},{"name":"onpause","description":{"kind":"markdown","value":"Playback has been paused."}},{"name":"onplay","description":{"kind":"markdown","value":"Playback has begun."}},{"name":"onplaying","description":{"kind":"markdown","value":"Playback is ready to start after having been paused or delayed due to lack of data."}},{"name":"onprogress","description":{"kind":"markdown","value":"In progress."}},{"name":"onratechange","description":{"kind":"markdown","value":"The playback rate has changed."}},{"name":"onreset","description":{"kind":"markdown","value":"A form is reset."}},{"name":"onresize","description":{"kind":"markdown","value":"The document view has been resized."}},{"name":"onreadystatechange","description":{"kind":"markdown","value":"The readyState attribute of a document has changed."}},{"name":"onscroll","description":{"kind":"markdown","value":"The document view or an element has been scrolled."}},{"name":"onseeked","description":{"kind":"markdown","value":"A seek operation completed."}},{"name":"onseeking","description":{"kind":"markdown","value":"A seek operation began."}},{"name":"onselect","description":{"kind":"markdown","value":"Some text is being selected."}},{"name":"onshow","description":{"kind":"markdown","value":"A contextmenu event was fired on/bubbled to an element that has a contextmenu attribute"}},{"name":"onstalled","description":{"kind":"markdown","value":"The user agent is trying to fetch media data, but data is unexpectedly not forthcoming."}},{"name":"onsubmit","description":{"kind":"markdown","value":"A form is submitted."}},{"name":"onsuspend","description":{"kind":"markdown","value":"Media data loading has been suspended."}},{"name":"ontimeupdate","description":{"kind":"markdown","value":"The time indicated by the currentTime attribute has been updated."}},{"name":"onvolumechange","description":{"kind":"markdown","value":"The volume has changed."}},{"name":"onwaiting","description":{"kind":"markdown","value":"Playback has stopped because of a temporary lack of data."}},{"name":"onpointercancel","description":{"kind":"markdown","value":"The pointer is unlikely to produce any more events."}},{"name":"onpointerdown","description":{"kind":"markdown","value":"The pointer enters the active buttons state."}},{"name":"onpointerenter","description":{"kind":"markdown","value":"Pointing device is moved inside the hit-testing boundary."}},{"name":"onpointerleave","description":{"kind":"markdown","value":"Pointing device is moved out of the hit-testing boundary."}},{"name":"onpointerlockchange","description":{"kind":"markdown","value":"The pointer was locked or released."}},{"name":"onpointerlockerror","description":{"kind":"markdown","value":"It was impossible to lock the pointer for technical reasons or because the permission was denied."}},{"name":"onpointermove","description":{"kind":"markdown","value":"The pointer changed coordinates."}},{"name":"onpointerout","description":{"kind":"markdown","value":"The pointing device moved out of hit-testing boundary or leaves detectable hover range."}},{"name":"onpointerover","description":{"kind":"markdown","value":"The pointing device is moved into the hit-testing boundary."}},{"name":"onpointerup","description":{"kind":"markdown","value":"The pointer leaves the active buttons state."}},{"name":"aria-activedescendant","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-activedescendant"}],"description":{"kind":"markdown","value":"Identifies the currently active element when DOM focus is on a [`composite`](https://www.w3.org/TR/wai-aria-1.1/#composite) widget, [`textbox`](https://www.w3.org/TR/wai-aria-1.1/#textbox), [`group`](https://www.w3.org/TR/wai-aria-1.1/#group), or [`application`](https://www.w3.org/TR/wai-aria-1.1/#application)."}},{"name":"aria-atomic","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-atomic"}],"description":{"kind":"markdown","value":"Indicates whether [assistive technologies](https://www.w3.org/TR/wai-aria-1.1/#dfn-assistive-technology) will present all, or only parts of, the changed region based on the change notifications defined by the [`aria-relevant`](https://www.w3.org/TR/wai-aria-1.1/#aria-relevant) attribute."}},{"name":"aria-autocomplete","valueSet":"autocomplete","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-autocomplete"}],"description":{"kind":"markdown","value":"Indicates whether inputting text could trigger display of one or more predictions of the user\'s intended value for an input and specifies how predictions would be presented if they are made."}},{"name":"aria-busy","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-busy"}],"description":{"kind":"markdown","value":"Indicates an element is being modified and that assistive technologies _MAY_ want to wait until the modifications are complete before exposing them to the user."}},{"name":"aria-checked","valueSet":"tristate","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-checked"}],"description":{"kind":"markdown","value":"Indicates the current \\"checked\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of checkboxes, radio buttons, and other [widgets](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.1/#aria-pressed) and [`aria-selected`](https://www.w3.org/TR/wai-aria-1.1/#aria-selected)."}},{"name":"aria-colcount","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-colcount"}],"description":{"kind":"markdown","value":"Defines the total number of columns in a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-colindex)."}},{"name":"aria-colindex","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-colindex"}],"description":{"kind":"markdown","value":"Defines an [element\'s](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) column index or position with respect to the total number of columns within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colcount`](https://www.w3.org/TR/wai-aria-1.1/#aria-colcount) and [`aria-colspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-colspan)."}},{"name":"aria-colspan","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-colspan"}],"description":{"kind":"markdown","value":"Defines the number of columns spanned by a cell or gridcell within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-colindex) and [`aria-rowspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan)."}},{"name":"aria-controls","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-controls"}],"description":{"kind":"markdown","value":"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) whose contents or presence are controlled by the current element. See related [`aria-owns`](https://www.w3.org/TR/wai-aria-1.1/#aria-owns)."}},{"name":"aria-current","valueSet":"current","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-current"}],"description":{"kind":"markdown","value":"Indicates the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that represents the current item within a container or set of related elements."}},{"name":"aria-describedby","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-describedby"}],"description":{"kind":"markdown","value":"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) that describes the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-labelledby`](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby)."}},{"name":"aria-disabled","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-disabled"}],"description":{"kind":"markdown","value":"Indicates that the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is [perceivable](https://www.w3.org/TR/wai-aria-1.1/#dfn-perceivable) but disabled, so it is not editable or otherwise [operable](https://www.w3.org/TR/wai-aria-1.1/#dfn-operable). See related [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) and [`aria-readonly`](https://www.w3.org/TR/wai-aria-1.1/#aria-readonly)."}},{"name":"aria-dropeffect","valueSet":"dropeffect","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-dropeffect"}],"description":{"kind":"markdown","value":"\\\\[Deprecated in ARIA 1.1\\\\] Indicates what functions can be performed when a dragged object is released on the drop target."}},{"name":"aria-errormessage","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage"}],"description":{"kind":"markdown","value":"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that provides an error message for the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-invalid`](https://www.w3.org/TR/wai-aria-1.1/#aria-invalid) and [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby)."}},{"name":"aria-expanded","valueSet":"u","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-expanded"}],"description":{"kind":"markdown","value":"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."}},{"name":"aria-flowto","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-flowto"}],"description":{"kind":"markdown","value":"Identifies the next [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) in an alternate reading order of content which, at the user\'s discretion, allows assistive technology to override the general default of reading in document source order."}},{"name":"aria-grabbed","valueSet":"u","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-grabbed"}],"description":{"kind":"markdown","value":"\\\\[Deprecated in ARIA 1.1\\\\] Indicates an element\'s \\"grabbed\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) in a drag-and-drop operation."}},{"name":"aria-haspopup","valueSet":"haspopup","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup"}],"description":{"kind":"markdown","value":"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element)."}},{"name":"aria-hidden","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-hidden"}],"description":{"kind":"markdown","value":"Indicates whether the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is exposed to an accessibility API. See related [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.1/#aria-disabled)."}},{"name":"aria-invalid","valueSet":"invalid","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-invalid"}],"description":{"kind":"markdown","value":"Indicates the entered value does not conform to the format expected by the application. See related [`aria-errormessage`](https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage)."}},{"name":"aria-label","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-label"}],"description":{"kind":"markdown","value":"Defines a string value that labels the current element. See related [`aria-labelledby`](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby)."}},{"name":"aria-labelledby","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby"}],"description":{"kind":"markdown","value":"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) that labels the current element. See related [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby)."}},{"name":"aria-level","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-level"}],"description":{"kind":"markdown","value":"Defines the hierarchical level of an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) within a structure."}},{"name":"aria-live","valueSet":"live","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-live"}],"description":{"kind":"markdown","value":"Indicates that an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) will be updated, and describes the types of updates the [user agents](https://www.w3.org/TR/wai-aria-1.1/#dfn-user-agent), [assistive technologies](https://www.w3.org/TR/wai-aria-1.1/#dfn-assistive-technology), and user can expect from the [live region](https://www.w3.org/TR/wai-aria-1.1/#dfn-live-region)."}},{"name":"aria-modal","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-modal"}],"description":{"kind":"markdown","value":"Indicates whether an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is modal when displayed."}},{"name":"aria-multiline","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-multiline"}],"description":{"kind":"markdown","value":"Indicates whether a text box accepts multiple lines of input or only a single line."}},{"name":"aria-multiselectable","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-multiselectable"}],"description":{"kind":"markdown","value":"Indicates that the user may select more than one item from the current selectable descendants."}},{"name":"aria-orientation","valueSet":"orientation","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-orientation"}],"description":{"kind":"markdown","value":"Indicates whether the element\'s orientation is horizontal, vertical, or unknown/ambiguous."}},{"name":"aria-owns","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-owns"}],"description":{"kind":"markdown","value":"Identifies an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) in order to define a visual, functional, or contextual parent/child [relationship](https://www.w3.org/TR/wai-aria-1.1/#dfn-relationship) between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related [`aria-controls`](https://www.w3.org/TR/wai-aria-1.1/#aria-controls)."}},{"name":"aria-placeholder","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-placeholder"}],"description":{"kind":"markdown","value":"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."}},{"name":"aria-posinset","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-posinset"}],"description":{"kind":"markdown","value":"Defines an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element)\'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-setsize`](https://www.w3.org/TR/wai-aria-1.1/#aria-setsize)."}},{"name":"aria-pressed","valueSet":"tristate","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-pressed"}],"description":{"kind":"markdown","value":"Indicates the current \\"pressed\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of toggle buttons. See related [`aria-checked`](https://www.w3.org/TR/wai-aria-1.1/#aria-checked) and [`aria-selected`](https://www.w3.org/TR/wai-aria-1.1/#aria-selected)."}},{"name":"aria-readonly","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-readonly"}],"description":{"kind":"markdown","value":"Indicates that the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is not editable, but is otherwise [operable](https://www.w3.org/TR/wai-aria-1.1/#dfn-operable). See related [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.1/#aria-disabled)."}},{"name":"aria-relevant","valueSet":"relevant","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-relevant"}],"description":{"kind":"markdown","value":"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related [`aria-atomic`](https://www.w3.org/TR/wai-aria-1.1/#aria-atomic)."}},{"name":"aria-required","valueSet":"b","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-required"}],"description":{"kind":"markdown","value":"Indicates that user input is required on the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) before a form may be submitted."}},{"name":"aria-roledescription","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription"}],"description":{"kind":"markdown","value":"Defines a human-readable, author-localized description for the [role](https://www.w3.org/TR/wai-aria-1.1/#dfn-role) of an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element)."}},{"name":"aria-rowcount","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-rowcount"}],"description":{"kind":"markdown","value":"Defines the total number of rows in a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex)."}},{"name":"aria-rowindex","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex"}],"description":{"kind":"markdown","value":"Defines an [element\'s](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) row index or position with respect to the total number of rows within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowcount`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowcount) and [`aria-rowspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan)."}},{"name":"aria-rowspan","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan"}],"description":{"kind":"markdown","value":"Defines the number of rows spanned by a cell or gridcell within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex) and [`aria-colspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-colspan)."}},{"name":"aria-selected","valueSet":"u","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-selected"}],"description":{"kind":"markdown","value":"Indicates the current \\"selected\\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of various [widgets](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-checked`](https://www.w3.org/TR/wai-aria-1.1/#aria-checked) and [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.1/#aria-pressed)."}},{"name":"aria-setsize","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-setsize"}],"description":{"kind":"markdown","value":"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-posinset`](https://www.w3.org/TR/wai-aria-1.1/#aria-posinset)."}},{"name":"aria-sort","valueSet":"sort","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-sort"}],"description":{"kind":"markdown","value":"Indicates if items in a table or grid are sorted in ascending or descending order."}},{"name":"aria-valuemax","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-valuemax"}],"description":{"kind":"markdown","value":"Defines the maximum allowed value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget)."}},{"name":"aria-valuemin","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-valuemin"}],"description":{"kind":"markdown","value":"Defines the minimum allowed value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget)."}},{"name":"aria-valuenow","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-valuenow"}],"description":{"kind":"markdown","value":"Defines the current value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-valuetext`](https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext)."}},{"name":"aria-valuetext","references":[{"name":"WAI-ARIA Reference","url":"https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext"}],"description":{"kind":"markdown","value":"Defines the human readable text alternative of [`aria-valuenow`](https://www.w3.org/TR/wai-aria-1.1/#aria-valuenow) for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget)."}},{"name":"aria-details","description":{"kind":"markdown","value":"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that provides a detailed, extended description for the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby)."}},{"name":"aria-keyshortcuts","description":{"kind":"markdown","value":"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."}}],"valueSets":[{"name":"b","values":[{"name":"true"},{"name":"false"}]},{"name":"u","values":[{"name":"true"},{"name":"false"},{"name":"undefined"}]},{"name":"o","values":[{"name":"on"},{"name":"off"}]},{"name":"y","values":[{"name":"yes"},{"name":"no"}]},{"name":"w","values":[{"name":"soft"},{"name":"hard"}]},{"name":"d","values":[{"name":"ltr"},{"name":"rtl"},{"name":"auto"}]},{"name":"m","values":[{"name":"get","description":{"kind":"markdown","value":"Corresponds to the HTTP [GET method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3); form data are appended to the `action` attribute URI with a \'?\' as separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters."}},{"name":"post","description":{"kind":"markdown","value":"Corresponds to the HTTP [POST method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5); form data are included in the body of the form and sent to the server."}},{"name":"dialog","description":{"kind":"markdown","value":"Use when the form is inside a [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element to close the dialog when submitted."}}]},{"name":"fm","values":[{"name":"get"},{"name":"post"}]},{"name":"s","values":[{"name":"row"},{"name":"col"},{"name":"rowgroup"},{"name":"colgroup"}]},{"name":"t","values":[{"name":"hidden"},{"name":"text"},{"name":"search"},{"name":"tel"},{"name":"url"},{"name":"email"},{"name":"password"},{"name":"datetime"},{"name":"date"},{"name":"month"},{"name":"week"},{"name":"time"},{"name":"datetime-local"},{"name":"number"},{"name":"range"},{"name":"color"},{"name":"checkbox"},{"name":"radio"},{"name":"file"},{"name":"submit"},{"name":"image"},{"name":"reset"},{"name":"button"}]},{"name":"im","values":[{"name":"verbatim"},{"name":"latin"},{"name":"latin-name"},{"name":"latin-prose"},{"name":"full-width-latin"},{"name":"kana"},{"name":"kana-name"},{"name":"katakana"},{"name":"numeric"},{"name":"tel"},{"name":"email"},{"name":"url"}]},{"name":"bt","values":[{"name":"button"},{"name":"submit"},{"name":"reset"},{"name":"menu"}]},{"name":"lt","values":[{"name":"1"},{"name":"a"},{"name":"A"},{"name":"i"},{"name":"I"}]},{"name":"mt","values":[{"name":"context"},{"name":"toolbar"}]},{"name":"mit","values":[{"name":"command"},{"name":"checkbox"},{"name":"radio"}]},{"name":"et","values":[{"name":"application/x-www-form-urlencoded"},{"name":"multipart/form-data"},{"name":"text/plain"}]},{"name":"tk","values":[{"name":"subtitles"},{"name":"captions"},{"name":"descriptions"},{"name":"chapters"},{"name":"metadata"}]},{"name":"pl","values":[{"name":"none"},{"name":"metadata"},{"name":"auto"}]},{"name":"sh","values":[{"name":"circle"},{"name":"default"},{"name":"poly"},{"name":"rect"}]},{"name":"xo","values":[{"name":"anonymous"},{"name":"use-credentials"}]},{"name":"target","values":[{"name":"_self"},{"name":"_blank"},{"name":"_parent"},{"name":"_top"}]},{"name":"sb","values":[{"name":"allow-forms"},{"name":"allow-modals"},{"name":"allow-pointer-lock"},{"name":"allow-popups"},{"name":"allow-popups-to-escape-sandbox"},{"name":"allow-same-origin"},{"name":"allow-scripts"},{"name":"allow-top-navigation"}]},{"name":"tristate","values":[{"name":"true"},{"name":"false"},{"name":"mixed"},{"name":"undefined"}]},{"name":"inputautocomplete","values":[{"name":"additional-name"},{"name":"address-level1"},{"name":"address-level2"},{"name":"address-level3"},{"name":"address-level4"},{"name":"address-line1"},{"name":"address-line2"},{"name":"address-line3"},{"name":"bday"},{"name":"bday-year"},{"name":"bday-day"},{"name":"bday-month"},{"name":"billing"},{"name":"cc-additional-name"},{"name":"cc-csc"},{"name":"cc-exp"},{"name":"cc-exp-month"},{"name":"cc-exp-year"},{"name":"cc-family-name"},{"name":"cc-given-name"},{"name":"cc-name"},{"name":"cc-number"},{"name":"cc-type"},{"name":"country"},{"name":"country-name"},{"name":"current-password"},{"name":"email"},{"name":"family-name"},{"name":"fax"},{"name":"given-name"},{"name":"home"},{"name":"honorific-prefix"},{"name":"honorific-suffix"},{"name":"impp"},{"name":"language"},{"name":"mobile"},{"name":"name"},{"name":"new-password"},{"name":"nickname"},{"name":"off"},{"name":"on"},{"name":"organization"},{"name":"organization-title"},{"name":"pager"},{"name":"photo"},{"name":"postal-code"},{"name":"sex"},{"name":"shipping"},{"name":"street-address"},{"name":"tel-area-code"},{"name":"tel"},{"name":"tel-country-code"},{"name":"tel-extension"},{"name":"tel-local"},{"name":"tel-local-prefix"},{"name":"tel-local-suffix"},{"name":"tel-national"},{"name":"transaction-amount"},{"name":"transaction-currency"},{"name":"url"},{"name":"username"},{"name":"work"}]},{"name":"autocomplete","values":[{"name":"inline"},{"name":"list"},{"name":"both"},{"name":"none"}]},{"name":"current","values":[{"name":"page"},{"name":"step"},{"name":"location"},{"name":"date"},{"name":"time"},{"name":"true"},{"name":"false"}]},{"name":"dropeffect","values":[{"name":"copy"},{"name":"move"},{"name":"link"},{"name":"execute"},{"name":"popup"},{"name":"none"}]},{"name":"invalid","values":[{"name":"grammar"},{"name":"false"},{"name":"spelling"},{"name":"true"}]},{"name":"live","values":[{"name":"off"},{"name":"polite"},{"name":"assertive"}]},{"name":"orientation","values":[{"name":"vertical"},{"name":"horizontal"},{"name":"undefined"}]},{"name":"relevant","values":[{"name":"additions"},{"name":"removals"},{"name":"text"},{"name":"all"},{"name":"additions text"}]},{"name":"sort","values":[{"name":"ascending"},{"name":"descending"},{"name":"none"},{"name":"other"}]},{"name":"roles","values":[{"name":"alert"},{"name":"alertdialog"},{"name":"button"},{"name":"checkbox"},{"name":"dialog"},{"name":"gridcell"},{"name":"link"},{"name":"log"},{"name":"marquee"},{"name":"menuitem"},{"name":"menuitemcheckbox"},{"name":"menuitemradio"},{"name":"option"},{"name":"progressbar"},{"name":"radio"},{"name":"scrollbar"},{"name":"searchbox"},{"name":"slider"},{"name":"spinbutton"},{"name":"status"},{"name":"switch"},{"name":"tab"},{"name":"tabpanel"},{"name":"textbox"},{"name":"timer"},{"name":"tooltip"},{"name":"treeitem"},{"name":"combobox"},{"name":"grid"},{"name":"listbox"},{"name":"menu"},{"name":"menubar"},{"name":"radiogroup"},{"name":"tablist"},{"name":"tree"},{"name":"treegrid"},{"name":"application"},{"name":"article"},{"name":"cell"},{"name":"columnheader"},{"name":"definition"},{"name":"directory"},{"name":"document"},{"name":"feed"},{"name":"figure"},{"name":"group"},{"name":"heading"},{"name":"img"},{"name":"list"},{"name":"listitem"},{"name":"math"},{"name":"none"},{"name":"note"},{"name":"presentation"},{"name":"region"},{"name":"row"},{"name":"rowgroup"},{"name":"rowheader"},{"name":"separator"},{"name":"table"},{"name":"term"},{"name":"text"},{"name":"toolbar"},{"name":"banner"},{"name":"complementary"},{"name":"contentinfo"},{"name":"form"},{"name":"main"},{"name":"navigation"},{"name":"region"},{"name":"search"},{"name":"doc-abstract"},{"name":"doc-acknowledgments"},{"name":"doc-afterword"},{"name":"doc-appendix"},{"name":"doc-backlink"},{"name":"doc-biblioentry"},{"name":"doc-bibliography"},{"name":"doc-biblioref"},{"name":"doc-chapter"},{"name":"doc-colophon"},{"name":"doc-conclusion"},{"name":"doc-cover"},{"name":"doc-credit"},{"name":"doc-credits"},{"name":"doc-dedication"},{"name":"doc-endnote"},{"name":"doc-endnotes"},{"name":"doc-epigraph"},{"name":"doc-epilogue"},{"name":"doc-errata"},{"name":"doc-example"},{"name":"doc-footnote"},{"name":"doc-foreword"},{"name":"doc-glossary"},{"name":"doc-glossref"},{"name":"doc-index"},{"name":"doc-introduction"},{"name":"doc-noteref"},{"name":"doc-notice"},{"name":"doc-pagebreak"},{"name":"doc-pagelist"},{"name":"doc-part"},{"name":"doc-preface"},{"name":"doc-prologue"},{"name":"doc-pullquote"},{"name":"doc-qna"},{"name":"doc-subtitle"},{"name":"doc-tip"},{"name":"doc-toc"}]},{"name":"metanames","values":[{"name":"application-name"},{"name":"author"},{"name":"description"},{"name":"format-detection"},{"name":"generator"},{"name":"keywords"},{"name":"publisher"},{"name":"referrer"},{"name":"robots"},{"name":"theme-color"},{"name":"viewport"}]},{"name":"haspopup","values":[{"name":"false","description":{"kind":"markdown","value":"(default) Indicates the element does not have a popup."}},{"name":"true","description":{"kind":"markdown","value":"Indicates the popup is a menu."}},{"name":"menu","description":{"kind":"markdown","value":"Indicates the popup is a menu."}},{"name":"listbox","description":{"kind":"markdown","value":"Indicates the popup is a listbox."}},{"name":"tree","description":{"kind":"markdown","value":"Indicates the popup is a tree."}},{"name":"grid","description":{"kind":"markdown","value":"Indicates the popup is a grid."}},{"name":"dialog","description":{"kind":"markdown","value":"Indicates the popup is a dialog."}}]},{"name":"decoding","values":[{"name":"sync"},{"name":"async"},{"name":"auto"}]},{"name":"loading","values":[{"name":"eager"},{"name":"lazy"}]},{"name":"referrerpolicy","values":[{"name":"no-referrer"},{"name":"no-referrer-when-downgrade"},{"name":"origin"},{"name":"origin-when-cross-origin"},{"name":"same-origin"},{"name":"strict-origin"},{"name":"strict-origin-when-cross-origin"},{"name":"unsafe-url"}]}]}');

/***/ }),

/***/ 2177:
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@shopify/theme-language-server-common","version":"2.9.0","main":"dist/index.js","types":"dist/index.d.ts","author":"CP Clermont <cp.clermont@shopify.com>","homepage":"https://github.com/Shopify/theme-tools/tree/main/packages/theme-language-server-common#readme","repository":{"type":"git","url":"https://github.com/Shopify/theme-tools.git","directory":"packages/theme-language-server-common"},"bugs":{"url":"https://github.com/Shopify/theme-tools/issues"},"license":"MIT","publishConfig":{"access":"public","@shopify:registry":"https://registry.npmjs.org"},"scripts":{"build":"yarn build:ts","build:ci":"yarn build","build:ts":"tsc -b src/tsconfig.build.json","dev":"tsc -b src --watch","test":"vitest","type-check":"tsc --noEmit -p src/tsconfig.json"},"dependencies":{"@shopify/liquid-html-parser":"^2.5.0","@shopify/theme-check-common":"3.9.0","@vscode/web-custom-data":"^0.4.6","vscode-json-languageservice":"^5.3.10","vscode-languageserver":"^8.0.2","vscode-languageserver-textdocument":"^1.0.8","vscode-uri":"^3.0.7"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;

Object.defineProperty(exports, "__esModule", ({ value: true }));
const theme_check_common_1 = __webpack_require__(5309);
const theme_language_server_browser_1 = __webpack_require__(4842);
const VsCodeFileSystem_1 = __webpack_require__(8043);
const tags = [{"category":"theme","deprecated":false,"deprecation_reason":"","description":"The content_for tag requires a type to indicate whether it will render a single static block or a number of theme blocks defined in the JSON templates or section groups.\n\n- [`blocks`](/docs/api/liquid/tags/content_for#content_for-blocks)\n- [`block`](/docs/api/liquid/tags/content_for#content_for-block)","parameters":[],"summary":"Creates a surface for rendering a block or blocks.","name":"content_for","syntax":"{% content_for 'blocks' %}\n{% content_for 'block', type: \"\", id: \"\" %}","syntax_keywords":[],"examples":[{"name":"blocks","description":"Renders block elements within sections or other blocks as configured in the JSON template or section groups. See [theme blocks](/themes/architecture/blocks/theme-blocks) to see how to create theme blocks that can be used this way.\n","syntax":"{% content_for \"blocks\" %}\n","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true},{"name":"block","description":"Renders a static theme block within `sections` or `theme blocks`.\n","syntax":"{% content_for \"block\", type: \"button\", id: \"static-block-1\" %}\n","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"html","deprecated":false,"deprecation_reason":"","description":"Because there are many different form types available in Shopify themes, the `form` tag requires a type. Depending on the\nform type, an additional parameter might be required. You can specify the following form types:\n\n- [`activate_customer_password`](/docs/api/liquid/tags/form#form-activate_customer_password)\n- [`cart`](/docs/api/liquid/tags/form#form-cart)\n- [`contact`](/docs/api/liquid/tags/form#form-contact)\n- [`create_customer`](/docs/api/liquid/tags/form#form-create_customer)\n- [`currency`](/docs/api/liquid/tags/form#form-currency)\n- [`customer`](/docs/api/liquid/tags/form#form-customer)\n- [`customer_address`](/docs/api/liquid/tags/form#form-customer_address)\n- [`customer_login`](/docs/api/liquid/tags/form#form-customer_login)\n- [`guest_login`](/docs/api/liquid/tags/form#form-guest_login)\n- [`localization`](/docs/api/liquid/tags/form#form-localization)\n- [`new_comment`](/docs/api/liquid/tags/form#form-new_comment)\n- [`product`](/docs/api/liquid/tags/form#form-product)\n- [`recover_customer_password`](/docs/api/liquid/tags/form#form-recover_customer_password)\n- [`reset_customer_password`](/docs/api/liquid/tags/form#form-reset_customer_password)\n- [`storefront_password`](/docs/api/liquid/tags/form#form-storefront_password)","parameters":[{"description":"The desired URL to redirect to when the form submits.","name":"return_to","positional":true,"required":false,"types":["string"]}],"summary":"Generates an HTML `&lt;form&gt;` tag, including any required `&lt;input&gt;` tags to submit the form to a specific endpoint.","name":"form","syntax":"{% form 'form_type' %}\n  content\n{% endform %}","syntax_keywords":[{"keyword":"form_type","description":"The name of the desired form type"},{"keyword":"content","description":"The form contents"}],"examples":[{"name":"activate_customer_password","description":"Generates a form for activating a customer account.\nTo learn more about using this form, and its contents, refer to the [`customers/activate_account` template](/themes/architecture/templates/customers-activate-account#content).\n","syntax":"{% form 'activate_customer_password', article %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'activate_customer_password' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"cart","description":"Generates a form for creating a checkout based on the items currently in the cart. The `cart` form requires a [`cart` object](/docs/api/liquid/objects/cart) as a parameter.\nTo learn more about using the cart form in your theme, refer to the [`cart` template](/themes/architecture/templates/cart#proceed-to-checkout).\n","syntax":"{% form 'cart', cart %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'cart', cart %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"contact","description":"Generates a form for submitting an email to the merchant. To learn more about using this form in your theme, refer to [Add a contact form to your theme](/themes/customer-engagement/add-contact-form).\n\n&gt; Tip:\n&gt; To learn more about the merchant experience of receiving submissions, refer to [the Shopify Help Center](https://help.shopify.com/manual/online-store/themes/customizing-themes/add-contact-page#view-contact-form-submissions).\n","syntax":"{% form 'contact' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'contact' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"create_customer","description":"Generates a form for creating a new customer account.\nTo learn more about using this form, and its contents, refer to the [`customers/register` template](/themes/architecture/templates/customers-register#content).\n","syntax":"{% form 'create_customer' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'create_customer' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"currency","description":"&gt; Deprecated:\n&gt; The `currency` form is deprecated and has been replaced by the [`localization` form](/docs/api/liquid/tags/form#form-localization).\n\nGenerates a form for customers to select their preferred currency.\n\n&gt; Tip:\n&gt; Use the [`currency_selector` filter](/docs/api/liquid/filters/currency_selector) to include a currency selector inside the form.\n","syntax":"{% form 'currency' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'currency' %}\n  {{ form | currency_selector }}\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"customer","description":"Generates a form for creating a new customer without registering a new account. This form is useful for collecting customer information when you don't want customers to log in to your store, such as building a list of emails from a newsletter signup.\n\n&gt; Tip:\n&gt; To generate a form that registers a customer account, use the [`create_customer` form](/docs/api/liquid/tags/form#form-create_customer).\n\nTo learn more about using this form, and its contents, refer to [Email consent](/themes/customer-engagement/email-consent#newsletter-sign-up-form).\n","syntax":"{% form 'customer' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'customer' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"customer_address","description":"Generates a form for creating a new address on a customer account, or editing an existing one. The `customer_address` form requires a specific parameter, depending on whether a new address is being created or an existing one is being edited:\n\n| Parameter value | Use-case |\n| --- | --- |\n| `customer.new_address` | When a new address is being created. |\n| `address` | When an existing address is being edited. |\n\nTo learn more about using this form, and its contents, refer to the [`customers/addresses` template](/themes/architecture/templates/customers-addresses#content).\n","syntax":"{% form 'customer_address', address_type %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'customer_address', customer.new_address %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"customer_login","description":"Generates a form for logging into a customer account.\nTo learn more about using this form, and its contents, refer to the [`customers/login` template](/themes/architecture/templates/customers-login#the-customer-login-form).\n","syntax":"{% form 'customer_login' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'customer_login' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"guest_login","description":"Generates a form, for use in the [`customers/login` template](/themes/architecture/templates/customers-login), that directs customers back to their checkout session as a guest instead of logging in to an account.\nTo learn more about using this form, and its contents, refer to [Offer guest checkout](/themes/architecture/templates/customers-login#offer-guest-checkout).\n","syntax":"{% form 'guest_login' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'guest_login' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"localization","description":"Generates a form for customers to select their preferred country so that they're shown the appropriate language and currency. The `localization` form can contain one of two selectors:\n\n- A country selector\n- A language selector\n\n&gt; Note:\n&gt; The `localization` form replaces the deprecated [`currency` form](/docs/api/liquid/tags/form#form-currency).\n\nTo learn more about using this form, and its contents, refer to [Support multiple currencies and languages](/themes/internationalization/multiple-currencies-languages).\n","syntax":"{% form 'localization' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'localization' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"new_comment","description":"Generates a form for creating a new comment on an article. The `new_comment` form requires an [`article` object](/docs/api/liquid/objects/article) as a parameter.\nTo learn more about using this form, and its contents, refer to the [`article` template](/themes/architecture/templates/article#the-comment-form).\n","syntax":"{% form 'new_comment', article %}\n  form_content\n{% endform %}\n","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{% form 'new_comment', article %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"product","description":"Generates a form for adding a product variant to the cart. The `product` form requires a [`product` object](/docs/api/liquid/objects/product) as a parameter.\nTo learn more about using this form, and its contents, refer to the [`product` template](/themes/architecture/templates/product#the-product-form).\n","syntax":"{% form 'product', product %}\n  form_content\n{% endform %}\n","path":"/products/health-potion","raw_liquid":"{% form 'product', product %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"recover_customer_password","description":"Generates a form, for use in the [`customers/login` template](/themes/architecture/templates/customers-login), for a customer to recover a lost or forgotten password.\nTo learn more about using this form, and its contents, refer to [Provide a \"Forgot your password\" option](/themes/architecture/templates/customers-login#provide-a-forgot-your-password-option).\n","syntax":"{% form 'recover_customer_password' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'recover_customer_password' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"reset_customer_password","description":"Generates a form for a customer to reset their password.\nTo learn more about using this form, and its contents, refer to the [`customers/reset_password` template](/themes/architecture/templates/customers-reset-password#content).\n","syntax":"{% form 'reset_customer_password' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'reset_customer_password' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"storefront_password","description":"Generates a form for entering a password protected storefront.\nTo learn more about using this form, and its contents, refer to the [`password` template](/themes/architecture/templates/password#the-password-form).\n","syntax":"{% form 'storefront_password' %}\n  form_content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'storefront_password' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"return_to","description":"By default, each form type redirects customers to a specific page after the form submits. For example, the `product` form redirects to the cart page.\n\nThe `return_to` parameter allows you to specify a URL to redirect to. This can be done with the following values:\n\n| Value | Description |\n| --- | --- |\n| `back` | Redirect back to the same page that the customer was on before submitting the form. |\n| A relative path | A specific URL path. For example `/collections/all`. |\n| A [`routes` attribute](/docs/api/liquid/objects/routes) | For example, `routes.root_url` |\n","syntax":"{% form 'form_type', return_to: string %}\n  content\n{% endform %}\n","path":"/","raw_liquid":"{% form 'customer_login', return_to: routes.root_url %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"HTML attributes","description":"You can specify [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attributes) by adding a parameter that matches the attribute name with `data-` prepended, and the desired value.\n","syntax":"{% form 'form_type', attribute: string %}\n  content\n{% endform %}\n","path":"/products/health-potion","raw_liquid":"{% form \"product\", product, id: 'custom-id', class: 'custom-class', data-example: '100' %}\n  &lt;!-- form content --&gt;\n{% endform %}","parameter":true,"display_type":"text","show_data_tab":true}]},{"category":"theme","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"summary":"Specify which [layout](/themes/architecture/layouts) to use.","name":"layout","syntax":"{% layout name %}","syntax_keywords":[{"keyword":"name","description":"The name of the layout file you want to use, wrapped in quotes, or `none` for no layout."}],"examples":[{"name":"","description":"By default, the `theme.liquid` layout is used. The `layout` tag allows you to specify an alternate layout, or use no layout.\n\n```liquid\n{% layout 'full-width' %}\n{% layout none %}\n```\n","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"variable","deprecated":false,"deprecation_reason":"","description":"You can create variables of any [basic type](/docs/api/liquid/basics#types), [object](/docs/api/liquid/objects), or object property.","parameters":[],"summary":"Creates a new variable.","name":"assign","syntax":"{% assign variable_name = value %}","syntax_keywords":[{"keyword":"variable_name","description":"The name of the variable being created."},{"keyword":"value","description":"The value you want to assign to the variable."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{%- assign product_title = product.title | upcase -%}\n\n{{ product_title }}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"iteration","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"summary":"Stops a [`for` loop](/docs/api/liquid/tags/for) from iterating.","name":"break","syntax":"{% break %}","syntax_keywords":[],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% for i in (1..5) -%}\n  {%- if i == 4 -%}\n    {% break %}\n  {%- else -%}\n    {{ i }}\n  {%- endif -%}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"variable","deprecated":false,"deprecation_reason":"","description":"You can create complex strings with Liquid logic and variables.","parameters":[],"summary":"Creates a new variable with a string value.","name":"capture","syntax":"{% capture variable %}\n  value\n{% endcapture %}","syntax_keywords":[{"keyword":"variable","description":"The name of the variable being created."},{"keyword":"value","description":"The value you want to assign to the variable."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{%- assign up_title = product.title | upcase -%}\n{%- assign down_title = product.title | downcase -%}\n{%- assign show_up_title = true -%}\n\n{%- capture title -%}\n  {% if show_up_title -%}\n    Upcase title: {{ up_title }}\n  {%- else -%}\n    Downcase title: {{ down_title }}\n  {%- endif %}\n{%- endcapture %}\n\n{{ title }}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"conditional","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"summary":"Renders a specific expression depending on the value of a specific variable.","name":"case","syntax":"{% case variable %}\n  {% when first_value %}\n    first_expression\n  {% when second_value %}\n    second_expression\n  {% else %}\n    third_expression\n{% endcase %}","syntax_keywords":[{"keyword":"variable","description":"The name of the variable you want to base your case statement on."},{"keyword":"first_value","description":"A specific value to check for."},{"keyword":"second_value","description":"A specific value to check for."},{"keyword":"first_expression","description":"An expression to be rendered when the variable's value matches `first_value`."},{"keyword":"second_expression","description":"An expression to be rendered when the variable's value matches `second_value`."},{"keyword":"third_expression","description":"An expression to be rendered when the variable's value has no match."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{% case product.type %}\n  {% when 'Health' %}\n    This is a health potion.\n  {% when 'Love' %}\n    This is a love potion.\n  {% else %}\n    This is a potion.\n{% endcase %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Multiple values","description":"A `when` tag can accept multiple values. When multiple values are provided, the expression is returned when the variable matches any of the values inside of the tag.\nProvide the values as a comma-separated list, or separate them using an `or` operator.\n","syntax":"{% case variable %}\n  {% when first_value or second_value or third_value %}\n    first_expression\n  {% when fourth_value, fifth_value, sixth_value %}\n    second_expression\n  {% else %}\n    third_expression\n{% endcase %}\n","path":"/products/health-potion","raw_liquid":"{% case product.type %}\n  {% when 'Love' or 'Luck' %}\n    This is a love or luck potion.\n  {% when 'Strength','Health' %}\n    This is a strength or health potion.\n  {% else %}\n    This is a potion.\n{% endcase %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"syntax","deprecated":false,"deprecation_reason":"","description":"Any text inside `comment` tags won't be output, and any Liquid code will be parsed, but not executed.","parameters":[],"summary":"Prevents an expression from being rendered or output.","name":"comment","syntax":"{% comment %}\n  content\n{% endcomment %}","syntax_keywords":[{"keyword":"content","description":"The content of the comment."}],"examples":[{"name":"Inline comments","description":"Inline comments prevent an expression inside of a tag `{% %}` from being rendered or output.\n\nYou can use inline comment tags to annotate your code, or to temporarily prevent logic in your code from executing.\n\nYou can create multi-line inline comments. However, each line in the tag must begin with a `#`, or a syntax error will occur.\n","syntax":"{% # content %}","path":"/","raw_liquid":"{% # this is a comment %}\n\n{% # for i in (1..3) -%}\n  {{ i }}\n{% # endfor %}\n\n{%\n  ###############################\n  # This is a comment\n  # across multiple lines\n  ###############################\n%}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Inline comments inside `liquid` tags","description":"You can use inline comment tags inside [`liquid` tags](/docs/api/liquid/tags/liquid). The tag must be used for each line that you want to comment.\n","syntax":"","path":"/","raw_liquid":"{% liquid\n  # this is a comment\n  assign topic = 'Learning about comments!'\n  echo topic\n%}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"iteration","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"summary":"Causes a [`for` loop](/docs/api/liquid/tags/for) to skip to the next iteration.","name":"continue","syntax":"{% continue %}","syntax_keywords":[],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% for i in (1..5) -%}\n  {%- if i == 4 -%}\n    {% continue %}\n  {%- else -%}\n    {{ i }}\n  {%- endif -%}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"iteration","deprecated":false,"deprecation_reason":"","description":"The `cycle` tag must be used inside a `for` loop.\n\n&gt; Tip:\n&gt; Use the `cycle` tag to output text in a predictable pattern. For example, to apply odd/even classes to rows in a table.","parameters":[],"summary":"Loops through a group of strings and outputs them one at a time for each iteration of a [`for` loop](/docs/api/liquid/tags/for).","name":"cycle","syntax":"{% cycle string, string, ... %}","syntax_keywords":[],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% for i in (1..4) -%}\n  {% cycle 'one', 'two', 'three' %}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Create unique cycle groups","description":"If you include multiple `cycle` tags with the same parameters, in the same template, then each set of tags is treated as the same group. This means that it's possible for a `cycle` tag to output any of the provided strings, instead of always starting at the first string.\nTo account for this, you can specify a group name for each `cycle` tag.\n","syntax":"{% cycle string: string, string, ... %}","path":"/","raw_liquid":"&lt;!-- Iteration 1 --&gt;\n{% for i in (1..4) -%}\n  {% cycle 'one', 'two', 'three' %}\n{%- endfor %}\n\n&lt;!-- Iteration 2 --&gt;\n{% for i in (1..4) -%}\n  {% cycle 'one', 'two', 'three' %}\n{%- endfor %}\n\n&lt;!-- Iteration 3 --&gt;\n{% for i in (1..4) -%}\n  {% cycle 'group_1': 'one', 'two', 'three' %}\n{%- endfor %}\n\n&lt;!-- Iteration 4 --&gt;\n{% for i in (1..4) -%}\n  {% cycle 'group_2': 'one', 'two', 'three' %}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"variable","deprecated":false,"deprecation_reason":"","description":"Variables that are declared with `decrement` are unique to the [layout](/themes/architecture/layouts), [template](/themes/architecture/templates),\nor [section](/themes/architecture/sections) file that they're created in. However, the variable is shared across\n[snippets](/themes/architecture#snippets) included in the file.\n\nSimilarly, variables that are created with `decrement` are independent from those created with [`assign`](/docs/api/liquid/tags/assign)\nand [`capture`](/docs/api/liquid/tags/capture). However, `decrement` and [`increment`](/docs/api/liquid/tags/increment) share\nvariables.","parameters":[],"summary":"Creates a new variable, with a default value of -1, that's decreased by 1 with each subsequent call.","name":"decrement","syntax":"{% decrement variable_name %}","syntax_keywords":[{"keyword":"variable_name","description":"The name of the variable being decremented."}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% decrement variable %}\n{% decrement variable %}\n{% decrement variable %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"syntax","deprecated":false,"deprecation_reason":"","description":"Using the `echo` tag is the same as wrapping an expression in curly brackets (`{{` and `}}`). However, unlike the curly\nbracket method, you can use the `echo` tag inside [`liquid` tags](/docs/api/liquid/tags/liquid).\n\n&gt; Tip:\n&gt; You can use [filters](/docs/api/liquid/filters) on expressions inside `echo` tags.","parameters":[],"summary":"Outputs an expression.","name":"echo","syntax":"{% liquid\n  echo expression\n%}","syntax_keywords":[{"keyword":"expression","description":"The expression to be output."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{% echo product.title %}\n\n{% liquid\n  echo product.price | money\n%}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"iteration","deprecated":false,"deprecation_reason":"","description":"You can do a maximum of 50 iterations with a `for` loop. If you need to iterate over more than 50 items, then use the\n[`paginate` tag](/docs/api/liquid/tags/paginate) to split the items over multiple pages.\n\n&gt; Tip:\n&gt; Every `for` loop has an associated [`forloop` object](/docs/api/liquid/objects/forloop) with information about the loop.","parameters":[{"description":"The number of iterations to perform.","name":"limit","positional":true,"required":false,"types":["number"]},{"description":"The 1-based index to start iterating at.","name":"offset","positional":true,"required":false,"types":["number"]},{"description":"A custom numeric range to iterate over.","name":"range","positional":true,"required":false,"types":["untyped"]},{"description":"Iterate in reverse order.","name":"reversed","positional":true,"required":false,"types":["untyped"]}],"summary":"Renders an expression for every item in an array.","name":"for","syntax":"{% for variable in array %}\n  expression\n{% endfor %}","syntax_keywords":[{"keyword":"variable","description":"The current item in the array."},{"keyword":"array","description":"The array to iterate over."},{"keyword":"expression","description":"The expression to render for each iteration."}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{% for product in collection.products -%}\n  {{ product.title }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"limit","description":"You can limit the number of iterations using the `limit`\nparameter.\n\n&gt; Tip:\n&gt; Limit the amount of data fetched for arrays that can be paginated with the `paginate` tag instead of using the `limit` parameter. Learn more about [limiting data fetching](/docs/api/liquid/tags/paginate#paginate-limit-data-fetching) for improved server-side performance.\n","syntax":"{% for variable in array limit: number %}\n  expression\n{% endfor %}\n","path":"/collections/sale-potions","raw_liquid":"{% for product in collection.products limit: 2 -%}\n  {{ product.title }}\n{%- endfor %}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"offset","description":"You can specify a 1-based index to start iterating at using the `offset` parameter.","syntax":"{% for variable in array offset: number %}\n  expression\n{% endfor %}\n","path":"/collections/sale-potions","raw_liquid":"{% for product in collection.products offset: 2 -%}\n  {{ product.title }}\n{%- endfor %}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"range","description":"Instead of iterating over specific items in an array, you can specify a numeric range to iterate over.\n\n&gt; Note:\n&gt; You can define the range using both literal and variable values.\n","syntax":"{% for variable in (number..number) %}\n  expression\n{% endfor %}\n","path":"/collections/all","raw_liquid":"{% for i in (1..3) -%}\n  {{ i }}\n{%- endfor %}\n\n{%- assign lower_limit = 2 -%}\n{%- assign upper_limit = 4 -%}\n\n{% for i in (lower_limit..upper_limit) -%}\n  {{ i }}\n{%- endfor %}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"reversed","description":"You can iterate in reverse order using the `reversed` parameter.","syntax":"{% for variable in array reversed %}\n  expression\n{% endfor %}\n","path":"/collections/sale-potions","raw_liquid":"{% for product in collection.products reversed -%}\n  {{ product.title }}\n{%- endfor %}","parameter":true,"display_type":"text","show_data_tab":true}]},{"category":"conditional","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"summary":"Renders an expression if a specific condition is `true`.","name":"if","syntax":"{% if condition %}\n  expression\n{% endif %}","syntax_keywords":[{"keyword":"condition","description":"The condition to evaluate."},{"keyword":"expression","description":"The expression to render if the condition is met."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/glacier-ice","raw_liquid":"{% if product.compare_at_price &gt; product.price %}\n  This product is on sale!\n{% endif %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"elsif","description":"You can use the `elsif` tag to check for multiple conditions.","syntax":"","path":"/products/health-potion","raw_liquid":"{% if product.type == 'Love' %}\n  This is a love potion!\n{% elsif product.type == 'Health' %}\n  This is a health potion!\n{% endif %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"theme","deprecated":true,"deprecation_reason":"Deprecated because the way that variables are handled reduces performance and makes code harder to both read and maintain.\n\nThe `include` tag has been replaced by [`render`](/docs/api/liquid/tags/render).","description":"Inside the snippet, you can access and alter variables that are [created](/docs/api/liquid/tags/variable-tags) outside of the\nsnippet.","parameters":[],"summary":"Renders a [snippet](/themes/architecture#snippets).","name":"include","syntax":"{% include 'filename' %}","syntax_keywords":[{"keyword":"filename","description":"The name of the snippet to render, without the `.liquid` extension."}],"examples":[]},{"category":"variable","deprecated":false,"deprecation_reason":"","description":"Variables that are declared with `increment` are unique to the [layout](/themes/architecture/layouts), [template](/themes/architecture/templates),\nor [section](/themes/architecture/sections) file that they're created in. However, the variable is shared across\n[snippets](/themes/architecture#snippets) included in the file.\n\nSimilarly, variables that are created with `increment` are independent from those created with [`assign`](/docs/api/liquid/tags/assign)\nand [`capture`](/docs/api/liquid/tags/capture). However, `increment` and [`decrement`](/docs/api/liquid/tags/decrement) share\nvariables.","parameters":[],"summary":"Creates a new variable, with a default value of 0, that's increased by 1 with each subsequent call.","name":"increment","syntax":"{% increment variable_name %}","syntax_keywords":[{"keyword":"variable_name","description":"The name of the variable being incremented."}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% increment variable %}\n{% increment variable %}\n{% increment variable %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"syntax","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"summary":"Outputs any Liquid code as text instead of rendering it.","name":"raw","syntax":"{% raw %}\n  expression\n{% endraw %}","syntax_keywords":[{"keyword":"expression","description":"The expression to be output without being rendered."}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% raw %}\n{{ 2 | plus: 2 }} equals 4.\n{% endraw %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"theme","deprecated":false,"deprecation_reason":"","description":"Inside snippets and app blocks, you can't directly access variables that are [created](/docs/api/liquid/tags/variable-tags) outside\nof the snippet or app block. However, you can [specify variables as parameters](/docs/api/liquid/tags/render#render-passing-variables-to-a-snippet)\nto pass outside variables to snippets.\n\nWhile you can't directly access created variables, you can access global objects, as well as any objects that are\ndirectly accessible outside the snippet or app block. For example, a snippet or app block inside the [product template](/themes/architecture/templates/product)\ncan access the [`product` object](/docs/api/liquid/objects/product), and a snippet or app block inside a [section](/themes/architecture/sections)\ncan access the [`section` object](/docs/api/liquid/objects/section).\n\nOutside a snippet or app block, you can't access variables created inside the snippet or app block.\n\n&gt; Note:\n&gt; When you render a snippet using the `render` tag, you can't use the [`include` tag](/docs/api/liquid/tags/include)\n&gt; inside the snippet.","parameters":[],"summary":"Renders a [snippet](/themes/architecture#snippets) or [app block](/themes/architecture/sections/section-schema#render-app-blocks).","name":"render","syntax":"{% render 'filename' %}","syntax_keywords":[{"keyword":"filename","description":"The name of the snippet to render, without the `.liquid` extension."}],"examples":[{"name":"for","description":"You can render a snippet for every item in an array using the `for` parameter. You can also supply an optional `as` parameter to be able to reference the current item in the iteration inside the snippet.\nAdditionally, you can access a [`forloop` object](/docs/api/liquid/objects/forloop) for the loop inside the snippet.\n","syntax":"{% render 'filename' for array as item %}","path":"/","raw_liquid":"","parameter":true,"display_type":"text","show_data_tab":true},{"name":"Passing variables to a snippet","description":"Variables that have been [created](/docs/api/liquid/tags/variable-tags) outside of a snippet can be passed to a snippet as parameters on the `render` tag.\n\n&gt; Note:\n&gt; Any changes that are made to a passed variable apply only within the snippet.\n","syntax":"{% render 'filename', variable: value %}","path":"/","raw_liquid":"","parameter":true,"display_type":"text","show_data_tab":true},{"name":"with","description":"You can pass a single object to a snippet using the `with` parameter. You can also supply an optional `as` parameter to specify a custom name to reference the object inside the snippet. If you don't use the `as` parameter to specify a custom name, then you can reference the object using the snippet filename.\n","syntax":"{% render 'filename' with object as name %}","path":"/","raw_liquid":"","parameter":true,"display_type":"text","show_data_tab":true}]},{"category":"iteration","deprecated":false,"deprecation_reason":"","description":"The `tablerow` tag must be wrapped in HTML `&lt;table&gt;` and `&lt;/table&gt;` tags.\n\n&gt; Tip:\n&gt; Every `tablerow` loop has an associated [`tablerowloop` object](/docs/api/liquid/objects/tablerowloop) with information about the loop.","parameters":[{"description":"The number of columns that the table should have.","name":"cols","positional":true,"required":false,"types":["number"]},{"description":"The number of iterations to perform.","name":"limit","positional":true,"required":false,"types":["number"]},{"description":"The 1-based index to start iterating at.","name":"offset","positional":true,"required":false,"types":["number"]},{"description":"A custom numeric range to iterate over.","name":"range","positional":true,"required":false,"types":["untyped"]}],"summary":"Generates HTML table rows for every item in an array.","name":"tablerow","syntax":"{% tablerow variable in array %}\n  expression\n{% endtablerow %}","syntax_keywords":[{"keyword":"variable","description":"The current item in the array."},{"keyword":"array","description":"The array to iterate over."},{"keyword":"expression","description":"The expression to render."}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"&lt;table&gt;\n  {% tablerow product in collection.products %}\n    {{ product.title }}\n  {% endtablerow %}\n&lt;/table&gt;","parameter":false,"display_type":"text","show_data_tab":true},{"name":"cols","description":"You can define how many columns the table should have using the `cols` parameter.","syntax":"{% tablerow variable in array cols: number %}\n  expression\n{% endtablerow %}\n","path":"/collections/sale-potions","raw_liquid":"&lt;table&gt;\n  {% tablerow product in collection.products cols: 2 %}\n    {{ product.title }}\n  {% endtablerow %}\n&lt;/table&gt;","parameter":true,"display_type":"text","show_data_tab":true},{"name":"limit","description":"You can limit the number of iterations using the `limit` parameter.","syntax":"{% tablerow variable in array limit: number %}\n  expression\n{% endtablerow %}\n","path":"/collections/sale-potions","raw_liquid":"&lt;table&gt;\n  {% tablerow product in collection.products limit: 2 %}\n    {{ product.title }}\n  {% endtablerow %}\n&lt;/table&gt;","parameter":true,"display_type":"text","show_data_tab":true},{"name":"offset","description":"You can specify a 1-based index to start iterating at using the `offset` parameter.","syntax":"{% tablerow variable in array offset: number %}\n  expression\n{% endtablerow %}\n","path":"/collections/sale-potions","raw_liquid":"&lt;table&gt;\n  {% tablerow product in collection.products offset: 2 %}\n    {{ product.title }}\n  {% endtablerow %}\n&lt;/table&gt;","parameter":true,"display_type":"text","show_data_tab":true},{"name":"range","description":"Instead of iterating over specific items in an array, you can specify a numeric range to iterate over.\n\n&gt; Note:\n&gt; You can define the range using both literal and variable values.\n","syntax":"{% tablerow variable in (number..number) %}\n  expression\n{% endtablerow %}\n","path":"/","raw_liquid":"&lt;table&gt;\n  {% tablerow i in (1..3) %}\n    {{ i }}\n  {% endtablerow %}\n&lt;/table&gt;\n\n{%- assign lower_limit = 2 -%}\n{%- assign upper_limit = 4 -%}\n\n&lt;table&gt;\n  {% tablerow i in (lower_limit..upper_limit) %}\n    {{ i }}\n  {% endtablerow %}\n&lt;/table&gt;","parameter":true,"display_type":"text","show_data_tab":true}]},{"category":"conditional","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Similar to the [`if` tag](/docs/api/liquid/tags/if), you can use `elsif` to add more conditions to an `unless` tag.","parameters":[],"summary":"Renders an expression unless a specific condition is `true`.","name":"unless","syntax":"{% unless condition %}\n  expression\n{% endunless %}","syntax_keywords":[{"keyword":"condition","description":"The condition to evaluate."},{"keyword":"expression","description":"The expression to render unless the condition is met."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{% unless product.has_only_default_variant %}\n  // Variant selection functionality\n{% endunless %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"iteration","deprecated":false,"deprecation_reason":"","description":"Because [`for` loops](/docs/api/liquid/tags/for) are limited to 50 iterations per page, you need to use the `paginate` tag to\niterate over an array that has more than 50 items. The following arrays can be paginated:\n\n- [`all_products`](/docs/api/liquid/objects/all_products)\n- [`article.comments`](/docs/api/liquid/objects/article#article-comments)\n- [`blog.articles`](/docs/api/liquid/objects/blog#blog-articles)\n- [`collections`](/docs/api/liquid/objects/collections)\n- [`collection.products`](/docs/api/liquid/objects/collection#collection-products)\n- [`customer.addresses`](/docs/api/liquid/objects/customer#customer-addresses)\n- [`customer.orders`](/docs/api/liquid/objects/customer#customer-orders)\n- [`pages`](/docs/api/liquid/objects/pages)\n- [`search.results`](/docs/api/liquid/objects/search#search-results)\n- [`collection_list` settings](/themes/architecture/settings/input-settings#collection_list)\n- [`product_list` settings](/themes/architecture/settings/input-settings#product_list)\n\nWithin the `paginate` tag, you have access to the [`paginate` object](/docs/api/liquid/objects/paginate). You can use this\nobject, or the [`default_pagination` filter](/docs/api/liquid/filters/default_pagination), to build page navigation.","parameters":[{"description":"The number of pages to display in the pagination.","name":"window_size","positional":false,"required":false,"types":["string"]}],"summary":"Splits an array's items across multiple pages.","name":"paginate","syntax":"{% paginate array by page_size %}\n  {% for item in array %}\n    forloop_content\n  {% endfor %}\n{% endpaginate %}","syntax_keywords":[{"keyword":"array","description":"The array to be looped over."},{"keyword":"page_size","description":"The number of array items to include per page, between 1 and 50."},{"keyword":"item","description":"An item in the array being looped."},{"keyword":"forloop_content","description":"Content for each loop iteration."}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{% paginate collection.products by 5 %}\n  {% for product in collection.products -%}\n    {{ product.title }}\n  {%- endfor %}\n\n  {{- paginate | default_pagination }}\n{% endpaginate %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Paginating setting arrays","description":"To allow the pagination of `product_list` and `collection_list` settings to operate independently from other paginated lists on a page, these lists use a pagination query parameter with a unique key. The key is automatically assigned by the `paginate` tag, and you don't need to reference the key in your code. However, you can access the key using [`paginate.page_param`](/docs/api/liquid/objects/paginate#paginate-page_param).\n\n&gt; Tip:\n&gt; To paginate two arrays independently without refreshing the entire page, you can use the [Section Rendering API](/api/section-rendering).\n","syntax":"","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Limit data fetching","description":"Limiting the number of iterations through an array with the `paginate` tag can be more performant than using the [`limit` parameter](/docs/api/liquid/tags/for#for-limit) of the `for` tag. The `limit` parameter sets the number of iterations executed, but not the amount of information fetched server-side.\n\nFor example, referencing `collection.products` will fetch information up to the first 50 products, regardless of the forloop's `limit` parameter.  Use `paginate` and set a `page_size` to limit the amount of data fetched, and opt not to display any pagination controls.\n","syntax":"","path":"/collections/all","raw_liquid":"{% paginate collection.products by 4 %}\n  {% for product in collection.products -%}\n    {{ product.title }}\n  {%- endfor %}\n{% endpaginate -%}\n\n&lt;!-- Less performant method --&gt;\n{% for product in collection.products limit: 4 -%}\n  {{ product.title }}\n{%- endfor -%}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"window_size","description":"Set the window size of the pagination. The window size is the number of pages that should be visible in the pagination navigation.\n","syntax":"{% paginate collection.products by 3, window_size: 1 %}","path":"/collections/all","raw_liquid":"{% paginate collection.products by 3, window_size: 1 %}\n  {% for product in collection.products -%}\n    {{ product.title }}\n  {%- endfor %}\n\n  {{- paginate | default_pagination }}\n{% endpaginate %}","parameter":true,"display_type":"text","show_data_tab":true}]},{"category":"theme","deprecated":false,"deprecation_reason":"","description":"You need to use these tags only if your section or app block is meant to be installed on multiple themes or stores. Otherwise, you should include the JavaScript that your section needs in your theme's [`assets`](/themes/architecture#assets) directory. Each section or app block can have only one `{% javascript %}` tag.\n\nTo learn more about how section-specific JavaScript is loaded and run, refer to the documentation for [sections](/themes/architecture/sections/section-assets#javascript).\n&gt; Caution:\n&gt; Liquid isn't rendered inside of `{% javascript %}` tags. Including Liquid code can cause syntax errors.","parameters":[],"summary":"JavaScript code included in a [section](/themes/architecture/sections) file.","name":"javascript","syntax":"{% javascript %}\n  javascript_code\n{% endjavascript %}","syntax_keywords":[{"keyword":"javascript_code","description":"The JavaScript code for the section."}],"examples":[]},{"category":"theme","deprecated":false,"deprecation_reason":"","description":"Rendering a section with the `section` tag renders a section statically. To learn more about sections and how to use\nthem in your theme, refer to [Render a section](/themes/architecture/sections#render-a-section).","parameters":[],"summary":"Renders a [section](/themes/architecture/sections).","name":"section","syntax":"{% section 'name' %}","syntax_keywords":[{"keyword":"name","description":"The name of the section file you want to render."}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% section 'header' %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"theme","deprecated":false,"deprecation_reason":"","description":"You need to use these tags only if your section or app block is meant to be installed on multiple themes or stores. Otherwise, you should include the CSS styles that your section needs in your theme's [`assets`](/themes/architecture#assets) directory. Each section or app block can have only one `{% stylesheet %}` tag.\n\nTo learn more about how section-specific CSS is loaded and run, refer to the documentation for [sections](/themes/architecture/sections/section-assets#stylesheet).\n&gt; Caution:\n&gt; Liquid isn't rendered inside of `{% stylesheet %}` tags. Including Liquid code can cause syntax errors.","parameters":[],"summary":"CSS styles included in a [section](/themes/architecture/sections) file.","name":"stylesheet","syntax":"{% stylesheet %}\n  css_styles\n{% endstylesheet %}","syntax_keywords":[{"keyword":"css_styles","description":"The CSS styles for the section."}],"examples":[]},{"category":"theme","deprecated":false,"deprecation_reason":"","description":"Use this tag to render section groups as part of the theme's [layout](/themes/architecture/layouts) content. Place the `sections` tag where you want to render it in the layout.\n\nTo learn more about section groups and how to use them in your theme, refer to [Section groups](/themes/architecture/section-groups#usage).","parameters":[],"summary":"Renders a [section group](/themes/architecture/section-groups).","name":"sections","syntax":"{% sections 'name' %}","syntax_keywords":[{"keyword":"name","description":"The name of the section group file you want to render."}],"examples":[]},{"category":"html","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; If you reference [color settings](/themes/architecture/settings/input-settings#color) inside `style` tags, then\n&gt; the associated CSS rules will update as the setting is changed in the theme editor, without a page refresh.","parameters":[],"summary":"Generates an HTML `&lt;style&gt;` tag with an attribute of `data-shopify`.","name":"style","syntax":"{% style %}\n  CSS_rules\n{% endstyle %}","syntax_keywords":[{"keyword":"CSS_rules","description":"The desired CSS rules for the `&lt;style&gt;` tag."}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% style %}\n  .h1 {\n    color: {{ settings.colors_accent_1 }};\n  }\n{% endstyle %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"conditional","deprecated":false,"deprecation_reason":"","description":"You can use the `else` tag with the following tags:\n\n- [`case`](/docs/api/liquid/tags/case)\n- [`if`](/docs/api/liquid/tags/if)\n- [`unless`](/docs/api/liquid/tags/unless)","parameters":[],"summary":"Allows you to specify a default expression to execute when no other condition is met.","name":"else","syntax":"{% else %}\n  expression","syntax_keywords":[{"keyword":"expression","description":"The expression to render if no other condition is met."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{% if product.available %}\n  This product is available!\n{% else %}\n  This product is sold out!\n{% endif %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"iteration","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"summary":"Allows you to specify a default expression to execute when a [`for` loop](/docs/api/liquid/tags/for) has zero length.","name":"else","syntax":"{% for variable in array %}\n  first_expression\n{% else %}\n  second_expression\n{% endfor %}","syntax_keywords":[{"keyword":"variable","description":"The current item in the array."},{"keyword":"array","description":"The array to iterate over."},{"keyword":"first_expression","description":"The expression to render for each iteration."},{"keyword":"second_expression","description":"The expression to render if the loop has zero length."}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/empty","raw_liquid":"{% for product in collection.products %}\n  {{ product.title }}&lt;br&gt;\n{% else %}\n  There are no products in this collection.\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}]},{"category":"syntax","deprecated":false,"deprecation_reason":"","description":"Because the tags don't have delimeters, each tag needs to be on its own line.\n\n&gt; Tip:\n&gt; Use the [`echo` tag](/docs/api/liquid/tags/echo) to output an expression inside `liquid` tags.","parameters":[],"summary":"Allows you to have a block of Liquid without delimeters on each tag.","name":"liquid","syntax":"{% liquid\n  expression\n%}","syntax_keywords":[{"keyword":"expression","description":"The expression to be rendered inside the `liquid` tag."}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{% liquid\n  # Show a message that's customized to the product type\n\n  assign product_type = product.type | downcase\n  assign message = ''\n\n  case product_type\n    when 'health'\n      assign message = 'This is a health potion!'\n    when 'love'\n      assign message = 'This is a love potion!'\n    else\n      assign message = 'This is a potion!'\n  endcase\n\n  echo message\n%}","parameter":false,"display_type":"text","show_data_tab":true}]}];
const filters = [{"category":"cart","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/cart","raw_liquid":"{{ cart | item_count_for_variant: 39888235757633 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the total item count for a specified variant in the cart.","syntax":"cart | item_count_for_variant: {variant_id}","name":"item_count_for_variant"},{"category":"cart","deprecated":false,"deprecation_reason":"","description":"Accepts the following object types:\n\n- `product`\n- `variant`","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"examples":[{"name":"","description":"","syntax":"","path":"/products/bloodroot-whole","raw_liquid":"{% assign product = all_products['bloodroot-whole'] %}\n{% assign line_items = cart | line_items_for: product %}\n\nTotal cart quantity for product: {{ line_items | sum: 'quantity' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"","description":"","syntax":"","path":"/products/bloodroot-whole","raw_liquid":"{% assign product = all_products['bloodroot-whole'] %}\n{% assign variant = product.variants.first %}\n{% assign line_items = cart | line_items_for: variant %}\n\nTotal cart quantity for variant: {{ line_items | sum: 'quantity' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the subset of cart line items that include a specified product or variant.","syntax":"cart | line_items_for: object","name":"line_items_for"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"&lt;aside class=\"note beta\"&gt;\n  &lt;h4&gt;Developer preview&lt;/h4&gt;\n  &lt;p&gt;Style settings are currently only available as part of the &lt;a href=\"/storefronts/themes/architecture/blocks/theme-blocks/developer-preview\"&gt;Theme blocks developer preview&lt;/a&gt;.&lt;/p&gt;\n&lt;/aside&gt;","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ settings.layout | class_list }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates the list of style classes for a [style setting](/storefronts/themes/architecture/settings/style-settings) or a collection of settings.","syntax":"settings.layout | class_list","name":"class_list"},{"category":"collection","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"attribute [string] You can specify the value of supported [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes).","name":"HTML","positional":true,"required":false,"types":[]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'Health' | link_to_type }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"HTML attributes","description":"You can specify [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) by including a parameter that matches the attribute name, and the desired value.\n","syntax":"string | link_to_type: attribute: string","path":"/","raw_liquid":"{{ 'Health' | link_to_type: class: 'link-class' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to a collection page that lists all products of the given\nproduct type.","syntax":"string | link_to_type","name":"link_to_type"},{"category":"collection","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"attribute [string] [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes) for the link, passed as `attribute: value`.","name":"HTML","positional":true,"required":false,"types":[]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ \"Polina's Potent Potions\" | link_to_vendor }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"HTML attributes","description":"You can specify [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) by including a parameter that matches the attribute name, and the desired value.\n","syntax":"string | link_to_vendor: attribute: string","path":"/","raw_liquid":"{{ \"Polina's Potent Potions\" | link_to_vendor: class: 'link-class' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to a collection page that lists all products of a given\nproduct vendor.","syntax":"string | link_to_vendor","name":"link_to_vendor"},{"category":"collection","deprecated":false,"deprecation_reason":"","description":"Accepts the following values:\n\n- `manual` (as defined in the [collection settings](https://help.shopify.com/manual/products/collections/collection-layout#change-the-sort-order-for-the-products-in-a-collection))\n- `best-selling`\n- `title-ascending`\n- `title-descending`\n- `price-ascending`\n- `price-descending`\n- `created-ascending`\n- `created-descending`\n\n&gt; Tip:\n&gt; You can append the `sort_by` filter to the [`url_for_type`](/docs/api/liquid/filters/url_for_type)\n&gt; and [`url_for_vendor`](/docs/api/liquid/filters/url_for_vendor) filters.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{{ collection.url | sort_by: 'best-selling' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates a collection URL with the provided `sort_by` parameter appended. This filter must be applied to a collection URL.","syntax":"string | sort_by: string","name":"sort_by"},{"category":"collection","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'health' | url_for_type }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates a URL for a collection page that lists all products of the given product type.","syntax":"string | url_for_type","name":"url_for_type"},{"category":"collection","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ \"Polina's Potent Potions\" | url_for_vendor }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates a URL for a collection page that lists all products from the given product vendor.","syntax":"string | url_for_vendor","name":"url_for_vendor"},{"category":"collection","deprecated":false,"deprecation_reason":"","description":"When the collection context is included, you can access the associated [`collection` object](/docs/api/liquid/objects/collection)\nin the [product template](/themes/architecture/templates/product).\n\n&gt; Caution:\n&gt; Because a standard product page and a product page in the context of a collection have the same content on separate\n&gt; URLs, you should consider the SEO implications of using the `within` filter.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{%- assign collection_product = collection.products.first -%}\n\n{{ collection_product.url | within: collection }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates a product URL within the context of the provided collection.","syntax":"string | within: collection","name":"within"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; For accessibility best practices, it's recommended to have a minimum brightness difference of 125.","parameters":[{"description":"A color to compare with the provided color.","name":"color","positional":true,"required":true,"types":["string"]}],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#E800B0' | brightness_difference: '#FECEE9' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Calculates the [perceived brightness difference](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) between two colors.","syntax":"string | brightness_difference: string","name":"brightness_difference"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_brightness }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Calculates the [perceived brightness](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) of a given color.","syntax":"string | color_brightness","name":"color_brightness"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"The order in which you specify the colors doesn't matter.\n\n&gt; Tip:\n&gt; For accessibility best practices, the\n&gt; [WCAG 2.0 level AA](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast-contrast) requires a\n&gt; minimum contrast ratio of 4.5:1 for normal text, and 3:1 for large text. [Level AAA](https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-visual-audio-contrast7)\n&gt; requires a minimum contrast ratio of 7:1 for normal text, and 4.5:1 for large text.","parameters":[{"description":"A color to compare with the provided color.","name":"color","positional":true,"required":true,"types":["string"]}],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#E800B0' | color_contrast: '#D9D8FF' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Calculates the contrast ratio between two colors and returns the ratio's numerator. The ratio's denominator, which isn't\nreturned, is always 1. For example, with a contrast ratio of 3.5:1, this filter returns 3.5.","syntax":"string | color_contrast: string","name":"color_contrast"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The amount to darken the provided color by.","name":"percent","positional":true,"required":true,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_darken: 30 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Darkens a given color by a specific percentage. The percentage must be between 0 and 100.","syntax":"string | color_darken: number","name":"color_darken"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The amount to desaturate the provided color by.","name":"percent","positional":true,"required":true,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_desaturate: 30 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Desaturates a given color by a specific percentage. The percentage must be between 0 and 100.","syntax":"string | color_desaturate: number","name":"color_desaturate"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; For accessibility best practices, it's recommended to have a minimum color difference of 500.","parameters":[{"description":"A color to compare with the provided color.","name":"color","positional":true,"required":true,"types":["string"]}],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#720955' | color_difference: '#FFF3F9' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Calculates the [color difference](https://www.w3.org/WAI/ER/WD-AERT/#color-contrast) between two colors.","syntax":"string | color_difference: string","name":"color_difference"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"Accepts the following color components:\n\n- `alpha`\n- `red`\n- `green`\n- `blue`\n- `hue`\n- `saturation`\n- `lightness`","parameters":[{"description":"The color component that you want to extract.","name":"color_component","positional":true,"required":true,"types":["string"]}],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_extract: 'red' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Extracts a specific color component from a given color.","syntax":"string | color_extract: string","name":"color_extract"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The amount to lighten the provided color by.","name":"percent","positional":true,"required":true,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_lighten: 30 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Lightens a given color by a specific percentage. The percentage must be between 0 and 100.","syntax":"string | color_lighten: number","name":"color_lighten"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; A percentage factor of 100 returns the color being filtered. A percentage factor of 0 returns the color\n&gt; supplied to the filter.","parameters":[{"description":"A color to mix with the provided color.","name":"color","positional":true,"required":true,"types":["string"]},{"description":"The percentage amount to mix the colors by.","name":"percent","positional":true,"required":true,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#E800B0' | color_mix: '#00936F', 50 }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"","description":"If one input has an alpha component, but the other does not, an alpha component of 1.0 will be assumed for the input without an alpha component.\n","syntax":"","path":"/","raw_liquid":"{{ 'rgba(232, 0, 176, 0.75)' | color_mix: '#00936F', 50 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Blends two colors together by a specific percentage factor. The percentage must be between 0 and 100.","syntax":"string | color_mix: string, number","name":"color_mix"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"The following table outlines valid color components, and the value range for their modifications:\n\n| Component | Value range |\n| --- | --- |\n| &lt;ul&gt;&lt;li&gt;`red`&lt;/li&gt;&lt;li&gt;`green`&lt;/li&gt;&lt;li&gt;`blue`&lt;/li&gt;&lt;/ul&gt; | An integer between 0 and 255 |\n| `alpha` | A decimal between 0 and 1 |\n| `hue` | An integer between 0 and 360 |\n| &lt;ul&gt;&lt;li&gt;`saturation`&lt;li&gt;`lightness`&lt;/li&gt;&lt;/ul&gt; | An integer between 0 and 100 |","parameters":[{"description":"The color component that you want to modify.","name":"color_component","positional":true,"required":true,"types":["string"]},{"description":"The amount to modify the supplied color component by.","name":"modification_value","positional":true,"required":true,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_modify: 'red', 255 }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"","description":"The format of the modified color depends on the component being modified. For example, if you modify the `alpha` component of a color in hexadecimal format, then the modified color will be in `rgba()` format.\n","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_modify: 'alpha', 0.85 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Modifies a specific color component of a given color by a specific amount.","syntax":"string | color_modify: string, number","name":"color_modify"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The amount to saturate the provided color by.","name":"percent","positional":true,"required":true,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_saturate: 30 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Saturates a given color by a specific percentage. The percentage must be between 0 and 100.","syntax":"string | color_saturate: number","name":"color_saturate"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"Because colors are converted to `hex6` format, if a color with an alpha component is provided, then the alpha component\nis excluded from the output.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'rgb(234, 90, 185)' | color_to_hex }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a CSS color string to hexadecimal format (`hex6`).","syntax":"string | color_to_hex","name":"color_to_hex"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"If a color with an alpha component is provided, the color is converted to `HSLA` format.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_to_hsl }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a CSS color string to `HSL` format.","syntax":"string | color_to_hsl","name":"color_to_hsl"},{"category":"color","deprecated":false,"deprecation_reason":"","description":"If a color with an alpha component is provided, then the color is converted to `RGBA` format.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | color_to_rgb }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a CSS color string to `RGB` format.","syntax":"string | color_to_rgb","name":"color_to_rgb"},{"category":"color","deprecated":true,"deprecation_reason":"The `hex_to_rgba` filter has been replaced by [`color_to_rgb`](/docs/api/liquid/filters/color_to_rgb) and\n[`color_modify`](/docs/api/liquid/filters/color_modify).","description":"","parameters":[{"description":"The desired alpha value.","name":"alpha","positional":true,"required":false,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '#EA5AB9' | hex_to_rgba }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"alpha","description":"The default `alpha` value is 1.0. However, you can specify a decimal value between 0.0 and 1.0.","syntax":"string | hex_to_rgba: number","path":"/","raw_liquid":"{{ '#EA5AB9' | hex_to_rgba: 0.5 }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Converts a CSS color string from  hexadecimal format to `RGBA` format. Shorthand hexadecimal formatting (`hex3`) is also accepted.","syntax":"string | hex_to_rgba","name":"hex_to_rgba"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"The secret key for the message is supplied as a parameter to the filter.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign secret_potion = 'Polyjuice' | hmac_sha1: 'Polina' -%}\n\nMy secret potion: {{ secret_potion }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string into an SHA-1 hash using a hash message authentication code (HMAC).","syntax":"string | hmac_sha1: string","name":"hmac_sha1"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"The secret key for the message is supplied as a parameter to the filter.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign secret_potion = 'Polyjuice' | hmac_sha256: 'Polina' -%}\n\nMy secret potion: {{ secret_potion }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string into an SHA-256 hash using a hash message authentication code (HMAC).","syntax":"string | hmac_sha256: string","name":"hmac_sha256"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '' | md5 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string into an MD5 hash.","syntax":"string | md5","name":"md5"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign secret_potion = 'Polyjuice' | sha1 -%}\n\nMy secret potion: {{ secret_potion }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string into an SHA-1 hash.","syntax":"string | sha1: string","name":"sha1"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign secret_potion = 'Polyjuice' | sha256 -%}\n\nMy secret potion: {{ secret_potion }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string into an SHA-256 hash.","syntax":"string | sha256: string","name":"sha256"},{"category":"localization","deprecated":true,"deprecation_reason":"Deprecated without a direct replacement because the [currency form](/docs/api/liquid/tags/form#form-currency) has also been\ndeprecated. The currency form was replaced by the [localization form](/docs/api/liquid/tags/form#form-localization). Refer to\nthis guide which explains [how to create a country selector](/docs/themes/markets/multiple-currencies-languages#implementing-country-and-language-selectors)\nusing the localization form.","description":"The `currency_selector` filter must be applied to the [`form` object](/docs/api/liquid/objects/form) within a\n[currency form](/docs/api/liquid/tags/form#form-currency).","parameters":[{"description":"The desired `class` attribute.","name":"class","positional":false,"required":false,"types":["string"]},{"description":"The desired `id` attribute.","name":"id","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% form 'currency' %}\n  {{ form | currency_selector }}\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"class","description":"Specify the `class` attribute of the `&lt;select&gt;` element.","syntax":"form | currency_selector: class: string","path":"/","raw_liquid":"{% form 'currency' %}\n  {{ form | currency_selector: class: 'custom-class' }}\n{% endform %}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"id","description":"Specify the `id` attribute of the `&lt;select&gt;` element.","syntax":"form | currency_selector: id: string","path":"/","raw_liquid":"{% form 'currency' %}\n  {{ form | currency_selector: id: 'custom-id' }}\n{% endform %}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;select&gt;` element with an option for each currency available on the store.","syntax":"form | currency_selector","name":"currency_selector"},{"category":"customer","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'Log in' | customer_login_link }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML link to the customer login page.","syntax":"string | customer_login_link","name":"customer_login_link"},{"category":"customer","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'Log out' | customer_logout_link }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML link to log the customer out of their account and redirect to the homepage.","syntax":"string | customer_logout_link","name":"customer_logout_link"},{"category":"customer","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'Create an account' | customer_register_link }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML link to the customer registration page.","syntax":"string | customer_register_link","name":"customer_register_link"},{"category":"format","deprecated":false,"deprecation_reason":"","description":"The `date` filter accepts the same parameters as Ruby's strftime method for formatting the date. For a list of shorthand\nformats, refer to the [Ruby documentation](https://ruby-doc.org/core-3.1.1/Time.html#method-i-strftime) or\n[strftime reference and sandbox](http://www.strfti.me/).","parameters":[{"description":"The desired date format.","name":"format","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.created_at | date: '%B %d, %Y' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"The current date","description":"You can apply the `date` filter to the keywords `'now'` and `'today'` to output the current timestamp.\n\n&gt; Note:\n&gt; The timestamp will reflect the time that the Liquid was last rendered. Because of this, the timestamp might not be updated for every page view, depending on the context and caching.\n","syntax":"","path":"/","raw_liquid":"{{ 'now' | date: '%B %d, %Y' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"format","description":"Specify a locale-aware date format. You can use the following formats:\n\n- `abbreviated_date`\n- `basic`\n- `date`\n- `date_at_time`\n- `default`\n- `on_date`\n- `short` (deprecated)\n- `long` (deprecated)\n\n&gt; Note:\n&gt; You can also [define custom formats](/docs/api/liquid/filters/date-setting-format-options-in-locale-files) in your theme's locale files.\n","syntax":"string | date: format: string","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.created_at | date: format: 'abbreviated_date' }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"Setting format options in locale files","description":"You can define custom date formats in your [theme's storefront locale files](/themes/architecture/locales/storefront-locale-files). These custom formats should be included in a `date_formats` category:\n\n```json\n\"date_formats\": {\n  \"month_day_year\": \"%B %d, %Y\"\n}\n```\n","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.created_at | date: format: 'month_day_year' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Converts a timestamp into another date format.","syntax":"string | date: string","name":"date"},{"category":"font","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"[string] Customize the [`font_display` property](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) of the `@font-face` declaration.","name":"font_display","positional":false,"required":false,"types":[]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ settings.type_header_font | font_face }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"font_display","description":"You can include an optional parameter to specify the [`font_display` property](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) of the `@font_face` declaration.\n","syntax":"font | font_face: font_display: string","path":"/","raw_liquid":"{{ settings.type_header_font | font_face: font_display: 'swap' }}","parameter":true,"display_type":"text","show_data_tab":false}],"summary":"Generates a CSS [`@font_face` declaration](https://developer.mozilla.org/en-US/docs/Web/CSS/%40font-face) to load the provided font.","syntax":"font | font_face","name":"font_face"},{"category":"font","deprecated":false,"deprecation_reason":"","description":"The `font_modify` filter requires two parameters. The first indicates which property should be modified and the second is\neither the new value, or modification amount, for that property.\n\n&gt; Tip:\n&gt; You can access every variant of the chosen font's family by using [`font.variants`](/docs/api/liquid/objects/font#font-variants).\n&gt; However, you can more easily access specific styles and weights by using the `font_modify` filter.\n\nThe following table outlines the valid font properties and modification values:\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;th&gt;Property&lt;/th&gt;\n    &lt;th&gt;Modification value&lt;/th&gt;\n    &lt;th&gt;Output&lt;/th&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td rowspan=3&gt;&lt;code&gt;style&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;code&gt;normal&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;Returns the normal variant of the same weight, if it exists.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;italic&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;Returns the italic variant of the same weight, if it exists.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;oblique&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;p&gt;Returns the oblique variant of the same weight, if it exists.&lt;/p&gt;\n        &lt;p&gt;Oblique variants are similar to italic variants in appearance. All Shopify fonts have only oblique or italic variants, not both.&lt;/p&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td rowspan=7&gt;&lt;code&gt;weight&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;code&gt;100&lt;/code&gt; &amp;rarr; &lt;code&gt;900&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;Returns a variant of the same style with the given weight, if it exists.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;normal&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;Returns a variant of the same style with a weight of &lt;code&gt;400&lt;/code&gt;, if it exists.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;bold&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;Returns a variant of the same style with a weight of &lt;code&gt;700&lt;/code&gt;, if it exists.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;+100&lt;/code&gt; &amp;rarr; &lt;code&gt;+900&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;p&gt;Returns a variant of the same style with a weight incremented by the given value, if it exists.&lt;/p&gt;\n        &lt;p&gt;For example, if a font has a weight of &lt;code&gt;400&lt;/code&gt;, then using &lt;code&gt;+100&lt;/code&gt; would return the font with a weight of &lt;code&gt;500&lt;/code&gt;.&lt;/p&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;-100&lt;/code&gt; &amp;rarr; &lt;code&gt;-900&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;p&gt;Returns a variant of the same style with a weight decremented by the given value, if it exists.&lt;/p&gt;\n        &lt;p&gt;For example, if a font has a weight of &lt;code&gt;400&lt;/code&gt;, then using &lt;code&gt;-100&lt;/code&gt; would return the font with a weight of &lt;code&gt;300&lt;/code&gt;.&lt;/p&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;lighter&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;Returns a lighter variant of the same style by applying the rules used by the &lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Meaning_of_relative_weights\"&gt;CSS &lt;code&gt;font-weight&lt;/code&gt; property&lt;/a&gt; and browser &lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\"&gt;fallback weights&lt;/a&gt;, if it exists.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;code&gt;bolder&lt;/code&gt;&lt;/td&gt;\n      &lt;td&gt;Returns a bolder variant of the same style by applying the rules used by the &lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Meaning_of_relative_weights\"&gt;CSS &lt;code&gt;font-weight&lt;/code&gt; property&lt;/a&gt; and browser &lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\"&gt;fallback weights&lt;/a&gt;, if it exists.&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;","parameters":[{"description":"Font property to modify","name":"property","positional":true,"required":true,"types":["string"]},{"description":"The new value for the associated property.","name":"value","positional":true,"required":true,"types":["string"]}],"return_type":[{"type":"font","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign bold_font = settings.type_body_font | font_modify: 'weight', 'bold' -%}\n\nh2 {\n  font-weight: {{ bold_font.weight }};\n}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Non-existent font variants","description":"If the `font_modify` filter tries to create a font variant that doesn't exist, then it returns `nil`. To handle this, you can either assign a fallback value with the [`default` filter](/docs/api/liquid/filters/default), or check for `nil` before using the variant.\n","syntax":"","path":"/","raw_liquid":"{%- assign bold_font = settings.type_body_font | font_modify: 'weight', 'bold' -%}\n{%- assign italic_font = settings.type_body_font | font_modify: 'style', 'italic' -%}\n{%- assign heavy_font = settings.type_body_font | font_modify: 'weight', '900' | default: bold_font -%}\n{%- assign oblique_font = settings.type_body_font | font_modify: 'style', 'oblique' | default: italic_font -%}\n\nh2 {\n  font-style: {{ heavy_font.weight }};\n}\n\n.italic {\n  {% if oblique_font -%}\n    font-style: {{ oblique_font.style }};\n  {%- else -%}\n    font-style: {{ italic_font.style }};\n  {%- endif %}\n}","parameter":false,"display_type":"text","show_data_tab":false}],"summary":"Modifies a specific property of a given font.","syntax":"font | font_modify: string, string","name":"font_modify"},{"category":"font","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"Choose to return the URL for the font in `woff` format, instead of `woff2`.","name":"font_type","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ settings.type_header_font | font_url }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"woff format","description":"By default, the `font_url` filter returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for the font in `woff2` format. However, you can also choose `woff` format.\n","syntax":"font | font_url: string","path":"/","raw_liquid":"{{ settings.type_header_font | font_url: 'woff' }}","parameter":true,"display_type":"text","show_data_tab":false}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for the provided font in `woff2` format.","syntax":"font | font_url","name":"font_url"},{"category":"default","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[],"summary":"Generates default error messages for each possible value of [`form.errors`](/docs/themes/liquid/reference/objects/form#form-errors).","syntax":"string | default_errors","name":"default_errors"},{"category":"payment","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; You can't render accelerated checkout buttons through AJAX requests, including those through the\n&gt; [Section Rendering API](/api/section-rendering). The accelerated checkout buttons are added by JavaScript included\n&gt; by Shopify through the [`content_for_header`](/docs/api/liquid/objects/content_for_header) object, which only runs on\n&gt; the initial page load.\n&gt;\n&gt; For guidance on styling or event tracking of accelerated checkout buttons, refer to [accelerated checkout](/docs/storefronts/themes/pricing-payments/accelerated-checkout/).","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{% form 'product', product %}\n  {{ form | payment_button }}\n{% endform %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML container to host [accelerated checkout buttons](https://help.shopify.com/manual/online-store/dynamic-checkout)\nfor a product. The `payment_button` filter must be used on the `form` object within a [product form](/docs/api/liquid/tags/form#form-product).","syntax":"form | payment_button","name":"payment_button"},{"category":"payment","deprecated":false,"deprecation_reason":"","description":"The `payment_terms` filter must be used on the `form` object within a [product form](/docs/api/liquid/tags/form#form-product) or\n[cart form](/docs/api/liquid/tags/form#form-cart).\n\n```liquid\n{% form 'product', product %}\n  {{ form | payment_terms }}\n{% endform %}\n```\n\n```liquid\n{% form 'cart', cart %}\n  {{ form | payment_terms }}\n{% endform %}\n```","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[],"summary":"Generates the HTML for the [Shop Pay Installments banner](/themes/pricing-payments/installments).","syntax":"form | payment_terms","name":"payment_terms"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"The `time_tag` filter accepts the same parameters as Ruby's strftime method for formatting the date. For a list of shorthand\nformats, refer to the [Ruby documentation](https://ruby-doc.org/core-3.1.1/Time.html#method-i-strftime) or\n[strftime reference and sandbox](http://www.strfti.me/).","parameters":[{"description":"The desired date format.","name":"format","positional":false,"required":false,"types":["string"]},{"description":"The format for the datetime attribute of the time element.","name":"datetime","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.created_at | time_tag: '%B %d, %Y' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"format","description":"Specify a locale-aware date format. Accepts the following values:\n\n- `abbreviated_date`\n- `basic`\n- `date`\n- `date_at_time`\n- `default`\n- `on_date`\n- `short` (deprecated)\n- `long` (deprecated)\n\n&gt; Note:\n&gt; You can also [define custom formats](/docs/api/liquid/filters/date-setting-format-options-in-locale-files) in your theme's locale files.\n","syntax":"string | time_tag: format: string","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.created_at | time_tag: format: 'abbreviated_date' }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"datetime","description":"By default, the value of the `datetime` attribute of the `&lt;time&gt;` tag is formatted as `YYYY-MM-DDThh:mm:ssTZD`. However, you can specify a custom format with [strftime shorthand formats](https://ruby-doc.org/core-3.1.2/Time.html#method-i-strftime).\n","syntax":"string | time_tag: datetime: string","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.created_at | time_tag: '%B %d, %Y', datetime: '%Y-%m-%d' }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"Setting format options in locale files","description":"You can define custom date formats in your [theme's storefront locale files](/themes/architecture/locales/storefront-locale-files). These custom formats should be included in a `date_formats` category:\n\n```json\n\"date_formats\": {\n  \"month_day_year\": \"%B %d, %Y\"\n}\n```\n","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.created_at | time_tag: format: 'month_day_year' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Converts a timestamp into an HTML `&lt;time&gt;` tag.","syntax":"string | time_tag: string","name":"time_tag"},{"category":"localization","deprecated":false,"deprecation_reason":"","description":"The `translate` filter has an alias of `t`, which is more commonly used.\n\n&gt; Tip:\n&gt; To learn more about using the `t` filter, refer to [storefront locale file usage](/themes/architecture/locales/storefront-locale-files#usage)\n&gt; or [schema locale file usage](/themes/architecture/locales/schema-locale-files#usage).","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Section locales vs. theme locales","description":"The `t` filter can also reference keys defined in the [`locales` object](/themes/architecture/sections/section-schema#locales) of section file's `schema` tag. Content that you put in the `schema` under the `locales` object is only accessible to that section. This is useful if you need to make a standalone section that you want to share between themes.\n\nContent that is global to a theme should be placed in the theme's `locales` directory. For example, you could include the expression \"See more\" in your `locales` directory to create a single translation. You could then use the translation in a blog post and on the product details page.\n\n&gt; Note:\n&gt; Translations in the section's `schema` tag that aren't part of the `locales` object are used for merchant-facing text shown in the theme editor. These translations don't use the `t` filter.\n","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns a string of translated text for a given translation key from a [locale file](/themes/architecture/locales).","syntax":"string | t","name":"translate"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The asset size must be less than 15KB to be inlined.\n&gt;","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'icon.svg' | inline_asset_content }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Outputs the content of an asset inline in the template. The asset must be either a SVG, JS, or CSS file.","syntax":"asset_name | inline_asset_content","name":"inline_asset_content"},{"category":"format","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; When using the JSON output in JavaScript, you don't need to wrap it in quotes because the `json` filter includes them.\n&gt; The `json` filter also escapes any quotes inside the output.\n\n#### Product inventory\n\nWhen applied to a [`product` object](/docs/api/liquid/objects/product) on any Shopify store created after December 5, 2017, the\n`json` filter doesn't output values for the `inventory_quantity` and `inventory_policy` properties of any associated\n[variants](/docs/api/liquid/objects/variant). These properties are excluded to help prevent bots and crawlers from retrieving\ninventory quantities for stores to which they aren't granted access.\n\nIf you need inventory information, you can access it through individual variants.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/crocodile-tears","raw_liquid":"{{ product | json }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string, or object, into JSON format.","syntax":"variable | json","name":"json"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ -3 | abs }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the absolute value of a number.","syntax":"number | abs","name":"abs"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{%-  assign path = product.url -%}\n\n{{ request.origin | append: path }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Adds a given string to the end of a string.","syntax":"string | append: string","name":"append"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 4 | at_least: 5 }}\n{{ 4 | at_least: 3 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Limits a number to a minimum value.","syntax":"number | at_least","name":"at_least"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 6 | at_most: 5 }}\n{{ 4 | at_most: 5 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Limits a number to a maximum value.","syntax":"number | at_most","name":"at_most"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'b25lIHR3byB0aHJlZQ==' | base64_decode }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Decodes a string in [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).","syntax":"string | base64_decode","name":"base64_decode"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'one two three' | base64_encode }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Encodes a string to [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).","syntax":"string | base64_encode","name":"base64_encode"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'b25lIHR3byB0aHJlZQ==' | base64_url_safe_decode }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Decodes a string in URL-safe [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).","syntax":"string | base64_url_safe_decode","name":"base64_url_safe_decode"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"To produce URL-safe Base64, this filter uses `-` and `_` in place of `+` and `/`.","syntax":"","path":"/","raw_liquid":"{{ 'one two three' | base64_url_safe_encode }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Encodes a string to URL-safe [Base64 format](https://developer.mozilla.org/en-US/docs/Glossary/Base64).","syntax":"string | base64_url_safe_encode","name":"base64_url_safe_encode"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'this sentence should start with a capitalized word.' | capitalize }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Capitalizes the first word in a string and downcases the remaining characters.","syntax":"string | capitalize","name":"capitalize"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 1.2 | ceil }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Rounds a number up to the nearest integer.","syntax":"number | ceil","name":"ceil"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{%- assign original_prices = collection.products | map: 'compare_at_price' -%}\n\nOriginal prices:\n\n{% for price in original_prices -%}\n  - {{ price }}\n{%- endfor %}\n\n{%- assign compacted_original_prices = original_prices | compact -%}\n\nOriginal prices - compacted:\n\n{% for price in compacted_original_prices -%}\n  - {{ price }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Removes any `nil` items from an array.","syntax":"array | compact","name":"compact"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The `concat` filter won't filter out duplicates. If you want to remove duplicates, then you need to use the\n&gt; [`uniq` filter](/docs/api/liquid/filters/uniq).","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{%- assign types_and_vendors = collection.all_types | concat: collection.all_vendors -%}\n\nTypes and vendors:\n\n{% for item in types_and_vendors -%}\n  {%- if item != blank -%}\n    - {{ item }}\n  {%- endif -%}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Concatenates (combines) two arrays.","syntax":"array | concat: array","name":"concat"},{"category":"default","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"Whether to use false values instead of the default.","name":"allow_false","positional":false,"required":false,"types":["boolean"]}],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.selected_variant.url | default: product.url }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"allow_false","description":"By default, the  `default` filter's value will be used in place of `false` values. You can use the `allow_false` parameter to allow variables to return `false` instead of the default value.\n","syntax":"variable | default: variable, allow_false: boolean","path":"/products/health-potion","raw_liquid":"{%- assign display_price = false -%}\n\n{{ display_price | default: true, allow_false: true }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Sets a default value for any variable whose value is one of the following:\n\n- [`empty`](/docs/api/liquid/basics#empty)\n- [`false`](/docs/api/liquid/basics#truthy-and-falsy)\n- [`nil`](/docs/api/liquid/basics#nil)","syntax":"variable | default: variable","name":"default"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 4 | divided_by: 2 }}\n\n# divisor is an integer\n{{ 20 | divided_by: 7 }}\n\n# divisor is a float \n{{ 20 | divided_by: 7.0 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Divides a number by a given number. The `divided_by` filter produces a result of the same type as the divisor. This means if you divide by an integer, the result will be an integer, and if you divide by a float, the result will be a float.","syntax":"number | divided_by: number","name":"divided_by"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.title | downcase }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string to all lowercase characters.","syntax":"string | downcase","name":"downcase"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '&lt;p&gt;Text to be escaped.&lt;/p&gt;' | escape }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Escapes special characters in HTML, such as `&lt;&gt;`, `'`, and `&amp;`, and converts characters into escape sequences. The filter doesn't effect characters within the string that don’t have a corresponding escape sequence.\".","syntax":"string | escape","name":"escape"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"# applying the escape filter to already escaped text escapes characters in HTML entities:\n\n{{ \"&amp;lt;p&amp;gt;Text to be escaped.&amp;lt;/p&amp;gt;\" | escape }}\n\n# applying the escape_once filter to already escaped text skips characters in HTML entities:\n\n{{ \"&amp;lt;p&amp;gt;Text to be escaped.&amp;lt;/p&amp;gt;\" | escape_once }}\n\n# use escape_once to escape strings where a combination of HTML entities and non-escaped characters might be present:\n\n{{ \"&amp;lt;p&amp;gt;Text to be escaped.&amp;lt;/p&amp;gt; &amp; some additional text\" | escape_once }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Escapes a string without changing characters that have already been escaped.","syntax":"string | escape_once","name":"escape_once"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"This requires you to provide both the property name and the associated value.","parameters":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"examples":[],"summary":"Returns the first item in an array with a specific property value.","syntax":"array | find: string, string","name":"find"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"This requires you to provide both the property name and the associated value.","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[],"summary":"Returns the index of the first item in an array with a specific property value.","syntax":"array | find_index: string, string","name":"find_index"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{%- assign first_product = collection.products | first -%}\n\n{{ first_product.title }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Dot notation","description":"You can use the `first` filter with dot notation when you need to use it inside a tag or object output.\n","syntax":"","path":"/collections/all","raw_liquid":"{{ collection.products.first.title }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the first item in an array.","syntax":"array | first","name":"first"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 1.2 | floor }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Rounds a number down to the nearest integer.","syntax":"number | floor","name":"floor"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"This requires you to provide both the property name and the associated value.","parameters":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"examples":[],"summary":"Tests if any item in an array has a specific property value.","syntax":"array | has: string, string","name":"has"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{{ collection.all_tags | join }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Custom separator","description":"You can specify a custom separator for the joined items.\n","syntax":"array | join: string","path":"/collections/sale-potions","raw_liquid":"{{ collection.all_tags | join: ', ' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Combines all of the items in an array into a single string, separated by a space.","syntax":"array | join","name":"join"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{%- assign last_product = collection.products | last -%}\n\n{{ last_product.title }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Dot notation","description":"You can use the `last` filter with dot notation when you need to use it inside a tag or object output.\n","syntax":"","path":"/collections/all","raw_liquid":"{{ collection.products.last.title }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the last item in an array.","syntax":"array | last","name":"last"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign text = '  Some potions create whitespace.      ' -%}\n\n\"{{ text }}\"\n\"{{ text | lstrip }}\"","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Strips all whitespace from the left of a string.","syntax":"string | lstrip","name":"lstrip"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{%- assign product_titles = collection.products | map: 'title' -%}\n\n{{ product_titles | join: ', ' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Creates an array of values from a specific property of the items in an array.","syntax":"array | map: string","name":"map"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 4 | minus: 2 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Subtracts a given number from another number.","syntax":"number | minus: number","name":"minus"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 12 | modulo: 5 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the remainder of dividing a number by a given number.","syntax":"number | modulo: number","name":"modulo"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.description | newline_to_br }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts newlines (`\\n`) in a string to HTML line breaks (`&lt;br&gt;`).","syntax":"string | newline_to_br","name":"newline_to_br"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 2 | plus: 2 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Adds two numbers.","syntax":"number | plus: number","name":"plus"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{%- assign origin = request.origin -%}\n\n{{ product.url | prepend: origin }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Adds a given string to the beginning of a string.","syntax":"string | prepend: string","name":"prepend"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"This requires you to provide both the property name and the associated value.","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[],"summary":"Filters an array to exclude items with a specific property value.","syntax":"array | reject: string, string","name":"reject"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ \"I can't do it!\" | remove: \"'t\" }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Removes any instance of a substring inside a string.","syntax":"string | remove: string","name":"remove"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ \"I hate it when I accidentally spill my duplication potion accidentally!\" | remove_first: ' accidentally' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Removes the first instance of a substring inside a string.","syntax":"string | remove_first: string","name":"remove_first"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ \"I hate it when I accidentally spill my duplication potion accidentally!\" | remove_last: ' accidentally' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Removes the last instance of a substring inside a string.","syntax":"string | remove_last: string","name":"remove_last"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/komodo-dragon-scale","raw_liquid":"{{ product.handle | replace: '-', ' ' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Replaces any instance of a substring inside a string with a given string.","syntax":"string | replace: string, string","name":"replace"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/komodo-dragon-scale","raw_liquid":"{{ product.handle | replace_first: '-', ' ' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Replaces the first instance of a substring inside a string with a given string.","syntax":"string | replace_first: string, string","name":"replace_first"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/komodo-dragon-scale","raw_liquid":"{{ product.handle | replace_last: '-', ' ' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Replaces the last instance of a substring inside a string with a given string.","syntax":"string | replace_last: string, string","name":"replace_last"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"Original order:\n{{ collection.products | map: 'title' | join: ', ' }}\n\nReverse order:\n{{ collection.products | reverse | map: 'title' | join: ', ' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Reversing strings","description":"You can't use the `reverse` filter on strings directly. However, you can use the [`split` filter](/docs/api/liquid/filters/split) to create an array of characters in the string, reverse that array, and then use the [`join` filter](/docs/api/liquid/filters/join) to combine them again.\n","syntax":"","path":"/collections/sale-potions","raw_liquid":"{{ collection.title | split: '' | reverse | join: '' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Reverses the order of the items in an array.","syntax":"array | reverse","name":"reverse"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 2.7 | round }}\n{{ 1.3 | round }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Round to a specific number of decimal places","description":"You can specify a number of decimal places to round to. If you don't specify a number, then the `round` filter rounds to the nearest integer.\n","syntax":"","path":"/","raw_liquid":"{{ 3.14159 | round: 2 }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Rounds a number to the nearest integer.","syntax":"number | round","name":"round"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign text = '  Some potions create whitespace.      ' -%}\n\n\"{{ text }}\"\n\"{{ text | rstrip }}\"","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Strips all whitespace from the right of a string.","syntax":"string | rstrip","name":"rstrip"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"The size of a string is the number of characters that the string includes. The size of an array is the number of items\nin the array.","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{{ collection.title | size }}\n{{ collection.products | size }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Dot notation","description":"You can use the `size` filter with dot notation when you need to use it inside a tag or object output.\n","syntax":"","path":"/collections/sale-potions","raw_liquid":"{% if collection.products.size &gt;= 10 %}\n  There are 10 or more products in this collection.\n{% else %}\n  There are less than 10 products in this collection.\n{% endif %}","parameter":false,"display_type":"text","show_data_tab":false}],"summary":"Returns the size of a string or array.","syntax":"variable | size","name":"size"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"By default, the substring has a length of one character, and the array series has one array item. However, you can\nprovide a second parameter to specify the number of characters or array items.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{{ collection.title | slice: 0 }}\n{{ collection.title | slice: 0, 5 }}\n\n{{ collection.all_tags | slice: 1, 2 | join: ', ' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Negative index","description":"You can supply a negative index which will count from the end of the string.\n","syntax":"","path":"/collections/all","raw_liquid":"{{ collection.title | slice: -3, 3 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns a substring or series of array items, starting at a given 0-based index.","syntax":"string | slice","name":"slice"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{% assign tags = collection.all_tags | sort %}\n\n{% for tag in tags -%}\n  {{ tag }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Sort by an array item property","description":"You can specify an array item property to sort the array items by. You can sort by any property of the object that you're sorting.\n","syntax":"array | sort: string","path":"/collections/all","raw_liquid":"{% assign products = collection.products | sort: 'price' %}\n\n{% for product in products -%}\n  {{ product.title }}\n{%- endfor %}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Sorts the items in an array in case-sensitive alphabetical, or numerical, order.","syntax":"array | sort","name":"sort"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"&gt; Caution:\n&gt; You shouldn't use the `sort_natural` filter to sort numerical values. When comparing items an array, each item is converted to a\n&gt; string, so sorting on numerical values can lead to unexpected results.","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{% assign tags = collection.all_tags | sort_natural %}\n\n{% for tag in tags -%}\n  {{ tag }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Sort by an array item property","description":"You can specify an array item property to sort the array items by.\n","syntax":"array | sort_natural: string","path":"/collections/all","raw_liquid":"{% assign products = collection.products | sort_natural: 'title' %}\n\n{% for product in products -%}\n  {{ product.title }}\n{%- endfor %}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Sorts the items in an array in case-insensitive alphabetical order.","syntax":"array | sort_natural","name":"sort_natural"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{%- assign title_words = product.handle | split: '-' -%}\n\n{% for word in title_words -%}\n  {{ word }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Splits a string into an array of substrings based on a given separator.","syntax":"string | split: string","name":"split"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{%- assign text = '  Some potions create whitespace.      ' -%}\n\n\"{{ text }}\"\n\"{{ text | strip }}\"","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Strips all whitespace from the left and right of a string.","syntax":"string | strip","name":"strip"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"&lt;!-- With HTML --&gt;\n{{ product.description }}\n\n&lt;!-- HTML stripped --&gt;\n{{ product.description | strip_html }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Strips all HTML tags from a string.","syntax":"string | strip_html","name":"strip_html"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"&lt;!-- With newlines --&gt;\n{{ product.description }}\n\n&lt;!-- Newlines stripped --&gt;\n{{ product.description | strip_newlines }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Strips all newline characters (line breaks) from a string.","syntax":"string | strip_newlines","name":"strip_newlines"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% assign fibonacci = '0, 1, 1, 2, 3, 5' | split: ', ' %}\n\n{{ fibonacci | sum }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Sum object property values","description":"For an array of Liquid objects, you can specify a property to sum.","syntax":"array | sum: string","path":"/cart","raw_liquid":"Total quantity of all items in cart:\n{{ cart.items | sum: 'quantity' }}\n\nSubtotal price for all items in cart:\n{{ cart.items | sum: 'final_line_price' | money }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the sum of all elements in an array.","syntax":"array | sum","name":"sum"},{"category":"math","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 2 | times: 2 }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Multiplies a number by a given number.","syntax":"number | times: number","name":"times"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"If the specified number of characters is less than the length of the string, then an ellipsis (`...`) is appended to\nthe truncated string. The ellipsis is included in the character count of the truncated string.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.title | truncate: 15 }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Specify a custom ellipsis","description":"You can provide a second parameter to specify a custom ellipsis. If you don't want an ellipsis, then you can supply an empty string.\n","syntax":"string | truncate: number, string","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.title | truncate: 15, '--' }}\n{{ article.title | truncate: 15, '' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Truncates a string down to a given number of characters.","syntax":"string | truncate: number","name":"truncate"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"If the specified number of words is less than the number of words in the string, then an ellipsis (`...`) is appended to\nthe truncated string.\n\n&gt; Caution:\n&gt; HTML tags are treated as words, so you should strip any HTML from truncated content. If you don't strip HTML, then\n&gt; closing HTML tags can be removed, which can result in unexpected behavior.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.content | strip_html | truncatewords: 15 }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Specify a custom ellipsis","description":"You can provide a second parameter to specify a custom ellipsis. If you don't want an ellipsis, then you can supply an empty string.\n","syntax":"string | truncatewords: number, string","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.content | strip_html | truncatewords: 15, '--' }}\n\n{{ article.content | strip_html | truncatewords: 15, '' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Truncates a string down to a given number of words.","syntax":"string | truncatewords: number","name":"truncatewords"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% assign potion_array = 'invisibility, health, love, health, invisibility' | split: ', ' %}\n\n{{ potion_array | uniq | join: ', ' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Removes any duplicate items in an array.","syntax":"array | uniq","name":"uniq"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.title | upcase }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string to all uppercase characters.","syntax":"string | upcase","name":"upcase"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'test%40test.com' | url_decode }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Decodes any [percent-encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding) characters\nin a string.","syntax":"string | url_decode","name":"url_decode"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Spaces are converted to a `+` character, instead of a percent-encoded character.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'test@test.com' | url_encode }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts any URL-unsafe characters in a string to the\n[percent-encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding) equivalent.","syntax":"string | url_encode","name":"url_encode"},{"category":"array","deprecated":false,"deprecation_reason":"","description":"This requires you to provide both the property name and the associated value.","parameters":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/all","raw_liquid":"{% assign polina_products = collection.products | where: 'vendor', \"Polina's Potent Potions\" %}\n\nProducts from Polina's Potent Potions:\n\n{% for product in polina_products -%}\n  - {{ product.title }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Filter for boolean properties with a `true` value","description":"You can filter for items that have a `true` value for a boolean property. This requires you to provide only the property name.\n","syntax":"","path":"/collections/all","raw_liquid":"{% assign available_products = collection.products | where: 'available' %}\n\nAvailable products:\n\n{% for product in available_products -%}\n  - {{ product.title }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Filters an array to include only items with a specific property value.","syntax":"array | where: string, string","name":"where"},{"category":"media","deprecated":false,"deprecation_reason":"","description":"If [alt text is set on the video](https://help.shopify.com/en/manual/products/product-media/add-alt-text), then it's\nincluded in the `title` attribute of the `&lt;iframe&gt;`. If no alt text is set, then the `title` attribute is set to the\nproduct title.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'external_video' %}\n    {% if media.host == 'youtube' %}\n      {{ media | external_video_url: color: 'white' | external_video_tag }}\n    {% elsif media.host == 'vimeo' %}\n      {{ media | external_video_url: loop: '1', muted: '1' | external_video_tag }}\n    {% endif %}\n  {% endif %}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"HTML attributes","description":"You can specify [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attributes) by adding a parameter that matches the attribute name, and the desired value.\n","syntax":"variable | external_video_tag: attribute: string","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'external_video' %}\n    {% if media.host == 'youtube' %}\n      {{ media | external_video_url: color: 'white' | external_video_tag: class:'youtube-video' }}\n    {% endif %}\n  {% endif %}\n{% endfor %}","parameter":true,"display_type":"text","show_data_tab":false}],"summary":"Generates an HTML `&lt;iframe&gt;` tag containing the player for a given external video. The input for the `external_video_tag`\nfilter can be either a [`media` object](/docs/api/liquid/objects/media) or [`external_video_url`](/docs/api/liquid/filters/external_video_url).","syntax":"variable | external_video_tag","name":"external_video_tag"},{"category":"media","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"You can specify [YouTube](https://developers.google.com/youtube/player_parameters#Parameters) and [Vimeo](https://vimeo.zendesk.com/hc/en-us/articles/360001494447-Using-Player-Parameters) video parameters by adding a parameter that matches the parameter name, and the desired value.\n","syntax":"","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'external_video' %}\n    {% if media.host == 'youtube' %}\n      {{ media | external_video_url: color: 'white' | external_video_tag }}\n    {% elsif media.host == 'vimeo' %}\n      {{ media | external_video_url: loop: '1', muted: '1' | external_video_tag }}\n    {% endif %}\n  {% endif %}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":false}],"summary":"Returns the URL for a given external video. Use this filter to specify parameters for the external video player generated\nby the [`external_video_tag` filter](/docs/api/liquid/filters/external_video_tag).","syntax":"media | external_video_url: attribute: string","name":"external_video_url"},{"category":"media","deprecated":false,"deprecation_reason":"","description":"By default, `width` and `height` attributes are added to the `&lt;img&gt;` tag based on the dimensions and aspect ratio from\nthe image URL. However, you can override these attributes with the [width](/docs/api/liquid/filters/image_tag#image_tag-width) and [height](/docs/api/liquid/filters/image_tag#image_tag-height)\nparameters. If only one parameter is provided, then only that attribute is added.","parameters":[{"description":"The width of the image.","name":"width","positional":false,"required":false,"types":["number"]},{"description":"The height of the image.","name":"height","positional":false,"required":false,"types":["number"]},{"description":"The source sizes for responsiveness.","name":"sizes","positional":false,"required":false,"types":["number"]},{"description":"The widths to associate with custom `srcset` values.","name":"widths","positional":false,"required":false,"types":["number"]},{"description":"The `srcset` for responsiveness.","name":"srcset","positional":false,"required":false,"types":["number"]},{"description":"Whether the resource should be preloaded.","name":"preload","positional":false,"required":false,"types":["boolean"]},{"description":"The image's alt text.","name":"alt","positional":false,"required":false,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 200 | image_tag }}","parameter":false,"display_type":"html","show_data_tab":true},{"name":"Lazy loading","description":"If you don't apply the `preload` attribute to `image_tag`, then `loading` is automatically set to `lazy` for images in sections further down the page.\nYou shouldn't lazy load images above the fold. If the default value doesn't work for your theme, then consider writing your own logic using the `section.index` and `section.location` properties. For more information, refer to the [`section` object](/docs/api/liquid/objects/section).\n","syntax":"","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true},{"name":"`image_tag` and focal points","description":"This filter automatically applies a focal point to the image using the `object-position` CSS style, if focal point coordinates are available. You can also access an image's focal point coordinates directly through the [`focal_point`](/docs/api/liquid/objects/focal_point) object. [Learn how to set a focal point](https://help.shopify.com/manual/online-store/images/theme-images#set-a-focal-point-on-a-theme-image).\n","syntax":"","path":"/","raw_liquid":"{{ images['potions-header.png'] | image_url: width: 300 | image_tag }}","parameter":false,"display_type":"html","show_data_tab":true},{"name":"width","description":"Specify the `width` attribute of the `&lt;img&gt;` tag. You can set the parameter to `nil` to prevent the attribute from being added.\n","syntax":"image_url | image_tag: width: number","path":"/products/health-potion","raw_liquid":"&lt;!-- With a width --&gt;\n{{ product | image_url: width: 400 | image_tag: width: 300 }}\n\n&lt;!-- With the width set to nil --&gt;\n{{ product | image_url: width: 400 | image_tag: width: nil }}","parameter":true,"display_type":"html","show_data_tab":true},{"name":"height","description":"Specify the `height` attribute of the `&lt;img&gt;` tag. You can set the parameter to `nil` to prevent the attribute from being added.\n","syntax":"image_url | image_tag: height: number","path":"/products/health-potion","raw_liquid":"&lt;!-- With a height --&gt;\n{{ product | image_url: width: 400 | image_tag: height: 300 }}\n\n&lt;!-- With the height set to nil --&gt;\n{{ product | image_url: width: 400 | image_tag: height: nil }}","parameter":true,"display_type":"html","show_data_tab":true},{"name":"sizes","description":"Specify source sizes with the [HTML `sizes` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes).\n","syntax":"image_url | image_tag: sizes: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 200 | image_tag: sizes: '(min-width:1600px) 960px, (min-width: 750px) calc((100vw - 11.5rem) / 2), calc(100vw - 4rem)' }}","parameter":true,"display_type":"html","show_data_tab":true},{"name":"widths","description":"By default, Shopify generates a `srcset` with a smart set of default widths up to the maximum defined in the image URL. However, you can create your own set of widths.\n","syntax":"image_url | image_tag: widths: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 600 | image_tag: widths: '200, 300, 400' }}","parameter":true,"display_type":"html","show_data_tab":true},{"name":"srcset","description":"By default, Shopify generates a `srcset`. However, you can create your own `srcset`.\nThe `srcset` parameter takes precedence over the [`width` parameter](/docs/api/liquid/filters/image_tag#image_tag-width).\nYou shouldn't to use the `srcset` parameter unless you want to remove the attribute by setting the parameter to `nil`.\n","syntax":"image_url | image_tag: srcset: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 200 | image_tag: srcset: nil }}","parameter":true,"display_type":"html","show_data_tab":true},{"name":"preload","description":"Specify whether the image should be preloaded.\n\nWhen `preload` is set to `true`, a resource hint is sent as a [Link HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link)\nwith a `rel` value of [`preload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload).\nThe Link header also includes `imagesrcset` and `imagesizes` that match the `srcset` and `sizes` attribute of the tag,\nwhere present:\n\n```liquid\nLink: &lt;IMAGE_URL&gt;; rel=preload; as=image\nLink: &lt;IMAGE_URL&gt;; rel=preload; as=image; imagesrcset=ADDITIONAL_IMAGE_URL 352w; imagesizes=40vw\n```\n\nThis option doesn't affect the HTML img tag directly.\n\nYou should use the preload parameter sparingly. For example, consider preloading only above-the-fold images.\nTo learn more about resource hints in Shopify themes, refer to [Performance best practices for Shopify themes](/themes/best-practices/performance#preload-key-resources-defer-or-avoid-loading-others).\n","syntax":"image_url | image_tag: preload: boolean","path":"","raw_liquid":"","parameter":true,"display_type":"text","show_data_tab":true},{"name":"alt","description":"By default, the `alt` attribute of the `&lt;img&gt;` tag is set to the [media alt text](https://help.shopify.com/manual/products/product-media/add-alt-text), or the resource title for article, collection, line item, product, and variant images. However, you can override this default, or set the value if there's no default.\n","syntax":"image_url | image_tag: alt: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 200 | image_tag: alt: \"My image's alt text\" }}","parameter":true,"display_type":"html","show_data_tab":true},{"name":"HTML attributes","description":"You can specify [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) by adding a parameter that matches the attribute name, and the desired value.\n","syntax":"image_url | image_tag: attribute: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 200 | image_tag: class: 'custom-class', loading: 'lazy' }}","parameter":true,"display_type":"html","show_data_tab":true}],"summary":"Generates an HTML `&lt;img&gt;` tag for a given [`image_url`](/docs/api/liquid/filters/image_url).","syntax":"string | image_tag","name":"image_tag"},{"category":"media","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The dimensions of the media's poster image.","name":"image_size","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {{- media | media_tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"image_size","description":"Specify the dimensions of the media's poster image in pixels.","syntax":"media | media_tag: image_size: string","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {{- media | media_tag: image_size: '400x' }}\n{% endfor %}","parameter":true,"display_type":"text","show_data_tab":false}],"summary":"Generates an appropriate HTML tag for a given media object.","syntax":"media | media_tag","name":"media_tag"},{"category":"media","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The dimensions of the model viewer's poster image.","name":"image_size","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/potion-bottle","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'model' %}\n    {{ media | model_viewer_tag }}\n  {% endif %}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Model viewer attributes","description":"By default, the model viewer component has the following attributes:\n\n| Attribute | Value |\n| --- | --- |\n| `alt` | `[alt-text]` - The media's alt text. |\n| `poster` | `[preview-image-url]` - The media's preview image URL. |\n| `camera-controls` | N/A - Allows for controls via mouse/touch. |\n\nYou can override these attributes, or any [supported model viewer component attributes](https://modelviewer.dev/docs/index.html#stagingandcameras-attributes) by adding a parameter that matches the attribute name, and the desired value.\n","syntax":"media | model_viewer_tag: attribute: string","path":"/products/potion-bottle","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'model' %}\n    {{ media | model_viewer_tag: interaction-policy: 'allow-when-focused' }}\n  {% endif %}\n{% endfor %}","parameter":true,"display_type":"text","show_data_tab":false},{"name":"image_size","description":"Specify the dimensions of the model's poster image in pixels.","syntax":"media | model_viewer_tag: image_size: string","path":"/products/potion-bottle","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'model' %}\n    {{ media | model_viewer_tag: image_size: '400x' }}\n  {% endif %}\n{% endfor %}","parameter":true,"display_type":"text","show_data_tab":false}],"summary":"Generates a [Google model viewer component](https://modelviewer.dev/) for a given 3D model.","syntax":"media | model_viewer_tag","name":"model_viewer_tag"},{"category":"media","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; When `mp4` videos are uploaded, Shopify generates an `m3u8` file as an additional [`video_source`](/docs/api/liquid/objects/video_source).\n&gt; An `m3u8` file enables video players to leverage [HTTP live streaming (HLS)](https://developer.apple.com/streaming/),\n&gt; resulting in an optimized video experience based on the user's internet connection. If loop is enabled, the HLS source is not used\n&gt; in order to allow progessive download to cache the video.\n&gt;\n&gt; If the `m3u8` source isn't supported, then the player falls back to the `mp4` source.","parameters":[{"description":"The dimensions of the video's poster image.","name":"image_size","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'video' %}\n    {{ media | video_tag }}\n  {% endif %}\n{% endfor %}","parameter":false,"display_type":"html","show_data_tab":false},{"name":"image_size","description":"Specify the dimensions of the video's poster image in pixels.","syntax":"media | video_tag: image_size: string","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'video' %}\n    {{ media | video_tag: image_size: '400x' }}\n  {% endif %}\n{% endfor %}","parameter":true,"display_type":"html","show_data_tab":false},{"name":"Optional supported HTML5 attributes","description":"`video_tag` supports all [HTML5 video attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attributes).\nFor example:\n\n| Attribute | Value |\n| --- | --- |\n| `autoplay` | Whether to automatically play the video after it’s loaded. Accepted values:`true`,`false`|\n| `loop` | Whether to loop the video. Accepted values:`true`,`false`|\n| `muted` | Whether to mute the video’s audio. Accepted values:`true`,`false`|\n| `controls` | Whether a user can control the video playback. Accepted values:`true`,`false`|\n","syntax":"media | video_tag: attribute: boolean","path":"/products/potion-beats","raw_liquid":"{% for media in product.media %}\n  {% if media.media_type == 'video' %}\n    {{ media | video_tag: autoplay: true, loop: true, muted: true, controls: true }}\n  {% endif %}\n{% endfor %}","parameter":true,"display_type":"html","show_data_tab":false}],"summary":"Generates an HTML `&lt;video&gt;` tag for a given video.","syntax":"media | video_tag","name":"video_tag"},{"category":"metafield","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The `metafield_tag` filter doesn't currently support list metafields other than `list.single_line_text_field` and `list.metaobject_reference`.","parameters":[{"description":"Specifies which field should be used. Only applicable to `list.metaobject_reference` and `metaobject_reference` types.","name":"field","positional":false,"required":false,"types":["string"]},{"description":"The desired list format. Accepts `unordered` or `ordered`. Default: `unordered`.","name":"list_format","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"Basic types","description":"Most metafield types return a simple HTML element:\n\n| Type | Element | Attributes |\n| --- | --- | --- |\n| `boolean` | `&lt;span&gt;` | `class=\"metafield-boolean\"` |\n| `collection_reference` | `&lt;a&gt;` | `class=\"metafield-collection_reference\"` |\n| `color` | `&lt;span&gt;` | `class=\"metafield-color\"` |\n| `date` | `&lt;time&gt;` | `datetime=\"&lt;the metafield value&gt;\"`&lt;br&gt;&lt;br&gt;`class=\"metafield-date\"`&lt;br&gt;&lt;br&gt;Value is localized to the customer |\n| `date_time` | `&lt;time&gt;` | `datetime=\"&lt;the metafield value&gt;\"`&lt;br&gt;&lt;br&gt;`class=\"metafield-date\"`&lt;br&gt;&lt;br&gt;Value is localized to the customer |\n| `json` | `&lt;script&gt;` | `type=\"application/json\"`&lt;br&gt;&lt;br&gt;`class=\"metafield-json\"` |\n| `money` | `&lt;span&gt;` | `class=\"metafield-money\"`&lt;br&gt;&lt;br&gt;Value is formatted using the store's [HTML with currency setting](https://help.shopify.com/manual/payments/currency-formatting) |\n| `multi_line_text_field` | `&lt;span&gt;` | `class=\"metafield-multi_line_text_field\"` |\n| `number_decimal` | `&lt;span&gt;` | `class=\"metafield-number_decimal\"` |\n| `number_integer` | `&lt;span&gt;` | `class=\"metafield-number_integer\"` |\n| `page_reference` | `&lt;a&gt;` | `class=\"metafield-page_reference\"` |\n| `product_reference` | `&lt;a&gt;` | `class=\"metafield-page_reference\"` |\n| `rating` | `&lt;span&gt;` | `class=\"metafield-rating\"` | |\n| `single_line_text_field` | `&lt;span&gt;` | `class=\"metafield-single_line_text_field\"` |\n| `url` | `&lt;a&gt;` | `class=\"metafield-url\"` |\n| `variant_reference` | `&lt;a&gt;` | `class=\"metafield-variant_reference\"` |\n| `rich_text_field` | `&lt;div&gt;` | `class=\"metafield-rich_text_field\"` |\n","syntax":"","path":"/products/health-potion","raw_liquid":"&lt;!-- boolean --&gt;\n{{ product.metafields.information.seasonal | metafield_tag }}\n\n&lt;!-- collection_reference --&gt;\n{{ product.metafields.information.related_collection | metafield_tag }}\n\n&lt;!-- color --&gt;\n{{ product.metafields.details.potion_color | metafield_tag }}\n\n&lt;!-- date --&gt;\n{{ product.metafields.information.expiry | metafield_tag }}\n\n&lt;!-- date_time --&gt;\n{{ product.metafields.information.brew_date | metafield_tag }}\n\n&lt;!-- json --&gt;\n{{ product.metafields.information.burn_temperature | metafield_tag }}\n\n&lt;!-- money --&gt;\n{{ product.metafields.details.price_per_ml | metafield_tag }}\n\n&lt;!-- multi_line_text_field --&gt;\n{{ product.metafields.information.shipping | metafield_tag }}\n\n&lt;!-- number_decimal --&gt;\n{{ product.metafields.information.salinity | metafield_tag }}\n\n&lt;!-- number_integer --&gt;\n{{ product.metafields.information.doses_per_day | metafield_tag }}\n\n&lt;!-- page_reference --&gt;\n{{ product.metafields.information.dosage | metafield_tag }}\n\n&lt;!-- product_reference --&gt;\n{{ product.metafields.information.related_product | metafield_tag }}\n\n&lt;!-- rating --&gt;\n{{ product.metafields.details.rating | metafield_tag }}\n\n&lt;!-- single_line_text_field --&gt;\n{{ product.metafields.information.directions | metafield_tag }}\n\n&lt;!-- url --&gt;\n{{ product.metafields.information.health | metafield_tag }}\n\n&lt;!-- variant_reference --&gt;\n{{ product.metafields.information.best_seller | metafield_tag }}\n\n&lt;!-- rich_text_field --&gt;\n{{ product.metafields.information.rich_description | metafield_tag }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Complex types","description":"\nThe following metafield types return nested elements, or different elements depending on the metafield contents:\n\n- [`dimension`](/docs/api/liquid/filters/metafield_tag#metafield_tag-dimension)\n- [`file_reference`](/docs/api/liquid/filters/metafield_tag#metafield_tag-file_reference)\n- [`list.metaobject_reference`](/docs/api/liquid/filters/metafield_tag#metafield_tag-list.metaobject_reference)\n- [`list.single_line_text_field`](/docs/api/liquid/filters/metafield_tag#metafield_tag-list.single_line_text_field)\n- [`metaobject_reference`](/docs/api/liquid/filters/metafield_tag#metafield_tag-metaobject_reference)\n- [`volume`](/docs/api/liquid/filters/metafield_tag#metafield_tag-volume)\n- [`weight`](/docs/api/liquid/filters/metafield_tag#metafield_tag-weight)\n","syntax":"","path":"/products/health-potion","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":false},{"name":"dimension","description":"Outputs a `&lt;span&gt;` element with the following attribute:\n\n| Attribute | Value |\n| --- | --- |\n| `class` | `metafield-dimension` |\n\nThe `&lt;span&gt;` element contains the following child elements:\n\n| Child element | HTML element | Attributes |\n| --- | --- | --- |\n| The dimension value.&lt;br&gt;&lt;br&gt;If it's a decimal with more than two places, then it'll be formatted to have a precision of two with trailing zeros removed. | `&lt;span&gt;` | `class=\"metafield-dimension_value\"` |\n| The dimension unit. | `&lt;span&gt;` | `class=\"metafield-dimension_unit\"` |\n","syntax":"","path":"/products/komodo-dragon-scale","raw_liquid":"{{ product.metafields.details.scale_width | metafield_tag }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"file_reference","description":"The output varies depending on the type of file. There are the following categories of file type:\n\n| File type | Description |\n| --- | --- |\n| Image | Images in the format of `jpg`, `png`, `gif`, `heic`, and `webp`. |\n| Video | Videos in the format of `mov`, and `mp4`. |\n| Other | Any other file type. |\n\n##### Image\n\nOutputs an `&lt;img&gt;` element with the following attributes:\n\n| Attribute | Value |\n| --- | --- |\n| `src` | The image's URL. |\n| `alt` | The image's alt text. |\n| `class` | `metafield-file_reference` |\n\n##### Video\n\nOutputs a `&lt;video&gt;` element with the following attributes:\n\n| Attribute | Value |\n| --- | --- |\n| `src` | The video's URL. |\n| `poster` | The video's preview image (poster) URL. |\n| `playsinline` | N/A - Indicates the video will be played \"inline\" within the element's playback area. |\n| `preload` | `metadata` - Only metadata is pre-fetched before the video is played. |\n\nThe `&lt;video&gt;` element contains the following child elements:\n\n| Child element | HTML element | Attributes |\n| --- | --- | --- |\n| The video's multimedia playlist source, for [HTTP live streaming (HLS)](https://developer.apple.com/streaming/) | `&lt;source&gt;` | `src=\"&lt;the video's m3u8 source URL&gt;\"`&lt;br&gt;&lt;br&gt;`type=\"application/x-mpegURL\"` |\n| The video's original source | `&lt;source&gt;` | `src=\"&lt;the video's source URL&gt;\"`&lt;br&gt;&lt;br&gt;`type=\"&lt;the video's original source MIME type&gt;\"` |\n| The video's preview (poster) image | `&lt;img&gt;` | `src=\"&lt;the video's preview image URL&gt;\"` |\n\n##### Other\n\nOutputs an `&lt;a&gt;` element with a link to the file and the following attribute:\n\n| Attribute | Value |\n| --- | --- |\n| `class` | `metafield-file_reference` |\n\nThe `&lt;a&gt;` element contains an `&lt;img&gt;` element for the file's [preview image](/docs/api/liquid/objects/generic_file#generic_file-preview_image) with the following attributes:\n\n| Attribute | Value |\n| --- | --- |\n| `src` | The file's preview image URL. |\n| `loading` | `lazy` - The image isn't loaded until it's almost in view. |\n","syntax":"","path":"/products/health-potion","raw_liquid":"&lt;!-- Image --&gt;\n{{ product.metafields.information.promo_image | metafield_tag }}\n\n&lt;!-- Video --&gt;\n{{ product.metafields.information.promo_video | metafield_tag }}\n\n&lt;!-- Other --&gt;\n{{ product.metafields.information.disclaimers | metafield_tag }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"list.metaobject_reference","description":"Outputs a `&lt;ul&gt;` element by default with the following attribute:\n\n| Attribute | Value |\n| --- | --- |\n| `class` | `metafield-single_line_text_field-array` |\n\nThe `&lt;ul&gt;` element contains an `&lt;li&gt;` element for each metaobject in the list with a `class` of `metafield-single_line_text_field`. The required `field` parameter specifies which field should be rendered for each metaobject. The `field` parameter can reference only metafields of type `single_line_text_field`.\n\nTo output an `&lt;ol&gt;` element, pass the `list_format` parameter with a value of `ordered`.\n","syntax":"metafield | metafield_tag: field: string","path":"/products/health-potion","raw_liquid":"&lt;!-- &lt;ul&gt; element --&gt;\n{{ product.metafields.information.ingredients | metafield_tag: field: 'name' }}\n\n&lt;!-- &lt;ol&gt; element --&gt;\n{{ product.metafields.information.ingredients | metafield_tag: field: 'name', list_format: 'ordered' }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"list.single_line_text_field","description":"Outputs a `&lt;ul&gt;` element by default with the following attribute:\n\n| Attribute | Value |\n| --- | --- |\n| `class` | `metafield-single_line_text_field-array` |\n\nThe `&lt;ul&gt;` element contains an `&lt;li&gt;` element for each item in the list with a `class` of `metafield-single_line_text_field`.\n\nTo output an `&lt;ol&gt;` element, pass the `list_format` parameter with a value of `ordered`.\n","syntax":"","path":"/products/health-potion","raw_liquid":"&lt;!-- &lt;ul&gt; element --&gt;\n{{ product.metafields.information.pickup_locations | metafield_tag }}\n\n&lt;!-- &lt;ol&gt; element --&gt;\n{{ product.metafields.information.pickup_locations | metafield_tag: list_format: 'ordered' }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"metaobject_reference","description":"Outputs an HTML element for the metaobject field specified by the required `field` parameter. The `field` parameter can reference only metafields of type `single_line_text_field`.\n","syntax":"metafield | metafield_tag: field: string","path":"/products/health-potion","raw_liquid":"{{ product.metafields.information.primary_ingredient | metafield_tag: field: 'name' }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"volume","description":"Outputs a `&lt;span&gt;` element with the following attribute:\n\n| Attribute | Value |\n| --- | --- |\n| `class` | `metafield-volume` |\n\nThe `&lt;span&gt;` element contains the following child elements:\n\n| Child element | HTML element | Attributes |\n| --- | --- | --- |\n| The volume value.&lt;br&gt;&lt;br&gt;If it's a decimal with more than two places, then it'll be formatted to have a precision of two with trailing zeros removed. | `&lt;span&gt;` | `class=\"metafield-volume_value\"` |\n| The volume unit. | `&lt;span&gt;` | `class=\"metafield-volume_unit\"` |\n","syntax":"","path":"/products/dandelion-milk","raw_liquid":"{{ product.metafields.details.milk_container_volume | metafield_tag }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"weight","description":"Outputs a `&lt;span&gt;` element with the following attribute:\n\n| Attribute | Value |\n| --- | --- |\n| `class` | `metafield-weight` |\n\nThe `&lt;span&gt;` element contains the following child elements:\n\n| Child element | HTML element | Attributes |\n| --- | --- | --- |\n| The weight value.&lt;br&gt;&lt;br&gt;If it's a decimal with more than two places, then it'll be formatted to have a precision of two with trailing zeros removed. | `&lt;span&gt;` | `class=\"metafield-weight_value\"` |\n| The weight unit. | `&lt;span&gt;` | `class=\"metafield-weight_unit\"` |\n","syntax":"","path":"/products/dried-chamomile","raw_liquid":"{{ product.metafields.details.chamomile_base_weight | metafield_tag }}","parameter":false,"display_type":"text","show_data_tab":false}],"summary":"Generates an HTML element to host the metafield data. The type of element that's generated differs depending on the\ntype of metafield.","syntax":"metafield | metafield_tag","name":"metafield_tag"},{"category":"metafield","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The `metafield_text` filter doesn't currently support list metafields other than `list.single_line_text_field` and `list.metaobject_reference`.","parameters":[{"description":"Specifies which field should be used. Only applicable to types `list.metaobject_reference` and `metaobject_reference`.","name":"field","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"Basic types","description":"The following outlines the output for each metafield type:\n\n| Metafield type | Output |\n| --- | --- |\n| `single_line_text_field` | The metafield text. |\n| `multi_line_text_field` | The metafield text. |\n| `page_reference` | The page title. |\n| `product_reference` | The product title. |\n| `collection_reference` | The collection title. |\n| `variant_reference` | The variant title. |\n| `file_reference` | The file URL. |\n| `number_integer` | The number. |\n| `number_decimal` | The number. |\n| `date` | The date. |\n| `date-time` | The date and time. |\n| `url` | The URL. |\n| `json` | The JSON. |\n| `boolean` | The boolean value. |\n| `color` | The color value. |\n| `weight` | The weight value and unit.&lt;br&gt;&lt;br&gt;If the value is a decimal with more than two places, then it'll be formatted to have a precision of two with trailing zeros removed. |\n| `volume` | The volume value and unit.&lt;br&gt;&lt;br&gt;If the value is a decimal with more than two places, then it'll be formatted to have a precision of two with trailing zeros removed. |\n| `dimension` | The dimension value and unit.&lt;br&gt;&lt;br&gt;If the value is a decimal with more than two places, then it'll be formatted to have a precision of two with trailing zeros removed. |\n| `rating` | The rating value. |\n| `list.single_line_text_field` | The metafield values in sentence format.&lt;br&gt;&lt;br&gt;For example, if you had the values `Toronto`, `Ottawa`, and `Vancouver`, then the output would be:&lt;br&gt;&lt;br&gt;`Toronto, Ottawa, and Vancouver` |\n| `money` | The money value, formatted using the store's [**HTML with currency** setting](https://help.shopify.com/manual/payments/currency-formatting). |\n| `rich_text_field` | The rich text value as simple text. |\n","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.metafields.information.dosage | metafield_text }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Complex types","description":"\nThe following metafield types produce different output depending on the provided `field` parameter:\n\n- [`list.metaobject_reference`](/docs/api/liquid/filters/metafield_text#metafield_text-list.metaobject_reference)\n- [`metaobject_reference`](/docs/api/liquid/filters/metafield_text#metafield_text-metaobject_reference)\n","syntax":"","path":"/products/health-potion","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":false},{"name":"list.metaobject_reference","description":"Outputs the list of metaobjects in sentence format. The required `field` parameter specifies which field should be rendered for each metaobject. The `field` parameter can reference only metafields of type `single_line_text_field`.\n","syntax":"metafield | metafield_text: field: string","path":"/products/health-potion","raw_liquid":"{{ product.metafields.information.ingredients | metafield_text: field: 'name' }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"metaobject_reference","description":"Outputs the metafield text for the metaobject field specified by the required `field` parameter. The `field` parameter can reference only metafields of type `single_line_text_field`.\n","syntax":"metafield | metafield_text: field: string","path":"/products/health-potion","raw_liquid":"{{ product.metafields.information.primary_ingredient | metafield_tag: field: 'name' }}","parameter":false,"display_type":"text","show_data_tab":false}],"summary":"Generates a text version of the metafield data.","syntax":"metafield | metafield_text","name":"metafield_text"},{"category":"money","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.price | money }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting).","syntax":"number | money","name":"money"},{"category":"money","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.price | money_with_currency }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Formats a given price based on the store's [**HTML with currency** setting](https://help.shopify.com/manual/payments/currency-formatting).","syntax":"number | money_with_currency","name":"money_with_currency"},{"category":"money","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.price | money_without_currency }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting), without the currency symbol.","syntax":"number | money_without_currency","name":"money_without_currency"},{"category":"money","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.price | money_without_trailing_zeros }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Formats a given price based on the store's [**HTML without currency** setting](https://help.shopify.com/manual/payments/currency-formatting), excluding the decimal separator\n(either `.` or `,`) and trailing zeros.\n\nIf the price has a non-zero decimal value, then the output is the same as the [`money` filter](/docs/api/liquid/filters#money).","syntax":"number | money_without_trailing_zeros","name":"money_without_trailing_zeros"},{"category":"default","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{% paginate collection.products by 2 %}\n  {% for product in collection.products %}\n    {{- product.title }}\n  {% endfor %}\n\n  {{- paginate | default_pagination -}}\n{% endpaginate %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates HTML for a set of links for paginated results. Must be applied to the [`paginate` object](/docs/api/liquid/objects/paginate).","syntax":"paginate | default_pagination","name":"default_pagination"},{"category":"customer","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use with the [`customer.has_avatar?`](/docs/api/liquid/objects/customer#customer-has_avatar?) method to determine if the customer has an avatar.\n\n```liquid\n{{ customer | avatar }}\n```","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[],"summary":"Generates HTML to render a customer's avatar, if available.","syntax":"customer | avatar","name":"avatar"},{"category":"customer","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The presence of the [shop](/docs/api/liquid/objects/shop) object is required for validation purposes only.","parameters":[{"description":"The action to be performed. Accepts the following values: default, follow.","name":"action","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true},{"name":"action","description":"Controls the behavior of the button after authentication.\n\nAccepts the following values:\n\n- `default` - Authentication only\n- `follow` - Performs a side-effect after authentication which follows the current shop in the Shop app. Requires additional configuration. [Learn more](https://help.shopify.com/manual/online-store/themes/customizing-themes/follow-on-shop)\n\n```liquid\n{{ shop | login_button: action: 'follow' }}\n```\n","syntax":"shop | login_button: action: string","path":"","raw_liquid":"","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML Button that enables a customer to either sign in to the storefront using their Shop account or follow the shop in the Shop App.","syntax":"shop | login_button","name":"login_button"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'variable-name' | camelize }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string to CamelCase.","syntax":"string | camelize","name":"camelize"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The `handleize` filter has an alias of `handle`.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.title | handleize }}\n{{ product.title | handle }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts a string into a [handle](/docs/api/liquid/basics#handles).","syntax":"string | handleize","name":"handleize"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '&lt;p&gt;Health &amp; Love potions&lt;/p&gt;' | url_escape }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Escapes any URL-unsafe characters in a string.","syntax":"string | url_escape","name":"url_escape"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"The `url_param_escape` filter escapes the same characters as [`url_escape`](/docs/api/liquid/filters/url_escape), with the\naddition of `&amp;`.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ '&lt;p&gt;Health &amp; Love potions&lt;/p&gt;' | url_param_escape }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Escapes any characters in a string that are unsafe for URL parameters.","syntax":"string | url_param_escape","name":"url_param_escape"},{"category":"format","deprecated":false,"deprecation_reason":"","description":"The `structured_data` filter can be used on the [`product`](/docs/api/liquid/objects/product) and [`article`](/docs/api/liquid/objects/article) objects.\n\nProduct objects are output as a [schema.org `Product`](https://schema.org/Product) if they have no variants, and a [`ProductGroup`](https://schema.org/ProductGroup) if they have one or more variants.\n\nArticle objects are output as a [schema.org `Article`.](https://schema.org/Article)","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/crocodile-tears","raw_liquid":"&lt;script type=\"application/ld+json\"&gt;\n  {{ product | structured_data }}\n&lt;/script&gt;","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Converts an object into a schema.org structured data format.","syntax":"variable | structured_data","name":"structured_data"},{"category":"collection","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions/extra-potent","raw_liquid":"{% for tag in collection.all_tags %}\n  {{- tag | highlight_active_tag | link_to_tag: tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Wraps a given tag in an HTML `&lt;span&gt;` tag, with a `class` attribute of `active`, if the tag is currently active. Only\napplies to collection tags.","syntax":"string | highlight_active_tag","name":"highlight_active_tag"},{"category":"tag","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn more about filtering by tag, refer to [Filter articles by tag](/themes/architecture/templates/blog#filter-articles-by-tag)\n&gt; or [Filter collections by tag](/themes/navigation-search/filtering/tag-filtering).","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{% for tag in collection.all_tags %}\n  {%- if current_tags contains tag -%}\n    {{ tag }}\n  {%- else -%}\n    {{ tag | link_to_add_tag: tag }}\n  {%- endif -%}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have a given tag, as well as any currently active tags.","syntax":"string | link_to_add_tag","name":"link_to_add_tag"},{"category":"tag","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn more about filtering by tag, refer to [Filter articles by tag](/themes/architecture/templates/blog#filter-articles-by-tag)\n&gt; or [Filter collections by tag](/themes/navigation-search/filtering/tag-filtering).","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{% for tag in collection.all_tags %}\n  {%- if current_tags contains tag -%}\n    {{ tag | link_to_remove_tag: tag }}\n  {%- else -%}\n    {{ tag | link_to_add_tag: tag }}\n  {%- endif -%}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have any currently active tags, except the provided tag.","syntax":"string | link_to_remove_tag","name":"link_to_remove_tag"},{"category":"tag","deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn more about filtering by tag, refer to [Filter articles by tag](/themes/architecture/templates/blog#filter-articles-by-tag)\n&gt; or [Filter collections by tag](/themes/navigation-search/filtering/tag-filtering).","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{% for tag in collection.all_tags %}\n  {{- tag | link_to_tag: tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;a&gt;` tag with an `href` attribute linking to the current blog or collection, filtered to show\nonly articles or products that have a given tag.","syntax":"string | link_to_tag","name":"link_to_tag"},{"category":"localization","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ shop.address | format_address }}","parameter":false,"display_type":"html","show_data_tab":false},{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ customer.default_address | format_address }}","parameter":false,"display_type":"html","show_data_tab":false}],"summary":"Generates an HTML address display, with each address component ordered according to the address's locale.","syntax":"address | format_address","name":"format_address"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The string that you want to highlight.","name":"highlighted_term","positional":true,"required":true,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/search?q=love","raw_liquid":"{% for item in search.results %}\n  {% if item.object_type == 'product' %}\n    {{ item.description | highlight: search.terms }}\n  {% else %}\n    {{ item.content | highlight: search.terms }}\n  {% endif %}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Wraps all instances of a specific string, within a given string, with an HTML `&lt;strong&gt;` tag with a `class` attribute\nof `highlight`.","syntax":"string | highlight: string","name":"highlight"},{"category":"string","deprecated":false,"deprecation_reason":"","description":"&gt; Caution:\n&gt; The `pluralize` filter applies English pluralization rules to determine which string to output. You shouldn't use this\n&gt; filter on non-English strings because it could lead to incorrect pluralizations.","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/cart","raw_liquid":"Cart item count: {{ cart.item_count }} {{ cart.item_count | pluralize: 'item', 'items' }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Outputs the singular or plural version of a string based on a given number.","syntax":"number | pluralize: string, string","name":"pluralize"},{"category":"media","deprecated":true,"deprecation_reason":"The `article_img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).","description":"","parameters":[{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.image | article_img_url }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"size","description":"By default, the `article_img_url` filter returns the `small` version of the image (100 x 100 px). However, you can specify a [size](/docs/api/liquid/filters/img_url#img_url-size).\n","syntax":"image | article_img_url: string","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{{ article.image | article_img_url: 'large' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an [article's image](/docs/api/liquid/objects/article#article-image).","syntax":"variable | article_img_url","name":"article_img_url"},{"category":"hosted_file","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'red-and-black-bramble-berries.jpg' | asset_img_url }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"size","description":"By default, the `asset_img_url` filter returns the `small` version of the image (100 x 100 px). However, you can specify a [size](/docs/api/liquid/filters/img_url#img_url-size).\n","syntax":"image | asset_img_url: string","path":"/","raw_liquid":"{{ 'red-and-black-bramble-berries.jpg' | asset_img_url: 'large' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image in the\n[`assets` directory](/themes/architecture#assets) of a theme.","syntax":"string | asset_img_url","name":"asset_img_url"},{"category":"hosted_file","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'cart.js' | asset_url }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a file in the\n[`assets` directory](/themes/architecture#assets) of a theme.","syntax":"string | asset_url","name":"asset_url"},{"category":"media","deprecated":true,"deprecation_reason":"The `collection_img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).","description":"","parameters":[{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/collections/sale-potions","raw_liquid":"{{ collection.image | collection_img_url }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"The size parameter","description":"By default, the `collection_img_url` filter returns the `small` version of the image (100 x 100 px). However, you can specify a [size](/docs/api/liquid/filters/img_url#img_url-size).\n","syntax":"image | collection_img_url: string","path":"/collections/sale-potions","raw_liquid":"{{ collection.image | collection_img_url: 'large' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a [collection's image](/docs/api/liquid/objects/collection#collection-image).","syntax":"variable | collection_img_url","name":"collection_img_url"},{"category":"hosted_file","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'potions-header.png' | file_img_url }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"The size parameter","description":"By default, the `file_img_url` filter returns the `small` version of the image (100 x 100 px). However, you can specify a [size](/docs/api/liquid/filters/img_url#img_url-size).\n","syntax":"image | file_img_url: string","path":"/","raw_liquid":"{{ 'potions-header.png' | file_img_url: 'large' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image from the\n[Files](https://www.shopify.com/admin/settings/files) page of the Shopify admin.","syntax":"string | file_img_url","name":"file_img_url"},{"category":"hosted_file","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'disclaimer.pdf' | file_url }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a file from the\n[Files](https://www.shopify.com/admin/settings/files) page of the Shopify admin.","syntax":"string | file_url","name":"file_url"},{"category":"hosted_file","deprecated":false,"deprecation_reason":"","description":"Global assets are kept in a directory on Shopify's server. Using global assets can be faster than loading the resource\ndirectly.\n\nDepending on the resource type, you might need to use an additional filter to load the resource. The following table\noutlines which filter to use for specific resource types.\n\n| Resource type | Additional filter |\n| --- | --- |\n| JavaScript (`.js`) | [`script_tag`](/docs/api/liquid/filters/script_tag) |\n| CSS (`.css`) | [`stylesheet_tag`](/docs/api/liquid/filters/stylesheet_tag)  |\n\nThe following table outlines the available global assets:\n\n| Category | Assets |\n| --- | --- |\n| Firebug | - `firebug/firebug.css`&lt;br&gt;- `firebug/firebug.html`&lt;br&gt;- `firebug/firebug.js`&lt;br&gt;- `firebug/firebugx.js`&lt;br&gt;- `firebug/errorIcon.png`&lt;br&gt;- `firebug/infoIcon.png`&lt;br&gt;- `firebug/warningIcon.png` |\n| JavaScript libraries | - `controls.js`&lt;br&gt;- `dragdrop.js`&lt;br&gt;- `effects.js`&lt;br&gt;- `ga.js`&lt;br&gt;- `mootools.js` |\n| Lightbox | - `lightbox.css`&lt;br&gt;- `lightbox.js`&lt;br&gt;&lt;br&gt;- `lightbox/v1/lightbox.css`&lt;br&gt;- `lightbox/v1/lightbox.js`&lt;br&gt;&lt;br&gt;- `lightbox/v2/lightbox.css`&lt;br&gt;- `lightbox/v2/lightbox.js`&lt;br&gt;- `lightbox/v2/close.gif`&lt;br&gt;- `lightbox/v2/loading.gif`&lt;br&gt;- `lightbox/v2/overlay.png`&lt;br&gt;- `lightbox/v2/zoom-lg.gif`&lt;br&gt;&lt;br&gt;- `lightbox/v204/lightbox.css`&lt;br&gt;- `lightbox/v204/lightbox.js`&lt;br&gt;- `lightbox/v204/bullet.gif`&lt;br&gt;- `lightbox/v204/close.gif`&lt;br&gt;- `lightbox/v204/closelabel.gif`&lt;br&gt;- `lightbox/v204/donatebutton.gif`&lt;br&gt;- `lightbox/v204/downloadicon.gif`&lt;br&gt;- `lightbox/v204/loading.gif`&lt;br&gt;- `lightbox/v204/nextlabel.png`&lt;br&gt;- `lightbox/v204/prevlabel.gif` |\n| Prototype | - `prototype.js`&lt;br&gt;- `prototype/1.5/prototype.js`&lt;br&gt;- `prototype/1.6/prototype.js` |\n| script.aculo.us | - `scriptaculous/1.8.2/scriptaculous.js`&lt;br&gt;- `scriptaculous/1.8.2/builder.js`&lt;br&gt;- `scriptaculous/1.8.2/controls.js`&lt;br&gt;- `scriptaculous/1.8.2/dragdrop.js`&lt;br&gt;- `scriptaculous/1.8.2/effects.js`&lt;br&gt;- `scriptaculous/1.8.2/slider.js`&lt;br&gt;- `scriptaculous/1.8.2/sound.js`&lt;br&gt;- `scriptaculous/1.8.2/unittest.js` |\n| Shopify | - `list-collection.css`&lt;br&gt;- `textile.css` |","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'lightbox.js' | global_asset_url | script_tag }}\n\n{{ 'lightbox.css' | global_asset_url | stylesheet_tag }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a global asset.","syntax":"string | global_asset_url","name":"global_asset_url"},{"category":"media","deprecated":false,"deprecation_reason":"","description":"You can use the `image_url` filter on the following objects, as well as their `src` property:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`image`](/docs/api/liquid/objects/image)\n- [`line_item`](/docs/api/liquid/objects/line_item)\n- [`product`](/docs/api/liquid/objects/product)\n- [`variant`](/docs/api/liquid/objects/variant)\n- [`country`](/docs/api/liquid/objects/country)\n\n&gt; Caution:\n&gt; You need to specify either a [`width`](/docs/api/liquid/filters/image_url#image_url-width) or\n&gt; [`height`](/docs/api/liquid/filters/image_url#image_url-height) parameter. If neither are specified, then an error is returned.\n\n&gt; Note:\n&gt; Regardless of the specified dimensions, an image can never be resized to be larger than its original dimensions.","parameters":[{"description":"How the image should be cropped to match the desired dimensions.","name":"crop","positional":false,"required":false,"types":["string"]},{"description":"The file format for the image.","name":"format","positional":false,"required":false,"types":["string"]},{"description":"The padding color, if the provided image is smaller than the requested dimensions.","name":"pad_color","positional":false,"required":false,"types":["string"]},{"description":"The desired image width, in pixels.","name":"width","positional":false,"required":true,"types":["number"]},{"description":"The desired image height, in pixels.","name":"height","positional":false,"required":true,"types":["number"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 450 }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"width","description":"Specify the width of the image up to a maximum of `5760px`. If only the width is specified, then the height is automatically calculated based on the image's dimensions.\n","syntax":"variable | image_url: width: number","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 450 }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"height","description":"Specify the height of the image up to a maximum of `5760px`. If only the height is specified, then the width is automatically calculated based on the image's dimensions.\n","syntax":"variable | image_url: height: number","path":"/products/health-potion","raw_liquid":"{{ product | image_url: height: 450 }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"crop","description":"Specify which part of the image to show if the specified dimensions result in an aspect ratio that differs from the original. You can use the following values:\n\n- `top`\n- `center`\n- `bottom`\n- `left`\n- `right`\n- `region`\n\nThe default value is `center`.\n\nWhen using the `region` crop mode, the starting point for the crop is defined by `crop_left` and `crop_top` and extends to the `crop_width` and `crop_height`.\nOptionally, to resize the region extracted by the crop, use the `width` and `height` parameters.\n\n&gt; Note:\n&gt; Country flags are SVG images and can only be cropped if a value for `format`\n&gt; is also provided.\n","syntax":"variable | image_url: crop: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 400, height: 400, crop: 'bottom' }}\n\n{{ product | image_url: crop: 'region', crop_left: 32, crop_top: 32, crop_width: 512, crop_height: 512 }}\n\n{{ product | image_url: crop: 'region', width: 100, height: 100, crop_left: 32, crop_top: 32, crop_width: 512, crop_height: 512 }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"format","description":"Specify which file format to use for the image. The valid formats are `pjpg` and `jpg`.\n\nIt's not practical to convert a lossy image format, like `jpg`, to a lossless image format, like `png`, so Shopify can do\nonly the following conversions:\n\n- `png` to `jpg`\n- `png` to `pjpg`\n- `jpg` to `pjpg`\n\n&gt; Note:\n&gt; Shopify automatically detects which image formats are supported by the client (e.g. `WebP`, `AVIF`, etc.) and\n&gt; selects a file format for optimal quality and file size. When a format is specified, Shopify takes into account\n&gt; the features (e.g. progressive, alpha channel) of the specified file format when making the final automatic format selection.\n&gt; To learn more, visit https://cdn.shopify.com/.\n","syntax":"variable | image_url: format: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 450, format: 'pjpg' }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"pad_color","description":"Specify a color to pad the image if the specified dimensions result in an aspect ratio that differs from the original. The color must be in hexadecimal format (`hex3` or `hex6`).\n","syntax":"variable | image_url: pad_color: string","path":"/products/health-potion","raw_liquid":"{{ product | image_url: width: 400, height: 400, pad_color: '000' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image.","syntax":"variable | image_url: width: number, height: number","name":"image_url"},{"category":"media","deprecated":true,"deprecation_reason":"The `img_tag` filter has been replaced by [`image_tag`](/docs/api/liquid/filters/image_tag).","description":"You can also use the `img_tag` filter on the following objects:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`image`](/docs/api/liquid/objects/image)\n- [`line_item`](/docs/api/liquid/objects/line_item)\n- [`product`](/docs/api/liquid/objects/product)\n- [`variant`](/docs/api/liquid/objects/variant)","parameters":[{"description":"The image's alt text.","name":"alt","positional":true,"required":false,"types":["string"]},{"description":"The desired `class` attribute.","name":"class","positional":true,"required":false,"types":["string"]},{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product | img_tag }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Optional parameters","description":"The `img_tag` filter accepts 3 unnamed parameters, separated by commas, to specify the `alt` and `class` attributes, and the\n[size](/docs/api/liquid/filters/img_url#img_url-size) of the image. Because the parameters are read in that order, you must include a value for each parameter before the last\nparameter you want to specify. If you don't want to include a parameter that precedes one that you do want to include, then\nyou can set the value to an empty string.\n\n&gt; Note:\n&gt; The `size` attribute of the `img_tag` filter can't be used in conjunction with the [`img_url` filter](/docs/api/liquid/filters/img_url).\n&gt; If both are used, then the `img_url` filter will override the `size` parameter of the `img_tag` filter.\n","syntax":"variable | img_tag: string, string, string","path":"/products/health-potion","raw_liquid":"{{ product | img_tag: 'image alt text', '', '450x450' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;img&gt;` tag for a given image URL.","syntax":"string | img_tag","name":"img_tag"},{"category":"media","deprecated":true,"deprecation_reason":"The `img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).","description":"You can use the `img_url` filter on the following objects:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`image`](/docs/api/liquid/objects/image)\n- [`line_item`](/docs/api/liquid/objects/line_item)\n- [`product`](/docs/api/liquid/objects/product)\n- [`variant`](/docs/api/liquid/objects/variant)","parameters":[{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]},{"description":"The part of the image to show if the specified image has an aspect ratio that differs from the original.","name":"crop","positional":false,"required":false,"types":["string"]},{"description":"The desired pixel density.","name":"scale","positional":false,"required":false,"types":["number"]},{"description":"The desired image format.","name":"format","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product | img_url }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"size","description":"The size parameter allows you to specify the dimensions of the image up to a maximum of 5760 x 5760 px. You can specify only the width, only the height, or both, and you can also use the following named sizes:\n\n| Name | Dimensions |\n| --- | --- |\n| `pico` | `16x16 px` |\n| `icon` | `32x32 px` |\n| `thumb` | `50x50 px` |\n| `small` | `100x100 px` |\n| `compact` | `160x160 px` |\n| `medium` | `240x240 px` |\n| `large` |`480x480 px` |\n| `grande` | `600x600 px` |\n| `original`&lt;br&gt;`master` | `1024x1024 px` |\n","syntax":"variable | img_url: string","path":"/products/health-potion","raw_liquid":"{{ product | img_url: '480x' }}\n\n{{ product | img_url: 'x480' }}\n\n{{ product | img_url: '480x480' }}\n\n{{ product | img_url: 'large' }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"crop","description":"The `crop` parameter allows you to specify which part of the image to show if the specified dimensions result in an aspect ratio that differs from the original. You can use the following values:\n\n- `top`\n- `center`\n- `bottom`\n- `left`\n- `right`\n\nThe default value is `center`.\n","syntax":"variable | img_url: crop: string","path":"/products/health-potion","raw_liquid":"{{ product | img_url: crop: 'bottom' }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"format","description":"Specify which file format to use for the image. The valid formats are `pjpg` and `jpg`.\n\nIt's not practical to convert a lossy image format, like `jpg`, to a lossless image format, like `png`, so this filter does\nonly the following conversions:\n\n- `png` to `jpg`\n- `png` to `pjpg`\n- `jpg` to `pjpg`\n\n&gt; Note:\n&gt; Shopify automatically detects which image formats are supported by the client (e.g. `WebP`, `AVIF`, etc.) and\n&gt; selects a file format for optimal quality and file size. When a format is specified, Shopify takes into account\n&gt; the features (e.g. progressive, alpha channel) of the specified file format when making the final automatic format selection.\n&gt; To learn more, visit https://cdn.shopify.com/.\n","syntax":"variable | img_url: format: string","path":"/products/health-potion","raw_liquid":"{{ product | img_url: format: 'pjpg' }}","parameter":true,"display_type":"text","show_data_tab":true},{"name":"scale","description":"Specify the pixel density of the image. The valid densities are 2 and 3.","syntax":"variable | img_url: scale: number","path":"/products/health-potion","raw_liquid":"{{ product | img_url: scale: 2 }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for an image.","syntax":"variable | img_url","name":"img_url"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The URL to link to.","name":"url","positional":true,"required":true,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'Shopify' | link_to: 'https://www.shopify.com' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"HTML attributes","description":"You can specify [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes) by including a parameter that matches the attribute name, and the desired value.\n","syntax":"string | link_to_type: attribute: string","path":"/","raw_liquid":"{{ 'Shopify' | link_to: 'https://www.shopify.com', class: 'link-class' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;a&gt;` tag.","syntax":"string | link_to: string","name":"link_to"},{"category":"payment","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% for type in shop.enabled_payment_types %}\n&lt;img src=\"{{ type | payment_type_img_url }}\" width=\"50\" height=\"50\" /&gt;\n{% endfor %}","parameter":false,"display_type":"html","show_data_tab":true}],"summary":"Returns the URL for an SVG image of a given [payment type](/docs/api/liquid/objects/shop#shop-enabled_payment_types).","syntax":"string | payment_type_img_url","name":"payment_type_img_url"},{"category":"payment","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The desired `class` attribute.","name":"class","positional":false,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{% for type in shop.enabled_payment_types -%}\n  {{ type | payment_type_svg_tag }}\n{% endfor %}","parameter":false,"display_type":"html","show_data_tab":true},{"name":"class","description":"Specify the `class` attribute of the `&lt;svg&gt;` tag.","syntax":"type | payment_type_svg_tag: class: string","path":"/","raw_liquid":"{% for type in shop.enabled_payment_types -%}\n  {{ type | payment_type_svg_tag: class: 'custom-class' }}\n{% endfor %}","parameter":false,"display_type":"html","show_data_tab":true}],"summary":"Generates an HTML `&lt;svg&gt;` tag for a given [payment type](/docs/api/liquid/objects/shop#shop-enabled_payment_types).","syntax":"string | payment_type_svg_tag","name":"payment_type_svg_tag"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"Accepts the following placeholder names:\n\n| Outline illustrations | Color illustrations |\n| --- | --- |\n| &lt;ul&gt;&lt;li&gt;`product-1`&lt;/li&gt;&lt;li&gt;`product-2`&lt;/li&gt;&lt;li&gt;`product-3`&lt;/li&gt;&lt;li&gt;`product-4`&lt;/li&gt; &lt;li&gt;`product-5`&lt;/li&gt;&lt;li&gt;`product-6`&lt;/li&gt;&lt;li&gt;`collection-1`&lt;/li&gt;&lt;li&gt;`collection-2`&lt;/li&gt;&lt;li&gt;`collection-3`&lt;/li&gt;&lt;li&gt;`collection-4`&lt;/li&gt;&lt;li&gt;`collection-5`&lt;/li&gt;&lt;li&gt;`collection-6`&lt;/li&gt;&lt;li&gt;`lifestyle-1`&lt;/li&gt;&lt;li&gt;`lifestyle-2`&lt;/li&gt;&lt;li&gt;`image`&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`product-apparel-1`&lt;/li&gt;&lt;li&gt;`product-apparel-2`&lt;/li&gt;&lt;li&gt;`product-apparel-3`&lt;/li&gt;&lt;li&gt;`product-apparel-4`&lt;/li&gt;&lt;li&gt;`collection-apparel-1`&lt;/li&gt;&lt;li&gt;`collection-apparel-2`&lt;/li&gt;&lt;li&gt;`collection-apparel-3`&lt;/li&gt;&lt;li&gt;`collection-apparel-4`&lt;/li&gt;&lt;li&gt;`hero-apparel-1`&lt;/li&gt;&lt;li&gt;`hero-apparel-2`&lt;/li&gt;&lt;li&gt;`hero-apparel-3`&lt;/li&gt;&lt;li&gt;`blog-apparel-1`&lt;/li&gt;&lt;li&gt;`blog-apparel-2`&lt;/li&gt;&lt;li&gt;`blog-apparel-3`&lt;/li&gt;&lt;li&gt;`detailed-apparel-1`&lt;/li&gt;&lt;/ul&gt; |","parameters":[{"description":"The desired `class` attribute.","name":"class","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'collection-1' | placeholder_svg_tag }}","parameter":false,"display_type":"html","show_data_tab":true},{"name":"class","description":"Specify the `class` attribute for the `&lt;svg&gt;` tag.","syntax":"string | placeholder_svg_tag: string","path":"/","raw_liquid":"{{ 'collection-1' | placeholder_svg_tag: 'custom-class' }}","parameter":true,"display_type":"html","show_data_tab":true}],"summary":"Generates an HTML `&lt;svg&gt;` tag for a given placeholder name.","syntax":"string | placeholder_svg_tag","name":"placeholder_svg_tag"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"You should use this filter sparingly. For example, consider preloading only resources necessary for rendering\nabove-the-fold content. To learn more about preloading resources, refer to\n[Performance best practices for Shopify themes](/themes/best-practices/performance#preload-key-resources-defer-or-avoid-loading-others).\n\n&gt; Tip:\n&gt; If you want to preload a stylesheet, then use [`stylesheet_tag`](/docs/api/liquid/filters/stylesheet_tag). If you want to\n&gt; preload an image, then use [`image_tag`](/docs/api/liquid/filters/image_tag).\n\nThe input to this filter must be a URL from one of the following filters:\n\n- [`asset_url`](/docs/api/liquid/filters/asset_url)\n- [`global_asset_url`](/docs/api/liquid/filters/global_asset_url)\n- [`shopify_asset_url`](/docs/api/liquid/filters/shopify_asset_url)\n\nThe `preload_tag` filter also requires an [`as` parameter](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as)\nbased on the kind of resource being preloaded.","parameters":[{"description":"The type of element or resource to preload.","name":"as","positional":false,"required":true,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'cart.js' | asset_url | preload_tag: as: 'script' }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"HTML attributes","description":"You can specify [HTML attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attributes) by adding a parameter that matches the attribute name, and the desired value.\n","syntax":"string | preload_tag: as: string, attribute: string","path":"/","raw_liquid":"{{ 'cart.js' | asset_url | preload_tag: as: 'script', type: 'text/javascript' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;link&gt;` tag with a `rel` attribute of `preload` to prioritize loading a given Shopify-hosted asset.\nThe asset URL is also added to the [Link header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link)\nwith a `rel` attribute of `preload`.","syntax":"string | preload_tag: as: string","name":"preload_tag"},{"category":"media","deprecated":true,"deprecation_reason":"The `product_img_url` filter has been replaced by [`image_url`](/docs/api/liquid/filters/image_url).","description":"This can be the product's `featured_image` or any image from the `images` array.","parameters":[{"description":"The desired image size.","name":"size","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.featured_image | product_img_url }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"The size parameter","description":"By default, the `product_img_url` filter returns the `small` version of the image (100 x 100 px). However, you can specify a [size](/docs/api/liquid/filters/img_url#img_url-size).\n","syntax":"image | product_img_url: string","path":"/products/health-potion","raw_liquid":"{{ product.images[0] | product_img_url: 'large' }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a [product image](/docs/api/liquid/objects/product).","syntax":"variable | product_img_url","name":"product_img_url"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'cart.js' | asset_url | script_tag }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;script&gt;` tag for a given resource URL. The tag has a `type` attribute of `text/javascript`.","syntax":"string | script_tag","name":"script_tag"},{"category":"hosted_file","deprecated":false,"deprecation_reason":"","description":"The following are the globally accessible Shopify assets:\n\n- `option_selection.js`\n- `api.jquery.js`\n- `shopify_common.js`\n- `customer_area.js`\n- `currencies.js`\n- `customer.css`","parameters":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'option_selection.js' | shopify_asset_url }}","parameter":false,"display_type":"text","show_data_tab":true}],"summary":"Returns the [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for a globally accessible Shopify asset.","syntax":"string | shopify_asset_url","name":"shopify_asset_url"},{"category":"html","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The type of media that the resource applies to.","name":"media","positional":true,"required":false,"types":["string"]},{"description":"Whether the resource should be preloaded.","name":"preload","positional":false,"required":false,"types":["boolean"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ 'base.css' | asset_url | stylesheet_tag }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"preload","description":"Specify whether the stylesheet should be preloaded.\n\nWhen `preload` is set to `true`, a resource hint is sent as a [Link header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link) with a `rel` value of\n[`preload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload).\n\n```liquid\nLink: &lt;STYLESHEET_URL&gt;; rel=preload; as=style\n```\n\nThis option doesn't affect the HTML link tag directly.\n\nYou should use the `preload` parameter sparingly. For example, consider preloading only render-blocking stylesheets that\nare needed for initial functionality of the page, such as above-the-fold content. To learn more about resource hints in\nShopify themes, refer to [Performance best practices for Shopify themes](/themes/best-practices/performance#preload-key-resources-defer-or-avoid-loading-others).\n","syntax":"stylesheet_url | stylesheet_tag: preload: boolean","path":"","raw_liquid":"","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates an HTML `&lt;link&gt;` tag for a given resource URL. The tag has the following parameters:\n\n| Attribute | Value |\n| --- | --- |\n| `rel` | `stylesheet` |\n| `type` | `text/css` |\n| `media` | `all` |","syntax":"string | stylesheet_tag","name":"stylesheet_tag"},{"category":"format","deprecated":false,"deprecation_reason":"","description":"","parameters":[{"description":"The weight unit to use in place of the default weight unit.","name":"weight_unit","positional":true,"required":false,"types":["string"]}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"examples":[{"name":"","description":"","syntax":"","path":"/products/blue-mountain-flower","raw_liquid":"{%- assign variant = product.variants.first -%}\n\n{{ variant.weight | weight_with_unit }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Override the default unit","description":"You can specify a unit to override the default from the general settings.","syntax":"number | weight_with_unit: variable","path":"/products/blue-mountain-flower","raw_liquid":"{%- assign variant = product.variants.first -%}\n\n{{ variant.weight | weight_with_unit: variant.weight_unit }}","parameter":true,"display_type":"text","show_data_tab":true}],"summary":"Generates a formatted weight for a [`variant` object](/docs/api/liquid/objects/variant#variant-weight). The weight unit is\nset in the [general settings](https://www.shopify.com/admin/settings/general) in the Shopify admin.","syntax":"number | weight_with_unit","name":"weight_with_unit"}];
const objects = [{"access":{"global":false,"parents":[{"object":"product","property":"media"},{"object":"product","property":"featured_media"},{"object":"variant","property":"featured_media"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The `media` object can be returned by the [`product.media` array](/docs/api/liquid/objects/product#product-media) or a\n[`file_reference` metafield](/apps/metafields/types).\n\nYou can use [media filters](/docs/api/liquid/filters/media-filters) to generate URLs and media displays. To learn about how\nto use media in your theme, refer to [Support product media](/themes/product-merchandising/media/support-media).\n\n&gt; Note:\n&gt; Each media type has unique properties in addition to the general `media` properties. To learn about these\n&gt; additional properties, refer to the reference for each type.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the media.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"If the source is a [`file_reference` metafield](/apps/metafields/types), then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The position of the media in the [`product.media` array](/docs/api/liquid/objects/product#product-media).","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Filter for media of a specific type","description":"You can use the `media_type` property with the [`where` filter](/docs/api/liquid/filters/where) to filter the [`product.media` array](/docs/api/liquid/objects/product#product-media) for all media of a desired type.\n","syntax":"","path":"/products/snake-venom","raw_liquid":"{% assign images = product.media | where: 'media_type', 'image' %}\n\n{% for image in images %}\n  {{- image | image_url: width: 300 | image_tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"image","description":"","array_value":""},{"type":"string","name":"model","description":"","array_value":""},{"type":"string","name":"video","description":"","array_value":""},{"type":"string","name":"external_video","description":"","array_value":""}],"summary":"The media type.","name":"media_type"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Preview images don't have an ID attribute.","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"A preview image of the media.","name":"preview_image"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The alt text of the media.","name":"alt"}],"summary":"An abstract media object that can represent the following object types:\n\n- [`image`](/docs/api/liquid/objects/image)\n- [`model`](/docs/api/liquid/objects/model)\n- [`video`](/docs/api/liquid/objects/video)\n- [`external_video`](/docs/api/liquid/objects/external_video)","name":"media","examples":[],"json_data":{"path":"/products/dandelion-milk","handle":"product.media[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"checkout","property":"billing_address"},{"object":"checkout","property":"shipping_address"},{"object":"customer","property":"addresses"},{"object":"customer","property":"default_address"},{"object":"location","property":"address"},{"object":"order","property":"billing_address"},{"object":"order","property":"shipping_address"},{"object":"shop","property":"address"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`format_address` filter](/docs/api/liquid/filters/format_address) to output an address according to its locale.","properties":[{"deprecated":false,"deprecation_reason":"","description":"If no company is specified, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The company of the address.","name":"company"},{"deprecated":false,"deprecation_reason":"","description":"If no phone number is specified, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The phone number of the address.","name":"phone"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first name of the address.","name":"first_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The last name of the address.","name":"last_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A combination of the first and last names of the address.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This only applies to customer addresses.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL for the address.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A summary of the address, including the following properties:\n\n- First and last name\n- First and second lines\n- City\n- Province\n- Country","name":"summary"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the address.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first line of the address.","name":"address1"},{"deprecated":false,"deprecation_reason":"","description":"If no second line is specified, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The second line of the address.","name":"address2"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The city of the address.","name":"city"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The zip or postal code of the address.","name":"zip"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The country of the address in [ISO 3166-1 (alpha 2) format](https://www.iso.org/glossary-for-iso-3166.html).","name":"country_code"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The value doesn't include the preceding [ISO 3166-1](https://www.iso.org/glossary-for-iso-3166.html) country code.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The province of the address in [ISO 3166-2 (alpha 2) format](https://www.iso.org/glossary-for-iso-3166.html).","name":"province_code"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"country","name":"","description":"","array_value":""}],"summary":"The country of the address.","name":"country"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A combination of the first and second lines of the address.","name":"street"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The province of the address.","name":"province"}],"summary":"An address, such as a customer address or order shipping address.","name":"address","examples":[],"json_data":{"path":"/","handle":"shop.address","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"All of the [collections](/docs/api/liquid/objects/collection) on a store.","name":"collections","examples":[{"name":"Iterate over the collections","description":"You can iterate over `collections` to build a collection list.\n","syntax":"","path":"/","raw_liquid":"{% for collection in collections %}\n  {{- collection.title | link_to: collection.url }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Access a specific collection","description":"You can use `collections` to access a collection by its [handle](/docs/api/liquid/basics#handles).\n","syntax":"","path":"/","raw_liquid":"{% for product in collections['sale-potions'].products %}\n  {{- product.title | link_to: product.url }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"collection"}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"All of the [pages](/docs/api/liquid/objects/page) on a store.","name":"pages","examples":[{"name":"","description":"You can access a specific page through the `pages` object using the page's [handle](/docs/api/liquid/basics#handles).\n","syntax":"","path":"/","raw_liquid":"{{ pages.contact.title }}\n{{ pages['about-us'].title }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Paginate the `pages` object","description":"You can [paginate](/docs/api/liquid/tags/paginate) the `pages` object, allowing you to iterate over up to 50 pages at a time.\n","syntax":"","path":"/","raw_liquid":"{% paginate pages by 2 -%}\n  {% for page in pages -%}\n    {{ page.title | link_to: page.url }}\n  {%- endfor %}\n\n  {{- paginate | default_pagination }}\n{%- endpaginate %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"page"}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The `all_products` object has a limit of 20 unique handles per page. If you want more than 20 products,\nthen consider using a collection instead.","properties":[],"summary":"All of the products on a store.","name":"all_products","examples":[{"name":"","description":"You can use `all_products` to access a product by its [handle](/docs/api/liquid/basics#handles). This returns the [`product`](/docs/api/liquid/objects/product) object for the specified product. If the product isn't found, then `empty` is returned.","syntax":"","path":"/","raw_liquid":"{{ all_products['love-potion'].title }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"product"}]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[],"summary":"The [metafields](/docs/api/liquid/objects/metafield) that are [owned by the app](/apps/metafields/app-owned).","name":"metafields"}],"summary":"An app. This object is usually used to access app-specific information for use with [theme app extensions](/apps/online-store/theme-app-extensions).","name":"app","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"cart","property":"discounts"},{"object":"line_item","property":"discounts"},{"object":"order","property":"discounts"},{"object":"checkout","property":"discount"}],"template":[]},"deprecated":true,"deprecation_reason":"Deprecated because not all discount types and details are captured.\n\nThe `discount` object has been replaced by the [`discount_allocation`](/docs/api/liquid/objects/discount_allocation) and\n[`discount_application`](/docs/api/liquid/objects/discount_application) objects.","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`discount.total_amount`](/docs/api/liquid/objects/discount#discount-total_amount).\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount of the discount in the currency's subunit.","name":"amount"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`discount.amount`](/docs/api/liquid/objects/discount#discount-amount).\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount of the discount in the currency's subunit.","name":"total_amount"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`discount.title`](/docs/api/liquid/objects/discount#discount-title).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The customer-facing name of the discount.","name":"code"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`discount.code`](/docs/api/liquid/objects/discount#discount-code).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The customer-facing name of the discount.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"FixedAmountDiscount","description":"","array_value":""},{"type":"string","name":"PercentageDiscount","description":"","array_value":""},{"type":"string","name":"ShippingDiscount","description":"","array_value":""}],"summary":"The type of the discount.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`discount.total_savings`](/docs/api/liquid/objects/discount#discount-total_savings).\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount of the discount as a negative value, in the currency's subunit.","name":"savings"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`discount.savings`](/docs/api/liquid/objects/discount#discount-savings).\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount of the discount as a negative value, in the currency's subunit.","name":"total_savings"}],"summary":"A discount applied to a cart, line item, or order.","name":"discount","examples":[],"json_data":{"path":"/","handle":"customer.orders[2].discounts[0]","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"All of the articles across the blogs in the store.","name":"articles","examples":[{"name":"","description":"You can use `articles` to access an article by its [handle](/docs/api/liquid/basics#handles).\n","syntax":"","path":"/","raw_liquid":"{% assign article = articles['potion-notions/new-potions-for-spring'] %}\n{{ article.title | link_to: article.url }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"article"}]},{"access":{"global":false,"parents":[{"object":"articles","property":""},{"object":"blog","property":"articles"}],"template":["article"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The featured image for the article.","name":"image"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The full name of the author of the article.","name":"author"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the article.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the article.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the article.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the article.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the article.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"The name doesn't include the `article.` prefix, or the file extension (`.json` or `.liquid`).\n\n If a custom template isn't assigned to the article, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the [custom template](/themes/architecture/templates#alternate-templates) assigned to the article.","name":"template_suffix"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the article was created.","name":"created_at"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the article was published.","name":"published_at"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the article was updated.","name":"updated_at"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the blog that the article belongs to is set to [moderate comments](https://help.shopify.com/manual/online-store/blogs/managing-comments).\nReturns `false` if not.","name":"moderated?"},{"deprecated":false,"deprecation_reason":"","description":"Returns an empty array if comments are disabled.\n\n&gt; Tip:\n&gt; Use the [paginate](/docs/api/liquid/tags/paginate) tag to choose how many comments to show at once, up to a limit of 50.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"comment"}],"summary":"The published comments for the article.","name":"comments"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of published comments for the article.","name":"comments_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if comments are enabled. Returns `false` if not.","name":"comments_enabled?"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL where POST requests are sent when creating new comments.","name":"comment_post_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The content of the article.","name":"content"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The excerpt of the article.","name":"excerpt"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Returns the article [excerpt](/docs/api/liquid/objects/article#article-excerpt) if it exists. Returns the article\n[content](/docs/api/liquid/objects/article#article-content) if no excerpt exists.","name":"excerpt_or_content"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Show the total tag count","description":"When looping through `article.tags`, you can print how many times a tag is used with `tag.total_count`. This number shows visitors how many blog posts have been tagged with a particular tag.\n","syntax":"","path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","raw_liquid":"{% for tag in article.tags -%}\n  {{ tag }} ({{ tag.total_count }})\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The tags applied to the article.","name":"tags"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"user","name":"","description":"","array_value":""}],"summary":"The user associated with the author of the article.","name":"user"}],"summary":"An article, or [blog post](https://help.shopify.com/manual/online-store/blogs/writing-blogs), in a blog.","name":"article","examples":[],"json_data":{"path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","handle":"article","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"section","property":"blocks"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Sections and blocks are reusable modules of content that make up [templates](/themes/architecture/templates).\n\nYou can include a maxiumum of 50 blocks in a section. To learn more about using blocks, refer to the [Building with sections and blocks](/docs/themes/best-practices/templates-sections-blocks).","properties":[{"deprecated":false,"deprecation_reason":"","description":"The ID is dynamically generated by Shopify and is subject to change. You should avoid relying on a literal value of this ID.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the block.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"To learn about how to access settings, refer to [Access settings](/themes/architecture/settings#access-settings). To learn which input settings can be applied to the `type` property within settings, refer to [Input settings](/themes/architecture/settings/input-settings).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [settings](/themes/architecture/sections/section-schema#blocks) of the block.","name":"settings"},{"deprecated":false,"deprecation_reason":"","description":"The type is a free-form string that's defined in the [block's schema](/themes/architecture/sections/section-schema#blocks).\nYou can use the type as an identifier. For example, you might display different markup based on the block type.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The type of the block.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"The theme editor's [JavaScript API](/themes/architecture/sections/integrate-sections-with-the-theme-editor#section-and-block-javascript-events)\nuses the data attributes to identify blocks and listen for events. No value for `block.shopify_attributes` is returned\noutside the theme editor.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The data attributes for the block for use in the theme editor.","name":"shopify_attributes"}],"summary":"The content and settings of a [section block](/themes/architecture/sections/section-schema#blocks).","name":"block","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"id\":\"column1\",\"settings\":\"array\",\"shopify_attributes\":\"data-shopify-editor-block=\\\"{\\\"id\\\":\\\"column1\\\",\\\"type\\\":\\\"column\\\"}\\\"\",\"type\":\"column\"}"},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"All of the blogs in the store.","name":"blogs","examples":[{"name":"","description":"You can use `blogs` to access a blog by its [handle](/docs/api/liquid/basics#handles).\n","syntax":"","path":"/","raw_liquid":"{% for article in blogs.potion-notions.articles %}\n  {{- article.title | link_to: article.url }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"blog"}]},{"access":{"global":false,"parents":[],"template":["blog","article"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the blog.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the blog.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the blog.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [paginate](/docs/api/liquid/tags/paginate) tag to choose how many articles to show per page, up to a limit of 50.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"article"}],"summary":"The articles in the blog.","name":"articles"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of articles in the blog. This total doesn't include hidden articles.","name":"articles_count"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"metafield"}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the blog.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the blog.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"The name doesn't include the `blog.` prefix, or the file extension (`.json` or `.liquid`).\n\n If a custom template isn't assigned to the blog, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the [custom template](/themes/architecture/templates#alternate-templates) assigned to the blog.","name":"template_suffix"},{"deprecated":false,"deprecation_reason":"","description":"This includes tags of articles that aren't in the current pagination view.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"All of the tags on the articles in the blog.","name":"all_tags"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"A list of all of the tags on all of the articles in the blog.\n\nUnlike [`blog.all_tags`](/docs/api/liquid/objects/blog#blog-all_tags), this property only returns tags of articles that are in the\nfiltered view.","name":"tags"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if comments are enabled for the blog. Returns `false` if not.","name":"comments_enabled?"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the blog is set to\n[moderate comments](https://help.shopify.com/manual/online-store/blogs/managing-comments). Returns `false` if not.","name":"moderated?"},{"deprecated":false,"deprecation_reason":"","description":"Returns `nil` if there is no next article.\n\nThis property can be used on the [article page](/themes/architecture/templates/article) to output `next` links.","examples":[],"return_type":[{"type":"article","name":"","description":"","array_value":""}],"summary":"The next (older) article in the blog.","name":"next_article"},{"deprecated":false,"deprecation_reason":"","description":"Returns `nil` if there is no previous article.\n\nThis property can be used on the [article page](/themes/architecture/templates/article) to output `previous` links.","examples":[],"return_type":[{"type":"article","name":"","description":"","array_value":""}],"summary":"The previous (newer) article in the blog.","name":"previous_article"}],"summary":"Information about a specific [blog](https://help.shopify.com/manual/online-store/blogs/adding-a-blog) in the store.","name":"blog","examples":[],"json_data":{"path":"/blogs/potion-notions/new-potions-for-spring","handle":"blog","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"shop","property":"brand"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The slogan for the brand.","name":"slogan"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A short description of the brand.","name":"short_description"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The square logo for the brand, resized to 32x32 px.","name":"favicon_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The square logo for the brand, resized to 32x32 px.","name":"cover_image"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The default logo for the brand.","name":"logo"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The square logo for the brand.","name":"square_logo"},{"deprecated":false,"deprecation_reason":"","description":"To learn about how to access brand colors, refer to [`brand_color`](/docs/api/liquid/objects/brand_color).","examples":[],"return_type":[],"summary":"The brand's colors.","name":"colors"},{"deprecated":false,"deprecation_reason":"","description":"Social links are stored in [metafields](/docs/api/liquid/objects/metafield), and can be accessed using the syntax `shop.brand.metafields.social_links.&lt;platform&gt;.value`.\n\n| Platforms |\n| --- |\n| `facebook` |\n| `pinterest` |\n| `instagram` |\n| `tiktok` |\n| `tumblr` |\n| `snapchat` |\n| `vimeo` |","examples":[{"name":"Access social links","description":"","syntax":"","path":"/","raw_liquid":"{{ shop.brand.metafields.social_links.twitter.value }}\n{{ shop.brand.metafields.social_links.youtube.value }}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[],"summary":"The social links for the brand.","name":"metafields"}],"summary":"The [brand assets](https://help.shopify.com/manual/promoting-marketing/managing-brand-assets) for the store.","name":"brand","examples":[],"json_data":{"path":"/","handle":"shop.brand","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":["cart"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if any of the products in the cart require shipping. Returns `false` if not.","name":"requires_shipping"},{"deprecated":false,"deprecation_reason":"","description":"To learn more about capturing cart notes, refer to the [`cart` template](/themes/architecture/templates/cart#support-cart-notes-and-attributes).","examples":[{"name":"Capture cart notes","description":"To capture a cart note, include an HTML input such as a `&lt;textarea&gt;` with an attribute of `name=\"note\"` within the cart `&lt;form&gt;`.\n\n```liquid\n&lt;label&gt;Gift note:&lt;/label&gt;\n&lt;textarea name=\"note\"&gt;&lt;/textarea&gt;\n```\n\n&gt; Note:\n&gt; There can only be one instance of `{{ cart.note }}` on the cart page. If there are multiple instances,\n&gt; then the one that comes latest in the Document Object Model (DOM) will be submitted with the form.\n","syntax":"","path":"/cart","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Additional information captured with the cart.","name":"note"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of items in the cart.","name":"item_count"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total price of all of the items in the cart in the currency's subunit, after discounts have been applied.","name":"total_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount that the customer will be charged at checkout in the currency's subunit.","name":"checkout_charge_amount"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total price of all of the items in the cart in the currency's subunit, before discounts have been applied.","name":"original_total_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total price of all of the items in the cart in the currency's subunit, after any line item discounts. This\ndoesn't include taxes (unless taxes are included in the prices), cart discounts, or shipping costs.","name":"items_subtotal_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount of all discounts (the amount saved) for the cart in the currency's subunit.","name":"total_discount"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The line items in the cart.","name":"items"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if there are no items in the cart. Return's `false` if there are.","name":"empty?"},{"deprecated":false,"deprecation_reason":"","description":"If the store uses multi-currency, then this is the same as the customer's local\n(presentment) currency. Otherwise, it's the same as the store currency.\n\n&gt; Tip:\n&gt; You can output the store's available currencies using [`shop.enabled_currencies`](/docs/api/liquid/objects/shop#shop-enabled_currencies).","examples":[],"return_type":[],"summary":"The currency of the cart.","name":"currency"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`weight_with_unit`](/docs/api/liquid/filters/weight_with_unit) filter to format the weight in\n&gt; [the store's format](https://www.shopify.com/admin/settings/general), or override the default unit.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total weight of all of the items in the cart in grams.","name":"total_weight"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Display discount applications","description":"","syntax":"","path":"/cart","raw_liquid":"{% for discount_application in cart.discount_applications %}\n  Discount name: {{ discount_application.title }}\n  Savings: -{{ discount_application.total_allocated_amount | money }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"The discount applications for the cart.","name":"discount_applications"},{"deprecated":false,"deprecation_reason":"","description":"To learn more about capturing cart attributes, refer to the [`cart` template](/themes/architecture/templates/cart#support-cart-notes-and-attributes).","examples":[{"name":"Capture cart attributes","description":"To capture a cart attribute, include an HTML input with an attribute of `name=\"attributes[attribute-name]\"` within the cart `&lt;form&gt;`.\n\n```liquid\n&lt;label&gt;What do you want engraved on your cauldron?&lt;/label&gt;\n&lt;input type=\"text\" name=\"attributes[cauldron-engraving]\" value=\"{{ cart.attributes.cauldron-engraving }}\" /&gt;\n```\n\n&gt; Tip:\n&gt; You can add a double underscore `__` prefix to an attribute name to make it private. Private attributes behave like other cart attributes, except that they can't be read from Liquid or the Ajax API.\n&gt; You can use them for data that doesn't affect the page rendering, which allows for more effective page caching.\n","syntax":"","path":"/cart","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"Additional attributes entered by the customer with the cart.","name":"attributes"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Display cart-level discount applications","description":"","syntax":"","path":"/cart","raw_liquid":"{% for discount_application in cart.cart_level_discount_applications %}\n  Discount name: {{ discount_application.title }}\n  Savings: -{{ discount_application.total_allocated_amount | money }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"The cart-specific discount applications for the cart.","name":"cart_level_discount_applications"},{"deprecated":true,"deprecation_reason":"Deprecated because not all discount types and details are available.\n\nThe `cart.discounts` property has been replaced by [`cart.discount_applications`](/docs/api/liquid/objects/cart#cart-discount_applications).","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount"}],"summary":"The discounts applied to the cart.","name":"discounts"},{"deprecated":false,"deprecation_reason":"","description":"This can be set in a store’s [tax settings](https://www.shopify.com/admin/settings/taxes).\n\nIf the store includes or exclude tax [based on the customer’s country](https://help.shopify.com/manual/taxes/location#include-or-exclude-tax-based-on-your-customers-country),\nthen the value reflects the tax requirements of the customer’s country.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if taxes are included in the prices of products in the cart. Returns `false` if not.","name":"taxes_included"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if duties are included in the prices of products in the cart. Returns `false` if not.","name":"duties_included"}],"summary":"A customer’s cart.","name":"cart","examples":[],"json_data":{"path":"/","handle":"cart","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"This drop is used to hold resources of different types that are the closest to the current context. These resources can be of type `product`, `collection`, `article`, `blog`, `page`, or `metaobject`.\nThe resources of different types within the closest drop can be:\n - The currently rendered section or theme block resource setting of the same type\n - The currently rendered theme block's ancestor resource setting of the same type\n - The currently rendered template resource of the same type\n - Assigned via {% content_for %} tag\n\n&gt; Tip:\n&gt; To learn about how closest drop in theme settings can be used, refer to [Dynamic sources](/storefronts/themes/architecture/blocks/theme-blocks/dynamic-sources#accessing-the-closest-resource).","properties":[{"deprecated":false,"deprecation_reason":"","description":"The product resource that is the closest to the current context.","examples":[],"return_type":[{"type":"product","name":"","description":"","array_value":""}],"summary":"Closest product resource","name":"product"},{"deprecated":false,"deprecation_reason":"","description":"The collection resource that is the closest to the current context.","examples":[],"return_type":[{"type":"collection","name":"","description":"","array_value":""}],"summary":"Closest collection resource","name":"collection"},{"deprecated":false,"deprecation_reason":"","description":"The article resource that is the closest to the current context.","examples":[],"return_type":[{"type":"article","name":"","description":"","array_value":""}],"summary":"Closest article resource","name":"article"},{"deprecated":false,"deprecation_reason":"","description":"The blog resource that is the closest to the current context.","examples":[],"return_type":[{"type":"blog","name":"","description":"","array_value":""}],"summary":"Closest blog resource","name":"blog"},{"deprecated":false,"deprecation_reason":"","description":"The page resource that is the closest to the current context.","examples":[],"return_type":[{"type":"page","name":"","description":"","array_value":""}],"summary":"Closest page resource","name":"page"},{"deprecated":false,"deprecation_reason":"","description":"The metaobject resources that are the closest to the current context.","examples":[],"return_type":[{"type":"metaobject","name":"","description":"","array_value":""}],"summary":"Closest metaobject resources","name":"metaobject"}],"summary":"A drop that holds resources of different types that are the closest to the current context","name":"closest","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"collections","property":""}],"template":["collection"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"metafield"}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the collection.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the collection.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the collection.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the collection.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The description of the collection.","name":"description"},{"deprecated":false,"deprecation_reason":"","description":"The name doesn't include the `collection.` prefix, or the file extension (`.json` or `.liquid`).\n\n If a custom template isn't assigned to the collection, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the [custom template](/themes/architecture/templates#alternate-templates) assigned to the collection.","name":"template_suffix"},{"deprecated":false,"deprecation_reason":"","description":"You can query for products from a certain vendor at the `/collections/vendors` URL\nwith a query parameter in the format of `?q=[vendor]`, where `[vendor]` is your desired product vendor.\n\n&gt; Tip:\n&gt; The query value is case-insensitive, so `apparelco` is equivalent to `ApparelCo` or `APPARELCO`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The vendor name on a vendor collection page.","name":"current_vendor"},{"deprecated":false,"deprecation_reason":"","description":"You can query for products of a certain type at the `/collections/types` URL\nwith a query parameter in the format of `?q=[type]`, where `[type]` is your desired product type.\n\n&gt; Tip:\n&gt; The query value is case-insensitive, so `shirts` is equivalent to `Shirts` or `SHIRTS`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The product type on a product type collection page.","name":"current_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the collection.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the collection was published.","name":"published_at"},{"deprecated":false,"deprecation_reason":"","description":"This image is added on the collection's page in the Shopify admin.","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The image for the collection.","name":"image"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Output the sort options","description":"","syntax":"","path":"/collections/all","raw_liquid":"{%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}\n\n&lt;select&gt;\n{%- for option in collection.sort_options %}\n  &lt;option\n    value=\"{{ option.value }}\"\n    {%- if option.value == sort_by %}\n      selected=\"selected\"\n    {%- endif %}\n  &gt;\n    {{ option.name }}\n  &lt;/option&gt;\n{% endfor -%}\n&lt;/select&gt;","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"sort_option"}],"summary":"The available sorting options for the collection.","name":"sort_options"},{"deprecated":false,"deprecation_reason":"","description":"If there's no `sort_by` URL parameter, then the value is `nil`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The sort order applied to the collection by the `sort_by` URL parameter.","name":"sort_by"},{"deprecated":false,"deprecation_reason":"","description":"This is set on the collection's page in the Shopify admin.","examples":[],"return_type":[{"type":"string","name":"manual","description":"","array_value":""},{"type":"string","name":"best-selling","description":"","array_value":""},{"type":"string","name":"title-ascending","description":"","array_value":""},{"type":"string","name":"price-ascending","description":"","array_value":""},{"type":"string","name":"price-descending","description":"","array_value":""},{"type":"string","name":"created-ascending","description":"","array_value":""},{"type":"string","name":"created-descending","description":"","array_value":""}],"summary":"The default sort order of the collection.","name":"default_sort_by"},{"deprecated":false,"deprecation_reason":"","description":"This property can be used on the [product page](/themes/architecture/templates/product) to output `next` links.","examples":[],"return_type":[{"type":"product","name":"","description":"","array_value":""}],"summary":"The next product in the collection. Returns `nil` if there's no next product.","name":"next_product"},{"deprecated":false,"deprecation_reason":"","description":"This property can be used on the [product page](/themes/architecture/templates/product) to output `previous` links.","examples":[],"return_type":[{"type":"product","name":"","description":"","array_value":""}],"summary":"The previous product in the collection. Returns `nil` if there's no previous product.","name":"previous_product"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of products in the current view of the collection.","name":"products_count"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [paginate](/docs/api/liquid/tags/paginate) tag to choose how many products to show per page, up to a limit of 50.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"product"}],"summary":"All of the products in the collection.","name":"products"},{"deprecated":false,"deprecation_reason":"","description":"This includes products that have been filtered out of the current view.\n\n&gt; Tip:\n&gt; To display the number of products in a filtered collection, use [`collection.products_count`](/docs/api/liquid/objects/collection#collection-products_count).","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of products in a collection.","name":"all_products_count"},{"deprecated":false,"deprecation_reason":"","description":"This includes tags for products that have been filtered out of the current view.\nA maximum of 1,000 tags can be returned.\n\n&gt; Tip:\n&gt; To display the tags that are currently applied, use [`collection.tags`](/docs/api/liquid/objects/collection#collection-tags).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"All of the tags applied to the products in the collection.","name":"all_tags"},{"deprecated":false,"deprecation_reason":"","description":"This doesn't include tags for products that have been filtered out of the current view.\nReturns `nil` if no tags have been applied, or all products with tags have been filtered out of the current view.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The tags that are currently applied to the collection.","name":"tags"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Create links to product types","description":"Use the [`link_to_type`](/docs/api/liquid/filters/link_to_type) filter to create links to the product types in a collection.\n","syntax":"","path":"/collections/ingredients","raw_liquid":"{% for product_type in collection.all_types -%}\n  {{- product_type | link_to_type }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"All of the product types in a collection.","name":"all_types"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Create links to vendors","description":"Use the [`link_to_vendor`](/docs/api/liquid/filters/link_to_vendor) filter to create links to the vendors in a collection.\n","syntax":"","path":"/collections/ingredients","raw_liquid":"{% for product_vendor in collection.all_vendors %}\n  {{- product_vendor | link_to_vendor }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"All of the product vendors in a collection.","name":"all_vendors"},{"deprecated":false,"deprecation_reason":"","description":"Only filters relevant to the current collection are returned. Filters will be empty for collections that contain over 5000 products.\n\nTo learn about supporting filters in your theme, refer to [Support storefront filtering](/themes/navigation-search/filtering/storefront-filtering/support-storefront-filtering).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"filter"}],"summary":"The [storefront filters](https://help.shopify.com/manual/online-store/themes/customizing-themes/storefront-filters) that\nhave been set up on the collection.","name":"filters"},{"deprecated":false,"deprecation_reason":"","description":"The default is the [collection image](/docs/api/liquid/objects/collection#collection-image). If this image isn't available, then\nShopify falls back to the featured image of the first product in the collection. If the first product in the collection\ndoesn't have a featured image, then `nil` is returned.","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The featured image for the collection.","name":"featured_image"}],"summary":"A [collection](https://help.shopify.com/manual/products/collections) in a store.","name":"collection","examples":[],"json_data":{"path":"/collections/ingredients/burning","handle":"collection","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"brand","property":"colors"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"The colors defined as part of a store's [brand assets](https://help.shopify.com/manual/promoting-marketing/managing-brand-assets).","name":"brand_color","examples":[{"name":"","description":"To access a brand color, specify the following:\n- The brand color group: either `primary` or `secondary`\n- The color role: Whether the color is a `background` or `foreground` (contrasting) color\n- The 0-based index of the color within the group and role\n","syntax":"shop.brand.colors.group[index].role","path":"/","raw_liquid":"{{ shop.brand.colors.primary[0].background }}\n{{ shop.brand.colors.primary[0].foreground }}\n{{ shop.brand.colors.secondary[0].background }}\n{{ shop.brand.colors.secondary[1].background }}\n{{ shop.brand.colors.secondary[0].foreground }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":false,"parents":[{"object":"swatch","property":"color"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use [color filters](/docs/api/liquid/filters/color-filters) to modify or extract properties of a `color` object.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The red component of the color, which is a number between 0 and 255.","name":"red"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The green component of the color, which is a number between 0 and 255.","name":"green"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The blue component of the color, which is a number between 0 and 255.","name":"blue"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The red, green, and blue values of the color, represented as a space-separated string.","name":"rgb"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The red, green, blue, and alpha values of the color, represented as a\nspace-separated string, with a slash before the alpha channel.","name":"rgba"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The hue component of the color, which is a number between 0 and 360.","name":"hue"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The saturation component of the color, which is a number between 0 and 100.","name":"saturation"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The lightness component of the color, which is a number between 0 and 100.","name":"lightness"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The alpha component of the color, which is a decimal number between 0.0 and 1.0.","name":"alpha"}],"summary":"A color from a [`color` setting](/themes/architecture/settings/input-settings#color).","name":"color","examples":[{"name":"Referencing color settings directly","description":"When a color setting is referenced directly, the hexidecimal color code is returned.\n","syntax":"","path":"/","raw_liquid":"{{ settings.colors_accent_2 }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/","handle":"settings.colors_accent_2","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about color scheme groups in themes, refer to [`color_scheme_group` setting](/themes/architecture/settings/input-settings#color_scheme_group).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the color_scheme","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [settings](https://shopify.dev/docs/themes/architecture/settings/input-settings#color_scheme_group) of the color_scheme.","name":"settings"}],"summary":"A color_scheme from a [`color_scheme` setting](/themes/architecture/settings/input-settings#color_scheme).","name":"color_scheme","examples":[{"name":"Referencing color_scheme settings directly","description":"When a color_scheme setting is referenced directly, the color scheme ID is returned.\n","syntax":"","path":"/","raw_liquid":"{{ settings.card_color_scheme }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/","handle":"settings.card_color_scheme","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about color schemes in themes, refer to [`color_scheme` setting](/themes/architecture/settings/input-settings#color_scheme).","properties":[],"summary":"A color_scheme_group from a [`color_scheme_group` setting](/themes/architecture/settings/input-settings#color_scheme_group).","name":"color_scheme_group","examples":[{"name":"Referencing color_scheme_group settings directly","description":"","syntax":"","path":"/","raw_liquid":"{% for scheme in settings.color_schemes %}\n  .color-{{ scheme.id }} {\n    --color-background: {{ scheme.settings.background }};\n    --color-text: {{ scheme.settings.text }};\n  }\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/","handle":"settings.color_schemes","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"company_location","property":"shipping_address"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about B2B in themes, refer to [Support B2B customers in your theme](/themes/pricing-payments/b2b).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The attention line of the address.","name":"attention"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the address.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first line of the address.","name":"address1"},{"deprecated":false,"deprecation_reason":"","description":"If no second line is specified, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The second line of the address.","name":"address2"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first name of the address.","name":"first_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The last name of the address.","name":"last_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The city of the address.","name":"city"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The zip or postal code of the address.","name":"zip"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The country of the address in [ISO 3166-1 (alpha 2) format](https://www.iso.org/glossary-for-iso-3166.html).","name":"country_code"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The value doesn't include the preceding [ISO 3166-1](https://www.iso.org/glossary-for-iso-3166.html) country code.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The province of the address in [ISO 3166-2 (alpha 2) format](https://www.iso.org/glossary-for-iso-3166.html).","name":"province_code"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"country","name":"","description":"","array_value":""}],"summary":"The country of the address.","name":"country"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A combination of the first and second lines of the address.","name":"street"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The province of the address.","name":"province"}],"summary":"The address of a company location.","name":"company_address","examples":[],"json_data":{"path":"/","handle":"customer.company_available_locations[0].shipping_address","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"company_location","property":"company"},{"object":"customer","property":"current_company"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about B2B in themes, refer to [Support B2B customers in your theme](/themes/pricing-payments/b2b).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the company.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the company.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The external ID of the company.","name":"external_id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"company_location"}],"summary":"The company locations that the current customer has access to, or can interact with.","name":"available_locations"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of company locations associated with the customer's company.","name":"available_locations_count"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"metafield"}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the company.","name":"metafields"}],"summary":"A company that a [customer](/docs/api/liquid/objects/customer) is purchasing for.","name":"company","examples":[],"json_data":{"path":"/","handle":"customer.company_available_locations[0].company","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"company","property":"available_locations"},{"object":"customer","property":"company_available_locations"},{"object":"customer","property":"current_location"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about B2B in themes, refer to [Support B2B customers in your theme](/themes/pricing-payments/b2b).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the location.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the location.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The external ID of the location.","name":"external_id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL to set the location as the current location for the customer.","name":"url_to_set_as_current"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the location is currently selected. Returns `false` if not.","name":"current?"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"company","name":"","description":"","array_value":""}],"summary":"The company that the location is associated with.","name":"company"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"company_address","name":"","description":"","array_value":""}],"summary":"The address of the location.","name":"shipping_address"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The tax ID of the location.","name":"tax_registration_id"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"metafield"}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the company location.","name":"metafields"}],"summary":"A location of the [company](/docs/api/liquid/objects/company) that a [customer](/docs/api/liquid/objects/customer) is purchasing for.","name":"company_location","examples":[],"json_data":{"path":"/","handle":"customer.company_available_locations[0]","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Include the `content_for_header` object in your [layout files](/themes/architecture/layouts) between the `&lt;head&gt;` and\n`&lt;/head&gt;` HTML tags.\n\nYou shouldn't try to modify or parse the `content_for_header` object because the contents are subject to change, which can\nchange the behaviour of your code.\n\n&gt; Note:\n&gt; The `content_for_header` object is required in `theme.liquid`.","properties":[],"summary":"Dynamically returns all scripts required by Shopify.","name":"content_for_header","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"localization","property":"available_countries"},{"object":"localization","property":"country"},{"object":"address","property":"country"},{"object":"company_address","property":"country"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn how to use the `country` object to offer localization options in your theme,\nrefer to [Support multiple currencies and languages](/themes/internationalization/multiple-currencies-languages).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the country.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ISO code of the country in [ISO 3166-1 (alpha 2) format](https://www.iso.org/glossary-for-iso-3166.html).","name":"iso_code"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"imperial","description":"","array_value":""},{"type":"string","name":"metric","description":"","array_value":""}],"summary":"The unit system of the country.","name":"unit_system"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"currency","name":"","description":"","array_value":""}],"summary":"The currency used in the country.","name":"currency"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"market","name":"","description":"","array_value":""}],"summary":"The market that includes this country.","name":"market"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the country is popular for this shop. Otherwise, returns `false`.\nThis can be useful for sorting countries in a country selector.","name":"popular?"},{"deprecated":false,"deprecation_reason":"","description":"Possible values are `Africa`, `Asia`, `Central America`, `Europe`, `North America`, `Oceania`, and `South America`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The continent that the country is in.","name":"continent"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"shop_locale"}],"summary":"The languages that have been added to the market that this country belongs to.","name":"available_languages"}],"summary":"A country supported by the store's localization options.","name":"country","examples":[{"name":"Referencing the `country` object directly","description":"When the country object is referenced directly, `country.name` is returned.\n","syntax":"","path":"/","raw_liquid":"{% for country in localization.available_countries -%}\n  {{ country }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Rendering a flag image","description":"When the country object is passed to the [`image_url`](/docs/api/liquid/filters#image_url) filter, a [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for that country’s flag is returned. All country’s flags are SVGs, normalized to an aspect ratio of 4:3.\n","syntax":"","path":"/","raw_liquid":"{{ localization.country | image_url: width: 32 | image_tag }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/","handle":"localization.country","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"cart","property":"currency"},{"object":"country","property":"currency"},{"object":"shop","property":"enabled_currencies"},{"object":"money","property":"currency"},{"object":"shop","property":"money_format"},{"object":"shop","property":"money_with_currency_format"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [ISO code](https://www.iso.org/iso-4217-currency-codes.html) of the currency.","name":"iso_code"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The symbol of the currency.","name":"symbol"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the currency.","name":"name"}],"summary":"Information about a currency, like the ISO code and symbol.","name":"currency","examples":[],"json_data":{"path":"/","handle":"localization.country.currency","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[{"object":"checkout","property":"customer"},{"object":"gift_card","property":"customer"},{"object":"order","property":"customer"}],"template":["customers/account","customers/addresses","customers/order"]},"deprecated":false,"deprecation_reason":"","description":"The `customer` object is directly accessible globally when a customer is logged in to their account. It's also defined in\nthe following contexts:\n\n- The [`customers/account` template](/themes/architecture/templates/customers-account)\n- The [`customers/addresses` template](/themes/architecture/templates/customers-addresses)\n- The [`customers/order` template](/themes/architecture/templates/customers-order)\n- When accessing [`checkout.customer`](/docs/api/liquid/objects/checkout#checkout-customer)\n- When accessing [`gift_card.customer`](/docs/api/liquid/objects/gift_card#gift_card-customer)\n- When accessing [`order.customer`](/docs/api/liquid/objects/order#order-customer)\n\nOutside of the above contexts, if the customer isn't logged into their account, the `customer` object returns `nil`.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first name of the customer.","name":"first_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The last name of the customer.","name":"last_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of orders that the customer has placed.","name":"orders_count"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount that the customer has spent on all orders in the currency's subunit.","name":"total_spent"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [paginate](/docs/api/liquid/tags/paginate) tag to choose how many orders to show at once, up to a limit of 20.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"order"}],"summary":"All of the orders placed by the customer.","name":"orders"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"order","name":"","description":"","array_value":""}],"summary":"The last order placed by the customer, not including test orders.","name":"last_order"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The full name of the customer.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The email of the customer.","name":"email"},{"deprecated":false,"deprecation_reason":"","description":"This phone number is only populated if the customer checks out using a phone number during checkout, opts in to SMS\nnotifications, or if the merchant has manually entered it.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The phone number of the customer.","name":"phone"},{"deprecated":false,"deprecation_reason":"","description":"A customer can complete a checkout without making an account with the store. If the customer\ndoesn't have an account with the store, then `customer.has_account` is `false` at checkout.\n\nDuring the checkout process, if the customer has an account with the store and enters an email associated\nwith an account, then `customer.has_account` is `true`. The email is associated with the account regardless\nof whether the customer has logged into their account.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the email associated with the customer is tied to a\n[customer account](https://help.shopify.com/manual/customers/customer-accounts). Returns `false` if not.","name":"has_account"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the customer accepts marketing. Returns `false` if not.","name":"accepts_marketing"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the customer.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The tags associated with the customer.","name":"tags"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"address","name":"","description":"","array_value":""}],"summary":"The default address of the customer.","name":"default_address"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [paginate](/docs/api/liquid/tags/paginate) tag to choose how many addresses to show at once, up to a limit of 20.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"address"}],"summary":"All of the addresses associated with the customer.","name":"addresses"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of addresses associated with the customer.","name":"addresses_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the customer is exempt from taxes. Returns `false` if not.","name":"tax_exempt"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"customer_payment_method"}],"summary":"The customer's saved payment methods.","name":"payment_methods"},{"deprecated":false,"deprecation_reason":"","description":"To learn about B2B in themes, refer to [Support B2B customers in your theme](/themes/pricing-payments/b2b).","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the customer is a B2B customer. Returns `false` if not.","name":"b2b?"},{"deprecated":false,"deprecation_reason":"","description":"To learn about B2B in themes, refer to [Support B2B customers in your theme](/themes/pricing-payments/b2b).\n\n&gt; Tip:\n&gt; Use the [paginate](/docs/api/liquid/tags/paginate) tag to choose how many company locations to show at once, up to a limit of 100.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"company_location"}],"summary":"The company locations that the customer has access to, or can interact with.","name":"company_available_locations"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of company locations associated with the customer.","name":"company_available_locations_count"},{"deprecated":false,"deprecation_reason":"","description":"To learn about B2B in themes, refer to [Support B2B customers in your theme](/themes/pricing-payments/b2b).","examples":[],"return_type":[{"type":"company_location","name":"","description":"","array_value":""}],"summary":"The currently selected company location.","name":"current_location"},{"deprecated":false,"deprecation_reason":"","description":"To learn about B2B in themes, refer to [Support B2B customers in your theme](/themes/pricing-payments/b2b).","examples":[],"return_type":[{"type":"company","name":"","description":"","array_value":""}],"summary":"The company that the customer is purchasing for.","name":"current_company"},{"deprecated":false,"deprecation_reason":"","description":"A customer may have an avatar associated with their account, which can be displayed in the storefront.\n\n&gt; Tip:\n&gt; Use with the [`avatar`](/docs/api/liquid/filters/avatar) filter to render the customer's avatar.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if an avatar is associated with a customer. Returns `false` if not.","name":"has_avatar?"}],"summary":"A [customer](https://help.shopify.com/manual/customers) of the store.","name":"customer","examples":[{"name":"Check whether the `customer` object is defined","description":"When using the `customer` object outside of customer-specific templates or objects that specifically return a customer, you should check whether the `customer` object is defined.\n","syntax":"","path":"/","raw_liquid":"{% if customer %}\n  Hello, {{ customer.first_name }}!\n{% endif %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/","handle":"customer","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"customer","property":"payment_methods"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"A payment method that a customer has saved to their account for reuse (e.g. a credit card).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The instrument type of the payment method (e.g credit_card).","name":"payment_instrument_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The identifier for the payment method.","name":"token"}],"summary":"A customer's saved payment method.","name":"customer_payment_method","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"line_item","property":"discount_allocations"},{"object":"shipping_method","property":"discount_allocations"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to display discounts in your theme, refer to [Discounts](/themes/pricing-payments/discounts).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"discount_application","name":"","description":"","array_value":""}],"summary":"The discount application that applies the discount to the item.","name":"discount_application"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount that the item is discounted by in the currency's subunit.","name":"amount"}],"summary":"Information about how a discount affects an item.","name":"discount_allocation","examples":[],"json_data":{"path":"/","handle":"customer.orders[2].line_items[0].discount_allocations[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"cart","property":"discount_applications"},{"object":"order","property":"discount_applications"},{"object":"discount_allocation","property":"discount_application"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to display discounts in your theme, refer to [Discounts](/themes/pricing-payments/discounts).","properties":[{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount of the discount in the currency's subunit.","name":"total_allocated_amount"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The customer-facing name of the discount.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"How this value is interpreted depends on the [value type](/docs/api/liquid/objects/discount_application#discount_application-value_type) of the\ndiscount. The following table outlines what the value represents for each value type:\n\n| Value type | Value |\n| --- | --- |\n| `fixed_amount` | The amount of the discount in the currency's subunit. |\n| `percentage` | The percent amount of the discount. |\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The value of the discount.","name":"value"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Whether the selection method applies to line items or shipping lines depends on the discount's\n&gt; [target type](/docs/api/liquid/objects/discount_application#discount_application-target_type).","examples":[],"return_type":[{"type":"string","name":"all","description":"The discount applies to all line items or shipping lines.","array_value":""},{"type":"string","name":"entitled","description":"The discount applies to a specific set of line items or shipping lines based on some criteria.","array_value":""},{"type":"string","name":"explicit","description":"The discount applies to a specific line item or shipping line.","array_value":""}],"summary":"The selection method for line items or shipping lines to be discounted.","name":"target_selection"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"automatic","description":"","array_value":""},{"type":"string","name":"discount_code","description":"","array_value":""},{"type":"string","name":"manual","description":"","array_value":""},{"type":"string","name":"script","description":"","array_value":""}],"summary":"The type of the discount.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"fixed_amount","description":"","array_value":""},{"type":"string","name":"percentage","description":"","array_value":""}],"summary":"The value type of the discount.","name":"value_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"line_item","description":"","array_value":""},{"type":"string","name":"shipping_line","description":"","array_value":""}],"summary":"The type of item that the discount applies to.","name":"target_type"}],"summary":"Information about the intent of a discount.","name":"discount_application","examples":[],"json_data":{"path":"/","handle":"cart.discount_applications[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"product","property":"media"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`external_video_tag` filter](/docs/api/liquid/filters/external_video_tag) to output the video in an\n&gt; HTML `&lt;iframe&gt;` tag. Use the [`external_video_url` filter](/docs/api/liquid/filters/external_video_url) to specify parameters\n&gt; for the external video player.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the video from its external source.","name":"external_id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The aspect ratio of the video as a decimal.","name":"aspect_ratio"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"youtube","description":"","array_value":""},{"type":"string","name":"vimeo","description":"","array_value":""}],"summary":"The service that hosts the video.","name":"host"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The alt text of the external video.","name":"alt"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the external video.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Filter for media of a specific type","description":"You can use the `media_type` property with the [`where` filter](/docs/api/liquid/filters/where) to filter the [`product.media` array](/docs/api/liquid/objects/product#product-media) for all media of a desired type.\n","syntax":"","path":"/products/potion-beats","raw_liquid":"{% assign external_videos = product.media | where: 'media_type', 'external_video' %}\n\n{% for external_video in external_videos %}\n  {{- external_video | external_video_tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The media type of the external video. Always returns `external_video`.","name":"media_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The position of the external video in the [`product.media`](/docs/api/liquid/objects/product#product-media) array.","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Preview images don't have an ID attribute.","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"A preview image of the media.","name":"preview_image"}],"summary":"Information about an external video from YouTube or Vimeo.","name":"external_video","examples":[],"json_data":{"path":"/products/potion-beats","handle":"product.featured_media","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"collection","property":"filters"},{"object":"search","property":"filters"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about supporting filters in your theme, refer to [Support storefront filtering](/themes/navigation-search/filtering/storefront-filtering/support-storefront-filtering).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL parameter for the filter. For example, `filter.v.option.color`.","name":"param_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The customer-facing label for the filter.","name":"label"},{"deprecated":false,"deprecation_reason":"","description":"Example:\nFor a filter named `color` with values `red` and `blue`:\n  - If the operator is `AND`, it will filter items that are both red and blue.\n  - If the operator is `OR`, it will filter items that are either red or blue or both.\n\nFilters that support the `AND` operator:\n  - Product tags\n  - Metafields of type `list.single_line_text_field` and `list.metaobject_reference`","examples":[],"return_type":[{"type":"string","name":"AND","description":"Includes products that match all buyer selections.","array_value":""},{"type":"string","name":"OR","description":"Includes products that match at least one buyer selection.","array_value":""}],"summary":"The logical operator used by the filter.\nReturns a value only for `boolean` and `list` type filters. Returns `nil` for other types.","name":"operator"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"boolean","description":"","array_value":""},{"type":"string","name":"list","description":"","array_value":""},{"type":"string","name":"price_range","description":"","array_value":""}],"summary":"The type of the filter.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"filter_value"}],"summary":"The values of the filter that are currently active.\n\nThe array can have values only for `boolean` and `list` type filters.","name":"active_values"},{"deprecated":false,"deprecation_reason":"","description":"The array can have values only for `boolean` and `list` type filters.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"filter_value"}],"summary":"The values of the filter that are currently inactive.","name":"inactive_values"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"filter_value"}],"summary":"The values of the filter.\n\nThe array can have values only for `boolean` and `list` type filters.","name":"values"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"filter_value","name":"","description":"","array_value":""}],"summary":"The `false` filter value.\n\nReturns a value for `boolean` type filters if the unfiltered view has at least one result with the `false` filter value. Otherwise, it returns `nil`.","name":"false_value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"filter_value","name":"","description":"","array_value":""}],"summary":"The `true` filter value.\n\nReturns a value for `boolean` type filters if the unfiltered view has at least one result with the `true` filter value. Otherwise, it returns `nil`.","name":"true_value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"filter_value","name":"","description":"","array_value":""}],"summary":"The highest filter value.\n\nReturns a value only for `price_range` type filters. Returns `nil` for other types.","name":"max_value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"filter_value","name":"","description":"","array_value":""}],"summary":"The lowest filter value.\n\nReturns a value only for `price_range` type filters. Returns `nil` for other types.","name":"min_value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The highest product price within the collection or search results.\n\nReturns a value only for `price_range` type filters. Returns `nil` for other types.","name":"range_max"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The current page URL with the URL parameter related to the filter removed.","name":"url_to_remove"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"image","description":"","array_value":""},{"type":"string","name":"swatch","description":"","array_value":""},{"type":"string","name":"text","description":"","array_value":""}],"summary":"Describes how to present the filter values.\n\nReturns a value only for `list` type filters. Returns `nil` for other types.","name":"presentation"}],"summary":"A [storefront filter](https://help.shopify.com/manual/online-store/themes/customizing-themes/storefront-filters).","name":"filter","examples":[],"json_data":{"path":"/search?q=potion&amp;filter.v.option.strength=Low","handle":"search.filters.to_a[3]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"filter_value","property":"display"}],"template":[]},"deprecated":true,"deprecation_reason":"Deprecated in favor of the [swatch](/docs/api/liquid/objects/swatch) drop.","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"colors","description":"","array_value":""},{"type":"string","name":"image","description":"","array_value":""}],"summary":"The type of visual representation.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"Can be a list of [`colors`](/docs/api/liquid/objects/color) or an [`image`](/docs/api/liquid/objects/image).\nRefer to the [`type`](#filter_value_display-type) property to determine the type of visual representation.","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The visual representation.","name":"value"}],"summary":"The visual representation of a filter value.","name":"filter_value_display","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"filter","property":""},{"object":"filter","property":"false_value"},{"object":"filter","property":"true_value"},{"object":"filter","property":"max_value"},{"object":"filter","property":"min_value"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about supporting filters in your theme, refer to [Support storefront filtering](/themes/navigation-search/filtering/storefront-filtering/support-storefront-filtering).","properties":[{"deprecated":false,"deprecation_reason":"","description":"For example, `filter.v.option.color`.\n\nFilters of type `price_range` include an extra component depending on whether the filter value is for the filter's\n`min_value` or `max_value`. The following table outlines the URL parameter for each:\n\n| Value type | URL parameter |\n| --- | --- |\n| `min_value` | `filter.v.price.gte` |\n| `max_value` | `filter.v.price.lte` |","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL parameter for the parent filter of the filter value.","name":"param_name"},{"deprecated":false,"deprecation_reason":"","description":"For example, `High` will be used in the URL as `filter.v.option.strength=High`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The value for the URL parameter. The `value` is paired with the [`param_name`](#filter_value-param_name) property.","name":"value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the value is currently active. Returns `false` if not.\n\nCan only return `true` for filters of type `boolean` or `list`.","name":"active"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of results related to the filter value.\n\nReturns a value only for `boolean` and `list` type filters. Returns `nil` for `price_range` type filters.","name":"count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The customer-facing label for the filter value. For example, `Red` or `Rouge`.\n\nReturns a value only for `boolean` and `list` type filters. Returns `nil` for `price_range` type filters.","name":"label"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Any [pagination](/docs/api/liquid/tags/paginate) URL parameters are removed.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The current page URL with the filter value parameter added.","name":"url_to_add"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Any [pagination](/docs/api/liquid/tags/paginate) URL parameters are also removed.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The current page URL with the filter value parameter removed.","name":"url_to_remove"},{"deprecated":true,"deprecation_reason":"Deprecated in favor of the [swatch](#swatch) attribute.","description":"Returns a visual representation for the filter value.\nIf no visual representation is available, then `nil` is returned.","examples":[],"return_type":[{"type":"filter_value_display","name":"","description":"","array_value":""}],"summary":"The visual representation of the filter value.","name":"display"},{"deprecated":false,"deprecation_reason":"","description":"Returns a [swatch](/docs/api/liquid/objects/swatch) drop for the filter value.\nRequires the [filter presentation](/docs/api/liquid/objects/filter#filter-presentation) to be `swatch` and saved color or image content for the swatch. Otherwise, returns `nil`.","examples":[],"return_type":[{"type":"swatch","name":"","description":"","array_value":""}],"summary":"The visual representation of the filter value when a swatch is used.","name":"swatch"},{"deprecated":false,"deprecation_reason":"","description":"Returns an [image](/docs/api/liquid/objects/image) drop for the filter value.\nRequires the [filter presentation](/docs/api/liquid/objects/filter#filter-presentation) to be `image` and for an image to be available. Otherwise, returns `nil`.","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The visual representation of the filter value when an image is used.","name":"image"}],"summary":"A specific value of a filter.","name":"filter_value","examples":[],"json_data":{"path":"/search?q=potion&amp;filter.v.option.strength=Low","handle":"search.filters.to_a[3].values[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"image_presentation","property":"focal_point"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The focal point will remain visible when the image is cropped by the\ntheme. [Learn more about supporting focal points in your theme](https://shopify.dev/themes/architecture/settings/input-settings#image-focal-points).\n\n&gt; Tip:\n&gt; Use the [`image_tag`](/docs/api/liquid/filters/image_tag) filter to automatically apply focal point settings to an\n&gt; image on the storefront. This applies the focal point using the `object-position` CSS property.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The horizontal position of the focal point, as a percent of the image width. Returns `50` if no focal point is set.","name":"x"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The vertical position of the focal point, as a percent of the image height. Returns `50` if no focal point is set.","name":"y"}],"summary":"The focal point for an image.","name":"focal_point","examples":[{"name":"Referencing the `focal_point` object directly","description":"When a `focal_point` object is referenced directly, the coordinates are returned as a string, in the format `X% Y%`.\n","syntax":"","path":"/","raw_liquid":"{{ images['potions-header.png'].presentation.focal_point }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"You can use the `font` object in Liquid [assets](/themes/architecture#assets) or inside a [`style` tag](/docs/api/liquid/tags/style)\nto apply font setting values to theme CSS.\n\n&gt; Tip:\n&gt; Use [font filters](/docs/api/liquid/filters/font-filters) to modify properties of the `font` object, load the font,\n&gt; or obtain font variants.","properties":[{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; If the family name contains non-alphanumeric characters (A-Z, a-z, 0-9, or '-'), then it will be wrapped in double quotes.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The family name of the font.","name":"family"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The fallback families of the font.","name":"fallback_families"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The baseline ratio of the font as a decimal.","name":"baseline_ratio"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The weight of the font.","name":"weight"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The style of the font.","name":"style"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"font"}],"summary":"The variants in the family of the font.","name":"variants"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; You can use this property to determine whether you need to include a corresponding [font-face](/docs/api/liquid/filters/font_face)\n&gt; declaration for the font.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the font is a system font. Returns `false` if not.","name":"system?"}],"summary":"A font from a [`font_picker` setting](/themes/architecture/settings/input-settings#font_picker).","name":"font","examples":[],"json_data":{"path":"/","handle":"settings.type_header_font","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"If there are no errors, then `nil` is returned.\n\n&gt; Tip:\n&gt; You can apply the [`default_errors` filter](/docs/api/liquid/filters/default_errors) to `form.errors` to output default\n&gt; error messages without having to loop through the array.","examples":[],"return_type":[{"type":"form_errors","name":"","description":"","array_value":""}],"summary":"Any errors from the form.","name":"errors"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first address line associated with the address.","name":"address1"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The second address line associated with the address.","name":"address2"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`new_comment` form](/docs/api/liquid/tags/form#form-new_comment).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the author of the article comment.","name":"author"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`contact`](/docs/api/liquid/tags/form#form-contact) and [`new_comment`](/docs/api/liquid/tags/form#form-new_comment)\nforms.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The content of the contact submission or article comment.","name":"body"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The city associated with the address.","name":"city"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The company associated with the address.","name":"company"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The country associated with the address.","name":"country"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the following forms:\n\n- [`contact`](/docs/api/liquid/tags/form#form-contact)\n- [`create_customer`](/docs/api/liquid/tags/form#form-create_customer)\n- [`customer`](/docs/api/liquid/tags/form#form-customer)\n- [`customer_login`](/docs/api/liquid/tags/form#form-customer_login)\n- [`new_comment`](/docs/api/liquid/tags/form#form-new_comment)\n- [`recover_customer_password`](/docs/api/liquid/tags/form#form-recover_customer_password)\n- [`product`](/docs/api/liquid/tags/form#form-product)","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The email associated with the form.","name":"email"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`create_customer`](/docs/api/liquid/tags/form#form-create_customer) and\n[`customer_address`](/docs/api/liquid/tags/form#form-customer_address) forms.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first name associated with the customer or address.","name":"first_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the form.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`create_customer`](/docs/api/liquid/tags/form#form-create_customer) and\n[`customer_address`](/docs/api/liquid/tags/form#form-customer_address) forms.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The last name associated with the customer or address.","name":"last_name"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_login` form](/docs/api/liquid/tags/form#form-customer_login).","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true`.","name":"password_needed"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The phone number associated with the address.","name":"phone"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address) always returns `true`.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the form was submitted successfully. Returns `false` if there were errors.","name":"posted_successfully?"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The province associated with the address.","name":"province"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Renders an HTML checkbox that can submit the address as the customer's default address.","name":"set_as_default_checkbox"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`product` form](/docs/api/liquid/tags/form#form-product).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The nickname of the gift card recipient.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`product` form](/docs/api/liquid/tags/form#form-product).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The personalized message intended for the recipient.","name":"message"},{"deprecated":false,"deprecation_reason":"","description":"This property is exclusive to the [`customer_address` form](/docs/api/liquid/tags/form#form-customer_address).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The zip or postal code associated with the address.","name":"zip"}],"summary":"Information about a form created by a [`form` tag](/docs/api/liquid/tags/form).","name":"form","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"address1\":\"12 Phoenix Feather Alley\",\"address2\":\"1\",\"author\":null,\"body\":null,\"city\":\"Calgary\",\"company\":null,\"country\":\"Canada\",\"email\":null,\"errors\":null,\"first_name\":\"Cornelius\",\"id\":\"new\",\"last_name\":\"Potionmaker\",\"password_needed?\":false,\"phone\":\"44 131 496 0905\",\"posted_successfully?\":true,\"province\":\"Alberta\",\"set_as_default_checkbox\":\"&lt;input type='checkbox' id='address_default_address_new' name='address[default]' value='1'&gt;\",\"zip\":\"T1X 0L4\"}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"line_item","property":"fulfillment"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the fulfillment was created.","name":"created_at"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of items in the fulfillment.","name":"item_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The line items in the fulfillment.","name":"fulfillment_line_items"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the fulfillment service.","name":"tracking_company"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"An array of the fulfillment's tracking numbers.","name":"tracking_numbers"},{"deprecated":false,"deprecation_reason":"","description":"If there's no tracking number, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The fulfillment's tracking number.","name":"tracking_number"},{"deprecated":false,"deprecation_reason":"","description":"If there's no tracking number, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the fulfillment's tracking number.","name":"tracking_url"}],"summary":"An order [fulfillment](https://help.shopify.com/manual/orders/fulfillment), which includes information like the line items\nbeing fulfilled and shipment tracking.","name":"fulfillment","examples":[],"json_data":{"path":"/","handle":"customer.orders[4].line_items[0].fulfillment","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"metafield","property":"value"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about metafield types, refer to [Metafield types](/apps/metafields/types).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) for the file.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the file.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The media type of the model. Always returns `generic_file`.","name":"media_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"A preview image for the file.","name":"preview_image"},{"deprecated":false,"deprecation_reason":"","description":"If the source is a [`file_reference` metafield](/apps/metafields/types), then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The position of the media in the [`product.media` array](/docs/api/liquid/objects/product#product-media).","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The alt text of the media.","name":"alt"}],"summary":"A file from a `file_reference` type [metafield](/docs/api/liquid/objects/metafield) that is neither an image or video.","name":"generic_file","examples":[],"json_data":{"path":"/products/health-potion","handle":"product.metafields.information.disclaimers.value","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":["gift_card.liquid"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The remaining balance of the gift card in the currency's subunit.","name":"balance"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The code used to redeem the gift card.","name":"code"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [ISO code](https://www.iso.org/iso-4217-currency-codes.html) of the currency that the gift card was issued in.","name":"currency"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"customer","name":"","description":"","array_value":""}],"summary":"The customer associated with the gift card.","name":"customer"},{"deprecated":false,"deprecation_reason":"","description":"If there is no recipient associated with the gift card, then `nil` is returned.","examples":[],"return_type":[{"type":"recipient","name":"","description":"","array_value":""}],"summary":"The recipient associated with the gift card.","name":"recipient"},{"deprecated":false,"deprecation_reason":"","description":"If there is no message intended for the recipient, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The personalized message intended for the recipient.","name":"message"},{"deprecated":false,"deprecation_reason":"","description":"If the gift card does not have a scheduled date, then `nil` is returned.\n&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the date.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The scheduled date on which the gift card will be sent to the recipient.","name":"send_on"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the gift card is enabled. Returns `false` if not.","name":"enabled"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the gift card is expired. Returns `false` if not.","name":"expired"},{"deprecated":false,"deprecation_reason":"","description":"If the gift card never expires, then `nil` is returned.\n&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the gift card expires.","name":"expires_on"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The initial balance of the gift card in the currency's subunit.","name":"initial_value"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; The page at this URL is rendered through the [`gift_card.liquid` template](/themes/architecture/templates/gift-card-liquid)\n&gt; of the theme.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL to view the gift card. This URL is on the `checkout.shopify.com` domain.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"The name doesn't include the `gift_card.` prefix, or the `.liquid` file extension.\n\n If a custom template isn't assigned to the gift card, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the [custom template](/themes/architecture/templates#alternate-templates) assigned to the gift card.","name":"template_suffix"},{"deprecated":false,"deprecation_reason":"","description":"If there aren't any line item properties, then an [`EmptyDrop`](/docs/api/liquid/basics#emptydrop) is returned.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"summary":"The [line item properties](/docs/api/liquid/objects/line_item#line_item-properties) assigned to the gift card.","name":"properties"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A string used to generate a QR code for the gift card.","name":"qr_identifier"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL to download the gift card as an Apple Wallet Pass.","name":"pass_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"product","name":"","description":"","array_value":""}],"summary":"The product associated with the gift card.","name":"product"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The last 4 characters of the code used to redeem the gift card.","name":"last_four_characters"}],"summary":"A [gift card](https://help.shopify.com/manual/products/gift-card-products) that's been issued to a customer or a recipient.","name":"gift_card","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"balance\":5000,\"code\":\"WCGX 7X97 K9HJ DFR8\",\"currency\":\"CAD\",\"customer\":{},\"enabled\":true,\"expired\":false,\"expires_on\":null,\"initial_value\":5000,\"last_four_characters\":\"DFR8\",\"message\":null,\"send_on\":null,\"pass_url\":\"https://polinas-potent-potions.myshopify.com/v1/passes/pass.com.shopify.giftcardnext/94af7fbe55d010130df8d8bc4a338d36/\",\"product\":{},\"properties\":{},\"qr_identifier\":\"shopify-giftcard-v1-3TKWJKJBM3X7PBRK\",\"recipient\":null,\"template_suffix\":null,\"url\":\"https://checkout.shopify.com/gift_cards/56174706753/0011c591fc720d0a51b80cdb694f969e\"}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"article","property":"image"},{"object":"blog","property":"image"},{"object":"collection","property":"image"},{"object":"generic_file","property":"preview_image"},{"object":"line_item","property":"image"},{"object":"media","property":"preview_image"},{"object":"model","property":"preview_image"},{"object":"product","property":"featured_image"},{"object":"product","property":"media"},{"object":"product","property":"images"},{"object":"variant","property":"image"},{"object":"video","property":"preview_image"},{"object":"brand","property":"favicon_url"},{"object":"brand","property":"cover_image"},{"object":"brand","property":"logo"},{"object":"brand","property":"square_logo"},{"object":"collection","property":"featured_image"},{"object":"external_video","property":"preview_image"},{"object":"filter_value","property":"image"},{"object":"image","property":"preview_image"},{"object":"swatch","property":"image"},{"object":"variant","property":"featured_image"},{"object":"user","property":"image"},{"object":"page_image","property":""}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about the image formats that Shopify supports, visit the [Shopify Help Center](https://help.shopify.com/manual/online-store/images/theme-images#image-formats).\n\n&gt; Tip:\n&gt; Use the [`image_url`](/docs/api/liquid/filters/image_url) and [`image_tag`](/docs/api/liquid/filters/image_tag) filters to display\n&gt; images on the storefront.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image_presentation","name":"","description":"","array_value":""}],"summary":"The presentation settings for the image.","name":"presentation"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the image.","name":"src"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The width of the image in pixels.","name":"width"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The height of the image in pixels.","name":"height"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The aspect ratio of the image as a decimal.","name":"aspect_ratio"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The alt text of the image.","name":"alt"},{"deprecated":false,"deprecation_reason":"","description":"The `attached_to_variant?` property is only available for images accessed through the following sources:\n\n- [`product.featured_image`](/docs/api/liquid/objects/product#product-featured_image)\n- [`product.images`](/docs/api/liquid/objects/product#product-images)\n\nIf you reference this property on an image from another source, then `nil` is returned.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the image is associated with a variant. Returns `false` if not.","name":"attached_to_variant?"},{"deprecated":false,"deprecation_reason":"","description":"If you reference the `id` property for preview images of [`generic_file`](/docs/api/liquid/objects/generic_file) or\n[`media`](/docs/api/liquid/objects/media) objects, then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the image.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"The `media_type` property is only available for images accessed through the following sources:\n\n- [`product.media`](/docs/api/liquid/objects/product#product-media)\n- [`file_reference` type metafields](/apps/metafields/types#supported-types)\n\nIf you reference this property on an image from another source, then `nil` is returned.","examples":[{"name":"Filter for media of a specific type","description":"You can use the `media_type` property with the [`where` filter](/docs/api/liquid/filters/where) to filter the [`product.media` array](/docs/api/liquid/objects/product#product-media) for all media of a desired type.\n","syntax":"","path":"/products/snake-venom","raw_liquid":"{% assign images = product.media | where: 'media_type', 'image' %}\n\n{% for image in images %}\n  {{- image | image_url: width: 300 | image_tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The media type of the image. Always returns `image`.","name":"media_type"},{"deprecated":false,"deprecation_reason":"","description":"The `position` property is only available for images that are associated with a product. If you reference this property\non an image from another source, then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The position of the image in the [`product.images`](/docs/api/liquid/objects/product#product-images) or [`product.media`](/docs/api/liquid/objects/product#product-media)\narray.","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"The `preview_image` property is only available for images accessed through the following sources:\n\n- [`product.featured_media`](/docs/api/liquid/objects/product#product-featured_media)\n- [`product.media`](/docs/api/liquid/objects/product#product-media)\n- [`file_reference` type metafields](/apps/metafields/types#supported-types)\n\nIf you reference this property on an image from another source, then `nil` is returned.","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"A preview image for the image.","name":"preview_image"},{"deprecated":false,"deprecation_reason":"","description":"The `product_id` property is only available for images associated with a product. If you reference this property on\nan image from another source, then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the product that the image is associated with.","name":"product_id"},{"deprecated":false,"deprecation_reason":"","description":"The `variants` property is only available for images accessed through the following sources:\n\n- [`product.featured_image`](/docs/api/liquid/objects#product-featured_image)\n- [`product.images`](/docs/api/liquid/objects/product#product-images)\n\nIf you reference this property on an image from another source, then `nil` is returned.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"variant"}],"summary":"The product variants that the image is associated with.","name":"variants"}],"summary":"An image, such as a product or collection image.","name":"image","examples":[{"name":"Referencing the `image` object directly","description":"When an `image` object is referenced directly, the image's relative URL path is returned.\n","syntax":"","path":"/products/forest-mushroom","raw_liquid":"{{ product.featured_image }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/products/charcoal","handle":"product.featured_image","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"image"}]},{"access":{"global":false,"parents":[{"object":"image","property":"presentation"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"focal_point","name":"","description":"","array_value":""}],"summary":"The focal point for the image.","name":"focal_point"}],"summary":"The presentation settings for an image.","name":"image_presentation","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"All of the [images](/docs/api/liquid/objects/image) that have been [uploaded](https://help.shopify.com/manual/online-store/images/theme-images#upload-images)\nto a store.","name":"images","examples":[{"name":"","description":"You can access images from the `images` array by their filename.\n","syntax":"","path":"/","raw_liquid":"{{ images['potions-header.png'] | image_url: width: 300 | image_tag }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"image"}]},{"access":{"global":false,"parents":[{"object":"cart","property":"line_items"},{"object":"checkout","property":"line_items"},{"object":"order","property":"line_items"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"The ID differs depending on the context. The following table outlines the possible contexts and their associated values:\n\n| Context | Value |\n| --- | --- |\n| [`cart.items`](/docs/api/liquid/objects/cart#cart-items) | The ID of the line item's variant.&lt;br&gt;&lt;br&gt;This ID isn't unique, and can be shared by multiple items with the same variant. |\n| [`checkout.line_items`](/docs/api/liquid/objects/checkout#checkout-line_items) | A temporary unique hash generated for the checkout. |\n| [`order.line_items`](/docs/api/liquid/objects/order#order-line_items) | A unique integer ID. |","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the line item.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The quantity of the line item.","name":"quantity"},{"deprecated":true,"deprecation_reason":"Deprecated because discounts from automatic discounts and discount codes aren't included.\n\nThe `line_item.price` property has been replaced by [`line_item.final_price`](/docs/api/liquid/objects/line_item#line_item-final_price).","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the line item in the currency's subunit. This includes any discounts from [Shopify Scripts](https://help.shopify.com/manual/checkout-settings/script-editor).","name":"price"},{"deprecated":true,"deprecation_reason":"Deprecated because discounts from automatic discounts and discount codes aren't included.\n\nThe `line_item.line_price` property has been replaced by [`line_item.final_line_price`](/docs/api/liquid/objects/line_item#line_item-final_line_price).","description":"The value is equal to `line_item.price` multiplied by `line_item.quantity`. It's output in the customer's local\n(presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The combined price, in the currency's subunit, of all of the items in a line item. This includes any discounts from [Shopify Scripts](https://help.shopify.com/manual/checkout-settings/script-editor).","name":"line_price"},{"deprecated":true,"deprecation_reason":"Deprecated because discounts from automatic discounts and discount codes aren't included.\n\nThe `line_item.total_discount` property has been replaced by [`line_item.line_level_total_discount`](/docs/api/liquid/objects/line_item#line_item-line_level_total_discount).","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount, in the currency's subunit, of any discounts applied to the line item by [Shopify Scripts](https://help.shopify.com/manual/checkout-settings/script-editor).","name":"total_discount"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Caution:\n&gt; Not applicable for item component as discounts are applied to the parent line item.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_allocation"}],"summary":"The discount allocations that apply to the line item.","name":"discount_allocations"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the line item in the currency's subunit. This includes any line-level discounts.","name":"final_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is equal to `line_item.final_price` multiplied by `line_item.quantity`. It's output in the customer's local\n(presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The combined price, in the currency's subunit, of all of the items in the line item. This includes any line-level discounts.","name":"final_line_price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The [ID](/docs/api/liquid/objects/variant#variant-id) of the line item's variant.","name":"variant_id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The [ID](/docs/api/liquid/objects/product#product-id) of the line item's product.","name":"product_id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"product","name":"","description":"","array_value":""}],"summary":"The product associated with the line item.","name":"product"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"variant","name":"","description":"","array_value":""}],"summary":"The variant associated with the line item.","name":"variant"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"tax_line"}],"summary":"The tax lines for the line item.","name":"tax_lines"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"fulfillment","name":"","description":"","array_value":""}],"summary":"The fulfillment of the line item.","name":"fulfillment"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of items from the line item that have been successfully fulfilled.","name":"successfully_fulfilled_quantity"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [fulfillment service](https://help.shopify.com/manual/shipping/understanding-shipping/dropshipping-and-fulfillment-services)\nfor the vartiant associated with the line item. If there's no fulfillment service, then `manual` is returned.","name":"fulfillment_service"},{"deprecated":false,"deprecation_reason":"","description":"You can add, or allow customers to add, custom information to a line item with line item properties.\n\nLine item properties consist of a name and value pair. They can be captured with the following methods:\n\n- [A custom input inside a product form](/themes/architecture/templates/product#line-item-properties)\n- [The AJAX Cart API](/api/ajax/reference/cart#add-line-item-properties)\n\n&gt; Tip:\n&gt; To learn about how to display captured properties, refer to [Display line item properties](/themes/architecture/templates/cart#display-line-item-properties).","examples":[{"name":"Capture line item properties in the product form","description":"To capture line item properties inside the [product form](/docs/api/liquid/tags/form#form-product), you need to include an input, for each property. Each  input needs a unique `name` attribute. Use the following format:\n\n```\nname=\"properties[property-name]\"\n```\n\nThe value of the input is captured as the value of the property.\n\nFor example, you can use the following code to capture custom engraving text for a product:\n\n```liquid\n{% form 'product', product %}\n  ...\n  &lt;label for=\"engravingText\"&gt;Engraving&lt;label&gt;\n  &lt;input type=\"text\" id=\"engravingText\" name=\"properties[Engraving]\"&gt;\n  ...\n{% endform %}\n```\n\n&gt; Tip:\n&gt; You can add an underscore to the beginning of a property name to hide it from customers at checkout. For example,\n&gt; `properties[_hiddenPropertyName]`.\n","syntax":"","path":"/products/health-potion","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"summary":"The properties of the line item.","name":"properties"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Unit prices are available only to stores located in Germany or France.\n\nTo learn about how to display unit prices in your theme, refer to [Unit pricing](/themes/pricing-payments/unit-pricing).","examples":[],"return_type":[{"type":"unit_price_measurement","name":"","description":"","array_value":""}],"summary":"The unit price measurement of the line item.","name":"unit_price_measurement"},{"deprecated":false,"deprecation_reason":"","description":"The price reflects any discounts that are applied to the line item. The value is output in the customer's local\n(presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Note:\n&gt; Unit prices are available only to stores located in Germany and France.\n\nTo learn about how to display unit prices in your theme, refer to [Unit pricing](/themes/pricing-payments/unit-pricing).\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The [unit price](https://help.shopify.com/manual/intro-to-shopify/initial-setup/sell-in-france/price-per-unit#add-unit-prices-to-your-product)\n of the line item in the currency's subunit.","name":"unit_price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [sku](/docs/api/liquid/objects/variant#variant-sku) of the variant associated with the line item.","name":"sku"},{"deprecated":false,"deprecation_reason":"","description":"The following table outlines what's returned depending on the number of discounts affecting the line item:\n\n| Number of discounts | Value |\n| --- | --- |\n| 0 | `nil` |\n| 1 | The [title](/docs/api/liquid/objects/discount_application#discount_application-title) of the discount. |\n| More than 1 | A Shopify generated string noting how many discounts have been applied. |","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Information about the discounts that have affected the line item.","name":"message"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The vendor of the variant associated with the line item.","name":"vendor"},{"deprecated":false,"deprecation_reason":"","description":"In most contexts, the line item title appears in the customer's preferred language. However, in the context of an\n[order](/docs/api/liquid/objects/order), the line item title appears in the language that the customer checked out in.\nThe title can receive an override value from the [Cart Transform API](/docs/api/functions/reference/cart-transform#showing-overrides).\nOverrides take precedence over translations.\n\n#### Line item title history\n\nWhen referencing line item, product, and variant titles in the context of an order, the following changes might result\nin a different output than you expect:\n\n- A product or variant being deleted\n- A product or variant title being edited\n\nWhen `line_item.title` is referenced for an order, the line item title at the time of the order is returned.\nHowever, when `line_item.product.title` and `line_item.variant.title` are referenced, the current value for\neach title is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the line item. The title is a combination of `line_item.product.title` and `line_item.variant.title`, separated\nby a hyphen.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if taxes should be charged on the line item. Returns `false` if not.","name":"taxable"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the line item in the currency's subunit, before discounts have been applied.","name":"original_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is equal to `line_item.original_price` multiplied by `line_item.quantity`. It's output in the customer's local\n(presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The combined price of all of the items in a line item in the currency's subunit, before any discounts have been applied.","name":"original_line_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount of any discounts applied to the line item in the currency's subunit.","name":"line_level_total_discount"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Caution:\n&gt; Not applicable for item component as discounts are applied to the parent line item.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_allocation"}],"summary":"The discount allocations that apply directly to the line item.","name":"line_level_discount_allocations"},{"deprecated":true,"deprecation_reason":"Deprecated because not all discount types and details are available.\n\nThe `line_item.discounts` property has been replaced by [`line_item.discount_allocations`](/docs/api/liquid/objects/line_item#line_item-discount_allocations).","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount"}],"summary":"The discounts applied to the line item.","name":"discounts"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the product associated with the line item is a gift card. Returns `false` if not.","name":"gift_card"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant associated with the line item requires shipping. Returns `false` if not.","name":"requires_shipping"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The array is never empty because variants with no options still have a default option. Because of this, you should use\n&gt; `line_item.product.has_only_default_variant` to check whether there's any information to output.","examples":[{"name":"Output the option values","description":"","syntax":"","path":"/","raw_liquid":"{% for item in cart.items %}\n&lt;div class=\"cart__item\"&gt;\n  &lt;p class=\"cart__item-title\"&gt;\n    {{ item.title }}\n  &lt;/p&gt;\n\n  {%- unless item.product.has_only_default_variant %}\n  &lt;ul&gt;\n    {% for option in item.options_with_values -%}\n    &lt;li&gt;{{ option.name }}: {{ option.value }}&lt;/li&gt;\n    {%- endfor %}\n  &lt;/ul&gt;\n  {% endunless %}\n&lt;/div&gt;\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"untyped"}],"summary":"The name and value pairs for each option of the variant associated with the line item.","name":"options_with_values"},{"deprecated":false,"deprecation_reason":"","description":"Line item keys are unique identifiers that consist of the following components separated by a colon:\n\n- The ID of the variant associated with the line item\n- A hash of unique characteristics of the line item.\n\nNote: Line item keys are not stable identifiers. The line item key will change as characteristics of the line item change. This includes, but is not limited to, properties and discount applications.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The key of the line item.","name":"key"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use this property with the [`weight_with_unit` filter](/docs/api/liquid/filters/weight_with_unit) to format the weight.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The weight of the line item in the store's [default weight unit](https://help.shopify.com/manual/intro-to-shopify/initial-setup/setup-business-settings#set-or-change-your-stores-default-weight-unit).","name":"grams"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the variant associated with the line item.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn more about how to use this property in your theme, refer to [Remove line items from the cart](/themes/architecture/templates/cart#remove-line-items-from-the-cart).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A URL to remove the line item from the cart.","name":"url_to_remove"},{"deprecated":false,"deprecation_reason":"","description":"The image can come from one of the following sources:\n\n- The image of the variant associated with the line item\n- The featured image of the product associated with the line item, if there's no variant image","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The image of the line item.","name":"image"},{"deprecated":false,"deprecation_reason":"","description":"#### Availability of selling plan information\n\nThe following properties aren't available when referencing selling plan information through an\n[order's line items](/docs/api/liquid/objects/order#order-line_items):\n\n- [`selling_plan_allocation.compare_at_price`](/docs/api/liquid/objects/selling_plan_allocation#selling_plan_allocation-compare_at_price)\n- [`selling_plan_allocation.price_adjustments`](/docs/api/liquid/objects/selling_plan_allocation#selling_plan_allocation-price_adjustments)\n- [`selling_plan_allocation.selling_plan.group_id`](/docs/api/liquid/objects/selling_plan#selling_plan-group_id)\n- [`selling_plan_allocation.selling_plan.options`](/docs/api/liquid/objects/selling_plan#selling_plan-options)\n- [`selling_plan_allocation.selling_plan.price_adjustments`](/docs/api/liquid/objects/selling_plan#selling_plan-price_adjustments)\n- [`selling_plan_allocation.selling_plan_group_id`](/docs/api/liquid/objects/selling_plan_allocation#selling_plan_allocation-selling_plan_group_id)\n\n&gt; Tip:\n&gt; If you need to show selling plan information post-purchase, then you should use [`selling_plan.name`](/docs/api/liquid/objects/selling_plan#selling_plan-name).","examples":[],"return_type":[{"type":"selling_plan_allocation","name":"","description":"","array_value":""}],"summary":"The selling plan allocation of the line item. If the line item doesn't have a selling plan allocation, then `nil` is returned.","name":"selling_plan_allocation"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This field is applicable for cart line item only.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The components of a line item.","name":"item_components"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\nThis field is applicable for cart line item only and currently available for shops using Checkout Extensibility.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"An informational error message about the status of the line item in the buyer's chosen language.","name":"error_message"}],"summary":"A line in a cart, checkout, or order. Each line item represents a product variant.","name":"line_item","examples":[],"json_data":{"path":"/","handle":"customer.orders[4].line_items[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"linklist","property":"links"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to implement navigation in a theme, refer to [Add navigation to your theme](/themes/navigation-search/navigation).","properties":[{"deprecated":false,"deprecation_reason":"","description":"A link is considered to be active if the current URL path matches, or contains, the link's [url](/docs/api/liquid/objects/link#link-url).\nFor example, if the current URL path is `/blog/potion-notions/new-potions-for-spring`, then the following link URLs\nwould be considered active:\n\n- `/blog/potion-notions/new-potions-for-spring`\n- `/blog/potion-notions`\n\n&gt; Tip:\n&gt; The `link.active` property is useful for menu designs that highlight when top-level navigation categories are being\n&gt; viewed. For example, if a customer is viewing an article from the \"Potion notions\" blog, then the \"Potion notions\" link\n&gt; is highlighted in the menu.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the link is active. Returns `false` if not.","name":"active"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; URL parameters are ignored when determining a match.\n&gt;\n&gt; Product URLs [within the context of a collection](/docs/api/liquid/filters/within) are treated as equal to a standard product\n&gt; URL for the same product.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the current URL path matches the [URL](/docs/api/liquid/objects/link#link-url) of the link. Returns `false` if not.","name":"current"},{"deprecated":false,"deprecation_reason":"","description":"A link is considered to be active if the current URL path matches, or contains, the [URL](/docs/api/liquid/objects/link#link-url) of\nthe link.\n\nFor example, if the current URL path is `/blog/potion-notions/new-potions-for-spring`, then the following link URLs\nwould be considered active:\n\n- `/blog/potion-notions/new-potions-for-spring`\n- `/blog/potion-notions`","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if a link's child link is active. Returns `false` if not.","name":"child_active"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; URL parameters are ignored when determining a match.\n&gt;\n&gt; Product URLs [within the context of a collection](/docs/api/liquid/filters/within) and standard product URLs are treated\n&gt; the same.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if current URL path matches a link's child link [URL](/docs/api/liquid/objects/link#link-url). Returns `false` if not.","name":"child_current"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the link.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Check the number of links","description":"","syntax":"","path":"/","raw_liquid":"{% for link in linklists.main-menu.links -%}\n  {% if link.links.size &gt; 0 -%}\n    - {{ link.title }} ({{ link.links.size }} children)&lt;br&gt;\n  {%- else -%}\n    - {{ link.title }}&lt;br&gt;\n  {%- endif %}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"link"}],"summary":"The child links of the link.","name":"links"},{"deprecated":false,"deprecation_reason":"","description":"The object can be one of the following:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`blog`](/docs/api/liquid/objects/blog)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`metaobject`](docs/api/liquid/objects/metaobject)\n- [`page`](/docs/api/liquid/objects/page)\n- [`policy`](/docs/api/liquid/objects/policy)\n- [`product`](/docs/api/liquid/objects/product)","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The object associated with the link.","name":"object"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the link.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"article_link","description":"The link points to an article.","array_value":""},{"type":"string","name":"blog_link","description":"The link points to an blog.","array_value":""},{"type":"string","name":"catalog_link","description":"The link points to the [catalog page](https://help.shopify.com/manual/online-store/themes/customizing-themes/change-catalog-page).","array_value":""},{"type":"string","name":"collection_link","description":"The link points to a collection.","array_value":""},{"type":"string","name":"collections_link","description":"The link points to the [collection list page](/themes/architecture/templates/list-collections).","array_value":""},{"type":"string","name":"customer_account_page_link","description":"The link points to a [customer account page](https://shopify.dev/docs/apps/build/customer-accounts/full-page-extensions).","array_value":""},{"type":"string","name":"frontpage_link","description":"The link points to the home page.","array_value":""},{"type":"string","name":"http_link","description":"The link points to an external web page, or a product type or vendor collection.","array_value":""},{"type":"string","name":"metaobject_link","description":"The link points to a metaobject page.","array_value":""},{"type":"string","name":"page_link","description":"The link points to a [page](https://help.shopify.com/manual/online-store/themes/theme-structure/pages).","array_value":""},{"type":"string","name":"policy_link","description":"The link points to a [policy page](https://help.shopify.com/manual/checkout-settings/refund-privacy-tos#add-links-to-your-policies-within-pages-or-on-social-media).","array_value":""},{"type":"string","name":"product_link","description":"The link points to a product page.","array_value":""},{"type":"string","name":"search_link","description":"The link points to the search page.","array_value":""}],"summary":"The type of the link.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of nested levels under the link.","name":"levels"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL of the link.","name":"url"}],"summary":"A link in a [menu](https://help.shopify.com/manual/online-store/menus-and-links/drop-down-menus).","name":"link","examples":[],"json_data":{"path":"/","handle":"linklists.to_a[0].links[2]","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"All of the [menus](https://help.shopify.com/manual/online-store/menus-and-links/drop-down-menus) in a store.","name":"linklists","examples":[{"name":"","description":"You can access a specific menu through the `linklists` object using the menu's [handle](/docs/api/liquid/basics#handles).\n","syntax":"","path":"/","raw_liquid":"&lt;!-- Main menu --&gt;\n{% for link in linklists.main-menu.links -%}\n  {{ link.title | link_to: link.url }}\n{%- endfor %}\n\n&lt;!-- Footer menu --&gt;\n{% for link in linklists['footer'].links -%}\n  {{ link.title | link_to: link.url }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"linklist"}]},{"access":{"global":false,"parents":[{"object":"linklists","property":""}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to implement navigation in a theme, refer to [Add navigation to your theme](/themes/navigation-search/navigation).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"link"}],"summary":"The links in the menu.","name":"links"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the menu.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; There's a maximum of 3 levels.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of nested levels in the menu.","name":"levels"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the menu.","name":"title"}],"summary":"A [menu](https://help.shopify.com/manual/online-store/menus-and-links/drop-down-menus) in a store.","name":"linklist","examples":[],"json_data":{"path":"/","handle":"linklists.to_a[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"forloop","property":"parentloop"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of iterations in the loop.","name":"length"},{"deprecated":false,"deprecation_reason":"","description":"If the current `for` loop isn't nested inside another `for` loop, then `nil` is returned.","examples":[{"name":"Use the `parentloop` property","description":"","syntax":"","path":"/","raw_liquid":"{% for i in (1..3) -%}\n  {% for j in (1..3) -%}\n    {{ forloop.parentloop.index }} - {{ forloop.index }}\n  {%- endfor %}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"forloop","name":"","description":"","array_value":""}],"summary":"The parent `forloop` object.","name":"parentloop"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the current iteration.","name":"index"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 0-based index of the current iteration.","name":"index0"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the current iteration, in reverse order.","name":"rindex"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 0-based index of the current iteration, in reverse order.","name":"rindex0"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the current iteration is the first. Returns `false` if not.","name":"first"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the current iteration is the last. Returns `false` if not.","name":"last"}],"summary":"Information about a parent [`for` loop](/docs/api/liquid/tags/for).","name":"forloop","examples":[{"name":"Use the `forloop` object","description":"","syntax":"","path":"/","raw_liquid":"{% for page in pages -%}\n  {%- if forloop.length &gt; 0 -%}\n    {{ page.title }}{% unless forloop.last %}, {% endunless -%}\n  {%- endif -%}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":"{\"first\":true,\"index\":1,\"index0\":0,\"last\":false,\"length\":4,\"rindex\":3}"},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of iterations in the loop.","name":"length"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the current column.","name":"col"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of current row.","name":"row"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the current iteration.","name":"index"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 0-based index of the current iteration.","name":"index0"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 0-based index of the current column.","name":"col0"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the current iteration, in reverse order.","name":"rindex"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 0-based index of the current iteration, in reverse order.","name":"rindex0"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the current iteration is the first. Returns `false` if not.","name":"first"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the current iteration is the last. Returns `false` if not.","name":"last"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the current column is the first in the row. Returns `false` if not.","name":"col_first"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the current column is the last in the row. Returns `false` if not.","name":"col_last"}],"summary":"Information about a parent [`tablerow` loop](/docs/api/liquid/tags/tablerow).","name":"tablerowloop","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"col\":1,\"col0\":0,\"col_first\":true,\"col_last\":false,\"first\":true,\"index\":1,\"index0\":0,\"last\":false,\"length\":5,\"rindex\":5,\"rindex0\":4,\"row\":1}"},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The `localization` object can be used in a [localization form](/docs/api/liquid/tags/form#form-localization).\n\nTo learn about how to offer localization options in your theme, refer to [Support multiple currencies and languages](/themes/internationalization/multiple-currencies-languages).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"country"}],"summary":"The countries that are available on the store.","name":"available_countries"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"shop_locale"}],"summary":"The languages that are available on the store.","name":"available_languages"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"market","name":"","description":"","array_value":""}],"summary":"The currently selected market on the storefront.","name":"market"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"country","name":"","description":"","array_value":""}],"summary":"The currently selected country on the storefront.","name":"country"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"shop_locale","name":"","description":"","array_value":""}],"summary":"The currently selected language on the storefront.","name":"language"}],"summary":"Information about the countries and languages that are available on a store.","name":"localization","examples":[],"json_data":{"path":"/","handle":"localization","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"store_availability","property":"location"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; The `location` object is defined only if one or more locations has [local pickup](https://help.shopify.com/manual/shipping/setting-up-and-managing-your-shipping/local-methods/local-pickup)\n&gt; enabled.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The location's ID.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The location's name.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"address","name":"","description":"","array_value":""}],"summary":"The location's address.","name":"address"},{"deprecated":false,"deprecation_reason":"","description":"If the location's address isn't verified, then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The latitude of the location's address.","name":"latitude"},{"deprecated":false,"deprecation_reason":"","description":"If the location's address isn't verified, then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The longitude of the location's address.","name":"longitude"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the location.","name":"metafields"}],"summary":"A store [location](https://help.shopify.com/manual/locations).","name":"location","examples":[],"json_data":{"path":"/products/health-potion?variant=39897499729985","handle":"product.selected_variant.store_availabilities[0].location","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"localization","property":"market"},{"object":"country","property":"market"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn more about markets, refer to [Shopify Markets](/docs/apps/markets).\nTo make sure that visitors interact with the optimal version of a store using Shopify Markets,\nrefer to [Detect and set a visitor's optimal localization](/docs/themes/markets/localization-discovery).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the market.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the market.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage\n&gt; metafields](/apps/metafields/manage) or visit the [Shopify Help\n&gt; Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"metafield"}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the market.","name":"metafields"}],"summary":"A group of one or more regions of the world that a merchant is targeting for sales.","name":"market","examples":[],"json_data":{"path":"/","handle":"localization.market","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"metafield","property":"value"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about metafield types, refer to [Metafield types](/apps/metafields/types).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"dimension","description":"","array_value":""},{"type":"string","name":"volume","description":"","array_value":""},{"type":"string","name":"weight","description":"","array_value":""}],"summary":"The measurement type.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The measurement value.","name":"value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The measurement unit.","name":"unit"}],"summary":"A measurement from one of the following metafield types:\n\n- `dimension`\n- `volume`\n- `weight`","name":"measurement","examples":[],"json_data":{"path":"/products/dandelion-milk","handle":"product.metafields.details.milk_container_volume.value","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"app","property":"metafields"},{"object":"article","property":"metafields"},{"object":"blog","property":"metafields"},{"object":"collection","property":"metafields"},{"object":"customer","property":"metafields"},{"object":"location","property":"metafields"},{"object":"order","property":"metafields"},{"object":"page","property":"metafields"},{"object":"product","property":"metafields"},{"object":"shop","property":"metafields"},{"object":"variant","property":"metafields"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to access a metafield on a specific object, refer to [Access metafields](/docs/api/liquid/objects/metafield#metafield-access-metafields).\n\nMetafields support [multiple data types](/apps/metafields/types), which determine the kind of information that's stored\nin the metafield. You can also output the metafield content in a type-specific format using\n[metafield filters](/docs/api/liquid/filters/metafield-filters).\n\n&gt; Note:\n&gt; You can't create metafields in Liquid. Metafields can be created in only the following ways:\n&gt;\n&gt; - [In the Shopify admin](https://help.shopify.com/manual/metafields)\n&gt; - [Through an app](https://shopify.dev/apps/metafields)\n\n&gt; Note:\n&gt; Metafields of type `integer`, `json_string`, and `string` are older implementations that don't have the properties\n  noted on this page, and aren't compatible with metafield filters. To learn more, refer to [Deprecated metafields](/docs/api/liquid/objects/metafield#metafield-deprecated-metafields).","properties":[{"deprecated":false,"deprecation_reason":"","description":"The following table outlines the value format for each metafield type:\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Type&lt;/th&gt;\n      &lt;th&gt;Returned format&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;single_line_text_field&lt;/code&gt;&lt;br&gt;&lt;br&gt;\n        &lt;code&gt;multi_line_text_field&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/basics#string\"&gt;A string&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;rich_text_field&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;A field that supports headings, lists, links, bold, and italics&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;product_reference&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/product\"&gt;A product object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;collection_reference&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/collection\"&gt;A collection object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;variant_reference&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/variant\"&gt;A variant object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n       &lt;code&gt;page_reference&lt;/code&gt;\n     &lt;/td&gt;\n     &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/page\"&gt;A page object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;file_reference&lt;/code&gt;\n     &lt;/td&gt;\n     &lt;td&gt;\n       &lt;a href=\"/docs/api/liquid/objects/generic-file\"&gt;A generic_file object&lt;/a&gt;&lt;br&gt;&lt;br&gt;\n       &lt;a href=\"/docs/api/liquid/objects/media\"&gt;A media object (images and videos only)&lt;/a&gt;\n     &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;number_integer&lt;/code&gt;&lt;br&gt;&lt;br&gt;\n        &lt;code&gt;number_decimal&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/basics#number\"&gt;A number&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;date&lt;/code&gt;&lt;br&gt;&lt;br&gt;\n        &lt;code&gt;date_time&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;A date string. To format the string, use the &lt;a href=\"/docs/api/liquid/filters/date\"&gt;date&lt;/a&gt; filter.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;url_reference&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/basics#string\"&gt;A url string&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;json&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON\"&gt;A JSON object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n       &lt;code&gt;boolean&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/basics#boolean\"&gt;A boolean&lt;/a&gt;&lt;/td&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;color&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/color\"&gt;A color object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;weight&lt;/code&gt;&lt;br&gt;&lt;br&gt;\n        &lt;code&gt;volume&lt;/code&gt;&lt;br&gt;&lt;br&gt;\n        &lt;code&gt;dimension&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/measurement\"&gt;A measurement object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;rating&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/rating\"&gt;A rating object&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;code&gt;money&lt;/code&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;a href=\"/docs/api/liquid/objects/money\"&gt;A money object, displayed in the customer's local (presentment) currency.&lt;/a&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The value of the metafield.","name":"value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"single_line_text_field","description":"","array_value":""},{"type":"string","name":"multi_line_text_field","description":"","array_value":""},{"type":"string","name":"rich_text_field","description":"","array_value":""},{"type":"string","name":"product_reference","description":"","array_value":""},{"type":"string","name":"collection_reference","description":"","array_value":""},{"type":"string","name":"variant_reference","description":"","array_value":""},{"type":"string","name":"page_reference","description":"","array_value":""},{"type":"string","name":"file_reference","description":"","array_value":""},{"type":"string","name":"number_integer","description":"","array_value":""},{"type":"string","name":"number_decimal","description":"","array_value":""},{"type":"string","name":"date","description":"","array_value":""},{"type":"string","name":"date_time","description":"","array_value":""},{"type":"string","name":"url_reference","description":"","array_value":""},{"type":"string","name":"json","description":"","array_value":""},{"type":"string","name":"boolean","description":"","array_value":""},{"type":"string","name":"color","description":"","array_value":""},{"type":"string","name":"weight","description":"","array_value":""},{"type":"string","name":"volume","description":"","array_value":""},{"type":"string","name":"dimension","description":"","array_value":""},{"type":"string","name":"rating","description":"","array_value":""},{"type":"string","name":"money","description":"","array_value":""}],"summary":"The [type](/apps/metafields/types) of the metafield.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about metafield types, refer to [Metafield types](/apps/metafields/types).","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the metafield is a list type. Returns `false` if not.","name":"list?"}],"summary":"A [metafield](/apps/metafields) attached to a parent object.","name":"metafield","examples":[{"name":"Access metafields","description":"The access path for metafields consists of two layers:\n\n- namespace - A grouping of metafields to prevent conflicts.\n- key - The metafield name.\n\nGiven this, you can access the metafield object with the following syntax:\n\n```liquid\n{{ resource.metafields.namespace.key }}\n```\n\n&gt; Note:\n&gt; The namespace and key values will always be `snake_case`, regardless of the casing used in the metafield definition.\n","syntax":"","path":"/products/health-potion","raw_liquid":"Type: {{ product.metafields.information.directions.type }}\nValue: {{ product.metafields.information.directions.value }}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Accessing metafields of type `json`","description":"The `value` property of metafields of type `json` returns a [JSON object](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON). You can access the properties of this object directly in Liquid, either by name or 0-based index. You can also iterate through the properties.\n","syntax":"","path":"/products/charcoal","raw_liquid":"Temperature: {{ product.metafields.information.burn_temperature.value.temperature }}\nUnit: {{ product.metafields.information.burn_temperature.value['unit'] }}\n\n{% for property in product.metafields.information.burn_temperature.value -%}\n  {{ property.first | capitalize }}: {{ property.last }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Accessing metafields of type `list`","description":"The `value` property of metafields of type `list` returns an array. You can iterate through the array to access the values.\n","syntax":"","path":"/products/ground-mandrake-root","raw_liquid":"{% for item in product.metafields.information.combine_with.value -%}\n  {{ item.product.title }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"","description":"&lt;br&gt;&lt;br&gt; If the list is of type `single_line_text_field`, then you can access the items in the array directly in Liquid using a 0-based index.\n","syntax":"","path":"/products/health-potion","raw_liquid":"First item in list: {{ product.metafields.information.pickup_locations.value[0] }}\nLast item in list: {{ product.metafields.information.pickup_locations.value.last }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Determining the length of a list metafield","description":"The way that you determine the length of a list metafield depends on its type:\n- **[Reference types](/docs/apps/custom-data/metafields/types#reference-types)**: Use the `count` property to determine the list length.\n- **Non-reference types**: These lists are rendered as arrays. Use the [`size`](/docs/api/liquid/filters/size) filter to determine the number of items in the array.\n","syntax":"","path":"/products/health-potion","raw_liquid":"# list.product_reference\nNumber of similar products: {{ product.metafields.information.similar_products.value.count }}\n\n# list.single_line_text_field\nNumber of pickup locations: {{ product.metafields.information.pickup_locations.value.size }}","parameter":false,"display_type":"text","show_data_tab":true},{"name":"Deprecated metafields","description":"Deprecated metafields are older metafield types with limited functionality. The following metafield types are deprecated:\n\n- `integer`\n- `json_string`\n- `string`\n\nThese metafield types don't have the same metafield object properties mentioned in the previous sections. Instead, they return the metafield value directly.\n\nThe following table outlines the value type for each deprecated metafield type:\n\n| Metafield type | Value type |\n| --- | --- |\n| `integer` | [An integer](/docs/api/liquid/basics#number) |\n| `json_string` | [A JSON object](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON) |\n| `string` | [A string](/docs/api/liquid/basics#string) |\n","syntax":"","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/products/health-potion","handle":"product.metafields.information.directions","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"One or more corresponding [`metaobject`](/docs/api/liquid/objects#metaobject) objects contain values for\nthe fields specified in the metaobject definition.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"metaobject"}],"summary":"The [metaobjects](/docs/api/liquid/objects#metaobject) that follow the definition.","name":"values"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of entries for the metaobject definition.","name":"values_count"}],"summary":"A `metaobject_definition` defines the structure of a metaobject type for the store, which consists of\na merchant-defined set of [field definitions](https://help.shopify.com/en/manual/metafields/metafield-definitions).","name":"metaobject_definition","examples":[{"name":"Loop over entries of a metaobject definition","description":"If a metaobject definition has multiple metaobject entries, then you can loop over them using the `values` property.\nYou can loop over a maximum of 50 entries in a metaobject definition.\nFor example, you can display the field `author` for each metaobject using the following `forloop`:\n\n```liquid\n{% for testimonial in metaobjects.testimonials.values %}\n  {{ testimonial.author.value }}\n{% endfor %}\n```\n\n&gt; Note:\n&gt; When the [`publishable` capability](/apps/data-extensions/metaobjects/capabilities) is enabled, loops return only metaobjects with a status of `active`. Metaobjects with a status of `draft` are skipped.\n","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":false}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Individual metaobjects can be accessed by specifying their type and handle. For more information, refer to [Access metaobjects individually](/docs/api/liquid/objects#metaobject-access-metaobjects-individually).\n\nAdditionally, it is possible to iterate over entries from a metaobject definition. For more information, refer to [Loop over entries of a metaobject definition](/docs/api/liquid/objects/metaobject_definition#metaobject_definition-loop-over-entries-of-a-metaobject-definition).\n\nMetaobjects are created in the [Content](https://www.shopify.com/admin/content) page of the Shopify admin.","properties":[],"summary":"All of the [metaobjects](/docs/api/liquid/objects/metaobject) of the store.","name":"metaobjects","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"metaobjects","property":""}],"template":["metaobject"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"metaobject_system","name":"","description":"","array_value":""}],"summary":"Basic information about the metaobject. These properties are grouped under the `system` object to avoid collisions between system property names and user-defined metaobject fields.","name":"system"}],"summary":"A metaobject entry, which includes the values for a set of [fields](/docs/api/liquid/objects#metafield).\nThe set is defined by the parent [`metaobject_definition`](/docs/api/liquid/objects#metaobject_definition).","name":"metaobject","examples":[{"name":"Access metaobjects individually","description":"The access path for a metaobject consists of two layers:\n\n- type - The type of the parent metaobject definition.\n- handle - The unique [handle](/docs/api/liquid/basics#handles) of the metaobject.\n\nGiven this, you can access a metaobject with the following syntax:\n\n```liquid\n{{ metaobjects.type.handle }}\n```\n\nYou can also use square bracket notation:\n\n```liquid\n{{ metaobjects['type']['handle'] }}\n```\n\nA metaobjects's field values can be accessed using the key of the desired field:\n\n```liquid\n{{ metaobjects.testimonials.homepage.title }}\n{{ metaobjects['highlights']['washable'].image.value }}\n```\n\n&gt; Note:\n&gt; When the [`publishable` capability](/apps/data-extensions/metaobjects/capabilities) is enabled, a metaobject can only be accessed if its status is `active`.  If its status is `draft`, then the return value is `nil`.\n","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":false},{"name":"Usage in metaobject templates","description":"Within a metaobject template, the `metaobject` Liquid object represents the metaobject drop being rendered by the template. You can access it directly as `{{ metaobject }}`.\n\nHere's a basic example of accessing a field within the associated metaobject template:\n```liquid\n{{ metaobject.title.value }}\n```\n\nIn this example, replace `title` with the key of the field you want to access. This will output the value of that field for the current metaobject.\n","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":false}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"metaobject","property":"system"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"This is a free-form string that's defined when the metaobject definition is created.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The type of the metaobject definition.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The unique [handle](/api/liquid/basics#handles) of the metaobject.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the metaobject.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"Only set for metaobjects that have the `online_store` capability.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the metaobject.","name":"url"}],"summary":"Basic information about a [`metaobject`](/api/liquid/objects#metaobject). These properties are grouped under the `system` object to avoid collisions between system property names and user-defined metaobject fields.","name":"metaobject_system","examples":[{"name":"Using the `metaobject_system` object","description":"You can access the `metaobject_system` object and its properties through the metaobject's `system` property. You can use the following syntax:\n\n```liquid\n{{ metaobjects.testimonials[\"home_page\"].system.id }}\n```\n\nYou can also access `metaobject_system` properties when iterating over a list of metaobjects:\n\n```liquid\n{% for metaobject in product.metafields.custom.mixed_metaobject_list.value %}\n  {% if metaobject.system.type == \"testimonial\" %}\n    {% render 'testimonial' with metaobject as testimonial  %}\n  {% else %}\n    {{ metaobject.system.handle }}\n  {% endif %}\n{% endfor %}\n```\n","syntax":"","path":"","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":false}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"product","property":"media"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`model_viewer_tag` filter](/docs/api/liquid/filters/model_viewer_tag) to output a [Google model viewer component](https://modelviewer.dev)\n&gt; for the model.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"model_source"}],"summary":"The source files for the model.","name":"sources"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The alt text of the model.","name":"alt"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the model.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Filter for media of a specific type","description":"You can use the `media_type` property with the [`where` filter](/docs/api/liquid/filters/where) to filter the [`product.media` array](/docs/api/liquid/objects/product#product-media) for all media of a desired type.\n","syntax":"","path":"/products/potion-bottle","raw_liquid":"{% assign models = product.media | where: 'media_type', 'model' %}\n\n{% for model in models %}\n  {{- model | model_viewer_tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The media type of the model. Always returns `model`.","name":"media_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The position of the model in the [`product.media`](/docs/api/liquid/objects/product#product-media) array.","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"A preview image for the model.","name":"preview_image"}],"summary":"A 3D model uploaded as product media.","name":"model","examples":[],"json_data":{"path":"/products/potion-bottle","handle":"product.featured_media","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"model","property":""}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The format of the model source file.","name":"format"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the model source file.","name":"mime_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) of the model source file.","name":"url"}],"summary":"A model source file.","name":"model_source","examples":[],"json_data":{"path":"/products/potion-bottle","handle":"product.featured_media.sources[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"metafield","property":"value"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"currency","name":"","description":"","array_value":""}],"summary":"The customer's local (presentment) currency.","name":"currency"}],"summary":"A money value, in the the customer's local (presentment) currency.","name":"money","examples":[{"name":"Referencing money objects directly","description":"When a money object is referenced directly, the money value in cents is returned.\n","syntax":"","path":"/products/dried-chamomile","raw_liquid":"{{ product.metafields.details.price_per_100g.value }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"/products/dried-chamomile","handle":"product.metafields.details.price_per_100g.value","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"checkout","property":"order"},{"object":"customer","property":"last_order"},{"object":"customer","property":"orders"}],"template":["customers/order"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":true,"deprecation_reason":"Deprecated because not all discount types and details are captured.\n\nThe `order.discounts` property has been replaced by [`order.discount_applications`](/docs/api/liquid/objects/order#order-discount_applications).","description":"","examples":[],"return_type":[{"type":"discount","name":"","description":"","array_value":""}],"summary":"The discounts on the order.","name":"discounts"},{"deprecated":false,"deprecation_reason":"","description":"If there are no attributes on the order, then `nil` is returned.\n&gt; Tip:\n&gt; Attributes are [collected with the cart](https://shopify.dev/themes/architecture/templates/cart#support-cart-notes-and-attributes).","examples":[{"name":"Output the attributes","description":"```liquid\n&lt;ul&gt;\n  {% for attribute in order.attributes -%}\n    &lt;li&gt;&lt;strong&gt;{{ attribute.first }}:&lt;/strong&gt; {{ attribute.last }}&lt;/li&gt;\n  {%- endfor %}\n&lt;/ul&gt;\n```\n","syntax":"","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The attributes on the order.","name":"attributes"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"customer","description":"Customer changed/cancelled order","array_value":""},{"type":"string","name":"declined","description":"Payment declined","array_value":""},{"type":"string","name":"fraud","description":"Fraudulent order","array_value":""},{"type":"string","name":"inventory","description":"Items unavailable","array_value":""},{"type":"string","name":"staff","description":"Staff error","array_value":""},{"type":"string","name":"other","description":"Other","array_value":""}],"summary":"The reason that the order was cancelled.","name":"cancel_reason"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use this property to output the cancellation reason on the storefront.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The localized version of the [cancellation reason](/docs/api/liquid/objects/order#order-cancel_reason) for the order.","name":"cancel_reason_label"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the order was cancelled. Returns `false` if not.","name":"cancelled"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the order was cancelled.","name":"cancelled_at"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"The discount applications that apply at the order level.","name":"cart_level_discount_applications"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the order was created.","name":"created_at"},{"deprecated":false,"deprecation_reason":"","description":"If there are no duties, then `nil` is returned. The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The sum of all duties applied to the line items in the order in the currency's subunit.","name":"total_duties"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the customer to view the order in their account.","name":"customer_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"customer","name":"","description":"","array_value":""}],"summary":"The customer that placed the order.","name":"customer"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"All of the discount applications for the order and its line items.","name":"discount_applications"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount of all discounts applied to the order in the currency's subunit.","name":"total_discounts"},{"deprecated":false,"deprecation_reason":"","description":"The amount is calculated after refunds are applied, so is equal to `order.total_price` minus `order.total_refunded_amount`.\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The net amount of the order in the currency's subunit.","name":"total_net_amount"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount of taxes applied to the order in the currency's subunit.","name":"tax_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total amount that's been refunded from the order in the currency's subunit.","name":"total_refunded_amount"},{"deprecated":false,"deprecation_reason":"","description":"If no email is associated with the order, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The email that's associated with the order.","name":"email"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"authorized","description":"","array_value":""},{"type":"string","name":"expired","description":"","array_value":""},{"type":"string","name":"paid","description":"","array_value":""},{"type":"string","name":"partially_paid","description":"","array_value":""},{"type":"string","name":"partially_refunded","description":"","array_value":""},{"type":"string","name":"pending","description":"","array_value":""},{"type":"string","name":"refunded","description":"","array_value":""},{"type":"string","name":"unpaid","description":"","array_value":""},{"type":"string","name":"voided","description":"","array_value":""}],"summary":"The order's financial status.","name":"financial_status"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use this property to output the financial status on the storefront.","examples":[],"return_type":[],"summary":"The localized version of the [financial status](/docs/api/liquid/objects/order#order-financial_status) of the order.","name":"financial_status_label"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The fulfillment status of the order.","name":"fulfillment_status"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use this property to output the fulfillment status on the storefront.","examples":[],"return_type":[{"type":"string","name":"complete","description":"","array_value":""},{"type":"string","name":"fulfilled","description":"","array_value":""},{"type":"string","name":"partial","description":"","array_value":""},{"type":"string","name":"restocked","description":"","array_value":""},{"type":"string","name":"unfulfilled","description":"","array_value":""}],"summary":"The localized version of the [fulfillment status](/docs/api/liquid/objects/order#order-fulfillment_status) of the order.","name":"fulfillment_status_label"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the order.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the order.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the order.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"If there's no note on the order, then `nil` is returned.\n&gt; Tip:\n&gt; Notes are [collected with the cart](https://shopify.dev/themes/architecture/templates/cart#support-cart-notes-and-attributes).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The note on the order.","name":"note"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A randomly generated alpha-numeric identifier for the order that may be shown to the customer\ninstead of the sequential order name. For example, \"XPAV284CT\", \"R50KELTJP\" or \"35PKUN0UJ\".\nThis value isn't guaranteed to be unique.","name":"confirmation_number"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The integer representation of the order [name](/docs/api/liquid/objects/order#order-name).","name":"order_number"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the [**Order status** page](https://help.shopify.com/manual/orders/status-tracking) for the order.","name":"order_status_url"},{"deprecated":false,"deprecation_reason":"","description":"The new customer accounts includes a list of Buyers Orders and an Order Details View.\nThis liquid function exposes a URL to a specific Orders Details in new customer accounts.\n[Setup process for the new order details page](https://help.shopify.com/en/manual/customers/customer-accounts/new-customer-accounts)\ncan be found in the help center.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the new order details page.","name":"customer_order_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The phone number associated with the order.","name":"phone"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"address","name":"","description":"","array_value":""}],"summary":"The shipping address of the order.","name":"shipping_address"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"address","name":"","description":"","array_value":""}],"summary":"The billing address of the order.","name":"billing_address"},{"deprecated":false,"deprecation_reason":"","description":"The tags are returned in alphabetical order.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The [tags](https://help.shopify.com/manual/shopify-admin/productivity-tools/using-tags) on the order.","name":"tags"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"tax_line"}],"summary":"The tax lines on the order.","name":"tax_lines"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"transaction"}],"summary":"The transactions of the order.","name":"transactions"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The line items in the order.","name":"line_items"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; These line items are used to calculate the the [subtotal price](/docs/api/liquid/objects/order#order-subtotal_price).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The non-tip line items in the order.","name":"subtotal_line_items"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of items in the order.","name":"item_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"shipping_method"}],"summary":"The shipping methods for the order.","name":"shipping_methods"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The sum of the prices of all of the line items in the order in the currency's subunit, after any line item discounts have\nbeen applied.","name":"line_items_subtotal_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The sum of the prices of the [subtotal line items](/docs/api/liquid/objects/order#order-subtotal_line_items) in the currency's subunit, after any line item or\ncart discounts have been applied.","name":"subtotal_price"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The total price is calculated before refunds are applied. Use [`order.total_net_amount`](/docs/api/liquid/objects/order#order-total_net_amount)\n&gt; to output the total minus any refunds.\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total price of the order in the currency's subunit.","name":"total_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The shipping price of the order in the currency's subunit.","name":"shipping_price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the order is a store pickup order.","name":"pickup_in_store?"}],"summary":"An [order](https://help.shopify.com/manual/orders).","name":"order","examples":[],"json_data":{"path":"/","handle":"customer.orders[4]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"pages","property":""},{"object":"metafield","property":"value"}],"template":["page"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the page.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The author of the page.","name":"author"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the page.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the page.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"The name doesn't include the `page.` prefix, or the file extension (`.json` or `.liquid`).\n\n If a custom template isn't assigned to the page, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the [custom template](/themes/architecture/templates#alternate-templates) assigned to the page.","name":"template_suffix"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The content of the page.","name":"content"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the page.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the page.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the page was published.","name":"published_at"}],"summary":"A [page](https://help.shopify.com/manual/online-store/themes/theme-structure/pages) on a store.","name":"page","examples":[],"json_data":{"path":"/pages/about-us","handle":"page","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`default_pagination` filter](/docs/api/liquid/filters/default_pagination) to output pagination links.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of items displayed per page.","name":"page_size"},{"deprecated":false,"deprecation_reason":"","description":"For example, if you show 5 items per page and are on page 3, then the value of `paginate.current_offset` is 10.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of items on pages previous to the current page.","name":"current_offset"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The page number of the current page.","name":"current_page"},{"deprecated":false,"deprecation_reason":"","description":"For example, if you paginate a collection of 120 products, then the value of `paginate.items` is 120.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of items to be paginated.","name":"items"},{"deprecated":false,"deprecation_reason":"","description":"Pagination parts are used to build pagination navigation.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"part"}],"summary":"The pagination parts.","name":"parts"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"part","name":"","description":"","array_value":""}],"summary":"The pagination part to go to the next page.","name":"next"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"part","name":"","description":"","array_value":""}],"summary":"The pagination part to go to the previous page.","name":"previous"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total number of pages.","name":"pages"},{"deprecated":false,"deprecation_reason":"","description":"The default value is `page`.\n\nIf you paginate over an array defined in a setting or a metafield list type, then a unique key is appended to page to allow the paginated list to\noperate independently from other lists on the page. For example, a paginated list defined in a setting might use the key\n`page_a9e329dc`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL parameter denoting the pagination.","name":"page_param"}],"summary":"Information about the pagination inside a set of [`paginate` tags](/docs/api/liquid/tags/paginate).","name":"paginate","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"current_offset\":10,\"current_page\":3,\"items\":17,\"next\":{},\"page_param\":\"page\",\"page_size\":5,\"pages\":4,\"parts\":[],\"previous\":{}}"},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The `predictive_search` object returns results only when rendered in a section using the Predictive Search API and the\n[Section Rendering API](/api/section-rendering). To learn about how to include predictive search in your theme,\n&gt; refer to [Add predictive search to your theme](/themes/navigation-search/search/predictive-search).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` when being referenced inside a section that's been rendered using the Predictive Search API and\nthe Section Rendering API. Returns `false` if not.","name":"performed"},{"deprecated":false,"deprecation_reason":"","description":"You can check whether any resources of a specific type were returned using the [`size` filter](/docs/api/liquid/filters/size).\n\n```liquid\n{% if predictive_search.resources.articles.size &gt; 0 %}\n  {% for article in predictive_search.resources.articles %}\n    {{ article.title }}\n  {% endfor %}\n{% endif %}\n```","examples":[],"return_type":[{"type":"predictive_search_resources","name":"","description":"","array_value":""}],"summary":"The resources associated with the query.","name":"resources"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`highlight` filter](/docs/api/liquid/filters/highlight) to highlight the search terms in search results content.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The entered search terms.","name":"terms"},{"deprecated":false,"deprecation_reason":"","description":"Searches can be performed on the following object types:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`collection`](/docs/api/liquid/objects/collection)\n- [`page`](/docs/api/liquid/objects/page)\n- [`product`](/docs/api/liquid/objects/product)\n\n&gt; Note:\n&gt; The types are determined by the [`type` query parameter](/api/ajax/reference/predictive-search#query-parameters).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The object types that the search was performed on.","name":"types"}],"summary":"Information about the results from a predictive search query through the\n[Predictive Search API](/api/ajax/reference/predictive-search#get-locale-search-suggest).","name":"predictive_search","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"performed\":true,\"resources\":{},\"terms\":\"potion\",\"types\":[]}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"selling_plan_allocation","property":"price_adjustments"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to support selling plans in your theme, refer to [Purchase options](/themes/pricing-payments/purchase-options).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of orders that the price adjustment applies to.","name":"order_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the price adjustment in the [`selling_plan.price_adjustments` array](/docs/api/liquid/objects/selling_plan#selling_plan-price_adjustments).","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"percentage","description":"","array_value":""},{"type":"string","name":"fixed_amount","description":"","array_value":""},{"type":"string","name":"price","description":"","array_value":""}],"summary":"The type of price adjustment.","name":"value_type"},{"deprecated":false,"deprecation_reason":"","description":"How this value is interpreted depends on the [value type](/docs/api/liquid/objects/selling_plan_price_adjustment#selling_plan_price_adjustment-value_type) of\nthe price adjustment. The following table outlines what the value represents for each value type:\n\n| Value type | Value |\n| --- | --- |\n| `fixed_amount` | The amount that the original price is being adjusted by, in the currency's subunit. |\n| `percentage` | The percent amount that the original price is being adjusted by. |\n| `price` | The adjusted amount in the currency's subunit. |\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The value of the price adjustment as a decimal.","name":"value"}],"summary":"Information about how a selling plan changes the price of a variant for a given period of time.","name":"selling_plan_price_adjustment","examples":[],"json_data":{"path":"/products/health-potion?selling_plan=610435137","handle":"product.selected_selling_plan.price_adjustments[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"all_products","property":""},{"object":"collection","property":"products"},{"object":"line_item","property":"product"},{"object":"link","property":"object"},{"object":"metafield","property":"value"},{"object":"recommendations","property":"products"},{"object":"search","property":"results"},{"object":"variant","property":"product"}],"template":["product"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"selling_plan_group"}],"summary":"The selling plan groups that the variants of the product are included in.","name":"selling_plan_groups"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the product.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"product_option"}],"summary":"The options on the product.","name":"options_with_values"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"taxonomy_category","name":"","description":"","array_value":""}],"summary":"The taxonomy category for the product","name":"category"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Returns a maximum of 250 variants.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"variant"}],"summary":"The variants of the product.","name":"variants"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the product.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the product.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the product.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"The name doesn't include the `product.` prefix, or the file extension (`.json` or `.liquid`).\n\nIf a custom template isn't assigned to the product, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the [custom template](/themes/architecture/templates#alternate-templates) of the product.","name":"template_suffix"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The vendor of the product.","name":"vendor"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`product.content`](/docs/api/liquid/objects/product#product-content).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The description of the product.","name":"description"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`product.description`](/docs/api/liquid/objects/product#product-description).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The description of the product.","name":"content"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The first (featured) image attached to the product.","name":"featured_image"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; You can use [media filters](/docs/api/liquid/filters/media-filters) to output media URLs and displays. To learn about how\n&gt; to include media in your theme, refer to [Support product media](/themes/product-merchandising/media/support-media).","examples":[],"return_type":[{"type":"media","name":"","description":"","array_value":""}],"summary":"The first (featured) media attached to the product.","name":"featured_media"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; You can use [media filters](/docs/api/liquid/filters/media-filters) to output media URLs and displays. To learn about how\n&gt; to include media in your theme, refer to [Support product media](/themes/product-merchandising/media/support-media).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"media"}],"summary":"The media attached to the product, sorted by the date it was added to the product.","name":"media"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"image"}],"summary":"The images attached to the product.","name":"images"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`product.price`](/docs/api/liquid/objects/product#product-price).\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The lowest price of any variants of the product in the currency's subunit.","name":"price_min"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`product.price_min`](/docs/api/liquid/objects/product#product-price_min).\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The lowest price of any variants of the product in the currency's subunit.","name":"price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The highest price of any variants of the product in the currency's subunit.","name":"price_max"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the product's variant prices vary. Returns `false` if not.","name":"price_varies"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The selected variant is determined by the `variant` URL parameter. The `selected_variant` parameter is available on product pages only.\n\nFor a variant to be available, it needs to meet one of the following criteria:\n\n- The `variant.inventory_quantity` is greater than 0.\n- The `variant.inventory_policy` is set to `continue`.\n- The `variant.inventory_management` is `nil`.","examples":[],"return_type":[{"type":"variant","name":"","description":"","array_value":""}],"summary":"The currently selected or first available variant of the product.","name":"selected_or_first_available_variant"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Collections that aren't [available](https://help.shopify.com/manual/products/collections/make-collections-available) on\n&gt; the Online Store sales channel aren't included.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"collection"}],"summary":"The collections that the product belongs to.","name":"collections"},{"deprecated":false,"deprecation_reason":"","description":"If no variant is currently selected, then `nil` is returned.\n\n&gt; Note:\n&gt; The selected variant is determined by the `variant` URL parameter. This URL parameter is available on product pages URLs only.","examples":[],"return_type":[{"type":"variant","name":"","description":"","array_value":""}],"summary":"The currently selected variant of the product.","name":"selected_variant"},{"deprecated":false,"deprecation_reason":"","description":"For a variant to be available, it needs to meet one of the following criteria:\n\n- The `variant.inventory_quantity` is greater than 0.\n- The `variant.inventory_policy` is set to `continue`.\n- The `variant.inventory_management` is `nil`.","examples":[],"return_type":[{"type":"variant","name":"","description":"","array_value":""}],"summary":"The first available variant of the product.","name":"first_available_variant"},{"deprecated":false,"deprecation_reason":"","description":"For a variant to be available, it needs to meet one of the following criteria:\n\n- The `variant.inventory_quantity` is greater than 0.\n- The `variant.inventory_policy` is set to `continue`.\n- The `variant.inventory_management` is `nil`.\n- The variant has an associated [delivery profile](/docs/apps/selling-strategies/purchase-options/deferred/shipping-delivery/delivery-profiles) with a valid shipping rate.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if at least one of the variants of the product is available. Returns `false` if not.","name":"available"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Output the options","description":"You can use the [`size` filter](/docs/api/liquid/filters/size) with dot notation to determine how many options a product has.\n","syntax":"","path":"/products/health-potion","raw_liquid":"{% if product.options.size &gt; 0 -%}\n  {% for option in product.options -%}\n    - {{ option }}\n  {%- endfor %}\n{%- endif %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The option names of the product.","name":"options"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The type of the product.","name":"type"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The lowest **compare at** price of any variants of the product in the currency's subunit. This is the same as\n`product.compare_at_price`.","name":"compare_at_price_min"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The highest **compare at** price of any variants of the product in the currency's subunit.","name":"compare_at_price_max"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The lowest **compare at** price of any variants of the product in the currency's subunit.","name":"compare_at_price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant **compare at** prices of the product vary. Returns `false` if not.","name":"compare_at_price_varies"},{"deprecated":false,"deprecation_reason":"","description":"If a product is [recommended](/docs/themes/product-merchandising/recommendations), then the URL contains tracking parameters:\n\n```liquid\n/products/gorgeous-wooden-computer?pr_choice=default&amp;pr_prod_strat=description&amp;pr_rec_pid=13&amp;pr_ref_pid=17&amp;pr_seq=alternating\n```","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the product.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The tags are returned in alphabetical order.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The [tags](https://help.shopify.com/manual/shopify-admin/productivity-tools/using-tags) of the product.","name":"tags"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the product was published.","name":"published_at"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the product was created.","name":"created_at"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Output the values for a specific option","description":"When accessing a specific option, the name is case-insensitive.","syntax":"","path":"/products/health-potion","raw_liquid":"&lt;label&gt;\n  Strength\n  &lt;select&gt;\n    {%- for value in product.options_by_name['strength'].values %}\n    &lt;option&gt;{{ value }}&lt;/option&gt;\n    {%- endfor %}\n  &lt;/select&gt;\n&lt;/label&gt;","parameter":false,"display_type":"text","show_data_tab":false}],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"Allows you to access a specific [product option](/docs/api/liquid/objects/product_option) by its name.","name":"options_by_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the product doesn't have any options. Returns `false` if not.","name":"has_only_default_variant"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the product has at least one variant with quantity price breaks in the current customer context.\nReturns `false` if not.","name":"quantity_price_breaks_configured?"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; A variant requires a selling plan if [`variant.requires_selling_plan`](/docs/api/liquid/objects/variant#variant-requires_selling_plan)\n&gt; is `true`.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if all of the variants of the product require a selling plan. Returns `false` if not.","name":"requires_selling_plan"},{"deprecated":false,"deprecation_reason":"","description":"If no selling plan is selected, then `nil` is returned.\n\n&gt; Note:\n&gt; The selected selling plan is determined by the `selling_plan` URL parameter.","examples":[],"return_type":[{"type":"selling_plan","name":"","description":"","array_value":""}],"summary":"The currently selected selling plan.","name":"selected_selling_plan"},{"deprecated":false,"deprecation_reason":"","description":"If no variant and selling plan are selected, then `nil` is returned.\n\n&gt; Note:\n&gt; The selected variant is determined by the `variant` URL parameter, and the selected selling plan is determined by the\n&gt; `selling_plan` URL parameter.","examples":[],"return_type":[{"type":"selling_plan_allocation","name":"","description":"","array_value":""}],"summary":"The currently selected selling plan allocation for the currently selected variant.","name":"selected_selling_plan_allocation"},{"deprecated":false,"deprecation_reason":"","description":"The following logic is used to determine which selling plan allocation is returned:\n\n| Selling plan allocation | Return criteria |\n| --- | --- |\n| The currently selected allocation | Returned if a variant and selling plan are selected.&lt;br&gt;&lt;br&gt;The selected variant is determined by the `variant` URL parameter, and the selected selling plan is determined by the `selling_plan` URL parameter. |\n| The first allocation on the first available variant | Returned if no allocation is currently selected. |\n| The first allocation on the first variant | Returned if no allocation is currently selected, and there are no available variants. |\n\nIf the product doesn't have any selling plans, then `nil` is returned.","examples":[],"return_type":[{"type":"selling_plan_allocation","name":"","description":"","array_value":""}],"summary":"The currently selected, or first available, selling plan allocation.","name":"selected_or_first_available_selling_plan_allocation"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the product is a gift card. Returns `false` if not.","name":"gift_card?"}],"summary":"A [product](https://help.shopify.com/manual/products) in the store.","name":"product","examples":[],"json_data":{"path":"/products/health-potion","handle":"product","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"product","property":"options_with_values"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the product option.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the product option in the [`product.options_with_values` array](/docs/api/liquid/objects/product#product-options_with_values).","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"product_option_value"}],"summary":"The possible values for the product option.","name":"values"},{"deprecated":false,"deprecation_reason":"","description":"If no value is currently selected, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The currently selected product option value.","name":"selected_value"}],"summary":"A product option, such as size or color.","name":"product_option","examples":[],"json_data":{"path":"/products/health-potion","handle":"product.options_with_values[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"product_option","property":"values"},{"object":"variant","property":"options"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the product option value.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the product option value.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"swatch","name":"","description":"","array_value":""}],"summary":"Returns a [swatch](/docs/api/liquid/objects/swatch) drop for the product option value. If there is no saved `color` or `image` content for the swatch, then the return value is `nil`.","name":"swatch"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Whether or not the option value is selected.","name":"selected"},{"deprecated":false,"deprecation_reason":"","description":"In the context of the selected values for previous options, indicates whether the current option value has any purchaseable combinations in any subsequent options, or whether the current option value is purchaseable if there are no subsequent options.\nFor example, if a product comes in Color/Size/Material and Red/Small/Cotton is selected, `available` will indicate:\n- Color: Whether any variants for the Color option value are available for purchase.\n- Size: Whether any variants for Color:Red and the Size option value are available for purchase.\n- Material: Whether any variants for Color:Red, Size:Small, and the Material option value are available for purchase.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Whether or not the option value is available.","name":"available"},{"deprecated":false,"deprecation_reason":"","description":"If this option value is selected (`selected == true`), this returns the `selected_or_first_available_variant`.\n\nIf this option value is not selected (`selected == false`), this returns the variant that is associated with the current\noption value and the other currently selected option values.\n\nUsing optionValue.variant is the recommended way to render product option values availability.\nFor more information, refer to [rendering option value availability.](https://shopify.dev/docs/storefronts/themes/product-merchandising/variants/support-high-variant-products#option-value-availability)","examples":[],"return_type":[{"type":"variant","name":"","description":"","array_value":""}],"summary":"The variant associated with this option value combined with the other currently selected option values, if one exists.","name":"variant"},{"deprecated":false,"deprecation_reason":"","description":"```liquid\n/products/gorgeous-wooden-computer\n```","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Returns a URL if the option value may be associated with another product, nil otherwise.","name":"product_url"}],"summary":"A product option value, such as \"red\" for the option \"color\".","name":"product_option_value","examples":[],"json_data":{"path":"/products/mana-potion","handle":"product.options_with_values[0].values[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"product_option_value","property":"swatch"},{"object":"filter_value","property":"swatch"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"color","name":"","description":"","array_value":""}],"summary":"The swatch color.","name":"color"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The swatch image.","name":"image"}],"summary":"Color and image for visual representation.\nAvailable for [product option values](/docs/api/liquid/objects/product_option_value) and [filter values](/docs/api/liquid/objects/filter_value).","name":"swatch","examples":[],"json_data":{"path":"/products/mana-potion","handle":"product.options_with_values[0].values[0].swatch","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"line_item","property":"variant"},{"object":"product","property":"first_available_variant"},{"object":"product","property":"selected_or_first_available_variant"},{"object":"product","property":"variants"},{"object":"product","property":"selected_variant"},{"object":"product_option_value","property":"variant"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the variant.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"product","name":"","description":"","array_value":""}],"summary":"The parent product of the variant.","name":"product"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The selected variant is determined by the `variant` URL parameter. This URL parameter is available on product pages URLs only.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant is currently selected. Returns `false` if it's not.","name":"selected"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant has been matched by a [storefront filter](https://shopify.dev/themes/navigation-search/filtering/storefront-filtering)\nor no filters are applied.\nReturns `false` if it hasn't.","name":"matched"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the variant.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"The variant title","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.variants.first.title }}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A concatenation of each variant option, separated by a `/`.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"If no rule exists, then a default value is returned.\n\nThis rule can be set as part of a [B2B catalog](https://help.shopify.com/manual/b2b/catalogs/quantity-pricing).\n\n&gt; Note:\n&gt; The default quantity rule is `min=1,max=null,increment=1`.","examples":[],"return_type":[{"type":"quantity_rule","name":"","description":"","array_value":""}],"summary":"The quantity rule for the variant.","name":"quantity_rule"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"quantity_price_break"}],"summary":"Returns `quantity_price_break` objects for the variant in the current customer context.","name":"quantity_price_breaks"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant has any quantity price breaks available in the current customer context.\nReturns `false` if it doesn't.","name":"quantity_price_breaks_configured?"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the variant in the currency's subunit.","name":"price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The **compare at** price of the variant in the currency's subunit.","name":"compare_at_price"},{"deprecated":false,"deprecation_reason":"","description":"If no selling plan is selected, then `nil` is returned.\n\n&gt; Note:\n&gt; The selected selling plan is determined by the `selling_plan` URL parameter.","examples":[],"return_type":[{"type":"selling_plan_allocation","name":"","description":"","array_value":""}],"summary":"The selected `selling_plan_allocation`.","name":"selected_selling_plan_allocation"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"selling_plan_allocation"}],"summary":"The `selling_plan_allocation` objects for the variant.","name":"selling_plan_allocations"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The SKU of the variant.","name":"sku"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The barcode of the variant.","name":"barcode"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant is available. Returns `false` if not.","name":"available"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Output the options of each variant","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{% for variant in product.variants -%}\n  {%- capture options -%}\n    {% for option in variant.options -%}\n      {{ option }}{%- unless forloop.last -%}/{%- endunless -%}\n    {%- endfor %}\n  {%- endcapture -%}\n  \n  {{ variant.id }}: {{ options }}\n{%- endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"product_option_value","name":"","description":"","array_value":""}],"summary":"The values of the variant for each [product option](/docs/api/liquid/objects/product_option).","name":"options"},{"deprecated":true,"deprecation_reason":"Deprecated. Prefer to use [`variant.options`](/docs/api/liquid/objects/variant#variant-options) instead.","description":"If there's no first product option, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The value of the variant for the first product option.","name":"option1"},{"deprecated":true,"deprecation_reason":"Deprecated. Prefer to use [`variant.options`](/docs/api/liquid/objects/variant#variant-options) instead.","description":"If there's no second product option, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The value of the variant for the second product option.","name":"option2"},{"deprecated":true,"deprecation_reason":"Deprecated. Prefer to use [`variant.options`](/docs/api/liquid/objects/variant#variant-options) instead.","description":"If there's no third product option, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The value of the variant for the third product option.","name":"option3"},{"deprecated":false,"deprecation_reason":"","description":"Variant URLs use the following structure:\n\n```\n/products/[product-handle]?variant=[variant-id]\n```","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL of the variant.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To output the weight of a variant in this unit, use this property, and the `variant.weight_in_unit` property, with the\n&gt; [`weight_with_unit` filter](/docs/api/liquid/filters/weight_with_unit).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The unit for the weight of the variant.","name":"weight_unit"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To output this weight, use this property, and the `variant.weight_unit` property, with the [`weight_with_unit` filter](/docs/api/liquid/filters/weight_with_unit).","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The weight of the variant in the unit specified by `variant.weight_unit`.","name":"weight_in_unit"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`weight_with_unit`](/docs/api/liquid/filters/weight_with_unit) filter to format the weight in\n&gt; [the store's format](https://www.shopify.com/admin/settings/general).\n&gt;\n&gt; Use `variant.weight_in_unit` to output the weight in the unit configured on the variant.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The weight of the variant in grams.","name":"weight"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Unit prices are available only to stores located in Germany and France.","examples":[],"return_type":[{"type":"unit_price_measurement","name":"","description":"","array_value":""}],"summary":"The unit price measurement of the variant.","name":"unit_price_measurement"},{"deprecated":false,"deprecation_reason":"","description":"The price reflects any discounts that are applied to the line item. The value is output in the customer's local\n(presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Note:\n&gt; Unit prices are available only to stores located in Germany and France.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The [unit price](https://help.shopify.com/manual/intro-to-shopify/initial-setup/sell-in-france/price-per-unit#add-unit-prices-to-your-product)\nof the variant in the currency's subunit.","name":"unit_price"},{"deprecated":false,"deprecation_reason":"","description":"If inventory isn't tracked, then the number of items sold is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The inventory quantity of the variant.","name":"inventory_quantity"},{"deprecated":false,"deprecation_reason":"","description":"If inventory isn't tracked, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The inventory management service of the variant.","name":"inventory_management"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about why merchants might want to continue selling products when they're out of stock, visit the\n&gt; [Shopify Help Center](https://help.shopify.com/manual/products/inventory/getting-started-with-inventory/selling-when-out-of-stock).","examples":[],"return_type":[{"type":"string","name":"continue","description":"Continue selling when the variant is out of stock.","array_value":""},{"type":"string","name":"deny","description":"Stop selling when the variant is out of stock.","array_value":""}],"summary":"Whether the variant should continue to be sold when it's out of stock.","name":"inventory_policy"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant requires shipping. Returns `false` if it doesn't.","name":"requires_shipping"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if taxes should be charged on the variant. Returns `false` if not.","name":"taxable"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`variant.image`](/docs/api/liquid/objects/variant#variant-image).","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The image attached to the variant.","name":"featured_image"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; This is the same value as [`variant.featured_image`](/docs/api/liquid/objects/variant#variant-featured_image).","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The image attached to the variant.","name":"image"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"media","name":"","description":"","array_value":""}],"summary":"The first media object attached to the variant.","name":"featured_media"},{"deprecated":false,"deprecation_reason":"","description":"Incoming inventory information is populated by [inventory transfers](https://help.shopify.com/manual/products/inventory/transfers),\n[purchase orders](https://help.shopify.com/manual/products/inventory/purchase-orders), and\n[third-party apps](/docs/apps/fulfillment/inventory-management-apps).","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant has incoming inventory. Returns `false` if not.","name":"incoming"},{"deprecated":false,"deprecation_reason":"","description":"Incoming inventory information is populated by [inventory transfers](https://help.shopify.com/manual/products/inventory/transfers),\n[purchase orders](https://help.shopify.com/manual/products/inventory/purchase-orders), and\n[third-party apps](/docs/apps/fulfillment/inventory-management-apps).\n\n&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the date.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The arrival date for the next incoming inventory of the variant.","name":"next_incoming_date"},{"deprecated":false,"deprecation_reason":"","description":"The array is defined in only the following cases:\n\n- `variant.selected` is `true`\n- The variant is the product's first available variant. For example, `product.first_available_variant` or `product.selected_or_first_available_variant`.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"store_availability"}],"summary":"The store availabilities for the variant.","name":"store_availabilities"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant's product is set to require a `selling_plan` when being added to the cart. Returns `false` if not.","name":"requires_selling_plan"}],"summary":"A [product variant](https://help.shopify.com/manual/products/variants).","name":"variant","examples":[],"json_data":{"path":"/products/health-potion","handle":"product.variants[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"variant","property":"quantity_price_breaks"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The minimum quantity required to qualify for the price break.","name":"minimum_quantity"},{"deprecated":false,"deprecation_reason":"","description":"The value is the price in the customer's local (presentment) currency.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price for the quantity price break once the minimum quantity is met.","name":"price"}],"summary":"The per-unit price of a variant when purchasing the minimum quantity or more.","name":"quantity_price_break","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"minimum_quantity\":\"10\",\"price\":\"20.00\"}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"metafield","property":"value"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about metafield types, refer to [Metafield types](/apps/metafields/types).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The rating value.","name":"rating"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The minimum value of the rating scale.","name":"scale_min"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The maximum value of the rating scale.","name":"scale_max"}],"summary":"Information for a [`rating` type](/apps/metafields/types) metafield.","name":"rating","examples":[],"json_data":{"path":"/products/health-potion","handle":"product.metafields.details.rating.value","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"gift_card","property":"recipient"}],"template":["gift_card.liquid"]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The nickname of the recipient.","name":"nickname"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The email of the recipient.","name":"email"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The full name of the recipient.","name":"name"}],"summary":"A recipient that is associated with a [gift card](https://help.shopify.com/manual/products/gift-card-products).","name":"recipient","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"email\":\"cornelius.potionmaker@gmail.com\",\"name\":\"Cornelius Potionmaker\",\"nickname\":\"Cornelius\"}"},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Product recommendations become more accurate over time as new orders and product data become available. To learn more about\nhow product recommendations are generated, refer to [Product recommendations](/themes/product-merchandising/recommendations).\n\n&gt; Note:\n&gt; The `recommendations` object returns products only when rendered in a section using the [Product Recommendations API](/api/ajax/reference/product-recommendations)\n&gt; and the [Section Rendering API](/api/section-rendering). To learn about how to include product recommendations in your theme,\n&gt; refer to [Show product recommendations](/themes/product-merchandising/recommendations/show-product-recommendations).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` when being referenced inside a section that's been rendered using the Product Recommendations API and\nthe Section Rendering API. Returns `false` if not.","name":"performed?"},{"deprecated":false,"deprecation_reason":"","description":"If `performed?` is `false`, then an [EmptyDrop](/docs/api/liquid/basics#emptydrop) is returned.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"product"}],"summary":"The recommended products.","name":"products"},{"deprecated":false,"deprecation_reason":"","description":"If `performed?` is `false`, then 0 is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of recommended products.","name":"products_count"},{"deprecated":false,"deprecation_reason":"","description":"If `performed?` is `false`, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The recommendation intent.","name":"intent"}],"summary":"Product recommendations for a specific product based on sales data, product descriptions, and collection relationships.","name":"recommendations","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"products\":[],\"products_count\":4,\"performed?\":true}"},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"You can use `request.design_mode` to control theme behavior depending on whether the theme is being viewed in the editor.\nFor example, you can prevent session data from being tracked by tracking scripts in the theme editor.\n\n&gt; Caution:\n&gt; You shouldn't use `request.design_mode` to change customer-facing functionality. The theme editor preview should match\n&gt; what the merchant's customers see on the live store.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the request is being made from within the theme editor. Returns `false` if not.","name":"design_mode"},{"deprecated":false,"deprecation_reason":"","description":"You can use `request.visual_preview_mode` to control theme behavior depending on whether the theme is being viewed in the editor's visual section preview.\nFor example, you can remove any scripts that interefere with how the section is displayed.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the request is being made from within the theme editor's visual section preview. Returns `false` if not.","name":"visual_preview_mode"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"404","description":"","array_value":""},{"type":"string","name":"article","description":"","array_value":""},{"type":"string","name":"blog","description":"","array_value":""},{"type":"string","name":"captcha","description":"","array_value":""},{"type":"string","name":"cart","description":"","array_value":""},{"type":"string","name":"collection","description":"","array_value":""},{"type":"string","name":"list-collections","description":"","array_value":""},{"type":"string","name":"customers/account","description":"","array_value":""},{"type":"string","name":"customers/activate_account","description":"","array_value":""},{"type":"string","name":"customers/addresses","description":"","array_value":""},{"type":"string","name":"customers/login","description":"","array_value":""},{"type":"string","name":"customers/order","description":"","array_value":""},{"type":"string","name":"customers/register","description":"","array_value":""},{"type":"string","name":"customers/reset_password","description":"","array_value":""},{"type":"string","name":"gift_card","description":"","array_value":""},{"type":"string","name":"index","description":"","array_value":""},{"type":"string","name":"metaobject","description":"","array_value":""},{"type":"string","name":"page","description":"","array_value":""},{"type":"string","name":"password","description":"","array_value":""},{"type":"string","name":"policy","description":"","array_value":""},{"type":"string","name":"product","description":"","array_value":""},{"type":"string","name":"search","description":"","array_value":""}],"summary":"The type of page being requested.","name":"page_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The domain that the request is hosted on.","name":"host"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Create a context-aware absolute URL","description":"You can use `request.origin` with any object, object property, or filter that returns a relative URL to build a context-aware absolute URL.\n","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.selected_variant.url | default: product.url | prepend: request.origin }}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The protocol and host of the request.","name":"origin"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; If the current path is for a page that doesn't exist, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The path of the request.","name":"path"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"shop_locale","name":"","description":"","array_value":""}],"summary":"The locale of the request.","name":"locale"}],"summary":"Information about the current URL and the associated page.","name":"request","examples":[],"json_data":{"path":"/","handle":"request","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":["robots.txt.liquid"]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; You can [customize the `robots.txt` file](/themes/seo/robots-txt) with the [`robots.txt.liquid` template](/themes/architecture/templates/robots-txt-liquid).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"group"}],"summary":"The rule groups.","name":"default_groups"}],"summary":"The default rule groups for the `robots.txt` file.","name":"robots","examples":[],"json_data":{"path":"/robots.txt","handle":"robots","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"robots","property":"default_groups"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; You can [customize the `robots.txt` file](/themes/seo/robots-txt) with the [`robots.txt.liquid` template](/themes/architecture/templates/robots-txt-liquid).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"user_agent","name":"","description":"","array_value":""}],"summary":"The user agent for the group.","name":"user_agent"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"rule"}],"summary":"The rules in the group.","name":"rules"},{"deprecated":false,"deprecation_reason":"","description":"If the group doesn't require a sitemap, then `blank` is returned.\n\nThe sitemap can be accessed at `/sitemap.xml`.","examples":[],"return_type":[{"type":"sitemap","name":"","description":"","array_value":""}],"summary":"The sitemap for the group.","name":"sitemap"}],"summary":"A group of rules for the `robots.txt` file.","name":"group","examples":[],"json_data":{"path":"/robots.txt","handle":"robots.default_groups[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"group","property":"rules"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"A rule consists of a directive, which can be either `Allow` or `Disallow`, and a value of the associated URL path.\n\nFor example:\n\n```\nDisallow: /policies/\n```\n\nYou can output a rule directly, instead of referencing each of its properties.\n\n&gt; Tip:\n&gt; You can [customize the `robots.txt` file](/themes/seo/robots-txt) with the [`robots.txt.liquid` template](/themes/architecture/templates/robots-txt-liquid).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The directive of the rule.","name":"directive"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The value of the rule.","name":"value"}],"summary":"A rule for the `robots.txt` file, which tells crawlers which pages can, or can't, be accessed.","name":"rule","examples":[],"json_data":{"path":"/robots.txt","handle":"robots.default_groups[0].rules[27]","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Using the `routes` object instead of hardcoding URLs helps ensure that your theme supports\n[multiple languages](/themes/internationalization/multiple-currencies-languages), as well as any possible changes in URL\nformat.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The index (home page) URL.","name":"root_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [account page](https://help.shopify.com/manual/customers/customer-accounts) URL. Redirects to [new customer accounts](https://help.shopify.com/en/manual/customers/customer-accounts/new-customer-accounts) when enabled.","name":"account_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [account login page](/themes/architecture/templates/customers-login) URL. Redirects to [new customer accounts](https://help.shopify.com/en/manual/customers/customer-accounts/new-customer-accounts) when enabled.","name":"account_login_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL to log a customer out of their account. Redirects to [new customer accounts](https://help.shopify.com/en/manual/customers/customer-accounts/new-customer-accounts) when enabled.","name":"account_logout_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [password recovery page](/themes/architecture/templates/customers-reset-password) URL. Redirects to [new customer accounts](https://help.shopify.com/en/manual/customers/customer-accounts/new-customer-accounts) when enabled.","name":"account_recover_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [account registration page](/themes/architecture/templates/customers-register) URL.","name":"account_register_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [account addresses page](/themes/architecture/templates/customers-addresses) URL. Redirects to [new customer accounts](https://help.shopify.com/en/manual/customers/customer-accounts/new-customer-accounts) when enabled.","name":"account_addresses_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [collection list page](/themes/architecture/templates/list-collections) URL.","name":"collections_url"},{"deprecated":false,"deprecation_reason":"","description":"The all-products collection is automatically generated by Shopify and contains all products in the store.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The all-products collection page URL.","name":"all_products_collection_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [search page](/themes/architecture/templates/search) URL.","name":"search_url"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to support predictive search in your theme, refer to [Add predictive search to your theme](/themes/navigation-search/search/predictive-search).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [Predictive Search API](/api/ajax/reference/predictive-search) URL.","name":"predictive_search_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [cart page](/themes/architecture/templates/cart) URL.","name":"cart_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the [`/cart/add` Cart API endpoint](/api/ajax/reference/cart#post-locale-cart-add-js).","name":"cart_add_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the [`/cart/change` Cart API endpoint](/api/ajax/reference/cart#post-locale-cart-change-js).","name":"cart_change_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the [`/cart/clear` Cart API endpoint](/api/ajax/reference/cart#post-locale-cart-clear-js).","name":"cart_clear_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the [`/cart/update` Cart API endpoint](/api/ajax/reference/cart#post-locale-cart-update-js).","name":"cart_update_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [Product Recommendations API](https://shopify.dev/api/ajax/reference/product-recommendations) URL.","name":"product_recommendations_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"[New customer accounts](https://help.shopify.com/en/manual/customers/customer-accounts/new-customer-accounts) login page. Redirects to the storefront page the customer was on before visiting the login page.","name":"storefront_login_url"}],"summary":"Allows you to generate standard URLs for the storefront.","name":"routes","examples":[],"json_data":{"path":"/","handle":"routes","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"scripts","property":"cart_calculate_line_items"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn more about Shopify Scripts and the Script Editor, visit the [Shopify Help Center](https://help.shopify.com/manual/checkout-settings/script-editor).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the script.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the script.","name":"name"}],"summary":"Information about a Shopify Script.\n&gt; Caution:\n&gt; Shopify Scripts will be sunset on August 28, 2025. Migrate your existing scripts to [Shopify Functions](/docs/api/functions) before this date.","name":"script","examples":[],"json_data":{"path":"/","handle":"scripts.cart_calculate_line_items","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":["search"]},"deprecated":false,"deprecation_reason":"","description":"To learn about storefront search and how to include it in your theme, refer to [Storefront search](/themes/navigation-search/search).","properties":[{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`highlight` filter](/docs/api/liquid/filters/highlight) to highlight the search terms in search result content.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The entered search terms.","name":"terms"},{"deprecated":false,"deprecation_reason":"","description":"Only filters that are relevant to the current search results are returned. If the search results contain more than 1000\nproducts, then the array will be empty.\n\n&gt; Tip:\n&gt; To learn about how to set up filters in the admin, visit the [Shopify Help Center](https://help.shopify.com/manual/online-store/themes/customizing-themes/storefront-filters).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"filter"}],"summary":"The filters that have been set up on the search page.","name":"filters"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if a search was successfully performed. Returns `false` if not.","name":"performed"},{"deprecated":false,"deprecation_reason":"","description":"An item can be an [`article`](/docs/api/liquid/objects/article), a [`page`](/docs/api/liquid/objects/page), or a\n[`product`](/docs/api/liquid/objects/product).\n\n&gt; Tip:\n&gt; Use the [paginate](/docs/api/liquid/tags/paginate) tag to choose how many results to show per page, up to a limit of 50.","examples":[{"name":"Search result `object_type`","description":"Search results have an additional `object_type` property that returns the object type of the result.","syntax":"","path":"/search?q=potion","raw_liquid":"{% for item in search.results %}\n&lt;!-- Result {{ forloop.index }}--&gt;\n&lt;h3&gt;\n  {{ item.title | link_to: item.url }}\n&lt;/h3&gt;\n\n{% if item.object_type == 'article' -%}\n  {%- comment -%}\n     'item' is an article\n     All article object properties can be accessed.\n  {%- endcomment -%}\n\n  {% if item.image -%}\n    &lt;div class=\"result-image\"&gt;\n      &lt;a href=\"{{ item.url }}\" title=\"{{ item.title | escape }}\"&gt;\n        {{ item | image_url: width: 100 | image_tag }}\n       &lt;/a&gt;\n    &lt;/div&gt;\n   {% endif %}\n{%- elsif item.object_type == 'page' -%}\n  {%- comment -%}\n    'item' is a page.\n     All page object properties can be accessed.\n  {%- endcomment -%}\n{%- else -%}\n  {%- comment -%}\n     'item' is a product.\n     All product object properties can be accessed.\n  {%- endcomment -%}\n\n  {%- if item.featured_image -%}\n    &lt;div class=\"result-image\"&gt;\n       &lt;a href=\"{{ item.url }}\" title=\"{{ item.title | escape }}\"&gt;\n         {{ item.featured_image | image_url: width: 100 | image_tag }}\n      &lt;/a&gt;\n    &lt;/div&gt;\n  {% endif %}\n{%- endif -%}\n\n&lt;span&gt;{{ item.content | strip_html | truncatewords: 40 | highlight: search.terms }}&lt;/span&gt;\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The search result items.","name":"results"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of results.","name":"results_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Output the sort options","description":"","syntax":"","path":"/search?q=potion","raw_liquid":"{%- assign sort_by = search.sort_by | default: search.default_sort_by -%}\n\n&lt;select&gt;\n{%- for option in search.sort_options %}\n  &lt;option\n    value=\"{{ option.value }}\"\n    {%- if option.value == sort_by %}\n      selected=\"selected\"\n    {%- endif %}\n  &gt;\n    {{ option.name }}\n  &lt;/option&gt;\n{% endfor -%}\n&lt;/select&gt;","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"sort_option"}],"summary":"The available sorting options for the search results.","name":"sort_options"},{"deprecated":false,"deprecation_reason":"","description":"If there's no `sort_by` URL parameter, then the value is `nil`.","examples":[],"return_type":[],"summary":"The sort order of the search results. This is determined by the `sort_by` URL parameter.","name":"sort_by"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The default sort order of the search results, which is `relevance`.","name":"default_sort_by"},{"deprecated":false,"deprecation_reason":"","description":"A search can be performed on the following object types:\n\n- [`article`](/docs/api/liquid/objects/article)\n- [`page`](/docs/api/liquid/objects/page)\n- [`product`](/docs/api/liquid/objects/product)\n\n&gt; Note:\n&gt; The types are determined by the [`type` query parameter](/api/ajax/reference/predictive-search#query-parameters).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The object types that the search was performed on.","name":"types"}],"summary":"Information about a storefront search query.","name":"search","examples":[],"json_data":{"path":"/search?q=potion","handle":"search","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about sections and using them in a theme, refer to [Sections](/themes/architecture/sections).","properties":[{"deprecated":false,"deprecation_reason":"","description":"The ID for sections included through [JSON templates](/themes/architecture/templates/json-templates) are dynamically\ngenerated by Shopify.\n\nThe ID for static sections is the section file name without the `.liquid` extension. For example, a `header.liquid`\nsection has an ID of `header`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the section.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"To learn about how to access settings, refer to [Access settings](/themes/architecture/settings#access-settings).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"The [settings](https://shopify.dev/themes/architecture/sections/section-schema#settings) of the section.","name":"settings"},{"deprecated":false,"deprecation_reason":"","description":"Use this property to adjust section behavior based on its position within its location ([template](/docs/themes/architecture/templates), [section group](/docs/themes/architecture/section-groups)) and on the page. The `index` starts at 1 within each location.\n\nAn example use case is for programmatically setting `loading=\"lazy\"` for images below the fold based on an index higher than, for example, 3. Note that this is now the default behavior for the [`image_tag` filter](/docs/api/liquid/filters#image_tag).\n\nOnly use this for non-display use cases like web performance. Because of various limitations, the `index` property returns `nil` in the following contexts:\n\n- When rendered as a [static section](/docs/themes/architecture/sections#statically-render-a-section)\n- While rendering in the online store editor\n- When using the [Section Rendering API](/docs/api/section-rendering)","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the current section within its location.","name":"index"},{"deprecated":false,"deprecation_reason":"","description":"This is the same as the `index` property except that the index starts at 0 instead of 1.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 0-based index of the current section within its location.","name":"index0"},{"deprecated":false,"deprecation_reason":"","description":"Sections can have one of four different location types. For sections rendered within a [template](/docs/themes/architecture/templates), the location will be `template`. For sections rendered within a [section group](/docs/themes/architecture/section-groups), the location will be the section group type, e.g., `header`, `footer`, `custom.&lt;type&gt;`. Sections [rendered statically](/docs/themes/architecture/sections#statically-render-a-section) will be `static`. Finally, if you're still using `content_for_index`, then the value will be `content_for_index`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The scope or context of the section (template, section group, or global).","name":"location"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"block"}],"summary":"The blocks of the section.","name":"blocks"}],"summary":"The properties and settings of a section.","name":"section","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"blocks\":[],\"id\":\"template--14453298921537__cart-items\",\"settings\":{}}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"line_item","property":"selling_plan_allocation"},{"object":"variant","property":"selling_plan_allocations"},{"object":"product","property":"selected_selling_plan_allocation"},{"object":"product","property":"selected_or_first_available_selling_plan_allocation"},{"object":"variant","property":"selected_selling_plan_allocation"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to support selling plans in your theme, refer to [Purchase options](/themes/pricing-payments/purchase-options).","properties":[{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the selling plan allocation in the currency's subunit.","name":"price"},{"deprecated":false,"deprecation_reason":"","description":"The value of the **compare at** price is the line item's price without the selling plan applied.\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The **compare at** price of the selling plan allocation in the currency's subunit.","name":"compare_at_price"},{"deprecated":false,"deprecation_reason":"","description":"The maximum length of the array is two. If the associated selling plan doesn't create any price adjustments, then the\narray is empty.\n\nEach `selling_plan_allocation_price_adjustment` maps to a [`selling_plan_price_adjustment`](/docs/api/liquid/objects/selling_plan_price_adjustment)\nin the [`selling_plan.price_adjustments` array](/docs/api/liquid/objects/selling_plan#selling_plan-price_adjustments). The\n`selling_plan.price_adjustments` array contains the intent of the selling plan, and the\n`selling_plan_allocation.price_adjustments` array contains the resulting money amounts.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"selling_plan_allocation_price_adjustment"}],"summary":"The selling plan allocation price adjustments.","name":"price_adjustments"},{"deprecated":false,"deprecation_reason":"","description":"If the variant doesn't have a unit price, then `nil` is returned.\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The [unit price](/docs/api/liquid/objects/variant#variant-unit_price) of the variant associated with the selling plan, in the currency's subunit.","name":"unit_price"},{"deprecated":false,"deprecation_reason":"","description":"If a selling plan includes multiple deliveries, then the `per_delivery_price` is the `price` divided by the number of\ndeliveries.\n\nThe value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price for each delivery in the selling plan in the currency's subunit.","name":"per_delivery_price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"selling_plan","name":"","description":"","array_value":""}],"summary":"The selling plan that created the allocation.","name":"selling_plan"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the [`selling_plan_group`](/docs/api/liquid/objects/selling_plan_group) that the selling plan of the allocation belongs to.","name":"selling_plan_group_id"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount that the customer will be charged at checkout in the currency's subunit.","name":"checkout_charge_amount"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The remaining amount for the customer to pay, in the currency's subunit.","name":"remaining_balance_charge_amount"}],"summary":"Information about how a specific [selling plan](/apps/subscriptions/selling-plans) affects a line item.","name":"selling_plan_allocation","examples":[],"json_data":{"path":"/products/health-potion?variant=39897499828289&amp;selling_plan=610435137","handle":"product.selected_selling_plan_allocation","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"selling_plan_allocation","property":"price_adjustments"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to support selling plans in your theme, refer to [Purchase options](/themes/pricing-payments/purchase-options).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the price adjustment in the\n[`selling_plan_allocation.price_adjustments` array](/docs/api/liquid/objects/selling_plan_allocation#selling_plan_allocation-price_adjustments).","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price that will be charged for the price adjustment's lifetime, in the currency's subunit.","name":"price"}],"summary":"The resulting price from the intent of the associated [`selling_plan_price_adjustment`](/docs/api/liquid/objects/selling_plan_price_adjustment).","name":"selling_plan_allocation_price_adjustment","examples":[],"json_data":{"path":"/products/health-potion?variant=39897499828289&amp;selling_plan=610435137","handle":"product.selected_selling_plan_allocation.price_adjustments[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"line_item","property":"selling_plan_allocation"},{"object":"variant","property":"selling_plan_allocations"},{"object":"selling_plan","property":"checkout_charge"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to support selling plans in your theme, refer to [Purchase options](/themes/pricing-payments/purchase-options).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"percentage","description":"","array_value":""},{"type":"string","name":"price","description":"","array_value":""}],"summary":"The value type of the checkout charge.","name":"value_type"},{"deprecated":false,"deprecation_reason":"","description":"How this value is interpreted depends on the [value type](/docs/api/liquid/objects/selling_plan_checkout_charge#selling_plan_checkout_charge-value_type) of\nthe checkout charge. The following table outlines what the value represents for each value type:\n\n| Value type | Value |\n| --- | --- |\n| `percentage` | The percent amount of the original price that the customer needs to pay.&lt;br&gt;&lt;br&gt;For example, if the value is 50, then the customer needs to pay 50% of the original price. |\n| `price` | The amount that the customer needs to pay in the currency's subunit. |\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The value of the checkout charge.","name":"value"}],"summary":"Information about how a specific [selling plan](/apps/subscriptions/selling-plans) affects the amount that a\ncustomer needs to pay for a line item at checkout.","name":"selling_plan_checkout_charge","examples":[],"json_data":{"path":"/products/health-potion?selling_plan=610435137","handle":"product.selected_selling_plan.checkout_charge","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"line_item","property":"selling_plan_allocation"},{"object":"variant","property":"selling_plan_allocations"},{"object":"product","property":"selected_selling_plan"},{"object":"selling_plan_allocation","property":"selling_plan"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to support selling plans in your theme, refer to [Purchase options](/themes/pricing-payments/purchase-options).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the selling plan.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The name is shown at checkout with the line item summary.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the selling plan.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The description of the selling plan.","name":"description"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The name is shown at checkout with the line item summary.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the [`selling_plan_group`](/docs/api/liquid/objects/selling_plan_group) that the selling plan belongs to.","name":"group_id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the selling plan includes multiple deliveries. Returns `false` if not.","name":"recurring_deliveries"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"selling_plan_option"}],"summary":"The selling plan options.","name":"options"},{"deprecated":false,"deprecation_reason":"","description":"The maximum length of the array is two. If the selling plan doesn't create any price adjustments, then the\narray is empty.\n\nEach `selling_plan_price_adjustment` maps to a [`selling_plan_allocation_price_adjustment`](/docs/api/liquid/objects/selling_plan_allocation_price_adjustment)\nin the [`selling_plan_allocation.price_adjustments` array](/docs/api/liquid/objects/selling_plan_allocation#selling_plan_allocation-price_adjustments).\nThe `selling_plan.price_adjustments` array contains the intent of the selling plan, and the\n`selling_plan_allocation.price_adjustments` contains the resulting money amounts.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"selling_plan_price_adjustment"}],"summary":"The selling plan price adjustments.","name":"price_adjustments"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The selected selling plan is determined by the `selling_plan` URL parameter.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the selling plan is currently selected. Returns `false` if not.","name":"selected"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"selling_plan_checkout_charge","name":"","description":"","array_value":""}],"summary":"The checkout charge of the selling plan.","name":"checkout_charge"}],"summary":"Information about the intent of how a specific [selling plan](/apps/subscriptions/selling-plans) affects a line item.","name":"selling_plan","examples":[],"json_data":{"path":"/products/health-potion?selling_plan=610435137","handle":"product.selected_selling_plan","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"product","property":""}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Selling plans are grouped based on shared [selling plan option names](/docs/api/liquid/objects/selling_plan_option#selling_plan_option-name).\n\nTo learn about how to support selling plans in your theme, refer to [Purchase options](/themes/pricing-payments/purchase-options).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"selling_plan"}],"summary":"The selling plans in the group.","name":"selling_plans"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the selling plan group.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the selling plan group.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"If the app doesn't provide a value, then `nil` is returned.\n\n&gt; Tip:\n&gt; You can use this property, with the [`where` filter](/docs/api/liquid/filters/where), to filter the\n&gt; [`product.selling_plan_groups` array](/docs/api/liquid/objects/product#product-selling_plan_groups) for all selling plan groups\n&gt; from a specific app.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"An optional string provided by an app to identify selling plan groups created by that app.","name":"app_id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"selling_plan_group_option"}],"summary":"The selling plan group options.","name":"options"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The selected selling plan is determined by the `selling_plan` URL parameter.","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the currently selected selling plan is part of the selling plan group. Returns `false` if not.","name":"selling_plan_selected"}],"summary":"Information about a specific group of [selling plans](/apps/subscriptions/selling-plans) that include any of a\nproduct's variants.","name":"selling_plan_group","examples":[],"json_data":{"path":"/products/health-potion","handle":"product.selling_plan_groups[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"selling_plan_group","property":""}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the option.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the option in the [`selling_plan_group.options` array](/docs/api/liquid/objects/selling_plan_group#selling_plan_group-options).","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The values of the option.","name":"values"},{"deprecated":false,"deprecation_reason":"","description":"If no selling plan is currently selected, then `nil` is returned.\n\n&gt; Note:\n&gt; The selected selling plan is determined by the `selling_plan` URL parameter.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The option value of the currently selected selling plan.","name":"selected_value"}],"summary":"Information about a specific option in a [selling plan group](/docs/api/liquid/objects/selling_plan_group).","name":"selling_plan_group_option","examples":[],"json_data":{"path":"/products/health-potion","handle":"product.selling_plan_groups[0].options[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"selling_plan","property":"options"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about how to support selling plans in your theme, refer to [Purchase options](/themes/pricing-payments/purchase-options).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the associated `selling_plan_group_option`.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The 1-based index of the selling plan option in the associated [`selling_plan_group.options` array](/docs/api/liquid/objects/selling_plan_group#selling_plan_group-options).","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"The value is one of the [`selling_plan_group_option.values`](/docs/api/liquid/objects/selling_plan_group_option#selling_plan_group_option-values).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The value of the selling plan option.","name":"value"}],"summary":"Information about a selling plan's value for a specific [`selling_plan_group_option`](/docs/api/liquid/objects/selling_plan_group_option).","name":"selling_plan_option","examples":[],"json_data":{"path":"/products/health-potion?selling_plan=610435137","handle":"product.selected_selling_plan.options[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"checkout","property":"shipping_method"},{"object":"order","property":"shipping_method"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"In most contexts, the shipping method title appears in the customer's preferred language. However, in the context of an\n[order](/docs/api/liquid/objects/order), the shipping method title appears in the language that the customer checked out in.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the shipping method.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the shipping method in the currency's subunit, before discounts have been applied.","name":"original_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the shipping method in the currency's subunit, after discounts have been applied, including order level discounts.","name":"price_with_discounts"},{"deprecated":true,"deprecation_reason":"Deprecated because the price did not include order level discounts.\n\nThe `shipping_line.price` property has been replaced by [`shipping_line.price_with_discounts`](/docs/api/liquid/objects/shipping_method#shipping_method-price_with_discounts).","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The price of the shipping method in the currency's subunit, after discounts have been applied.","name":"price"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; The price of the shipping method is appended to handle.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handle](/docs/api/liquid/basics#handles) of the shipping method.","name":"handle"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the shipping method.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"tax_line"}],"summary":"The tax lines for the shipping method.","name":"tax_lines"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_allocation"}],"summary":"The discount allocations that apply to the shipping method.","name":"discount_allocations"}],"summary":"Information about the shipping method for an order.","name":"shipping_method","examples":[],"json_data":{"path":"/","handle":"customer.orders[1].shipping_method","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the store.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the store.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [description](https://help.shopify.com/manual/online-store/setting-up/preferences#edit-the-title-and-meta-description)\nof the store.","name":"description"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; You can get the store's currency with [`shop.currency`](/docs/api/liquid/objects/shop#shop-currency).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"currency"}],"summary":"The currencies that the store accepts.","name":"enabled_currencies"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"shop_locale"}],"summary":"The locales (languages) that are published on the store.","name":"published_locales"},{"deprecated":true,"deprecation_reason":"Deprecated because the name didn't make it clear that the returned locales were published.\n\nThe `shop.enabled_locales` property has been replaced by [`shop.published_locales`](/docs/api/liquid/objects/shop#shop-published_locales).","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"shop_locale"},{"type":"array","name":"","description":"","array_value":"shop_locale"}],"summary":"The locales (languages) that are published on the store.","name":"enabled_locales"},{"deprecated":true,"deprecation_reason":"Deprecated because this value is contextual to the request and not a property of the shop resource.\n\nThe `shop.locale` property has been replaced by [request.locale](/docs/api/liquid/objects/request#request-locale).","description":"","examples":[],"return_type":[{"type":"shop_locale","name":"","description":"","array_value":""}],"summary":"The currently active locale (language).","name":"locale"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The full URL of the store.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [sender email](https://help.shopify.com/manual/intro-to-shopify/initial-setup/setup-your-email#change-your-sender-email-address)\nof the store.","name":"email"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The full URL of the store, with an `https` protocol.","name":"secure_url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The primary domain of the store.","name":"domain"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The `.myshopify.com` domain of the store.","name":"permanent_domain"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The phone number of the store.","name":"phone"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The password page message of the store.","name":"password_message"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"address","name":"","description":"","array_value":""}],"summary":"The address of the store.","name":"address"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if customer accounts are required to complete checkout. Returns `false` if not.","name":"customer_accounts_enabled"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if customer accounts are optional to complete checkout. Returns `false` if not.","name":"customer_accounts_optional"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The currency of the store.","name":"currency"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"currency","name":"","description":"","array_value":""}],"summary":"The money format of the store.","name":"money_format"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"currency","name":"","description":"","array_value":""}],"summary":"The money format of the store with the currency included.","name":"money_with_currency_format"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about how to create metafields, refer to [Create and manage metafields](/apps/metafields/manage) or visit\n&gt; the [Shopify Help Center](https://help.shopify.com/manual/metafields).","examples":[],"return_type":[],"summary":"The [metafields](/docs/api/liquid/objects/metafield) applied to the store.","name":"metafields"},{"deprecated":false,"deprecation_reason":"","description":"The payment types are based on the store's enabled [payment providers](https://help.shopify.com/manual/payments) and\nthe customer's current region and currency.\n\n&gt; Tip:\n&gt; You can output an `svg` logo for each payment type with the [`payment_type_svg_tag` filter](/docs/api/liquid/filters/payment_type_svg_tag).\n&gt; Alternatively, you can get the source URL for each `svg` with the [`payment_type_img_url` filter](/docs/api/liquid/filters/payment_type_img_url).","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The accepted payment types on the store.","name":"enabled_payment_types"},{"deprecated":true,"deprecation_reason":"Deprecated because whether or not prices have taxes included is dependent on the customer's country.\n\nThe `shop.taxes_included` property has been replaced by [cart.taxes_included](/docs/api/liquid/objects/cart#cart-taxes_included).","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if prices include taxes. Returns `false` if not.","name":"taxes_included"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"policy","name":"","description":"","array_value":""}],"summary":"The refund policy for the store.","name":"refund_policy"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"policy","name":"","description":"","array_value":""}],"summary":"The shipping policy for the store.","name":"shipping_policy"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"policy","name":"","description":"","array_value":""}],"summary":"The privacy policy for the store.","name":"privacy_policy"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"policy","name":"","description":"","array_value":""}],"summary":"The terms of service for the store.","name":"terms_of_service"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"policy","name":"","description":"","array_value":""}],"summary":"The subscription policy for the store.","name":"subscription_policy"},{"deprecated":false,"deprecation_reason":"","description":"The policies are set in the store's [Policies settings](https://www.shopify.com/admin/settings/legal).","examples":[{"name":"Output the policies","description":"","syntax":"","path":"/","raw_liquid":"&lt;ul&gt;\n{%- for policy in shop.policies %}\n  &lt;li&gt;{{ policy.title }}&lt;/li&gt;\n{%- endfor %}\n&lt;/ul&gt;","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"policy"}],"summary":"The policies for the store.","name":"policies"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Output the vendors","description":"","syntax":"","path":"/","raw_liquid":"{% for vendor in shop.vendors %}\n  {{- vendor | link_to_vendor }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"All of the product vendors for the store.","name":"vendors"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Output the product types","description":"","syntax":"","path":"/","raw_liquid":"{% for type in shop.types %}\n  {{- type | link_to_type }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"All of the product types in the store.","name":"types"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of products in the store.","name":"products_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of collections in the store.","name":"collections_count"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the store accepts gift cards. Returns `false` if not.","name":"accepts_gift_cards"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"brand","name":"","description":"","array_value":""}],"summary":"The [brand assets](https://help.shopify.com/manual/promoting-marketing/managing-brand-assets) for the store.","name":"brand"},{"deprecated":true,"deprecation_reason":"The `shop.metaobjects` property has been replaced by [`metaobjects`](/docs/api/liquid/objects/metaobjects).","description":"","examples":[],"return_type":[],"summary":"All of the [metaobjects](/docs/api/liquid/objects/metaobject) of the store.","name":"metaobjects"}],"summary":"Information about the store, such as the store address, the total number of products, and various settings.","name":"shop","examples":[],"json_data":{"path":"/","handle":"shop","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"localization","property":"available_languages"},{"object":"localization","property":"language"},{"object":"request","property":"locale"},{"object":"shop","property":"published_locales"},{"object":"shop","property":"locale"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn how to offer localization options in your theme, refer to [Support multiple currencies and languages](/themes/internationalization/multiple-currencies-languages).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the locale in the store's primary locale.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the locale in the locale itself.","name":"endonym_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ISO code of the locale in [IETF language tag format](https://en.wikipedia.org/wiki/IETF_language_tag).","name":"iso_code"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the locale is the store's primary locale. Returns `false` if not.","name":"primary"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative root URL of the locale.","name":"root_url"}],"summary":"A language in a store.","name":"shop_locale","examples":[],"json_data":{"path":"/","handle":"shop.published_locales[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"shop","property":"policies"},{"object":"shop","property":"refund_policy"},{"object":"shop","property":"shipping_policy"},{"object":"shop","property":"privacy_policy"},{"object":"shop","property":"terms_of_service"},{"object":"shop","property":"subscription_policy"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the policy.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The content of the policy.","name":"body"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the policy.","name":"url"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the policy.","name":"title"}],"summary":"A [store policy](https://help.shopify.com/manual/checkout-settings/refund-privacy-tos), such as a privacy or return policy.","name":"policy","examples":[],"json_data":{"path":"/","handle":"shop.policies[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"variant","property":"store_availabilities"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"If a location doesn't stock a variant, then there won't be a `store_availability` for that variant and location.\n\n&gt; Note:\n&gt; The `store_availability` object is defined only if one or more locations has [local pickup](https://help.shopify.com/manual/shipping/setting-up-and-managing-your-shipping/local-methods/local-pickup)\n&gt; enabled.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the variant has available inventory at the location. Returns `false` if not.","name":"available"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the location has pickup enabled. Returns `false` if not.","name":"pick_up_enabled"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; This value can be configured in the Shopify admin. To learn more, visit the [Shopify Help Center](https://help.shopify.com/en/manual/sell-in-person/shopify-pos/order-management/local-pickup-for-online-orders#manage-preferences-for-a-local-pickup-location).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The amount of time that it takes for pickup orders to be ready at the location.","name":"pick_up_time"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"location","name":"","description":"","array_value":""}],"summary":"The location that the variant is stocked at.","name":"location"}],"summary":"A variant's inventory information for a physical store location.","name":"store_availability","examples":[],"json_data":{"path":"/products/health-potion?variant=39897499729985","handle":"product.selected_variant.store_availabilities[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"checkout","property":"tax_lines"},{"object":"order","property":"tax_lines"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The title of the tax.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted price.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The tax amount in the currency's subunit.","name":"price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The decimal value of the tax rate.","name":"rate"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The decimal value of the tax rate, as a percentage.","name":"rate_percentage"}],"summary":"Information about a tax line of a checkout or order.","name":"tax_line","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"price\":1901,\"rate\":0.05,\"rate_percentage\":5.0,\"title\":\"GST\"}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"product","property":"category"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The public node ID for the category, formatted as a Shopify GID.","name":"gid"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The public node ID for the category","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The localized category name","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"taxonomy_category"}],"summary":"All parent nodes of the current taxonomy category.","name":"ancestors"}],"summary":"The taxonomy category for a product","name":"taxonomy_category","examples":[],"json_data":{"path":"/products/health-potion","handle":"product.category","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":true,"deprecation_reason":"Deprecated because the values of this object's properties are subject to change, so can't be relied on within the theme.\n\nIf you want to link to the theme editor for the published theme, then you can use the URL path `/admin/themes/current/editor`.\n\nWhile this object is deprecated in Liquid and shouldn't be used, you can still access it through the [REST Admin API](/api/admin-rest/current/resources/theme).","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the theme.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the theme.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"main","description":"The theme is published. Customers see it when they visit the online store.","array_value":""},{"type":"string","name":"unpublished","description":"The theme is unpublished. Customers can't see it.","array_value":""},{"type":"string","name":"demo","description":"The theme is installed on the store as a demo. The theme can't be published until the merchant buys the full version.","array_value":""},{"type":"string","name":"development","description":"The theme is used for development. The theme can't be published, and is temporary.","array_value":""}],"summary":"The role of the theme.","name":"role"}],"summary":"Information about the current theme.","name":"theme","examples":[],"json_data":{"path":"/","handle":"theme","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; To learn about the available setting types, refer to [Input settings](/themes/architecture/settings/input-settings).","properties":[],"summary":"Allows you to access all of the theme's settings from the [`settings_schema.json` file](/themes/architecture/config/settings-schema-json).","name":"settings","examples":[{"name":"Reference a setting value","description":"","syntax":"","path":"/","raw_liquid":"{% if settings.favicon != blank %}\n  &lt;link rel=\"icon\" type=\"image/png\" href=\"{{ settings.favicon | image_url: width: 32, height: 32 }}\"&gt;\n{% endif %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"404","description":"","array_value":""},{"type":"string","name":"article","description":"","array_value":""},{"type":"string","name":"blog","description":"","array_value":""},{"type":"string","name":"cart","description":"","array_value":""},{"type":"string","name":"collection","description":"","array_value":""},{"type":"string","name":"list-collections","description":"","array_value":""},{"type":"string","name":"customers/account","description":"","array_value":""},{"type":"string","name":"customers/activate_account","description":"","array_value":""},{"type":"string","name":"customers/addresses","description":"","array_value":""},{"type":"string","name":"customers/login","description":"","array_value":""},{"type":"string","name":"customers/order","description":"","array_value":""},{"type":"string","name":"customers/register","description":"","array_value":""},{"type":"string","name":"customers/reset_password","description":"","array_value":""},{"type":"string","name":"gift_card","description":"","array_value":""},{"type":"string","name":"index","description":"","array_value":""},{"type":"string","name":"page","description":"","array_value":""},{"type":"string","name":"password","description":"","array_value":""},{"type":"string","name":"product","description":"","array_value":""},{"type":"string","name":"search","description":"","array_value":""}],"summary":"The name of the template's [type](/docs/themes/architecture/templates#template-types).","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"Returns `nil` if the default template is being used.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The custom name of an [alternate template](/themes/architecture/templates#alternate-templates).","name":"suffix"},{"deprecated":false,"deprecation_reason":"","description":"Returns `nil` if the template's parent directory is `/templates`.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the template's parent directory.","name":"directory"}],"summary":"Information about the current [template](/docs/themes/architecture/templates).","name":"template","examples":[],"json_data":{"path":"/products/health-potion","handle":"template","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"checkout","property":"transactions"},{"object":"order","property":"transactions"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the transaction.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the transaction.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"success","description":"","array_value":""},{"type":"string","name":"pending","description":"","array_value":""},{"type":"string","name":"failure","description":"","array_value":""},{"type":"string","name":"error","description":"","array_value":""}],"summary":"The status of the transaction.","name":"status"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp of when the transaction was created.","name":"created_at"},{"deprecated":false,"deprecation_reason":"","description":"This includes things like whether the payment was a test, or an authorization code if there was one.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Information from the payment provider about the payment receipt.","name":"receipt"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"authorization","description":"The reserving of money that the customer has agreed to pay.","array_value":""},{"type":"string","name":"capture","description":"The transfer of the money that was reserved during the `authorization` step.","array_value":""},{"type":"string","name":"sale","description":"A combination of `authorization` and `capture` in one step.","array_value":""},{"type":"string","name":"void","description":"The cancellation of a pending `authorization` or `capture`.","array_value":""},{"type":"string","name":"refund","description":"The partial, or full, refund of captured funds.","array_value":""}],"summary":"The type of transaction.","name":"kind"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [handleized](/docs/api/liquid/basics#modifying-handles) name of the payment provider used for the transaction.","name":"gateway"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The status of the transaction, translated based on the current locale.","name":"status_label"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"transaction_payment_details","name":"","description":"","array_value":""}],"summary":"The transaction payment details.","name":"payment_details"},{"deprecated":false,"deprecation_reason":"","description":"The amount is in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount of the transaction in the currency's subunit.","name":"amount"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the payment provider used for the transaction.","name":"gateway_display_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Whether the transaction is pending, and whether additional customer info is required to process the payment.","name":"show_buyer_pending_payment_instructions?"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A notice that contains instructions for the customer on how to complete their payment.\nThe messages are specific to the payment method used.","name":"buyer_pending_payment_notice"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"pending_payment_instruction_input"}],"summary":"A list of `pending_payment_instruction_input` header-value pairs, with payment method-specific details.\nThe customer can use these details to complete their purchase offline.\n\nIf the payment method doesn’t support pending payment instructions, then an empty array is returned.\n\n| Supported payment method | Expected Values |\n| --- | ----------- |\n| ShopifyPayments - Multibanco | [{header=\"Entity\", value=\"12345\"}, {header=\"Reference\", value=\"999999999\"}] |","name":"buyer_pending_payment_instructions"}],"summary":"A transaction associated with a checkout or order.","name":"transaction","examples":[],"json_data":{"path":"/","handle":"customer.orders[1].transactions[0]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"line_item","property":"unit_price_measurement"},{"object":"variant","property":"unit_price_measurement"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; Unit prices are available only to stores located in Germany and France.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"volume","description":"","array_value":""},{"type":"string","name":"weight","description":"","array_value":""},{"type":"string","name":"dimension","description":"","array_value":""}],"summary":"The type of unit measurement.","name":"measured_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The quantity of the unit.","name":"quantity_value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The unit of measurement used to measure the [`quantity_value`](/docs/api/liquid/objects/unit_price_measurement#unit_price_measurement-quantity_value).","name":"quantity_unit"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The quantity of the unit for the base unit price.","name":"reference_value"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The unit of measurement used to measure the [`reference_value`](/docs/api/liquid/objects/unit_price_measurement#unit_price_measurement-reference_value).","name":"reference_unit"}],"summary":"Information about how units of a product variant are measured. It's used to calculate\n[unit prices](https://help.shopify.com/manual/intro-to-shopify/initial-setup/sell-in-france/price-per-unit#add-unit-prices-to-your-product).","name":"unit_price_measurement","examples":[],"json_data":{"path":"/","handle":"customer.orders[1].line_items[0].unit_price_measurement","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"article","property":"user"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; The information returned by the `user` object can be edited on the [**Account** page](https://www.shopify.com/admin/settings/account)\n&gt; of the Shopify admin.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the author is the account owner of the store. Returns `false` if not.","name":"account_owner"},{"deprecated":false,"deprecation_reason":"","description":"If no bio is specified, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The bio associated with the author's account.","name":"bio"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The email associated with the author's account.","name":"email"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first name associated with the author's account.","name":"first_name"},{"deprecated":false,"deprecation_reason":"","description":"If no personal website is specified, then `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL for the personal website associated with the author's account.","name":"homepage"},{"deprecated":false,"deprecation_reason":"","description":"If no image is specified, then `nil` is returned.","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"The image associated with the author's account.","name":"image"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The last name associated with the author's account.","name":"last_name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The first and last name associated with the author's account.","name":"name"}],"summary":"The author of a blog article.","name":"user","examples":[],"json_data":{"path":"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion","handle":"article.user","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"metafield","property":"value"},{"object":"product","property":"media"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`video_tag` filter](/docs/api/liquid/filters/video_tag) to output the video in an HTML `&lt;video&gt;` tag.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"video_source"}],"summary":"The source files for the video.","name":"sources"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The duration of the video in milliseconds.","name":"duration"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The aspect ratio of the video as a decimal.","name":"aspect_ratio"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The alt text of the video.","name":"alt"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the video.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[{"name":"Filter for media of a specific type","description":"You can use the `media_type` property with the [`where` filter](/docs/api/liquid/filters/where) to filter the [`product.media` array](/docs/api/liquid/objects/product#product-media) for all media of a desired type.\n","syntax":"","path":"/products/potion-beats","raw_liquid":"{% assign videos = product.media | where: 'media_type', 'video' %}\n\n{% for video in videos %}\n  {{- video | video_tag }}\n{% endfor %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The media type of the model. Always returns `video`.","name":"media_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The position of the video in the [`product.media`](/docs/api/liquid/objects/product#product-media) array.","name":"position"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"image","name":"","description":"","array_value":""}],"summary":"A preview image for the video.","name":"preview_image"}],"summary":"Information about a video uploaded as [product media](/docs/api/liquid/objects/product-media) or a [`file_reference` metafield](/apps/metafields/types).","name":"video","examples":[],"json_data":{"path":"/products/potion-beats","handle":"product.media[1]","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"video","property":"sources"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The width of the video source file.","name":"width"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Note:\n&gt; When mp4 videos are uploaded, Shopify generates an m3u8 file as an additional video source. An m3u8 file enables video\n&gt; players to leverage HTTP live streaming (HLS), resulting in an optimized video experience based on the user's internet\n&gt; connection.","examples":[],"return_type":[{"type":"string","name":"mov","description":"","array_value":""},{"type":"string","name":"mp4","description":"","array_value":""},{"type":"string","name":"m3u8","description":"","array_value":""}],"summary":"The format of the video source file.","name":"format"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The height of the video source file.","name":"height"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the video source file.","name":"mime_type"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [CDN URL](/themes/best-practices/performance/platform#shopify-cdn) of the video source file.","name":"url"}],"summary":"Information about the source files for a video.","name":"video_source","examples":[],"json_data":{"path":"/products/potion-beats","handle":"product.media[1].sources[1]","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Use `additional_checkout_buttons` to check whether these payment providers exist, and\n[`content_for_additional_checkout_buttons`](/docs/api/liquid/objects/content_for_additional_checkout_buttons)\nto show the associated checkout buttons. To learn more about how to use these objects, refer to\n[Accelerated checkout](/themes/pricing-payments/accelerated-checkout).\n\n```liquid\n{% if additional_checkout_buttons %}\n  {{ content_for_additional_checkout_buttons }}\n{% endif %}\n```","properties":[],"summary":"Returns `true` if a store has any payment providers with offsite checkouts, such as PayPal Express Checkout.","name":"additional_checkout_buttons","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"boolean","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"An attribute called `data-provinces` is set for each `&lt;option&gt;`, and contains a JSON-encoded array of the\ncountry or region's subregions. If a country doesn't have any subregions, then an empty array is set for\nits `data-provinces` attribute.\n\n&gt; Tip:\n&gt; To return only the countries and regions included in the store's shipping zones, use the [`country_option_tags` object](/docs/api/liquid/objects/country_option_tags).","properties":[],"summary":"Creates an `&lt;option&gt;` tag for each country.","name":"all_country_option_tags","examples":[{"name":"","description":"You can wrap the `all_country_option_tags` object in `&lt;select&gt;` tags to build a country option selector.\n\n```liquid\n&lt;select name=\"country\"&gt;\n  {{ all_country_option_tags }}\n&lt;/select&gt;\n```\n","syntax":"","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"To learn about canonical URLs, refer to [Google's documentation](https://support.google.com/webmasters/answer/139066?hl=en).","properties":[],"summary":"The canonical URL for the current page.","name":"canonical_url","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":false,"parents":[],"template":["checkout"]},"deprecated":false,"deprecation_reason":"","description":"&gt; Deprecated:\n&gt; &lt;p&gt;The &lt;code&gt;checkout&lt;/code&gt; object will be deprecated for the Information, Shipping, and Payment pages on August 13, 2024. Merchants who have customized these pages using &lt;code&gt;checkout.liquid&lt;/code&gt; need to &lt;a href=\"https://help.shopify.com/manual/online-store/themes/theme-structure/extend/checkout-migration#migrate-to-checkout-extensibility\"&gt;upgrade to Checkout Extensibility&lt;/a&gt; before August 13, 2024.&lt;/p&gt;\n&gt; &lt;p&gt;Learn &lt;a href=\"/apps/checkout\"&gt;how to build checkout extensions&lt;/a&gt; that extend the functionality of Shopify checkout.&lt;/p&gt;\n\nYou can access the `checkout` object on the [**Order status** page](https://help.shopify.com/manual/orders/status-tracking/customize-order-status).\n\nShopify Plus merchants can access the `checkout` object in the [`checkout.liquid` layout](/themes/architecture/layouts/checkout-liquid).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"gift_card"}],"summary":"The gift cards applied to the checkout.","name":"applied_gift_cards"},{"deprecated":false,"deprecation_reason":"","description":"Shopify Plus merchants that have access to `checkout.liquid` can [capture attributes at checkout](/themes/architecture/layouts/checkout-liquid#capture-checkout-attributes).","examples":[],"return_type":[{"type":"untyped","name":"","description":"","array_value":""}],"summary":"Additional attributes entered by the customer with the [cart](/docs/api/liquid/objects/cart#cart-attributes).","name":"attributes"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"address","name":"","description":"","array_value":""}],"summary":"The billing address entered at checkout.","name":"billing_address"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the customer checks the email marketing subscription checkbox. Returns `false` if not.","name":"buyer_accepts_marketing"},{"deprecated":true,"deprecation_reason":"Deprecated because `false` is always returned.","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the checkout has been cancelled. Returns `false` if not.","name":"cancelled"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"The cart-specific discount applications for the checkout.","name":"cart_level_discount_applications"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The [ISO code](https://www.iso.org/iso-4217-currency-codes.html) of the currency of the checkout.","name":"currency"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"customer","name":"","description":"","array_value":""}],"summary":"The customer associated with the checkout.\n&gt; Note:\n&gt; The [`customer` object](/docs/api/liquid/objects/customer) is directly accessible globally when a customer is logged in to their account.","name":"customer"},{"deprecated":true,"deprecation_reason":"Deprecated because an unsaved discount doesn't exist on the [**Order status** page](https://help.shopify.com/manual/orders/status-tracking).","description":"","examples":[],"return_type":[{"type":"discount","name":"","description":"","array_value":""}],"summary":"A discount applied to the checkout without being saved.","name":"discount"},{"deprecated":true,"deprecation_reason":"Deprecated because not all discount types and details are captured.\n\nThe `checkout.discounts` property has been replaced by [`checkout.discount_applications`](/docs/api/liquid/objects/checkout#checkout-discount_applications).","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount"}],"summary":"The discounts applied to the checkout.","name":"discounts"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"The discount applications for the checkout.","name":"discount_applications"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"The total amount of the discounts applied to the checkout in the currency's subunit.","name":"discounts_amount"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"discount_application"}],"summary":"The total amount of the discounts applied to the checkout in the currency's subunit, as a negative value.","name":"discounts_savings"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The email associated with the checkout.","name":"email"},{"deprecated":true,"deprecation_reason":"Deprecated because `nil` is always returned.","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The financial status of the checkout.","name":"financial_status"},{"deprecated":true,"deprecation_reason":"Deprecated because `nil` is always returned.","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for the fulfullment of the checkout.","name":"fulfilled_at"},{"deprecated":true,"deprecation_reason":"Deprecated because the array is always empty.","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The fulfilled line items from the checkout.","name":"fulfilled_line_items"},{"deprecated":true,"deprecation_reason":"Deprecated because `unfulfilled` is always returned.","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The fulfillment status of the checkout.","name":"fulfillment_status"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The amount of the checkout price paid in gift cards.","name":"gift_cards_amount"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the checkout.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The line items of the checkout.","name":"line_items"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The sum of the prices of all of the line items of the checkout in the currency's subunit, after any line item discounts.\nhave been applied.","name":"line_items_subtotal_price"},{"deprecated":false,"deprecation_reason":"","description":"This value is the same as [`checkout.id`](/docs/api/liquid/objects/checkout#checkout-id) with a `#` prepended to it.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The name of the checkout.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Additional information entered by the customer with the [cart](/docs/api/liquid/objects/cart#cart-note).","name":"note"},{"deprecated":false,"deprecation_reason":"","description":"Depending on the payment provider, the order might not have been created when the [**Thank you** page](https://help.shopify.com/en/manual/orders/status-tracking)\nis first viewed. In this case, `nil` is returned.\n&gt; Note:\n&gt; The `order` object isn't available on the **Thank you** page.","examples":[],"return_type":[{"type":"order","name":"","description":"","array_value":""}],"summary":"The order created by the checkout.","name":"order"},{"deprecated":false,"deprecation_reason":"","description":"The value is the same as [`order.id`](/docs/api/liquid/objects/order#order-id).\n\nDepending on the payment provider, the order might not have been created when the [**Order status** page](https://help.shopify.com/en/manual/orders/status-tracking)\nis first viewed. In this case, `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The ID of the order created by the checkout.","name":"order_id"},{"deprecated":false,"deprecation_reason":"","description":"The value is the same as [`order.name`](/docs/api/liquid/objects/order#order-name).\n\nDepending on the payment provider, the order might not have been created when the [**Order status** page](https://help.shopify.com/en/manual/orders/status-tracking)\nis first viewed. In this case, `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the order created by the checkout.","name":"order_name"},{"deprecated":false,"deprecation_reason":"","description":"The value is the same as [`order.order_number`](/docs/api/liquid/objects/order#order-order_number).\n\nDepending on the payment provider, the order might not have been created when the [**Order status** page](https://help.shopify.com/en/manual/orders/status-tracking)\nis first viewed. In this case, `nil` is returned.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"An integer representation of the name of the order created by the checkout.","name":"order_number"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if any of the line items of the checkout require shipping. Returns `false` if not.","name":"requires_shipping"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"address","name":"","description":"","array_value":""}],"summary":"The shipping address of the checkout.","name":"shipping_address"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"shipping_method","name":"","description":"","array_value":""}],"summary":"The shipping method of the checkout.","name":"shipping_method"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The shipping price of the checkout in the currency's subunit.","name":"shipping_price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"tax_line"}],"summary":"The tax lines for the checkout.","name":"tax_lines"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total tax amount of the checkout in the currency's subunit.","name":"tax_price"},{"deprecated":false,"deprecation_reason":"","description":"The value is output in the customer's local (presentment) currency.\n\nFor currencies without subunits, such as JPY and KRW, tenths and hundredths of a unit are appended. For example, 1000 Japanese yen is output as 100000.\n\n&gt; Tip:\n&gt; Use [money filters](/docs/api/liquid/filters/money-filters) to output a formatted amount.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The total price of the checkout in the currency's subunit.","name":"total_price"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"transaction"}],"summary":"The transactions of the checkout.","name":"transactions"},{"deprecated":true,"deprecation_reason":"Deprecated because the array is always empty.","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The unavailable line items of the checkout.","name":"unavailable_line_items"},{"deprecated":true,"deprecation_reason":"Deprecated because the array is always the same as [`checkout.line_items`](/docs/api/liquid/objects/checkout#checkout-line_items).","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"line_item"}],"summary":"The unfulfilled line items of the checkout.","name":"unfulfilled_line_items"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number of items in the checkout.","name":"item_count"}],"summary":"A customer's checkout.","name":"checkout","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"applied_gift_cards\":[],\"attributes\":{},\"billing_address\":{},\"buyer_accepts_marketing\":false,\"cart_level_discount_applications\":[],\"currency\":\"CAD\",\"customer\":{},\"discount_applications\":[],\"discounts_amount\":4224,\"discounts_savings\":-4224,\"email\":\"cornelius.potionmaker@gmail.com\",\"gift_cards_amount\":0,\"id\":29944051400769,\"line_items\":[],\"line_items_subtotal_price\":42249,\"name\":\"#29944051400769\",\"note\":null,\"order\":null,\"order_id\":null,\"order_name\":\"#29944051400769\",\"order_number\":\"#29944051400769\",\"requires_shipping\":true,\"shipping_address\":{},\"shipping_method\":{},\"shipping_price\":0,\"tax_lines\":[],\"tax_price\":0,\"total_price\":38025,\"transactions\":[]}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"article","property":"comments"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The full name of the author of the comment.","name":"author"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The content of the comment.","name":"content"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the comment was created.","name":"created_at"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The email of he author of the comment.","name":"email"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The ID of the comment.","name":"id"},{"deprecated":false,"deprecation_reason":"","description":"Outside of the Liquid context, the status of a comment can vary based on spam detection and whether blog comments are\nmoderated. However, only comments with a status of `published` are included in the [`article.comments` array](/docs/api/liquid/objects/article#article-comments).\n\n&gt; Tip:\n&gt; To learn more about blog comments, visit the [Shopify Help Center](https://help.shopify.com/manual/online-store/blogs/managing-comments).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The status of the comment. Always returns `published`.","name":"status"},{"deprecated":false,"deprecation_reason":"","description":"&gt; Tip:\n&gt; Use the [`date` filter](/docs/api/liquid/filters/date) to format the timestamp.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"A timestamp for when the status of the comment was last updated.","name":"updated_at"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The relative URL of the article that the comment is associated with, with [`comment.id`](/docs/api/liquid/objects/comment#comment-id)\nappended.","name":"url"}],"summary":"An article comment.","name":"comment","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"author\":\"Cornelius\",\"content\":\"Wow, this is going to save me a fortune in invisibility potion!\",\"created_at\":\"2022-06-05 19:33:57 -0400\",\"email\":\"cornelius.potionmaker@gmail.com\",\"id\":129089273921,\"status\":\"published\",\"updated_at\":\"2022-06-05 19:33:57 -0400\",\"url\":\"/blogs/potion-notions/how-to-tell-if-you-have-run-out-of-invisibility-potion#129089273921\"}"},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Use [`additional_checkout_buttons`](/docs/api/liquid/objects/additional_checkout_buttons)\nto check whether these payment providers exist, and `content_for_additional_checkout_buttons`\nto show the associated checkout buttons. To learn more about how to use these objects, refer to\n[Accelerated checkout](/themes/pricing-payments/accelerated-checkout).\n\n```liquid\n{% if additional_checkout_buttons %}\n  {{ content_for_additional_checkout_buttons }}\n{% endif %}\n```","properties":[],"summary":"Returns checkout buttons for any active payment providers with offsite checkouts.","name":"content_for_additional_checkout_buttons","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"If you use a [Liquid index template](/themes/architecture/templates/index-template) (`templates/index.liquid`), then you must include `{{ content_for_index }}` in the template. This object can't be used in JSON index templates.","properties":[],"summary":"Dynamically returns the content of [sections](/themes/architecture/sections) to be rendered on the home page.","name":"content_for_index","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"Include the `content_for_layout` object in your [layout files](/themes/architecture/layouts) between the `&lt;body&gt;` and\n`&lt;/body&gt;` HTML tags.\n\n&gt; Note:\n&gt; The `content_for_layout` object is required in `theme.liquid`.","properties":[],"summary":"Dynamically returns content based on the current [template](/themes/architecture/templates).","name":"content_for_layout","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"An attribute called `data-provinces` is set for each `&lt;option&gt;`, and contains a JSON-encoded array of the\ncountry or region's subregions. If a country doesn't have any subregions, then an empty array is set for its\n`data-provinces` attribute.\n\n&gt; Tip:\n&gt; To return all countries and regions included in the store's shipping zones, use [`all_country_option_tags`](/docs/api/liquid/objects/all_country_option_tags).","properties":[],"summary":"Creates an `&lt;option&gt;` tag for each country and region that's included in a shipping zone on the [Shipping](https://www.shopify.com/admin/settings/shipping) page of the Shopify admin.","name":"country_option_tags","examples":[{"name":"","description":"You can wrap the `country_option_tags` object in `&lt;select&gt;` tags to build a country option selector.","syntax":"","path":"/","raw_liquid":"&lt;select name=\"country\"&gt;\n  {{ country_option_tags }}\n&lt;/select&gt;","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The `current_page` object has a value of 1 for non-paginated resources.","properties":[],"summary":"The current page number.","name":"current_page","examples":[{"name":"","description":"","syntax":"","path":"/collections/ingredients?page=2","raw_liquid":"{{ page_title }}{% unless current_page == 1 %} - Page {{ current_page }}{% endunless %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"number","name":"","description":"","array_value":""}]},{"access":{"global":false,"parents":[],"template":["blog","collection"]},"deprecated":false,"deprecation_reason":"","description":"You can [add tags](https://help.shopify.com/en/manual/shopify-admin/productivity-tools/using-tags) to articles and\nproducts. Article tags can be used to [filter a blog page](/themes/architecture/templates/blog#filter-articles-by-tag)\nto show only articles with specific tags. Similarly, product tags can be used to [filter a collection page](/themes/navigation-search/filtering/tag-filtering)\nto show only products with specific tags.","properties":[],"summary":"The currently applied tags.","name":"current_tags","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"array","name":"","description":"","array_value":"string"}]},{"access":{"global":false,"parents":[{"object":"form","property":"errors"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The following table outlines the strings that can be returned and the reason that they would be:\n\n| Form property name | Return reason |\n| --- | --- |\n| `author` | There were issues with required name fields. |\n| `body` | There were issues with required text content fields. |\n| `email` | There were issues with required email fields. |\n| `form` | There were general issues with the form. |\n| `password` | There were issues with required password fields. |","properties":[{"deprecated":false,"deprecation_reason":"","description":"You can access a specific message in the array by using a specific error from the `form_errors` array as a key.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The translated error messages for each value in the `form_errors` array.","name":"messages"},{"deprecated":false,"deprecation_reason":"","description":"You can access a specific field in the array by using a specific error from the `form_errors` array as a key.","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"string"}],"summary":"The translated names for each value in the `form_errors` array.","name":"translated_fields"}],"summary":"The error category strings for errors from a form created by a [`form` tag](/docs/api/liquid/tags/form).","name":"form_errors","examples":[{"name":"Output form errors","description":"You can output the name of the field related to the error, and the error message, by using the error as a key to access the `translated_fields` and `messages` properties.\n\n```liquid\n&lt;ul&gt;\n  {% for error in form.errors %}\n    &lt;li&gt;\n      {% if error == 'form' %}\n        {{ form.errors.messages[error] }}\n      {% else %}\n        {{ form.errors.translated_fields[error] }} - {{ form.errors.messages[error] }}\n      {% endif %}\n    &lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n```\n","syntax":"","path":"/","raw_liquid":"","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":"{\"messages\":{},\"translated_fields\":{}}"},"return_type":[{"type":"array","name":"","description":"","array_value":"string"}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The `handle` object will return a value only when the following templates are being viewed:\n\n- [article](/themes/architecture/templates/article)\n- [blog](/themes/architecture/templates/blog)\n- [collection](/themes/architecture/templates/collection)\n- [page](/themes/architecture/templates/page)\n- [product](/themes/architecture/templates/product)\n\nIf none of the above templates are being viewed, then `nil` is returned.","properties":[],"summary":"The [handle](/docs/api/liquid/basics#handles) of the resource associated with the current template.","name":"handle","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The `page_description` object can be used to provide a brief description of a page for search engine listings and social\nmedia previews.\n\nTo learn about where to edit the meta description for a page, visit the [Shopify Help Center](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords#edit-the-title-and-meta-description-for-a-page).","properties":[],"summary":"The meta description of the current page.","name":"page_description","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":"","denied_filters":["escape","escape_once","url_escape","url_param_escape"]}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The resource's featured image for product and collection pages, and blog posts, is used. For all other pages, or pages where\nthere's no featured image, the [social sharing image](https://help.shopify.com/manual/online-store/images/showing-social-media-thumbnail-images?#setting-the-social-sharing-image-in-your-admin)\nis used.\n\n### Open Graph fallback tags\n\nThe `page_image` object can be used for creating [Open Graph](https://ogp.me/) `og:image` meta tags.\n\nIf a theme doesn't include `og:image` tags for a page, then Shopify automatically generates the following tags using the\n`page_image` object:\n\n- `og:image`\n- `og:image:secure_url`\n- `og:image:width`\n- `og:image:height`","properties":[],"summary":"An image to be shown in search engine listings and social media previews for the current page.","name":"page_image","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"image","name":"","description":"","array_value":""}]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The `page_title` object can be used to specify the title of page for search engine listings and social media previews.\n\nTo learn about where to edit the title for a page, visit the [Shopify Help Center](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords#edit-the-title-and-meta-description-for-a-page).","properties":[],"summary":"The page title of the current page.","name":"page_title","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[{"type":"string","name":"","description":"","array_value":"","denied_filters":["escape","escape_once","url_escape","url_param_escape"]}]},{"access":{"global":false,"parents":[{"object":"paginate","property":"parts"},{"object":"paginate","property":"next"},{"object":"paginate","property":"previous"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"boolean","name":"","description":"","array_value":""}],"summary":"Returns `true` if the part is a link. Returns `false` if not.","name":"is_link"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The page number associated with the part.","name":"title"},{"deprecated":false,"deprecation_reason":"","description":"It consists of the current page URL path with the pagination parameter for the current part appended.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL of the part.","name":"url"}],"summary":"A part in the navigation for pagination.","name":"part","examples":[{"name":"Create pagination navigation with `part`","description":"You can create a pagination navigation by iterating over each `part` of a [`paginate` object](/docs/api/liquid/objects/paginate).\n","syntax":"","path":"/collections/all","raw_liquid":"{% paginate collection.products by 5 -%}\n  {% for part in paginate.parts -%}\n    {% if part.is_link -%}\n      {{ part.title | link_to: part.url}}\n    {%- else -%}\n      &lt;span&gt;{{ part.title }}&lt;/span&gt;\n    {% endif %}\n  {%- endfor %}\n{%- endpaginate %}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":"{\"is_link\":true,\"title\":\"2\",\"url\":\"/collections/all?page=2\"}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"transaction","property":"buyer_pending_payment_instructions"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The header of the payment instruction.\nThese are payment method-specific. Example: \"Entity\" and \"Reference\" for Multibanco","name":"header"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Contains the corresponding values to the headers of the payment instruction.","name":"value"}],"summary":"Header-value pairs that make up the list of payment information specific to the payment method.\nThis information can be be used by the customer to complete the transaction offline.","name":"pending_payment_instruction_input","examples":[],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[],"summary":"Creates an HTML link element that links to a localized version of `shopify.com`, based on the locale of the store.","name":"powered_by_link","examples":[{"name":"","description":"","syntax":"","path":"/","raw_liquid":"{{ powered_by_link }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"predictive_search","property":"resources"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"You can check whether any resources of a specific type were returned using the [`size` filter](/docs/api/liquid/filters/size).\n\n```liquid\n{% if predictive_search.resources.articles.size &gt; 0 %}\n  {% for article in predictive_search.resources.articles %}\n    {{ article.title }}\n  {% endfor %}\n{% endif %}\n```","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"article"}],"summary":"The articles associated with the query.","name":"articles"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"collection"}],"summary":"The collections associated with the query.","name":"collections"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"page"}],"summary":"The pages associated with the query.","name":"pages"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"array","name":"","description":"","array_value":"product"}],"summary":"The products associated with the query.","name":"products"}],"summary":"Contains arrays of objects for each resource type that can be returned by a [predictive search query](/api/ajax/reference/predictive-search#get-locale-search-suggest).","name":"predictive_search_resources","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"articles\":[],\"collections\":[],\"pages\":[],\"products\":[]}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"variant","property":"quantity_rule"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"If no rule exists, then a default value is returned.\n\nThis rule can be set as part of a [B2B catalog](https://help.shopify.com/manual/b2b/catalogs/quantity-pricing).\n\n&gt; Note:\n&gt; The default quantity rule is `min=1,max=null,increment=1`.","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The minimum order quantity. The default value is `1`.","name":"min"},{"deprecated":false,"deprecation_reason":"","description":"If there is no maximum quantity, then `nil` is returned.","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The maximum order quantity.","name":"max"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"number","name":"","description":"","array_value":""}],"summary":"The number the order quantity can be incremented by. The default value is `1`.","name":"increment"}],"summary":"A variant order quantity rule.","name":"quantity_rule","examples":[{"name":"The variant order quantity rule","description":"","syntax":"","path":"/products/health-potion","raw_liquid":"{{ product.variants.first.quantity_rule }}","parameter":false,"display_type":"text","show_data_tab":true}],"json_data":{"path":"","handle":"","data_from_file":"{\"min\":5,\"max\":100,\"increment\":5}"},"return_type":[]},{"access":{"global":true,"parents":[],"template":[]},"deprecated":false,"deprecation_reason":"","description":"There can be only one active script of each type. Currently, the only type accessible in Liquid is\n`cart_calculate_line_items`.\n\n&gt; Tip:\n&gt; To learn more about Shopify Scripts and the Script Editor, visit the [Shopify Help Center](https://help.shopify.com/manual/checkout-settings/script-editor).","properties":[{"deprecated":false,"deprecation_reason":"","description":"If no line item script is currently active, then `nil` is returned.","examples":[{"name":"Advertise the currently active line item script","description":"","syntax":"","path":"/","raw_liquid":"{% if scripts.cart_calculate_line_items %}\n  &lt;p&gt;Don't miss our current sale: &lt;strong&gt;{{ scripts.cart_calculate_line_items.name }}&lt;/strong&gt;&lt;/p&gt;\n{% endif %}","parameter":false,"display_type":"text","show_data_tab":true}],"return_type":[{"type":"script","name":"","description":"","array_value":""}],"summary":"The active line item script.","name":"cart_calculate_line_items"}],"summary":"The active scripts, of each script type, on the store.\n&gt; Caution:\n&gt; Shopify Scripts will be sunset on August 28, 2025. Migrate your existing scripts to [Shopify Functions](/docs/api/functions) before this date.","name":"scripts","examples":[],"json_data":{"path":"/","handle":"scripts","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"group","property":"sitemap"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The sitemap provides information about the pages and content on a site, and the relationships between them, which helps\ncrawlers crawl a site more efficiently.\n\n&gt; Tip:\n&gt; To learn more about sitemaps, refer to [Google's documentation](https://developers.google.com/search/docs/advanced/sitemaps/overview).\n\nThe `sitemap` object consists of a `Sitemap` directive, and a value of the URL that the sitemap is hosted at. For example:\n\n```\nSitemap: https://your-store.myshopify.com/sitemap.xml\n```\n\n&gt; Tip:\n&gt; You can [customize the `robots.txt` file](/themes/seo/robots-txt) with the [`robots.txt.liquid` template](/themes/architecture/templates/robots-txt-liquid).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Returns `Sitemap`.","name":"directive"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The URL that the sitemap is hosted at.","name":"value"}],"summary":"The sitemap for a specific group in the [`robots.txt` file](/themes/architecture/templates/robots-txt-liquid).","name":"sitemap","examples":[],"json_data":{"path":"/robots.txt","handle":"robots.default_groups[0].sitemap","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"collection","property":"sort_options"},{"object":"search","property":"sort_options"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"The name can be edited by merchants in the [language editor](https://help.shopify.com/manual/online-store/themes/customizing-themes/language/change-wording).","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The customer-facing name of the sort option.","name":"name"},{"deprecated":false,"deprecation_reason":"","description":"This value is used when assigning the [`collection.sort_by`](/docs/api/liquid/objects/collection#collection-sort_by) and\n[`search.sort_by`](/docs/api/liquid/objects/search#search-sort_by) parameters.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The value of the sort option.","name":"value"}],"summary":"A sort option for a collection or search results page.","name":"sort_option","examples":[],"json_data":{"path":"","handle":"","data_from_file":"{\"name\":\"Alphabetically, A-Z\",\"value\":\"title-ascending\"}"},"return_type":[]},{"access":{"global":false,"parents":[{"object":"transaction","property":"payment_details"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the company that issued the credit card used for the transaction.","name":"credit_card_company"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The last four digits of the credit card number of the credit card used for the transaction.","name":"credit_card_last_four_digits"},{"deprecated":false,"deprecation_reason":"","description":"All but the last four digits are redacted.","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The credit card number of the credit card used for the transaction.","name":"credit_card_number"},{"deprecated":false,"deprecation_reason":"","description":"If no gift card was used, then `nil` is returned.","examples":[],"return_type":[{"type":"gift_card","name":"","description":"","array_value":""}],"summary":"The gift card used for the transaction.","name":"gift_card"}],"summary":"Information about the payment methods used for a transaction.","name":"transaction_payment_details","examples":[],"json_data":{"path":"/","handle":"customer.orders[4].transactions[0].payment_details","data_from_file":""},"return_type":[]},{"access":{"global":false,"parents":[{"object":"group","property":"user_agent"}],"template":[]},"deprecated":false,"deprecation_reason":"","description":"The `user_agent` object consists of a `User-agent` directive, and a value of the name of the user-agent. For example:\n\n```\nUser-agent: *\n```\n\n&gt; Tip:\n&gt; You can [customize the `robots.txt` file](/themes/seo/robots-txt) with the [`robots.txt.liquid` template](/themes/architecture/templates/robots-txt-liquid).","properties":[{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"Returns `User-agent`.","name":"directive"},{"deprecated":false,"deprecation_reason":"","description":"","examples":[],"return_type":[{"type":"string","name":"","description":"","array_value":""}],"summary":"The name of the user-agent.","name":"value"}],"summary":"The user-agent, which is the name of the crawler, for a specific group in the [`robots.txt` file](/themes/architecture/templates/robots-txt-liquid).","name":"user_agent","examples":[],"json_data":{"path":"/robots.txt","handle":"robots.default_groups[0].user_agent","data_from_file":""},"return_type":[]}];
const systemTranslations = {"shopify.sentence.words_connector":", ","shopify.sentence.two_words_connector":" and ","shopify.sentence.last_word_connector":", and ","shopify.checkout.address_management.confirm_address_deletion":"Are you sure you want to delete the address {{address}}?","shopify.checkout.general.page_title":"Checkout","shopify.checkout.general.error_page_title":"Error","shopify.checkout.general.skip_to_content":"Skip to content","shopify.checkout.general.breadcrumb":"Breadcrumb","shopify.checkout.general.continue_button_label":"Continue","shopify.checkout.general.complete_purchase_button_label":"Complete order","shopify.checkout.general.pay_now_button_label":"Pay now","shopify.checkout.general.authenticate_purchase_button_label":"Authenticate payment","shopify.checkout.general.edit_link_label":"Edit","shopify.checkout.general.all_rights_reserved":"All rights reserved %{shop_name}","shopify.checkout.general.print_policies_link_label":"Print","shopify.checkout.general.cart":"Cart","shopify.checkout.general.close_modal_label":"Close","shopify.checkout.general.close_notice_label":"Close","shopify.checkout.general.expand_notice_label":"View more","shopify.checkout.general.continue_to_shipping_method":"Continue to shipping","shopify.checkout.general.continue_to_payment_method":"Continue to payment","shopify.checkout.general.continue_to_review":"Review order","shopify.checkout.general.back_to_cart":"Return to cart","shopify.checkout.general.back_to_contact_information":"Return to information","shopify.checkout.general.back_to_shipping_method":"Return to shipping","shopify.checkout.general.back_to_payment_method":"Return to payment","shopify.checkout.general.choose_shipping_method":"Choose a shipping method","shopify.checkout.general.choose_payment_method":"Choose a payment method","shopify.checkout.general.choose_billing_address":"Choose a billing address","shopify.checkout.general.contact_us_html":"Contact us for more information","shopify.checkout.general.autocomplete_title":"Suggestions","shopify.checkout.general.autocomplete_single_item":"1 item available","shopify.checkout.general.autocomplete_multi_item":"{{number}} items available","shopify.checkout.general.autocomplete_selection":"{{number}} of {{total}}","shopify.checkout.general.autocomplete_close":"Close suggestions","shopify.checkout.general.forwarding_indicator.new_window":"Opens in a new window.","shopify.checkout.general.forwarding_indicator.external":"Opens external website.","shopify.checkout.general.forwarding_indicator.external_and_new_window":"Opens external website in a new window.","shopify.checkout.general.checkout_context.step_one":"%{shop_name} - Checkout","shopify.checkout.general.tooltip_accessibility_label":"More information","shopify.checkout.general.qr_code":"QR code","shopify.checkout.general.errors.only_empty_terms_accepted":"This policy only accepts empty terms.","shopify.checkout.general.errors.session_identifier_not_unique_error":"Something went wrong with your order, please try checking out again.","shopify.checkout.general.errors.line_item_limit_reached":"The maximum number of line items has been reached.","shopify.checkout.general.errors.session_is_already_finished":"This checkout session has already been finalized.","shopify.checkout.general.errors.merchandise.only_value_constraint":"Only exact values are allowed in the merchandise input.","shopify.checkout.general.errors.merchandise.merchandise_not_found":"Product not found.","shopify.checkout.general.errors.merchandise.merchandise_variant_not_found":"Product variant not found.","shopify.checkout.general.errors.merchandise.merchandise_not_applicable":"Product variant cannot be purchased.","shopify.checkout.general.errors.merchandise.bundle_products_not_supported_for_b2b":"Bundled items can't be added to B2B orders for this location.","shopify.checkout.general.errors.merchandise.gift_card_quantity_mismatch":"When specifying gift card codes, the line item quantity and the number of gift card codes must match.","shopify.checkout.general.errors.merchandise.gift_card_not_supported":"Gift cards are not supported on this checkout.","shopify.checkout.general.errors.merchandise.gift_card_not_unique":"Gift card with code {{code}} occurs more than once in this checkout. Codes are formatted before comparison.","shopify.checkout.general.errors.merchandise.gift_card_used":"Gift card code {{code}} is already assigned to a gift card. Codes are formatted before comparison.","shopify.checkout.general.errors.merchandise.gift_card_invalid":"Gift card code {{code}} is invalid.","shopify.checkout.general.errors.merchandise.gift_card_code_changed":"Gift card code {{proposed_code}} was changed to {{formatted_code}} to conform to formatting rules.","shopify.checkout.general.errors.merchandise.gift_card_with_attributes_not_supported":"Gift cards with custom attributes are not supported on this checkout.","shopify.checkout.general.errors.merchandise.gift_card_with_components_not_supported":"Gift cards with components are not supported on this checkout.","shopify.checkout.general.errors.merchandise.selling_plan_mismatch":"The subscription has been updated.","shopify.checkout.general.errors.merchandise.selling_plan_not_supported":"Subscriptions are not supported.","shopify.checkout.general.errors.merchandise.selling_plan_not_supported_b2b":"Subscriptions are not supported for B2B checkout.","shopify.checkout.general.errors.merchandise.price_mismatch":"The previously proposed price for this merchandise was invalid and has been updated.","shopify.checkout.general.errors.merchandise.inventory_not_found":"No inventory found for this merchandise.","shopify.checkout.general.errors.merchandise.product_not_published":"Product is not published.","shopify.checkout.general.errors.merchandise.duplicated_stable_id":"This merchandise line has the same stable-ID as another line.","shopify.checkout.general.errors.merchandise.minimum_quantity_not_met":"The quantity of some items doesn’t meet the minimum required.","shopify.checkout.general.errors.merchandise.maximum_quantity_exceeded":"The quantity of some items exceeds the maximum allowed.","shopify.checkout.general.errors.merchandise.quantity_increment_not_met":"The quantity of some items doesn't meet the order limits.","shopify.checkout.general.errors.merchandise.quantity_rules_not_met":"The quantity of some items doesn't meet the order limits.","shopify.checkout.general.errors.merchandise.bundle_requires_components":"This bundle merchandise has no components.","shopify.checkout.general.errors.merchandise.title_too_long":"Merchandise title is too long.","shopify.checkout.general.errors.merchandise.title_empty":"Merchandise title is empty.","shopify.checkout.general.errors.buyer_identity.business_customer_does_not_match_company":"Company contact does not have access to company.","shopify.checkout.general.errors.buyer_identity.customer_account_required":"Customer must log in to continue.","shopify.checkout.general.errors.buyer_identity.company_location_required":"Customer must choose a company location to continue.","shopify.checkout.general.errors.buyer_identity.contact_info_does_not_match_customer_account":"Specified customer info should match the logged in customer account.","shopify.checkout.general.errors.buyer_identity.phone_number_does_not_match_expected_pattern":"The specified phone number does not match the expected pattern.","shopify.checkout.general.errors.buyer_identity.email_required":"An email is required when the merchandise is purchased using a subscription.","shopify.checkout.general.errors.buyer_identity.email_domain_is_invalid":"This specified domain cannot be resolved.","shopify.checkout.general.errors.buyer_identity.missing_contact_method":"Missing a valid contact method.","shopify.checkout.general.errors.buyer_identity.checkout_completion_target_is_missing":"Checkout completion target is missing.","shopify.checkout.general.errors.buyer_identity.invalid_customer_profile":"An invalid customer profile was provided.","shopify.checkout.general.errors.buyer_identity.customer_profile_access_restricted":"Checkout does not have permission to access the customer profile.","shopify.checkout.general.errors.buyer_identity.checkout_completion_target_is_invalid_proc":"Invalid checkout completion target.","shopify.checkout.general.errors.delivery.only_one_delivery_line_allowed":"Cart must have only one delivery line.","shopify.checkout.general.errors.delivery.wrong_number_of_delivery_lines":"A delivery line must be specified for each group of merchandise.","shopify.checkout.general.errors.delivery.external_delivery_promise_error":"An external delivery promise fetch error.","shopify.checkout.general.errors.delivery.options_instructions_invalid":"The specified instructions does not match the expected pattern.","shopify.checkout.general.errors.delivery.destination_address_required":"A destination address is required in order to continue.","shopify.checkout.general.errors.delivery.pickup_points_unavailable":"Pickup points are currently unavailable.","shopify.checkout.general.errors.delivery.local_pickup_delivery_line_detail_changed":"The current local pickup delivery strategy must be changed in order to continue.","shopify.checkout.general.errors.delivery.local_pickup_no_delivery_strategy_available":"No available local pickup delivery strategy found.","shopify.checkout.general.errors.delivery.origin_location_id_required":"An origin location ID is required when the RETAIL delivery method is requested.","shopify.checkout.general.errors.delivery.invalid_origin_location_id":"Could not find a Location matching the origin location ID.","shopify.checkout.general.errors.delivery.origin_location_id_not_allowed":"The requested delivery methods don't support an origin location ID.","shopify.checkout.general.errors.delivery.auto_fulfill_not_allowed":"This session is not authorized to override fulfillment behavior.","shopify.checkout.general.errors.delivery.auto_fulfill_required":"Auto fulfill is required when the RETAIL delivery method is requested.","shopify.checkout.general.errors.delivery.prefetch_shipping_rates_used":"Prefetched shipping rates should never return rates.","shopify.checkout.general.errors.delivery.fulfillment_constraints_not_satisfied":"One or more fulfillment constraints were not satisfied.","shopify.checkout.general.errors.delivery.must_fulfill_from_constraint_not_satisfied":"Fulfillment constraints are not satisfied because items cannot be fulfilled from required locations.","shopify.checkout.general.errors.delivery.must_fulfill_from_same_location_constraint_not_satisfied":"Fulfillment constraints are not satisfied because items cannot be fulfilled from the same location.","shopify.checkout.general.errors.delivery.delivery_strategy_conditions_not_satisfied":"Delivery strategies are available for this location, but their conditions are not satisfied.","shopify.checkout.general.errors.delivery.out_of_stock_at_origin_location":"No stock at the origin location.","shopify.checkout.general.errors.delivery.invalid_signature":"Invalid discount signature.","shopify.checkout.general.errors.discount.discounts_not_allowed_for_b2b":"Discounts are not allowed in B2B stores.","shopify.checkout.general.errors.discount.custom_discount_not_honoured":"The supplied custom discount was not honoured.","shopify.checkout.general.errors.discount.unsupported_expectation":"The supplied discount line contained an expectation that the policy could not interpret.","shopify.checkout.general.errors.discount.additional_requested_discount_code_discarded":"Additional code discount requested was discarded.","shopify.checkout.general.errors.discount.allocations_mismatch":"Expected discount allocation doesn't match the actual discount allocation.","shopify.checkout.general.errors.discount.discount_code_not_honoured":"<strong style=\"text-transform:uppercase\">%{discount_rejection_message}</strong>","shopify.checkout.general.errors.discount.discount_title_too_long":"Discount title cannot be longer than 255 characters.","shopify.checkout.general.errors.tax.new_tax_must_be_accepted":"A new tax line in the seller proposal must be accepted in order to continue.","shopify.checkout.general.errors.tax.unresolvable_tax_terms":"The proposed terms are unresolvable given the current negotiation context.","shopify.checkout.general.errors.tax.delivery_price_is_abstract":"The related delivery price is abstract.","shopify.checkout.general.errors.tax.tax_inclusivity_mismatch":"Renegotiate with concrete totalTaxAndDutyAmount or totalAmountIncludedInTarget value.","shopify.checkout.general.errors.tax.tax_exemption_not_supported":"Tax exemptions are not supported for the current negotiation session.","shopify.checkout.general.errors.tax.delivery_tax_exemption_not_supported":"Tax exemptions for delivery lines are not currently supported.","shopify.checkout.general.errors.tax.proposed_allocations_required":"Missing 'proposed allocations' field.","shopify.checkout.general.errors.tax.merchandise_terms_must_be_defined":"Merchandise terms must be defined.","shopify.checkout.general.errors.tax.delivery_terms_must_be_defined":"Delivery terms must be defined.","shopify.checkout.general.errors.tax.merchandise_discount_terms_must_be_defined":"Merchandise discount terms must be defined.","shopify.checkout.general.errors.tax.delivery_discount_terms_must_be_defined":"Delivery discount terms must be defined.","shopify.checkout.general.errors.tax.allocated_required":"Missing 'allocated' field.","shopify.checkout.general.errors.tax.value_required":"Missing 'value' field.","shopify.checkout.general.errors.tax.line_splits_not_supported":"'merchandise lines' field must be split in such that each have a single line component in the seller proposal.","shopify.checkout.general.errors.payment.manual_payments_not_allowed_for_b2b":"Manual payments are not allowed in B2B stores.","shopify.checkout.general.errors.payment.positive_amount_expected":"Amount to pay must be greater than 0.","shopify.checkout.general.errors.payment.total_amount_mismatch":"Total to pay does not match the sum of the payments amount.","shopify.checkout.general.errors.payment.subscription_terms_not_accepted":"Subscription terms not accepted.","shopify.checkout.general.errors.payment.missing_session_id":"Missing credit card session information.","shopify.checkout.general.errors.payment.gateway_not_supported":"Payment gateway does not support storing the payment method.","shopify.checkout.general.errors.payment.credit_card_last_name_required":"'last name' cannot be nil.","shopify.checkout.general.errors.payment.credit_card_update_failed":"Credit card update failed.","shopify.checkout.general.errors.payment.installments_amount_invalid":"Invalid amount for Installments transaction.","shopify.checkout.general.errors.payment.installments_test_mode_not_allowed":"Test mode not allowed.","shopify.checkout.general.errors.payment.installments_gift_card_not_allowed":"Installments does not allow the use of gift cards.","shopify.checkout.general.errors.payment.installments_unsupported_currency":"Installments does not support this currency.","shopify.checkout.general.errors.payment.installments_unsupported_shipping":"Installments does not support shipping to this address.","shopify.checkout.general.errors.payment.installments_unsupported_billing":"Installments does not support this billing address.","shopify.checkout.general.errors.payment.installments_unsupported_subscriptions":"Installments does not support subscriptions.","shopify.checkout.general.errors.payment.installments_ineligible_line_item":"Installments is disabled for a line item in this purchase.","shopify.checkout.general.errors.payment.shop_cash_not_allowed":"Shop Cash not allowed without Shop Pay.","shopify.checkout.general.errors.payment.shop_cash_unsupported_checkout_source":"Shop Cash does not support this checkout.","shopify.checkout.general.errors.payment.shop_cash_gift_card_not_allowed":"Shop Cash does not allow the purchase of gift cards.","shopify.checkout.general.errors.payment.shop_cash_not_enabled":"Shop Cash is not enabled for this shop.","shopify.checkout.general.errors.payment.shop_cash_not_available":"Shop Cash is not supported in this checkout.","shopify.checkout.general.errors.payment.shop_cash_unsupported_subscriptions":"Shop Cash does not support subscriptions.","shopify.checkout.general.errors.payment.shop_cash_unsupported_shipping":"Shop Cash does not support merchandise with no shipping.","shopify.checkout.general.errors.payment.invalid_address_type":"The provided address type is invalid for this payment method.","shopify.checkout.general.errors.payment.missing_retail_attributions":"Retail attributions are required for manually-entered credit card payments.","shopify.checkout.general.errors.payment.unexpected_retail_attributions":"Retail attributions unexpectedly provided for credit card payment.","shopify.checkout.general.errors.payment.invalid_card_source":"This session does not have permission to use this card source.","shopify.checkout.general.errors.payment.wallet_content_missing":"Wallet content is missing.","shopify.checkout.general.errors.payment.payment_instrument_not_found":"Could not find payment method","shopify.checkout.general.errors.payment.unauthorized_capture_method":"Configuring the payment capture method is not allowed.","shopify.checkout.general.errors.payment.saved_payment_methods_not_allowed":"Saved payment methods is not allowed.","shopify.checkout.general.errors.payment.saved_payment_methods_not_enabled":"Saved payment methods is not enabled for this shop.","shopify.checkout.general.errors.payment.saved_payment_methods_cvv_verification_disabled":"The selected payment method requires CVV verification which is not enabled for this shop. Select a different payment method.","shopify.checkout.general.errors.payment.store_credit_not_enabled":"Store credit is not enabled for this shop.","shopify.checkout.general.errors.payment.store_credit_account_not_found":"Store credit account not found.","shopify.checkout.general.errors.payment.store_credit_account_mismatch":"Store credit account does not match the buyer identity.","shopify.checkout.general.errors.payment.store_credit_mismatched_currency":"The store credit account's currency does not match the checkout currency.","shopify.checkout.general.errors.payment.store_credit_insufficient_funds":"There are insufficient funds in the store credit account.","shopify.checkout.general.errors.payment.store_credit_buying_gift_card":"You can't use store credit to buy a gift card.","shopify.checkout.general.errors.payment.gift_cards_not_allowed_for_b2b":"Gift cards are not allowed in B2B stores.","shopify.checkout.general.errors.payment.method_required":"A payment method must be proposed.","shopify.checkout.general.errors.payment.paypal_express_address_invalid":"PayPal returned an invalid address.","shopify.checkout.general.errors.payment.shop_cash_unsupported_currency":"Shop Cash does not support this currency.","shopify.checkout.general.errors.payment.market_manager_blocks_wallet_payments":"Payment method is not supported by the market manager.","shopify.checkout.general.errors.tip.not_accepted_by_shop":"Shop does not accept tips.","shopify.checkout.general.errors.tip.only_one_tip_line_allowed":"Multiple tips lines are not supported.","shopify.checkout.general.errors.tip.tips_not_allowed_for_b2b":"Tips are not allowed in B2B stores.","shopify.checkout.general.errors.tip.currency_change_reset":"Tip has been reset due to currency change.","shopify.checkout.general.errors.tip.tips_not_allowed_for_deferred_purchase_options":"Tips are not yet supported for deffered purchase options.","shopify.checkout.general.errors.sale_attribution.draft_order_not_exist":"This draft order doesn't exist in the current shop.","shopify.checkout.general.errors.sale_attribution.staff_member_not_exist":"This staff doesn't exist in the current shop.","shopify.checkout.general.errors.sale_attribution.location_not_exist":"This location doesn't exist in the current shop.","shopify.checkout.general.errors.sale_attribution.point_of_sale_device_not_exist":"This point of sale device doesn't exist in the current shop.","shopify.checkout.general.errors.sale_attribution.unresolvable_target_merchandise_lines":"The proposed sale attributions are unresolvable given the current negotiation context.","shopify.checkout.general.errors.non_negotiable.missing_non_negotiable_terms":"Your buyer's proposal should contain non-negotiable_terms.","shopify.checkout.general.errors.non_negotiable.invalid_signature":"The signature for {{target_terms}} is invalid.","shopify.checkout.general.errors.inventory.missing_quantity_value":"Quantity field is missing in the buyer's inventory lines.","shopify.checkout.general.errors.inventory.changing_behavior_not_allowed":"This client does not have permission to change inventory behavior.","shopify.checkout.general.errors.inventory.only_one_inventory_behavior_allowed":"Currently only one inventory behavior is allowed per checkout.","shopify.checkout.general.errors.optional_duties.optional_duties_not_permitted":"Refusing duties is not allowed for this checkout.","shopify.checkout.general.errors.attribution.retail_attribution_not_allowed":"Retail attribution is not allowed for this checkout.","shopify.checkout.general.errors.attribution.retail_attribution_required":"Retail attribution is required for this checkout.","shopify.checkout.general.errors.captcha.metadata_missing":"Completing a captcha is required for this checkout.","shopify.checkout.general.errors.captcha.metadata_mismatch":"Provided captcha provider and type does not match the expected values.","shopify.checkout.general.errors.captcha.token_missing":"A captcha token must be provided to complete this checkout.","shopify.checkout.general.errors.captcha.job_enqueue_failed":"The captcha validation job failed to be enqueued.","shopify.checkout.general.errors.captcha.job_already_queued":"Captcha validation has already been queued for this captcha token.","shopify.checkout.general.errors.captcha.token_expired":"The provided captcha token has expired. Complete a new captcha to continue checkout.","shopify.checkout.general.errors.captcha.token_invalid":"The provided captcha token was invalid. Complete a new captcha to continue checkout.","shopify.checkout.general.errors.captcha.token_not_valid_for_session":"The provided captcha cannot be used with this checkout.","shopify.checkout.general.errors.fx_reconciliation_override.shop_currency_mismatch":"The amount received must be in the store currency.","shopify.checkout.general.errors.checkout_source.revoked":"This checkout is no longer available.","shopify.checkout.general.full_price":"Full price:","shopify.checkout.general.title":"Checkout - {{shopName}}","shopify.checkout.general.full_title":"{{pageTitle}} - {{shopName}} - Checkout","shopify.checkout.general.loading_title":"Checkout - {{shopName}}","shopify.checkout.general.display_name":"{{firstName}} {{lastName}}","shopify.checkout.general.google_map_title":"Google Map","shopify.checkout.general.confirm_order_button_label":"Confirm order","shopify.checkout.general.submit_order_button_label":"Submit order","shopify.checkout.general.submit_for_review_button_label":"Submit for review","shopify.checkout.general.submit_for_review_notice_label":"Payment won't be due until your order is reviewed","shopify.checkout.general.continue_to_payment_plans_button_label":"Continue to payment plans","shopify.checkout.general.back_button_label":"Return","shopify.checkout.general.choose_delivery_strategy":"Choose a delivery method","shopify.checkout.general.autocomplete_zero_item":"No items available","shopify.checkout.general.autocomplete_powered_by_google":"Powered by {{brandName}}","shopify.checkout.general.submit":"Submit","shopify.checkout.general.processing":"Processing…","shopify.checkout.general.stepper.increase":"Increase {{type}}","shopify.checkout.general.stepper.decrease":"Decrease {{type}}","shopify.checkout.general.stepper.minimum_reached":"Minimum of {{value}} reached","shopify.checkout.general.stepper.maximum_reached":"Maximum of {{value}} reached","shopify.checkout.general.remove_item":"Remove %{label}","shopify.checkout.general.remove_tag":"Remove tag","shopify.checkout.general.dates.weekdays.monday":"Monday","shopify.checkout.general.dates.weekdays.tuesday":"Tuesday","shopify.checkout.general.dates.weekdays.wednesday":"Wednesday","shopify.checkout.general.dates.weekdays.thursday":"Thursday","shopify.checkout.general.dates.weekdays.friday":"Friday","shopify.checkout.general.dates.weekdays.saturday":"Saturday","shopify.checkout.general.dates.weekdays.sunday":"Sunday","shopify.checkout.general.dates.weekdays_abbreviation.monday":"Mo","shopify.checkout.general.dates.weekdays_abbreviation.tuesday":"Tu","shopify.checkout.general.dates.weekdays_abbreviation.wednesday":"We","shopify.checkout.general.dates.weekdays_abbreviation.thursday":"Th","shopify.checkout.general.dates.weekdays_abbreviation.friday":"Fr","shopify.checkout.general.dates.weekdays_abbreviation.saturday":"Sa","shopify.checkout.general.dates.weekdays_abbreviation.sunday":"Su","shopify.checkout.general.dates.months.january":"January","shopify.checkout.general.dates.months.february":"February","shopify.checkout.general.dates.months.march":"March","shopify.checkout.general.dates.months.april":"April","shopify.checkout.general.dates.months.may":"May","shopify.checkout.general.dates.months.june":"June","shopify.checkout.general.dates.months.july":"July","shopify.checkout.general.dates.months.august":"August","shopify.checkout.general.dates.months.september":"September","shopify.checkout.general.dates.months.october":"October","shopify.checkout.general.dates.months.november":"November","shopify.checkout.general.dates.months.december":"December","shopify.checkout.general.datepicker.show_previous_month":"Show previous month, {{month}} {{year}}","shopify.checkout.general.datepicker.show_next_month":"Show next month, {{month}} {{year}}","shopify.checkout.general.datepicker.range_start":"Range start","shopify.checkout.general.datepicker.in_range":"In range","shopify.checkout.general.datepicker.range_end":"Range end","shopify.checkout.general.list_formatter.and.wordConnector":"{{previousWords}}, {{anotherWord}}","shopify.checkout.general.list_formatter.and.lastWordConnector":"{{previousWords}}, and {{lastWord}}","shopify.checkout.general.list_formatter.and.twoWordConnector":"{{firstWord}} and {{secondWord}}","shopify.checkout.general.list_formatter.or.wordConnector":"{{previousWords}}, {{anotherWord}}","shopify.checkout.general.list_formatter.or.lastWordConnector":"{{previousWords}}, or {{lastWord}}","shopify.checkout.general.list_formatter.or.twoWordConnector":"{{firstWord}} or {{secondWord}}","shopify.checkout.general.list_formatter.narrow.wordConnector":"{{previousWords}}, {{anotherWord}}","shopify.checkout.general.list_formatter.narrow.lastWordConnector":"{{previousWords}}, {{lastWord}}","shopify.checkout.general.list_formatter.narrow.twoWordConnector":"{{firstWord}}, {{secondWord}}","shopify.checkout.general.map.cluster_title.one":"Cluster of {{number}} marker","shopify.checkout.general.map.cluster_title.other":"Cluster of {{number}} markers","shopify.checkout.general.sheet.expand":"Expand","shopify.checkout.general.dropzone.add_file":"Add file","shopify.checkout.general.dropzone.invalid_file_type":"File type not supported","shopify.checkout.general.dropzone.dragged_over":"Drop file to upload","shopify.checkout.contact.title":"Information","shopify.checkout.contact.address_title":"Address","shopify.checkout.contact.shipping_used_as_billing_notice":"This will also be used as your billing address for this order.","shopify.checkout.contact.delivery_option_title":"Delivery method","shopify.checkout.contact.contact_method_title":"Contact","shopify.checkout.contact.email_label":"Email","shopify.checkout.contact.email_placeholder":"Email","shopify.checkout.contact.email_or_phone_label":"Email or mobile phone number","shopify.checkout.contact.email_or_phone_placeholder":"Email or mobile phone number","shopify.checkout.contact.stored_addresses_label":"Saved addresses","shopify.checkout.contact.available_addresses_label":"Available addresses","shopify.checkout.contact.new_address_label":"Use a new address","shopify.checkout.contact.first_name_label":"First name","shopify.checkout.contact.optional_first_name_label":"First name (optional)","shopify.checkout.contact.last_name_label":"Last name","shopify.checkout.contact.company_label":"Company","shopify.checkout.contact.company_attention_label":"Company/Attention","shopify.checkout.contact.optional_company_attention_label":"Company/Attention (optional)","shopify.checkout.contact.optional_company_label":"Company (optional)","shopify.checkout.contact.address1_label":"Address","shopify.checkout.contact.address2_label":"Apartment, suite, etc.","shopify.checkout.contact.optional_address2_label":"Apartment, suite, etc. (optional)","shopify.checkout.contact.city_label":"City","shopify.checkout.contact.country_label":"Country/Region","shopify.checkout.contact.country_code":"Country/Region code","shopify.checkout.contact.province_label":"Province","shopify.checkout.contact.province_placeholder":"Province","shopify.checkout.contact.county_label":"County","shopify.checkout.contact.county_placeholder":"County","shopify.checkout.contact.state_label":"State","shopify.checkout.contact.state_placeholder":"State","shopify.checkout.contact.region_label":"Region","shopify.checkout.contact.region_placeholder":"Region","shopify.checkout.contact.region_none":"None selected","shopify.checkout.contact.prefecture_label":"Prefecture","shopify.checkout.contact.prefecture_placeholder":"Prefecture","shopify.checkout.contact.governorate_label":"Governorate","shopify.checkout.contact.governorate_placeholder":"Governorate","shopify.checkout.contact.emirate_label":"Emirate","shopify.checkout.contact.emirate_placeholder":"Emirate","shopify.checkout.contact.state_and_territory_label":"State/territory","shopify.checkout.contact.state_and_territory_placeholder":"State/territory","shopify.checkout.contact.phone_label":"Phone","shopify.checkout.contact.optional_phone_label":"Phone (optional)","shopify.checkout.contact.phone_placeholder":"Phone","shopify.checkout.contact.phone_tooltip":"In case we need to contact you about your order","shopify.checkout.contact.zip_code_label":"ZIP code","shopify.checkout.contact.optional_zip_code_label":"ZIP code (optional)","shopify.checkout.contact.zip_code_placeholder":"ZIP code","shopify.checkout.contact.postal_code_label":"Postal code","shopify.checkout.contact.optional_postal_code_label":"Postal code (optional)","shopify.checkout.contact.postal_code_placeholder":"Postal code","shopify.checkout.contact.postcode_label":"Postcode","shopify.checkout.contact.optional_postcode_label":"Postcode (optional)","shopify.checkout.contact.postcode_placeholder":"Postcode","shopify.checkout.contact.pincode_label":"PIN code","shopify.checkout.contact.optional_pincode_label":"PIN code (optional)","shopify.checkout.contact.pincode_placeholder":"PIN code","shopify.checkout.contact.civic_number_warning":"Add a house number if you have one","shopify.checkout.contact.optional_last_name_label":"Last name (optional)","shopify.checkout.contact.company_contact_info":"{{companyName}} · {{contact}}","shopify.checkout.contact.different_shipping_address_label":"Ship to a different address","shopify.checkout.contact.different_shipping_address_text":"Use a one-time address for this order","shopify.checkout.contact.change_company_location_link_label":"Change company location","shopify.checkout.contact.change_location_link_label":"Change location","shopify.checkout.contact.ship_to_company":"Ship to {{companyName}}","shopify.checkout.delivery_options.free_total_label":"Free","shopify.checkout.delivery_options.ship":"Ship","shopify.checkout.delivery_options.ship_to_address":"Ship to address","shopify.checkout.delivery_options.shipping_address":"Shipping address","shopify.checkout.delivery_options.pick_up":"Pick up","shopify.checkout.delivery_options.pick_up_from_store":"Pickup in store","shopify.checkout.delivery_options.pick_up_locations":"Store locations","shopify.checkout.delivery_options.pick_up_in_one_hour":"Usually ready in 1 hour","shopify.checkout.delivery_options.pick_up_in_two_hours":"Usually ready in 2 hours","shopify.checkout.delivery_options.pick_up_in_four_hours":"Usually ready in 4 hours","shopify.checkout.delivery_options.pick_up_in_twenty_four_hours":"Usually ready in 24 hours","shopify.checkout.delivery_options.pick_up_in_two_to_four_days":"Usually ready in 2-4 days","shopify.checkout.delivery_options.pick_up_in_five_or_more_days":"Usually ready in 5+ days","shopify.checkout.delivery_options.pick_up_in_zero_to_two_hours":"Ready for pickup in 2 hours","shopify.checkout.delivery_options.pick_up_in_two_to_four_hours":"Ready for pickup in 4 hours","shopify.checkout.delivery_options.pick_up_immediately":"Ready for pickup now","shopify.checkout.delivery_options.pick_up_next_day":"Ready for pickup next day","shopify.checkout.delivery_options.pickup_point_method_definition":"Ship to pickup point","shopify.checkout.delivery_options.retail_method_definition":"Retail shipping","shopify.checkout.delivery_options.none_method_definition":"No shipping","shopify.checkout.delivery_options.subscription_pickup_information":"This delivery method will apply to all items in this order and to all future orders for this subscription.","shopify.checkout.customer_account.not_user_label":"Not %{first_name}?","shopify.checkout.customer_account.have_an_account_label":"Have an account?","shopify.checkout.customer_account.sign_in_link_label":"Log in","shopify.checkout.customer_account.sign_out_link_label":"Log out","shopify.checkout.customer_account.save_my_information_label":"Save this information for next time","shopify.checkout.customer_account.invalid_address":"Selected address is invalid. %{update_address_link} or select a different address.","shopify.checkout.customer_account.incomplete_address":"Selected address is incomplete. %{update_address_link} or select a different address.","shopify.checkout.customer_account.rollup_label":"Account","shopify.checkout.customer_account.invalid_shipping_method_summary":"Select a valid shipping address to view available shipping methods","shopify.checkout.customer_account.saved_address_option_description.one":"You have {{count}} saved address.","shopify.checkout.customer_account.saved_address_option_description.other":"You have {{count}} saved addresses.","shopify.checkout.customer_account.saved_address_option_link":"Use a saved address","shopify.checkout.customer_account.saved_address_modal_title":"Use my saved address","shopify.checkout.stock.page_title":"Inventory issues","shopify.checkout.stock.title":"Out of stock","shopify.checkout.stock.items_unavailable_notice":"Some items are no longer available.","shopify.checkout.stock.product_column_header":"Products","shopify.checkout.stock.quantity_column_header":"Quantity","shopify.checkout.stock.price_column_header":"Price","shopify.checkout.stock.status_column_header":"Status","shopify.checkout.stock.removed_from_cart_notice":"Removed from cart","shopify.checkout.stock.sold_out_label":"Sold out","shopify.checkout.stock.reduced_label":"Reduced","shopify.checkout.stock.reduced_with_quantity_label":"Only %{quantity_available} left","shopify.checkout.stock.remove_from_cart_button_label":"Remove from cart","shopify.checkout.stock.continue_shopping_button_label":"Continue","shopify.checkout.stock.go_back_to_cart_button_label":"Go back to my cart","shopify.checkout.stock.remove":"Remove","shopify.checkout.stock.return_to_store_label":"Return to store","shopify.checkout.stock.continue_cta_label":"Continue checkout","shopify.checkout.stock.item_label.one":"{{count}} item","shopify.checkout.stock.item_label.other":"{{count}} items","shopify.checkout.stock.empty_cart_label":"Your cart is empty","shopify.checkout.stock.quantity_update.page_title":"Quantity update","shopify.checkout.stock.quantity_update.title":"Quantity update","shopify.checkout.stock.quantity_update.description":"Available quantities for these items have changed and are updated in your cart.","shopify.checkout.stock.unpurchasable_product.title":"Unpurchasable product","shopify.checkout.stock.unpurchasable_product.header":"Some items were removed from your cart","shopify.checkout.stock.unpurchasable_product.message":"These items are not available for B2B orders.","shopify.checkout.stock.unpurchasable_product.status_column_header":"Not available","shopify.checkout.stock.unpurchasable_product_generic.title":"Unpurchasable product","shopify.checkout.stock.unpurchasable_product_generic.header":"Some items were removed from your cart","shopify.checkout.stock.unpurchasable_product_generic.message":"These items are not available.","shopify.checkout.stock.unpurchasable_product_generic.status_column_header":"Not available","shopify.checkout.stock.unfulfillable_product.title":"Delivery not available","shopify.checkout.stock.unfulfillable_product.message.one":"%{delivery_method} is no longer available for this item.","shopify.checkout.stock.unfulfillable_product.message.other":"%{delivery_method} is no longer available for these items.","shopify.checkout.stock.unfulfillable_product.default_message.one":"The chosen delivery method is no longer available for this item.","shopify.checkout.stock.unfulfillable_product.default_message.other":"The chosen delivery method is no longer available for these items.","shopify.checkout.stock.unshippable_product.title":"No delivery available","shopify.checkout.stock.unshippable_product.header.one":"No delivery available for %{count} item","shopify.checkout.stock.unshippable_product.header.other":"No delivery available for %{count} items","shopify.checkout.stock.unshippable_product.message.one":"This item will be removed from your cart because there are no delivery methods available for your address.","shopify.checkout.stock.unshippable_product.message.other":"These items will be removed from your cart because there are no delivery methods available for your address.","shopify.checkout.stock.unshippable_product.status_column_header":"No delivery","shopify.checkout.stock.price_update.title":"Price update","shopify.checkout.stock.price_update.description":"Prices for these items have changed and are updated in your cart.","shopify.checkout.stock.price_and_quantity_update.title":"Price and quantity update","shopify.checkout.stock.price_and_quantity_update.description":"Prices and available quantities for these items have changed and are updated in your cart.","shopify.checkout.stock.out_of_stock.description":"These items are no longer available and have been removed from your cart.","shopify.checkout.stock.out_of_stock.items_unavailable":"Some items are no longer available and have been removed from your cart.","shopify.checkout.contextual_availability.title.one":"Unavailable product","shopify.checkout.contextual_availability.title.other":"Unavailable products","shopify.checkout.contextual_availability.products_not_available.one":"This product will be removed from your cart because it's not available in your country/region.","shopify.checkout.contextual_availability.products_not_available.other":"These products will be removed from your cart because they're not available in your country/region.","shopify.checkout.contextual_availability.all_products_in_cart_unavailable.one":"This product is not available in your country/region.","shopify.checkout.contextual_availability.all_products_in_cart_unavailable.other":"These products are not available in your country/region.","shopify.checkout.contextual_availability.unavailable_label":"Unavailable","shopify.checkout.deliverability.not_deliverable.title.one":"No delivery available for %{count} item","shopify.checkout.deliverability.not_deliverable.title.other":"No delivery available for %{count} items","shopify.checkout.deliverability.not_deliverable.message.one":"This item will be removed from your cart because there are no delivery methods available for your address.","shopify.checkout.deliverability.not_deliverable.message.other":"These items will be removed from your cart because there are no delivery methods available for your address.","shopify.checkout.deliverability.not_deliverable.label":"No delivery","shopify.checkout.order_summary.title":"Order summary","shopify.checkout.order_summary.group_title_label":"Part of \"%{group_title}\"","shopify.checkout.order_summary.order_name_label":"Order %{name}","shopify.checkout.order_summary.shopping_cart_label":"Shopping cart","shopify.checkout.order_summary.discount_title":"Discount","shopify.checkout.order_summary.discount_title_stacking.one":"Discount","shopify.checkout.order_summary.discount_title_stacking.other":"Discounts","shopify.checkout.order_summary.discount_order_stacking.one":"Order discount","shopify.checkout.order_summary.discount_order_stacking.other":"Order discounts","shopify.checkout.order_summary.discount_label":"Discount code","shopify.checkout.order_summary.discount_not_found":"Unable to find a valid discount matching the code entered","shopify.checkout.order_summary.discount_placeholder":"Discount code","shopify.checkout.order_summary.discount_code_applied":"Discount code applied","shopify.checkout.order_summary.gift_card_applied":"Gift card applied","shopify.checkout.order_summary.enter_shipping_address":"Enter shipping address","shopify.checkout.order_summary.gift_card_title":"Gift card","shopify.checkout.order_summary.gift_card_label":"Gift card","shopify.checkout.order_summary.gift_card_placeholder":"Gift card","shopify.checkout.order_summary.gift_card_and_discount_title":"Discount code or gift card","shopify.checkout.order_summary.gift_card_and_discount_label":"Discount code or gift card","shopify.checkout.order_summary.gift_card_and_discount_placeholder":"Discount code or gift card","shopify.checkout.order_summary.remove_gift_card_label":"Clear gift card","shopify.checkout.order_summary.remove_discount_label":"Remove discount","shopify.checkout.order_summary.return_restocking_fee_label":"Restocking fee","shopify.checkout.order_summary.return_shipping_fee_label":"Return shipping","shopify.checkout.order_summary.free_shipping_discount_label":"Free shipping","shopify.checkout.order_summary.applied_free_shipping_discount_label":"Applied","shopify.checkout.order_summary.apply_discount_button_label":"Apply","shopify.checkout.order_summary.applied_discount_message":"%{amount} off total order price","shopify.checkout.order_summary.discount_has_been_applied":"Discount has been applied","shopify.checkout.order_summary.discount_has_been_removed":"Discount has been removed","shopify.checkout.order_summary.gift_card_has_been_applied":"Gift card has been applied","shopify.checkout.order_summary.gift_card_has_been_removed":"Gift card has been removed","shopify.checkout.order_summary.gift_card_subscriptions_notice":"Gift cards will only apply to your first payment","shopify.checkout.order_summary.discount_already_applied":"A discount has been applied to this order. You can’t add another discount.","shopify.checkout.order_summary.cart_does_not_meet_discount_requirements_notice":"<strong style=\"text-transform:uppercase\">%{code}</strong> discount code isn’t valid for the items in your cart","shopify.checkout.order_summary.discount_requires_customer_notice":"Enter your shipping information to apply the <strong style=\"text-transform:uppercase\">%{code}</strong> discount code","shopify.checkout.order_summary.customer_does_not_meet_discount_requirements_notice":"<strong style=\"text-transform:uppercase\">%{code}</strong> discount code isn’t available to you right now","shopify.checkout.order_summary.eligible_customer_missing_notice":"<strong style=\"text-transform:uppercase\">%{code}</strong> discount code requires eligible customer","shopify.checkout.order_summary.shipping_information_does_not_meet_discount_requirements_notice":"<strong style=\"text-transform:uppercase\">%{code}</strong> discount code isn’t available for your shipping address","shopify.checkout.order_summary.customer_already_used_once_per_customer_discount_notice":"The <strong style=\"text-transform:uppercase\">%{code}</strong> discount code has already been used","shopify.checkout.order_summary.subtotal_label":"Subtotal","shopify.checkout.order_summary.subtotal_label_with_quantity.one":"Subtotal • %{count} item","shopify.checkout.order_summary.subtotal_label_with_quantity.other":"Subtotal • %{count} items","shopify.checkout.order_summary.shipping_label":"Shipping","shopify.checkout.order_summary.pickup_label":"Pickup in store","shopify.checkout.order_summary.no_pickup_location":"There are no pickup locations available.","shopify.checkout.order_summary.tip_label":"Tip","shopify.checkout.order_summary.calculating_shipping":"Calculating…","shopify.checkout.order_summary.calculating":"Calculating…","shopify.checkout.order_summary.shipping_default_value":"Calculated at next step","shopify.checkout.order_summary.shipping_discount_title":"Shipping Discount","shopify.checkout.order_summary.shipping_pending_value":"—","shopify.checkout.order_summary.shipping_pending_message":"Not yet available","shopify.checkout.order_summary.shipping_policy_link":"Shipping costs","shopify.checkout.order_summary.taxes_label":"Taxes","shopify.checkout.order_summary.estimated_taxes_label":"Estimated taxes","shopify.checkout.order_summary.information_estimated_taxes_label":"Taxes (estimated)","shopify.checkout.order_summary.estimated_taxes_finalization_tooltip_content":"The final tax and total will be confirmed by email or text after you place your order.","shopify.checkout.order_summary.order_total_label":"Order Total","shopify.checkout.order_summary.total_savings":"Total savings","shopify.checkout.order_summary.total_label":"Total","shopify.checkout.order_summary.total_outstanding_label":"Amount to pay","shopify.checkout.order_summary.partial_total_label":"Total","shopify.checkout.order_summary.free_total_label":"Free","shopify.checkout.order_summary.paid_label":"Paid","shopify.checkout.order_summary.payment_due_label":"Payment due","shopify.checkout.order_summary.vat_label_html":"Including %{amount} in taxes","shopify.checkout.order_summary.duties_included_label":"Total includes taxes and duties. No extra charges on delivery.","shopify.checkout.order_summary.discount_and_gift_card_savings_notice":"After %{discount_amount} in discounts and %{gift_card_amount} in gift cards","shopify.checkout.order_summary.discount_savings_notice":"After %{discount_amount} in discounts","shopify.checkout.order_summary.gift_card_savings_notice":"After %{gift_card_amount} in gift cards","shopify.checkout.order_summary.cost_table_title":"Cost summary","shopify.checkout.order_summary.cost_table_item_column_header":"Item","shopify.checkout.order_summary.cost_table_value_column_header":"Value","shopify.checkout.order_summary.description_label":"Description","shopify.checkout.order_summary.price_label":"Price","shopify.checkout.order_summary.price_per_item.accessibility_label":"%{price} per item","shopify.checkout.order_summary.price_per_item.label":"%{price}/ea","shopify.checkout.order_summary.quantity_label":"Quantity","shopify.checkout.order_summary.product_change_label":"Change","shopify.checkout.order_summary.product_image_label":"Product image","shopify.checkout.order_summary.scroll_order_summary":"Scroll for more items","shopify.checkout.order_summary.expand_order_summary_short":"Show","shopify.checkout.order_summary.collapse_order_summary_short":"Hide","shopify.checkout.order_summary.expand_order_summary":"Show order summary","shopify.checkout.order_summary.collapse_order_summary":"Hide order summary","shopify.checkout.order_summary.original_price":"Original price","shopify.checkout.order_summary.sale_price":"Sale price","shopify.checkout.order_summary.total_updated_label":"Updated total price:","shopify.checkout.order_summary.order_total_updated_label":"Updated total","shopify.checkout.order_summary.total_already_paid_label":"Paid","shopify.checkout.order_summary.unit_price.accessible_separator":"per","shopify.checkout.order_summary.unit_price.content_html":"%{price}%{accessible_separator}%{per_unit}","shopify.checkout.order_summary.gift_card_ending":"Gift card ending with %{last_characters}","shopify.checkout.order_summary.estimated_tax_label":"Estimated tax","shopify.checkout.order_summary.multiple_shipping_lines_label":"Shipping total","shopify.checkout.order_summary.recurring_subtotal_label":"Recurring subtotal","shopify.checkout.order_summary.recurring_total_label":"Recurring total","shopify.checkout.order_summary.recurring_total_tooltip":"Does not include shipping, tax, duties, or any applicable discounts.","shopify.checkout.order_summary.confirmation_number_label":"Confirmation #%{confirmation_number}","shopify.checkout.order_summary.higher_value_discount_applied":"<strong style=\"text-transform:uppercase\">%{code}</strong> couldn't be used with your existing discounts.","shopify.checkout.order_summary.percent_off_shipping":"%{percent}% off shipping","shopify.checkout.order_summary.amount_off_shipping":"%{amount} off shipping","shopify.checkout.order_summary.deferred_payment_info.title":"Payment of %{amount_due} is due on %{due_at}","shopify.checkout.order_summary.deferred_payment_info.description_html":"For questions about your order, %{contact_us}.","shopify.checkout.order_summary.deferred_payment_info.paid_today":"Total paid today","shopify.checkout.order_summary.deferred_payment_info.due_on_fulfillment_title":"Payment of %{amount_due} is due on fulfillment","shopify.checkout.order_summary.deferred_payment_info.due_on_receipt_title":"Payment of %{amount_due} is due on receipt","shopify.checkout.order_summary.deferred_balance_info.title":"Balance of {{amount_due}} is due on {{due_at}}","shopify.checkout.order_summary.deferred_balance_info.due_on_fulfillment_title":"Balance of {{amount_due}} is due on fulfillment","shopify.checkout.order_summary.payment_terms_totals.due_today":"Total due today","shopify.checkout.order_summary.payment_terms_totals.due_later":"Total due %{due_at}","shopify.checkout.order_summary.payment_terms_totals.due_on_fulfillment":"Total due on fulfillment","shopify.checkout.order_summary.payment_terms_totals.due_on_receipt":"Total due on receipt","shopify.checkout.order_summary.payment_terms_totals.due_later_checkout_to_draft":"Total due later","shopify.checkout.order_summary.payment_terms_totals.total_paid":"Total paid","shopify.checkout.order_summary.maximum_discount_code_limit_reached":"You've reached the maximum number of discount codes. Remove an existing code to use <strong style=\"text-transform:uppercase\">%{code}</strong>.","shopify.checkout.order_summary.discount_code_application_failed":"<strong style=\"text-transform:uppercase\">%{code}</strong> isn't working right now. Contact us for help.","shopify.checkout.order_summary.due_on_fulfillment":"Due on fulfillment","shopify.checkout.order_summary.gift_card_masked":"•••• %{last_characters}","shopify.checkout.order_summary.subscriptions":"Subscriptions","shopify.checkout.order_summary.duties_label":"Duties","shopify.checkout.order_summary.duties_and_taxes_label":"Duties and taxes","shopify.checkout.order_summary.error_duties_tooltip":"This order is being shipped from another country, so duties and taxes may be charged on delivery.","shopify.checkout.order_summary.may_be_charged_on_delivery":"May be charged on delivery","shopify.checkout.order_summary.total_updated_label_with_price":"Updated total price: %{totalPrice}","shopify.checkout.order_summary.updated_shipping_method":"Updated shipping method: %{shipping_method}","shopify.checkout.order_summary.recurring_payments":"Recurring Payments","shopify.checkout.order_summary.recurring_total_multiple_label":"This order has a recurring charge for multiple items.","shopify.checkout.order_summary.deferred_total_due_date_label":"Total due {{date}}","shopify.checkout.order_summary.full_price":"Full price: %{price}","shopify.checkout.order_summary.custom_discount":"Custom discount","shopify.checkout.order_summary.expand_component_information.one":"Show %{count} item","shopify.checkout.order_summary.expand_component_information.other":"Show %{count} items","shopify.checkout.order_summary.collapse_component_information.one":"Hide %{count} item","shopify.checkout.order_summary.collapse_component_information.other":"Hide %{count} items","shopify.checkout.order_summary.component_quantity_title":"%{quantity} × %{product_title}","shopify.checkout.order_summary.discount_discovery.add_code":"Add discount","shopify.checkout.order_summary.discount_discovery.merchandise_quantity_label.one":"%{count} item","shopify.checkout.order_summary.discount_discovery.merchandise_quantity_label.other":"%{count} items","shopify.checkout.order_summary.alternative_payment_currency_total":"Charged as %{amount_due}","shopify.checkout.shipping.title":"Shipping","shopify.checkout.shipping.delivery_title":"Delivery","shopify.checkout.shipping.shipping_method_notice":" ","shopify.checkout.shipping.shipping_method_title":"Shipping method","shopify.checkout.shipping.shipping_method_one_time_purchase_group_title":"One-time purchase","shopify.checkout.shipping.shipping_method_first_shipment_group_title.one":"First shipment","shopify.checkout.shipping.shipping_method_first_shipment_group_title.other":"First shipments","shopify.checkout.shipping.shipping_method_subscription_group_title":"Subscription","shopify.checkout.shipping.shipping_method_recurring_shipments_group_title.one":"Recurring shipment","shopify.checkout.shipping.shipping_method_recurring_shipments_group_title.other":"Recurring shipments","shopify.checkout.shipping.subscription_shipping":"Subscription shipping","shopify.checkout.shipping.subscription_local_delivery":"Subscription local delivery","shopify.checkout.shipping.subscription_pickup":"Subscription pickup","shopify.checkout.shipping.waiting_on_rate_notice":"Getting available shipping rates…","shopify.checkout.shipping.waiting_on_pickup_location_notice":"Getting available pick up locations…","shopify.checkout.shipping.no_rates_for_cart_or_destination_notice":"There are no shipping methods available for your cart or address","shopify.checkout.shipping.no_pickup_location_notice":"At least one of your products is not available for pick up","shopify.checkout.shipping.no_rates_for_country_notice":"No shipping rates found for this address.","shopify.checkout.shipping.no_rates_contact_notice":"Contact us for more information","shopify.checkout.shipping.free_rate_label":"Free","shopify.checkout.shipping.cheapest_rate_label":"Cheapest","shopify.checkout.shipping.please_enter_your_shipping_information_notice":"Please enter your shipping information.","shopify.checkout.shipping.estimated_delivery_date.one":"%{count} business day","shopify.checkout.shipping.estimated_delivery_date.other":"%{count} business days","shopify.checkout.shipping.estimated_delivery_date_range":"%{minimum} to %{maximum} business days","shopify.checkout.shipping.delivery_date_range":"%{min_time}–%{max_time}","shopify.checkout.shipping.estimated_delivery_time":"Estimated delivery %{time}","shopify.checkout.shipping.estimated_delivery_time_range":"Estimated delivery %{min_time}–%{max_time}","shopify.checkout.shipping.delivery_today":"Same-day delivery %{time}","shopify.checkout.shipping.delivery_tomorrow":"Next-day delivery %{time}","shopify.checkout.shipping.two_day_delivery":"2-day delivery %{time}","shopify.checkout.shipping.delivery":"Delivery %{time}","shopify.checkout.shipping.arrives_time":"Arrives %{time}","shopify.checkout.shipping.arrives_time_range":"Arrives %{min_time}–%{max_time}","shopify.checkout.shipping.estimated_time":"Estimated %{time}","shopify.checkout.shipping.estimated_time_range":"Estimated %{min_time}–%{max_time}","shopify.checkout.shipping.default_description":"Ships in 1 business day","shopify.checkout.shipping.shipping_line_phone_label":"Mobile phone number (required)","shopify.checkout.shipping.shipping_line_phone":"Your courier may use this number to contact you.","shopify.checkout.shipping.shipping_line_delivery_phone_label":"Mobile phone number","shopify.checkout.shipping.shipping_line_delivery_phone":"You may be contacted with updates on your delivery.","shopify.checkout.shipping.optional_shipping_line_delivery_instructions_label":"Delivery instructions (optional)","shopify.checkout.shipping.shipping_line_delivery_instructions":"Enter necessary information like door codes or drop-off instructions.","shopify.checkout.shipping.other_method.zero":"No other methods available","shopify.checkout.shipping.other_method.one":"%{count} other method available at","shopify.checkout.shipping.other_method.other":"%{count} other methods available starting at","shopify.checkout.shipping.shipping_rate_discounted_amount":"Was: %{original_amount}. Now: %{amount}","shopify.checkout.shipping.local_delivery":"Local delivery","shopify.checkout.shipping.subscription_delivery_description.free_shipping_cycles.one":"Free shipping for %{count} more delivery","shopify.checkout.shipping.subscription_delivery_description.free_shipping_cycles.other":"Free shipping for %{count} more deliveries","shopify.checkout.shipping.subscription_delivery_description.free_shipping_cycles_delivery_not_included.one":"Free shipping for %{count} delivery","shopify.checkout.shipping.subscription_delivery_description.free_shipping_cycles_delivery_not_included.other":"Free shipping for %{count} deliveries","shopify.checkout.shipping.subscription_delivery_description.first_n_order_free_with_cycle.one":"Free shipping for %{count} more delivery, then %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.first_n_order_free_with_cycle.other":"Free shipping for %{count} more deliveries, then %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.first_n_order_free_with_cycle_delivery_not_included.one":"Free shipping for %{count} delivery, then %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.first_n_order_free_with_cycle_delivery_not_included.other":"Free shipping for %{count} deliveries, then %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.max_cycles_base_shipping.one":"%{count} more delivery for %{shipping_price}","shopify.checkout.shipping.subscription_delivery_description.max_cycles_base_shipping.other":"%{count} more deliveries for %{shipping_price} each","shopify.checkout.shipping.subscription_delivery_description.max_cycles_base_shipping_delivery_not_included.one":"%{count} delivery for %{shipping_price}","shopify.checkout.shipping.subscription_delivery_description.max_cycles_base_shipping_delivery_not_included.other":"%{count} more deliveries for %{shipping_price} each","shopify.checkout.shipping.subscription_delivery_description.prepaid_free_shipping_with_cycles.one":"Free shipping for the first %{cycle}, followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.prepaid_free_shipping_with_cycles.other":"Free shipping for the first %{cycle}, followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_one_cycle.one":"%{shipping_price} for %{count} more delivery","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_one_cycle.other":"%{shipping_price} for %{count} more deliveries (%{per_delivery_cost})","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_one_cycle_delivery_not_included.one":"%{shipping_price} for %{count} delivery","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_one_cycle_delivery_not_included.other":"%{shipping_price} for %{count} deliveries (%{per_delivery_cost})","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_no_cycle.one":"%{shipping_price} for %{count} more delivery, followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_no_cycle.other":"%{shipping_price} for %{count} more deliveries (%{per_delivery_cost}), followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_no_cycle_delivery_not_included.one":"%{shipping_price} for %{count} delivery, followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.prepaid_order_no_cycle_delivery_not_included.other":"%{shipping_price} for %{count} deliveries (%{per_delivery_cost}), followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.subscription_free_with_frequency_label":"Free shipping %{delivery_frequency}","shopify.checkout.shipping.subscription_delivery_description.prepaid_delivery_frequency.one":"for %{count} delivery","shopify.checkout.shipping.subscription_delivery_description.prepaid_delivery_frequency.other":"for %{count} deliveries","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.day.one":"every day","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.day.other":"every %{count} days","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.week.one":"every week","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.week.other":"every %{count} weeks","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.month.one":"every month","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.month.other":"every %{count} months","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.year.one":"every year","shopify.checkout.shipping.subscription_delivery_description.subscription_delivery_frequency.year.other":"every %{count} years","shopify.checkout.shipping.subscription_delivery_description.multiple_subscriptions_shipping_price_label":"%{shipping_price} per delivery","shopify.checkout.shipping.subscription_delivery_description.prepaid_shipping_price_label":"%{shipping_price} per delivery x %{delivery_interval_count}","shopify.checkout.shipping.subscription_delivery_description.initial_order_discounted":"First shipping cost %{discounted_shipping_cost}, then %{frequency_description}","shopify.checkout.shipping.subscription_delivery_description.prepaid_initial_order_discounted":"First shipping cost %{discounted_shipping_price} %{prepaid_delivery_frequency}","shopify.checkout.shipping.subscription_delivery_description.prepaid_initial_order_discounted_with_per_delivery_price":"First shipping cost %{discounted_shipping_price} %{prepaid_delivery_frequency} (%{discounted_cost_per_delivery})","shopify.checkout.shipping.subscription_delivery_description.prepaid_initial_order_discounted_with_renewal":"First shipping cost %{discounted_shipping_price} %{prepaid_delivery_frequency}, then %{shipping_price} %{billing_cycle}","shopify.checkout.shipping.subscription_delivery_description.prepaid_initial_order_discounted_with_per_delivery_price_and_renewal":"First shipping cost %{discounted_shipping_price} %{prepaid_delivery_frequency} (%{discounted_cost_per_delivery}), then %{shipping_price} %{billing_cycle}","shopify.checkout.shipping.subscription_delivery_description.shipping_price_included":"Included","shopify.checkout.shipping.subscription_delivery_description.recurring_order_shipping_price":"followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.first_order_shipping_price_included":"First order included, followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.first_order_different_shipping_price":"%{first_order_shipping_price} (%{per_delivery_price} per delivery), followed by %{recurring_order_shipping_price}","shopify.checkout.shipping.subscription_delivery_description.first_n_order_free.one":"First order free","shopify.checkout.shipping.subscription_delivery_description.first_n_order_free.other":"First %{count} orders free","shopify.checkout.shipping.subscription_delivery_description.free_for_first_n_order.one":"For first order","shopify.checkout.shipping.subscription_delivery_description.free_for_first_n_order.other":"For first %{count} orders","shopify.checkout.shipping.one_time_purchase_shipping":"One-time shipping","shopify.checkout.shipping.duties_and_taxes_title":"Duties and taxes","shopify.checkout.shipping.shipping_information_required_notice":"Shipping information is required. {{link}}.","shopify.checkout.shipping.shipping_information_redirect_link":"Enter your information here","shopify.checkout.shipping.loading_progressive_rates":"Searching for more rates…","shopify.checkout.shipping.no_other_methods_available":"No other methods available","shopify.checkout.shipping.duties_and_taxes_options.ddu_title":"Pay on delivery","shopify.checkout.shipping.duties_and_taxes_options.ddu_caption":"Additional fees may apply","shopify.checkout.shipping.duties_and_taxes_options.ddp_title":"Pay now","shopify.checkout.shipping.duties_and_taxes_options.ddp_caption":"No additional fees on delivery","shopify.checkout.shipping.shipping_method_combinations.without_separator":"%{firstMethod}, %{secondMethod}","shopify.checkout.shipping.shipping_method_combinations.with_separator":"%{rest}, %{current},","shopify.checkout.shipping.shipping_method_combinations.combination":"%{rest} and %{current}","shopify.checkout.shipping.shipping_used_as_billing_notice":"This will also be used as your billing address for this order.","shopify.checkout.shipping.address_update":"Update address","shopify.checkout.shipping.shipping_address_title":"Ship to","shopify.checkout.shipping.add_address":"Use a different address","shopify.checkout.shipping.add_delivery_instructions":"Add delivery instructions","shopify.checkout.shipping.edit":"Edit","shopify.checkout.shipping.delete":"Delete","shopify.checkout.shipping.address_more":"More actions for this address","shopify.checkout.shipping.address_edit":"Edit address","shopify.checkout.shipping.address_delete":"Delete address","shopify.checkout.shipping.address_confirm":"Are you sure you want to delete this address from your account?","shopify.checkout.shipping.address_default":"Set as default","shopify.checkout.shipping.address_form.add_address":"Add address","shopify.checkout.shipping.address_form.save":"Save","shopify.checkout.shipping.address_form.cancel":"Cancel","shopify.checkout.shipping.address_form.generic_error":"There was a problem saving your address. Please try again.","shopify.checkout.shipping.address_form.one_time_address_subtitle":"Use a one-time address for this order","shopify.checkout.shipping.different_shipping_method_summary":"Enter a different shipping address to view available shipping methods","shopify.checkout.shipping.invalid_shipping_method_summary":"Enter a valid shipping address to view available shipping methods","shopify.checkout.shipping.method_summary.incomplete_address_entered":"Enter a complete shipping address to view available shipping methods","shopify.checkout.shipping.method_summary.incomplete_address_selected":"Select a complete shipping address to view available shipping methods","shopify.checkout.shipping.local_pickup.search_address":"Search for address","shopify.checkout.shipping.local_pickup.rollup_title":"Store location","shopify.checkout.shipping.missing_shipping_address":"Shipping address is missing","shopify.checkout.shipping.split_shipping_merchandise_quantity_label_standard":"%{quantity} items","shopify.checkout.shipping.split_shipping_merchandise_quantity_label_additional":"+%{quantity} more","shopify.checkout.shipping.split_shipping_merchandise_shipment_number":"Shipment %{number} of %{total}","shopify.checkout.shipping.pre_order_ships_now":"Ships now","shopify.checkout.shipping.pre_order_ships_later":"Ships later","shopify.checkout.shipping.pre_order_ships_date":"Ships %{date}","shopify.checkout.shipping.split_shipping_shipped_by_shop":"Shipped by %{shop_name}","shopify.checkout.shipping.split_shipping_multiple_shipment_label":"Multiple shipments","shopify.checkout.shipping.split_shipping_shipping_label":"Method","shopify.checkout.shipping.split_shipping_multiple_shipment_quantity_label":"%{quantity} shipments","shopify.checkout.shipping.split_shipping_multiple_shipment_notice":"Your order will arrive in multiple shipments","shopify.checkout.shipping.split_shipping_multiple_shipment_notice_one_time_purchase":"Your order will arrive in %{quantity} shipments","shopify.checkout.shipping.split_shipping_more_shipping_options":"More shipping options","shopify.checkout.shipping.split_shipping_shipment_number":"Shipment %{number}","shopify.checkout.shipping.split_shipping_merchandise_quantity_label_inline_primary":"Quantity: %{quantity}","shopify.checkout.shipping.split_shipping_merchandise_quantity_label_inline":"%{merchandise_title} ×%{quantity}","shopify.checkout.shipping.split_shipping_option_free":"Free shipping","shopify.checkout.shipping.split_shipping_option_lowest_price":"Lowest price","shopify.checkout.shipping.split_shipping_option_fastest":"Fastest","shopify.checkout.shipping.split_shipping_option_recommended":"Recommended","shopify.checkout.shipping.split_shipping_option_custom":"Custom","shopify.checkout.localized_fields.additional_information.title":"Additional information","shopify.checkout.payment.network_card_payment_options":"Choose a card network","shopify.checkout.payment.amazon_payments_label":"Amazon Pay","shopify.checkout.payment.amazon_payments_login_hint":"You will be asked to login with Amazon.","shopify.checkout.payment.amazon_payments_logout":"Log out from Amazon Pay","shopify.checkout.payment.amazon_payments_failed_mfa_challenge":"The selected payment method could not be used. Select a different method or contact your bank or card issuer.","shopify.checkout.payment.amazon_payments_abandoned_mfa_challenge":"Your payment couldn't be completed. Try a different payment method or contact your bank or card issuer.","shopify.checkout.payment.amazon_payments_could_not_enqueue_authorize":"There was an issue processing your payment. Try again or use a different payment method.","shopify.checkout.payment.title":"Payment","shopify.checkout.payment.amount_left_to_pay_label":"Payment due:","shopify.checkout.payment.discount_button_action_label":"Apply Discount Code","shopify.checkout.payment.gift_card_code_label":"Gift card code","shopify.checkout.payment.apply_gift_card_button_label":"Apply","shopify.checkout.payment.gift_card_balance_label":"Balance:","shopify.checkout.payment.supported_card_brands_more_label":"and more…","shopify.checkout.payment.detected_card_brand":"Detected card brand: {brand}","shopify.checkout.payment.credit_card_vaulting_sign_in_banner_title":"Save your credit card","shopify.checkout.payment.credit_card_vaulting_sign_in_banner_info":"Log in or create an account to save your credit card for future purchases.","shopify.checkout.payment.credit_card_vaulting_sign_in_banner_button_label":"Log in","shopify.checkout.payment.ftd_vault_credit_card_label":"Save this credit card to my account for a faster checkout","shopify.checkout.payment.card_number_label":"Card number","shopify.checkout.payment.card_number_placeholder":"Card number","shopify.checkout.payment.card_pay_with":"Pay with:","shopify.checkout.payment.card_security_notice":"All transactions are secure and encrypted.","shopify.checkout.payment.card_security_vault_notice":"We need your details for future payments. All transactions are secure and encrypted.","shopify.checkout.payment.card_information_notice":"All transactions are secure and encrypted. Credit card information is never stored.","shopify.checkout.payment.name_on_card_label":"Name on card","shopify.checkout.payment.name_on_card_placeholder":"Name on card","shopify.checkout.payment.card_nickname_label":"Nickname (optional)","shopify.checkout.payment.card_expired":"Expired","shopify.checkout.payment.card_expiry_label":"Expiration date (MM / YY)","shopify.checkout.payment.card_expiry_placeholder":"Expiration date (MM / YY)","shopify.checkout.payment.credit_card_start_month":"Start month","shopify.checkout.payment.credit_card_start_year":"Start year","shopify.checkout.payment.delete_customer_mandate_modal_title":"Remove this payment card?","shopify.checkout.payment.delete_customer_mandate_modal_body":"If you remove this card, you'll need to add it again before using it for payments.","shopify.checkout.payment.delete_customer_mandate_modal_confirm":"Remove card","shopify.checkout.payment.delete_customer_mandate_modal_cancel":"Cancel","shopify.checkout.payment.card_verification_value_label":"Security code","shopify.checkout.payment.card_verification_value_placeholder":"Security code","shopify.checkout.payment.card_verification_confirm":"For verification purposes, enter your card's security code.","shopify.checkout.payment.card_expiry_date_explanation":"Card expiration date in format: month, month, year, year","shopify.checkout.payment.card_expiration_month_label":"Expiration month","shopify.checkout.payment.card_expiration_year_label":"Expiration year","shopify.checkout.payment.card_verification_value_explanation":"3-digit security code usually found on the back of your card. American Express cards have a 4-digit code located on the front.","shopify.checkout.payment.card_verification_value_explanation_amex":"4-digit security code on the front of your card","shopify.checkout.payment.card_verification_value_explanation_other":"3-digit security code on the back of your card","shopify.checkout.payment.card_start_label":"Issue date (MM / YY)","shopify.checkout.payment.card_start_placeholder":"Issue date (MM / YY)","shopify.checkout.payment.card_issue_number_label":"Issue number","shopify.checkout.payment.card_issue_number_placeholder":"Issue number","shopify.checkout.payment.card_change_label":"Change","shopify.checkout.payment.card_update_label":"Update card","shopify.checkout.payment.paypal_disconnect":"Disconnect","shopify.checkout.payment.ends_with_label":"ending with %{last_digits}","shopify.checkout.payment.masked_digits_label":"•••• %{last_digits}","shopify.checkout.payment.payment_method_saved":"Payment method saved","shopify.checkout.payment.card_vaulted_company_location":"Card saved for this location","shopify.checkout.payment.expiry_long":"(Expires %{month}/%{year})","shopify.checkout.payment.expiry_short":"(Exp %{month}/%{year})","shopify.checkout.payment.saved_by_payment_method":"Saved by %{payment_method}","shopify.checkout.payment.pay_with_payment_method":"Pay with %{payment_method}","shopify.checkout.payment.different_credit_card_label":"Use a different credit card","shopify.checkout.payment.same_billing_address_label":"Same as shipping address","shopify.checkout.payment.different_billing_address_label":"Use a different billing address","shopify.checkout.payment.billing_address_associated_with_mandate":"Use address associated with payment method","shopify.checkout.payment.billing_address_associated_with_mandate_info":"If you wish to change your billing address, please remove and re-enter your credit card details","shopify.checkout.payment.free_order_notice_html":"Your order is <strong>free</strong>. No payment is required.","shopify.checkout.payment.express_checkout_free_order":"You won't be charged for a free order","shopify.checkout.payment.order_covered_by_gift_cards_notice.one":"Your order is covered by your gift card.","shopify.checkout.payment.order_covered_by_gift_cards_notice.other":"Your order is covered by your gift cards.","shopify.checkout.payment.offsite_gateway_redirect_hint":"After clicking “%{button_label}”, you will be redirected to %{gateway_label} to complete your purchase securely.","shopify.checkout.payment.offsite_gateway_review_page_redirect_hint":"After you review your order, you will be redirected to %{gateway_label} to complete your purchase securely.","shopify.checkout.payment.offsite_gateway_redirect_hint_multi_currency_html":"%{gateway_label} total %{total_shop_price}","shopify.checkout.payment.receiver_payment_experience_hint":"After placing your order, you will receive payment details. Make the payment at Multibanco or online within %{due_days} days.","shopify.checkout.payment.billing_address_title":"Billing address","shopify.checkout.payment.billing_address_description":"Select the address that matches your card or payment method.","shopify.checkout.payment.billing_address_description_no_shipping_address":"Enter the address that matches your card or payment method.","shopify.checkout.payment.no_js_credit_card_fields_redirect_hint":"You will be redirected to add your payment information.","shopify.checkout.payment.card_fields_container_prefix":"Field container for:","shopify.checkout.payment.card_fields_unavailable_html.one":"Credit and debit card payments aren’t available right now.<br><a href=\"%{current_url}\">Refresh this page</a> or try again later.","shopify.checkout.payment.card_fields_unavailable_html.other":"Credit and debit card payments aren’t available right now.<br><a href=\"%{current_url}\">Refresh this page</a> or try a different payment method.","shopify.checkout.payment.card_fields_processing_error":"There was a problem processing the payment. Try refreshing this page or check your internet connection.","shopify.checkout.payment.technical_error":"Payments can’t be processed right now because of a technical issue. Try again in a few minutes.","shopify.checkout.payment.no_method_error":"This store can’t accept payments right now.","shopify.checkout.payment.not_configured_error":"This store can’t accept payments right now.","shopify.checkout.payment.missing_credit_card_error":"Enter your card details to complete the payment","shopify.checkout.payment.shop_pay_ideal_unavailable_error":"iDEAL is not available for this order. Choose another payment method.","shopify.checkout.payment.payment_method_not_available_for_shipping_address_error":"Payment method not available for selected shipping address. Choose another payment method.","shopify.checkout.payment.billing_address_not_supported_for_payment_method_error":"This payment method isn't available for your billing address and currency. Please try a different payment method.","shopify.checkout.payment.generic_incorrect_card_info":"Your payment details couldn’t be verified. Check your card details and try again.","shopify.checkout.payment.sofort_label":"Sofort bank transfer","shopify.checkout.payment.paypal_label":"PayPal","shopify.checkout.payment.paypal_wallet_label":"PayPal Wallet","shopify.checkout.payment.shop_pay_installments_label":"Shop Pay Installments","shopify.checkout.payment.paypal_modal.order_contains_subscriptions":"Subscription","shopify.checkout.payment.paypal_modal.order_contains_fixed_selling_plans":"Total may not include taxes, shipping, deferred charges, and some discounts. Continue to checkout for the amount due today.","shopify.checkout.payment.klarna_label":"Klarna","shopify.checkout.payment.klarna_pay_later_label":"Pay later with Klarna","shopify.checkout.payment.klarna_pay_now_label":"Pay now with Klarna","shopify.checkout.payment.bancontact_label":"Bancontact","shopify.checkout.payment.giropay_label":"Giropay","shopify.checkout.payment.multibanco_label":"Multibanco","shopify.checkout.payment.eps_label":"eps-Überweisung","shopify.checkout.payment.klarna_slice_it_label":"Finance with Klarna","shopify.checkout.payment.ideal_label":"iDEAL","shopify.checkout.payment.bank_picker_label":"Bank","shopify.checkout.payment.afterpay_label":"Afterpay","shopify.checkout.payment.cashapppay_label":"Cash App Pay","shopify.checkout.payment.przelewy24_label":"Przelewy24","shopify.checkout.payment.twint_label":"Twint","shopify.checkout.payment.mobilepay_label":"MobilePay","shopify.checkout.payment.purchase_options_card_update_agreement_label_html":"By updating your payment method, you authorize payments for any recurring or deferred purchase according to this store's <a class=\"link--small\" data-modal=\"true\" data-title-text=\"%{cancellation_policy}\" href=\"%{policy_href}\">cancellation policy</a>.","shopify.checkout.payment.subscription_card_update_agreement_label":"Changing the payment method will update your subscription and future recurring payments.","shopify.checkout.payment.subscription_agreement_label":"One or more items in your cart is a deferred or subscription purchase. By continuing with your payment, you agree that your payment method will automatically be charged at the price and frequency listed on this page until it ends or you cancel. All cancellations are subject to the %{cancelled}.","shopify.checkout.payment.subscription_agreement_cancelled":"cancellation policy","shopify.checkout.payment.subscription_heading":"Subscription agreement","shopify.checkout.payment.subscription_agreement_label_html":"I understand that I'm agreeing to a subscription. It will renew at the price and frequency listed until it ends or is\n<a class=\"link--small\" data-modal=\"true\" data-title-text=\"%{subscription_policy}\" href=\"%{policy_href}\">cancelled</a>.\n","shopify.checkout.payment.purchase_options_agreement_label":"One or more items in your cart is a deferred or recurring purchase. By continuing with your payment, you agree that your payment method will automatically be charged at the price and frequency listed on this page until it ends or you cancel. All cancellations are subject to the  %{cancellation_policy_label}.","shopify.checkout.payment.purchase_options_agreement_label_html":"I understand that one or more items in my cart is a deferred or recurring purchase. By continuing, I agree to the\n<a class=\"link--small\" data-modal=\"true\" data-title-text=\"%{subscription_policy}\" href=\"%{policy_href}\">cancellation policy</a>\nand authorize you to charge my payment method at the prices, frequency and dates listed on this page until my\norder is fulfilled or I cancel, if permitted.\n","shopify.checkout.payment.purchase_options_agreement_label_wallets":"By continuing with your payment, you agree to the future charges listed on this page and the cancellation policy.","shopify.checkout.payment.change_currency_section_description":"Select a currency option","shopify.checkout.payment.no_real_orders_dev_store":"This store can't accept real orders or real payments.","shopify.checkout.payment.waiting_on_payment_methods":"Getting available payment methods...","shopify.checkout.payment.apple_pay_payment_error":"Your payment couldn't be completed. Try again or use a different payment method.","shopify.checkout.payment.taxes_not_included":"Taxes not included","shopify.checkout.payment.no_taxes_banner_content":"Taxes won’t be charged on this order. Once you’ve collected payment, taxes can no longer be added.","shopify.checkout.payment.paypal.connect":"Click to connect your PayPal account","shopify.checkout.payment.apple.connect":"Click to connect your Apple Pay account","shopify.checkout.payment.apple.not_available":"Apple Pay is not available in this browser. To connect your Apple Pay account you'll need to use Safari on an Apple device.","shopify.checkout.payment.google.connect":"Click to connect with your Google Pay account","shopify.checkout.payment.google.error_authorizing":"Error authorizing payment","shopify.checkout.payment.account_connected":"Account connected.","shopify.checkout.payment.mor_disclaimer_html":"By clicking below and completing your order, you agree to purchase your item(s) from Global-e as merchant of record\nfor this transaction, on Global-e's <a class=\"link--small\" data-modal=\"true\" data-title-text=\"%{mor_terms}\" href=\"%{terms_href}\">Terms and Conditions</a>\nand <a class=\"link--small\" data-modal=\"true\" data-title-text=\"%{privacy_policy}\" href=\"%{policy_href}\">Privacy Policy</a>. Global-e is an international\nfulfilment service provider to %{shop_name}\n","shopify.checkout.payment.pending_payment.due_notice":"Your payment of %{amount_due} is due on %{due_date}.","shopify.checkout.payment.pending_payment.multibanco.buyer_action_info":"Your payment of %{amount_due} is due.","shopify.checkout.payment.pending_payment.multibanco.instruction_html":"Make your payment at Multibanco or online using the details below. For questions or to update payment details, %{contact_us}.","shopify.checkout.payment.pending_payment.multibanco.entity":"Entity","shopify.checkout.payment.pending_payment.multibanco.reference":"Reference","shopify.checkout.payment.pending_payment.multibanco.amount":"Amount","shopify.checkout.payment.pending_payment.multibanco.find_nearest_atm":"Find Nearest ATM","shopify.checkout.payment.update_payment_method":"Update payment method","shopify.checkout.payment.order_covered_by_store_credit_notice":"Your order is covered by your store credit.","shopify.checkout.payment.order_covered_by_redeemables_notice":"Your order is covered.","shopify.checkout.payment.store_credit.label":"Store credit","shopify.checkout.payment.store_credit.apply_label":"Apply store credit","shopify.checkout.payment.store_credit.add_label":"Add store credit","shopify.checkout.payment.store_credit.manage_label":"Manage store credit","shopify.checkout.payment.store_credit.buying_gift_card":"You can’t use store credit to buy a gift card","shopify.checkout.payment.store_credit.no_fixed_selling_plans":"You can’t use store credit with deferred purchase options","shopify.checkout.payment.clear":"Clear","shopify.checkout.payment.billing_must_match_shipping_notice":"Your payment method’s billing address must match the shipping address.","shopify.checkout.payment.same_billing_address_checkbox_label":"Use shipping address as billing address","shopify.checkout.payment.location_billing_address_label":"Location billing address","shopify.checkout.payment.fact_billing_address_label":"Billing address","shopify.checkout.payment.location_shipping_address_label":"Location shipping address","shopify.checkout.payment.use_order_billing_address_label":"Use order billing address","shopify.checkout.payment.use_location_billing_address_label":"Use location billing address","shopify.checkout.payment.use_location_shipping_address_label":"Use location shipping address","shopify.checkout.payment.no_working_method_error":"This store can’t accept payments right now. Refresh this page or come back later.","shopify.checkout.payment.brand_not_available":"This store doesn't accept {{brand}}. Please use a different card to pay.","shopify.checkout.payment.shipping_rate_updated":"Available shipping methods have been updated. Confirm your choice before checking out.","shopify.checkout.payment.billing_address_invalid_phone":"Update the phone number in your billing address for {{label}} {{last_digits}} to continue.","shopify.checkout.payment.billing_address_invalid_phone_no_card":"Update the phone number in your billing address to continue.","shopify.checkout.payment.preview_not_available.title":"Preview not available","shopify.checkout.payment.preview_not_available.content":"Don’t worry, this express checkout works for your customers.","shopify.checkout.payment.preview_not_available.button":"Ok","shopify.checkout.payment.card_fields.errors.required.issue_date":"Enter a valid issue date","shopify.checkout.payment.card_fields.errors.required.issue_number":"Enter a valid issue number","shopify.checkout.payment.card_fields.errors.invalid.verification_value":"Enter a valid CVV or security code","shopify.checkout.payment.simulated_checkout":"Preview coming soon","shopify.checkout.payment.vaulting_agreement_label":"Save my payment information with %{company} for a faster checkout.","shopify.checkout.payment.business_customer_vaulting_payment_label":"Save this card at checkout and authorize %{company} to charge it for future purchases for this location. All contacts assigned to this location can use the card.","shopify.checkout.payment.purchase_options_and_vaulting_agreement_label":"One or more items in your cart is a deferred or subscription purchase. By continuing with your payment, you agree that your payment method will automatically be charged at the price and frequency listed on this page until it ends or you cancel. All cancellations are subject to the %{cancellation_policy_label}.","shopify.checkout.payment.purchase_options_cancellation_policy_label":"cancellation policy","shopify.checkout.payment.use_different_credit_card_label":"Use a different card","shopify.checkout.payment.saved_credit_card":"Your saved credit card","shopify.checkout.payment.saved_credit_card_info":"Last four digits","shopify.checkout.payment.saved_credit_card_cvv_verification":"For verification purposes, please enter your card's security code.","shopify.checkout.payment.saved_credit_card_actions.edit":"Edit","shopify.checkout.payment.saved_credit_card_actions.delete":"Delete","shopify.checkout.payment.saved_credit_cards_modal.view_all_label":"View all saved cards","shopify.checkout.payment.saved_credit_cards_modal.done":"Done","shopify.checkout.payment.saved_credit_cards_modal.cancel":"Cancel","shopify.checkout.payment.add_credit_card_modal.title":"Add card","shopify.checkout.payment.add_credit_card_modal.save":"Save","shopify.checkout.payment.add_credit_card_modal.cancel":"Cancel","shopify.checkout.payment.delete_credit_card_modal.title":"Delete card","shopify.checkout.payment.delete_credit_card_modal.confirmation":"Are you sure you want to delete the {{brandName}} ending in {{lastDigits}}?","shopify.checkout.payment.delete_credit_card_modal.cancel":"Cancel","shopify.checkout.payment.delete_credit_card_modal.delete":"Delete","shopify.checkout.payment.edit_credit_card_modal.title":"Edit card","shopify.checkout.payment.edit_credit_card_modal.done":"Done","shopify.checkout.payment.edit_credit_card_modal.cancel":"Cancel","shopify.checkout.payment.edit_credit_card_modal.description":"You can only modify the billing address of your card.","shopify.checkout.payment.edit_credit_card_modal.fields.default":"Set as default","shopify.checkout.payment.edit_credit_card_modal.fields.card_number":"Card number","shopify.checkout.payment.edit_credit_card_modal.fields.expiry":"Expiration date","shopify.checkout.payment.edit_credit_card_modal.fields.security_code":"Security code","shopify.checkout.payment.edit_credit_card_modal.fields.name":"Name on card","shopify.checkout.payment.edit_credit_card_modal.fields.billing":"Bill to","shopify.checkout.payment.expired_cards_info.one":"There is %{count} expired card, which you can view and edit in your account.","shopify.checkout.payment.expired_cards_info.other":"There are %{count} expired cards, which you can view and edit in your account.","shopify.checkout.payment.local_payment_method_receiver_notice":"After placing your order, you will receive payment details. Make the payment at an ATM or online within {{dueDays}} days.","shopify.checkout.payment.order_edit_banner_title":"Payment of {{amount_owed}} is needed","shopify.checkout.payment.order_edit_banner_subtitle":"Your order {{order_number}} was updated. Review these changes, then pay to confirm your order.","shopify.checkout.payment.order_edit_banner_items_added.one":"Added","shopify.checkout.payment.order_edit_banner_items_added.other":"Added %{count}","shopify.checkout.payment.order_edit_banner_items_removed.in_full":"Removed","shopify.checkout.payment.order_edit_banner_items_removed.with_quantities":"Removed {{delta}} of {{quantity}}","shopify.checkout.payment.order_edit_banner_items_returned.in_full":"Returned {{quantity}}","shopify.checkout.payment.order_edit_banner_items_returned.with_quantities":"Returned {{delta}} of {{quantity}}","shopify.checkout.payment.order_edit_banner_items_return_line_item_removed.in_full":"Removed from return","shopify.checkout.payment.order_edit_banner_items_return_line_item_removed.with_quantities":"Removed {{delta}} from return","shopify.checkout.payment.order_edit_banner_single_item_added":"Added","shopify.checkout.payment.order_edit_banner_multiple_items_added":"Added {{amount}}","shopify.checkout.payment.order_edit_banner_single_item_removed":"Removed","shopify.checkout.payment.order_edit_banner_multiple_items_removed":"Removed {{amount}}","shopify.checkout.payment.order_edit_banner_single_item_returned":"Returned","shopify.checkout.payment.order_edit_banner_multiple_items_returned":"Returned {{amount}}","shopify.checkout.payment.order_edit_banner_single_item_return_line_item_removed":"Removed from return","shopify.checkout.payment.order_edit_banner_multiple_items_return_line_item_removed":"Removed {{amount}} from return","shopify.checkout.payment.order_edit_banner_updated_order_label":"Updated order","shopify.checkout.payment.gift_card_wrapper.heading":"Gift card","shopify.checkout.payment.gift_card_wrapper.apply_gift_card_label":"Apply a gift card","shopify.checkout.payment.gift_card_wrapper.apply_another_gift_card_label":"Apply another gift card","shopify.checkout.payment.gift_card_wrapper.gift_card_label":"Gift card %{identifier}","shopify.checkout.payment.gift_card_wrapper.payment_tag":"Gift card","shopify.checkout.payment.gift_card_wrapper.add_label":"Add a gift card","shopify.checkout.payment.gift_card_wrapper.manage_label":"Manage gift cards","shopify.checkout.payment.gift_card_store_credit.add_label":"Add a gift card or store credit","shopify.checkout.payment.gift_card_store_credit.manage_label":"Manage gift cards or store credit","shopify.checkout.payment.gift_card_checkbox_label":"Apply gift card","shopify.checkout.payment.custom_onsite_payment_method_modal.title":"Custom Onsite Payment Confirmation","shopify.checkout.payment.markets_pro_disclaimer_label":"By clicking below and completing your order, you agree to purchase your item(s) from Global-e as merchant of record for this transaction, on Global-e's %{markets_pro_terms} and %{privacy_policy}. Global-e is an international fulfilment service provider to %{shop_name}","shopify.checkout.payment.markets_pro_disclaimer_terms_and_conditions":"Terms and Conditions","shopify.checkout.payment.markets_pro_disclaimer_privacy_policy":"Privacy Policy","shopify.checkout.payment.markets_pro_disclaimer_terms_and_conditions_title":"Merchant of Record Terms and Conditions","shopify.checkout.payment.markets_pro_disclaimer_privacy_policy_title":"Merchant of Record Privacy Policy","shopify.checkout.payment.purchase_order_number.title":"PO number","shopify.checkout.payment.purchase_order_number.label":"PO number (optional)","shopify.checkout.payment.alternative_payment_currency_total_notice":"Note: you will be charged %{amount_due}.","shopify.checkout.payment.alternative_payment_currency_total_manual_payment_notice":"Note: converted total is %{amount_due}.","shopify.checkout.payment.waiting_on_taxes_message":"If your taxes don't calculate within the next few seconds, refresh the page.","shopify.checkout.payment.waiting_on_taxes_notice":"Calculating taxes","shopify.checkout.payment.payment_method":"Payment method","shopify.checkout.payment.expired_payment_method":"Selected payment method has expired","shopify.checkout.payment.payment_method_update_failed":"Payment method update failed.","shopify.checkout.payment.proposed_gateway_unavailable":"The proposed payment gateway is unavailable","shopify.checkout.payment.pay_in_installments_split_pay_short":"4 payments of %{amount}","shopify.checkout.payment.gift_cards_unavailable":"Your gift card can no longer be applied to this order and has been removed","shopify.checkout.payment.payment_flexibility_terms_id_mismatch":"Payment flexibility terms ID mismatch","shopify.checkout.billing.billing_address_title":"Bill to","shopify.checkout.billing.same_as_shipping":"Same as shipping address","shopify.checkout.billing.add_address":"Use a different address","shopify.checkout.billing.edit":"Edit","shopify.checkout.billing.delete":"Delete","shopify.checkout.billing.address_more":"More actions for this address","shopify.checkout.billing.address_edit":"Edit address","shopify.checkout.billing.address_delete":"Delete address","shopify.checkout.billing.address_confirm":"Are you sure you want to delete this address from your account?","shopify.checkout.billing.address_form.add_address":"Add address","shopify.checkout.billing.address_form.save":"Save","shopify.checkout.billing.address_form.cancel":"Cancel","shopify.checkout.company_location.location_title":"Location","shopify.checkout.payment_summary.gift_card_current_balance_notice":"Current balance %{amount}","shopify.checkout.payment_summary.credit_card_expires_on_notice":"Expires on %{month}/%{year}","shopify.checkout.payment_summary.express_payment_gateway_label":"Express","shopify.checkout.payment_summary.manual_payment_gateway_label":"Manual","shopify.checkout.payment_summary.billing_address_title":"Billing address","shopify.checkout.payment_summary.free_label":"Free","shopify.checkout.field_errors.handle_phone_invalid":"Enter a valid phone number","shopify.checkout.field_errors.handle_email_invalid":"Enter a valid email","shopify.checkout.field_errors.email_invalid":"Enter a valid email","shopify.checkout.field_errors.email_or_phone_blank":"Enter an email or phone number","shopify.checkout.field_errors.email_or_phone_invalid":"Enter a valid email or a mobile phone number","shopify.checkout.field_errors.address_first_name_blank":"Enter a first name","shopify.checkout.field_errors.address_first_name_too_long":"First name is too long (maximum is 255 characters)","shopify.checkout.field_errors.address_first_name_contains_emojis":"First name cannot contain emojis","shopify.checkout.field_errors.address_first_name_contains_html_tags":"First name cannot contain HTML tags.","shopify.checkout.field_errors.address_first_name_contains_url":"First name cannot contain a URL","shopify.checkout.field_errors.address_first_name_contains_mathematical_symbols":"First name cannot contain mathematical symbols","shopify.checkout.field_errors.address_last_name_blank":"Enter a last name","shopify.checkout.field_errors.address_last_name_too_long":"Last name is too long (maximum is 255 characters)","shopify.checkout.field_errors.address_last_name_contains_emojis":"Last name cannot contain emojis","shopify.checkout.field_errors.address_last_name_contains_html_tags":"Last name cannot contain HTML tags.","shopify.checkout.field_errors.address_last_name_contains_url":"Last name cannot contain a URL","shopify.checkout.field_errors.address_last_name_contains_mathematical_symbols":"Last name cannot contain mathematical symbols","shopify.checkout.field_errors.address_address1_blank":"Enter an address","shopify.checkout.field_errors.address_address1_too_long":"The first address line is too long (maximum is 255 characters)","shopify.checkout.field_errors.address_address1_contains_emojis":"Address1 cannot contain emojis","shopify.checkout.field_errors.address_address1_contains_html_tags":"Address1 cannot contain HTML tags.","shopify.checkout.field_errors.address_address1_contains_mathematical_symbols":"The first address line cannot contain mathematical symbols","shopify.checkout.field_errors.address_address2_blank":"Enter an apartment, suite, etc.","shopify.checkout.field_errors.address_address2_too_long":"The second address line is too long (maximum is 255 characters)","shopify.checkout.field_errors.address_address2_contains_emojis":"Address2 cannot contain emojis","shopify.checkout.field_errors.address_address2_contains_html_tags":"Address2 cannot contain HTML tags.","shopify.checkout.field_errors.address_address2_contains_mathematical_symbols":"The second address line cannot contain mathematical symbols","shopify.checkout.field_errors.address_city_blank":"Enter a city","shopify.checkout.field_errors.address_city_too_long":"City is too long (maximum is 255 characters)","shopify.checkout.field_errors.address_city_contains_emojis":"City cannot contain emojis","shopify.checkout.field_errors.address_city_contains_html_tags":"City cannot contain HTML tags.","shopify.checkout.field_errors.address_city_contains_mathematical_symbols":"City cannot contain mathematical symbols","shopify.checkout.field_errors.address_country_blank":"Select a country/region","shopify.checkout.field_errors.address_country_not_supported":"We don't ship to this country or region. Enter a new shipping address and try again.","shopify.checkout.field_errors.address_province_blank":"Select a state / province","shopify.checkout.field_errors.address_province_invalid":"Select a valid state / province","shopify.checkout.field_errors.address_company_blank":"Enter a company name","shopify.checkout.field_errors.address_company_too_long":"Company name is too long (maximum is 255 characters)","shopify.checkout.field_errors.address_company_contains_emojis":"Company cannot contain emojis","shopify.checkout.field_errors.address_company_contains_html_tags":"Company cannot contain HTML tags.","shopify.checkout.field_errors.address_company_contains_mathematical_symbols":"Company cannot contain mathematical symbols","shopify.checkout.field_errors.address_phone_blank":"Enter a valid phone number","shopify.checkout.field_errors.address_phone_contains_emojis":"Phone number cannot contain emojis","shopify.checkout.field_errors.address_phone_invalid":"Enter a valid phone number","shopify.checkout.field_errors.address_zip_blank":"Enter a ZIP / postal code","shopify.checkout.field_errors.address_zip_too_long":"ZIP / postal code is too long (maximum is 255 characters)","shopify.checkout.field_errors.address_zip_not_supported":"This location isn't supported","shopify.checkout.field_errors.address_zip_invalid_for_country":"Enter a valid ZIP / postal code for %{country}","shopify.checkout.field_errors.address_zip_invalid_for_province":"Enter a valid ZIP / postal code for %{province}","shopify.checkout.field_errors.address_zip_invalid_for_country_and_province":"Enter a valid ZIP / postal code for %{province}, %{country}","shopify.checkout.field_errors.address_zip_contains_emojis":"ZIP / postal code cannot contain emojis","shopify.checkout.field_errors.address_zip_contains_mathematical_symbols":"ZIP / postal code cannot contain mathematical symbols","shopify.checkout.field_errors.address_generic_blank":"Required field","shopify.checkout.field_errors.address_generic_invalid":"Invalid entry","shopify.checkout.field_errors.address_generic_error":"Field error","shopify.checkout.field_errors.credit_card_name_blank":"Enter your name exactly as it’s written on your card","shopify.checkout.field_errors.credit_card_name_invalid":"Enter your name exactly as it’s written on your card","shopify.checkout.field_errors.credit_card_number_invalid":"Enter a valid card number","shopify.checkout.field_errors.credit_card_expiry_invalid":"Enter a valid expiration date","shopify.checkout.field_errors.credit_card_month_invalid":"Enter a valid expiration month","shopify.checkout.field_errors.credit_card_year_invalid":"Enter a valid expiration year","shopify.checkout.field_errors.credit_card_start_invalid":"Enter a valid card start date","shopify.checkout.field_errors.credit_card_start_month_invalid":"Enter a valid card start month","shopify.checkout.field_errors.credit_card_start_year_invalid":"Enter a valid card start year","shopify.checkout.field_errors.credit_card_number_blank":"Enter a card number","shopify.checkout.field_errors.credit_card_verification_value_blank":"Enter the CVV or security code on your card","shopify.checkout.field_errors.delivery_line_detail_changed":"Some delivery details may have changed. Verify your shipping method and try again.","shopify.checkout.field_errors.delivery_zone_not_found":"The specified zone was not found in the specified country.","shopify.checkout.field_errors.reduction_code_code_not_found":"Enter a valid discount code or gift card","shopify.checkout.field_errors.reduction_code_discount_not_found":"Enter a valid discount code","shopify.checkout.field_errors.reduction_code_gift_card_code_invalid":"Enter a valid gift card","shopify.checkout.field_errors.reduction_code_gift_card_unusable":"You can’t use a gift card to buy another gift card","shopify.checkout.field_errors.reduction_code_gift_cards_not_supported_with_deferred_purchase_options":"Gift cards are not supported with deferred purchase options.","shopify.checkout.field_errors.shipping_line_phone_blank":"Enter a phone number to use this delivery method","shopify.checkout.field_errors.shipping_line_phone_invalid":"Enter a valid phone number","shopify.checkout.field_errors.tips_invalid_tip_amount":"Enter a tip less than %{amount}","shopify.checkout.field_errors.gift_card_already_applied":"This gift card has already been applied to your order","shopify.checkout.field_errors.gift_card_disabled":"This gift card is no longer available","shopify.checkout.field_errors.gift_card_expired":"This gift card has expired","shopify.checkout.field_errors.gift_card_depleted":"This gift card has no funds left","shopify.checkout.field_errors.gift_card_currency_mismatch":"Only gift cards in %{checkout_currency} can be used with this order","shopify.checkout.field_errors.gift_cards_not_supported_with_deferred_purchase_options":"Gift cards are not supported with deferred purchase options.","shopify.checkout.field_errors.gift_card_buying_gift_card":"You can't use a gift card to buy another gift card","shopify.checkout.field_errors.payment_gateway_missing":"Choose a payment method.","shopify.checkout.field_errors.payment_gateway_needs_paid_plan_error":"This payment method isn’t available on the store right now","shopify.checkout.field_errors.payment_gateway_not_in_test_mode":"isn't setup to test orders. This store can't accept real orders or real payments.","shopify.checkout.field_errors.payment_gateway_incompatible_with_multi_currency":"To complete this checkout in your local currency, you need to pay by credit card.","shopify.checkout.field_errors.payment_gateway_unsupported_for_subscriptions":"This payment method isn't available for subscription orders.","shopify.checkout.field_errors.payment_gateway_unsupported_for_deferred_purchase_options":"This payment method isn't available for deferred purchase options.","shopify.checkout.field_errors.payment_gateway_unsupported_for_country":"This payment method isn't available for your shipping country.","shopify.checkout.field_errors.payment_gateway_unsupported_for_development_store_html":"To place a test order, you’ll need to use a test payment gateway. Learn more about <a href=\"%{docs_link}\">testing orders in development stores</a>.","shopify.checkout.field_errors.payment_gateway_unsupported_for_order_above_maximum_orders_html":"You’ve reached the limit for development store orders with this payment processor. To place another order, you’ll need to use a test payment gateway. Learn more about <a href=\"%{docs_link}\">testing orders in development stores</a>.","shopify.checkout.field_errors.purchase_options_agreement_blank":"To continue with your purchase, agree to the deferred or recurring purchase terms.","shopify.checkout.field_errors.physical_gift_card_invalid_quantity":"Physical gift card line items must have a quantity that matches the number of gift card codes.","shopify.checkout.field_errors.physical_gift_card_duplicate_code":"Physical gift card line item contains duplicate code.","shopify.checkout.field_errors.physical_gift_card_invalid_code":"Physical gift card code is invalid.","shopify.checkout.field_errors.email_blank":"Enter an email","shopify.checkout.field_errors.phone_blank":"Enter a phone number","shopify.checkout.field_errors.address_country_invalid":"Select a country/region from the list","shopify.checkout.field_errors.address_zip_invalid":"Enter a valid ZIP / postal code","shopify.checkout.field_errors.gift_card_invalid":"Gift card \"••••%{last_four_characters}\" is no longer valid","shopify.checkout.field_errors.vaulting_agreement_blank":"Your card must be saved because payment for the balance of this order is due later.","shopify.checkout.field_errors.sms_marketing_phone_invalid":"Enter a valid phone number","shopify.checkout.field_errors.address_suggestion_did_you_mean_html":"Did you mean %{html}?","shopify.checkout.field_errors.split_cart_international_shipping_not_supported":"All items must use the same delivery method when shipping internationally. Update the delivery method or create multiple orders.","shopify.checkout.store_credit_errors.generic_error":"There was a problem with your store credit. Try again or reload the page.","shopify.checkout.redeemable_errors.gift_card.duplicate":"The gift card has already been applied to your order","shopify.checkout.redeemable_errors.gift_card.insufficient_funds":"This gift card has no funds left","shopify.checkout.redeemable_errors.gift_card.expired":"This gift card has expired","shopify.checkout.redeemable_errors.gift_card.not_available":"This gift card is no longer available","shopify.checkout.redeemable_errors.gift_card.invalid":"Enter a valid gift card","shopify.checkout.redeemable_errors.gift_card.currency_mismatch":"Only gift cards in %{shop_currency} are accepted","shopify.checkout.redeemable_errors.gift_card.generic":"The gift card could not be added to checkout","shopify.checkout.redeemable_errors.gift_card.throttle_limit_exceeded":"You have exceeded the maximum number of attempts. Try again later.","shopify.checkout.redeemable_errors.gift_card.no_longer_available":"This gift card can no longer be used with this checkout","shopify.checkout.payment_errors.amount_too_small":"The minimum payment amount must be higher than $0.50 USD. Please try again with a higher amount.","shopify.checkout.payment_errors.method_not_available":"The requested payment method is not available. Choose another payment method and try again.","shopify.checkout.payment_errors.available_methods_updated":"Available payment methods have been updated.","shopify.checkout.payment_errors.generic_error":"There was an issue processing your payment. Try again or use a different payment method.","shopify.checkout.payment_errors.rejected_transaction":"Your payment was declined. Try again or use a different payment method.","shopify.checkout.payment_errors.credit_card_processing":"Your payment can’t be processed for technical reasons. Try again in a few minutes or use a different payment method.","shopify.checkout.payment_errors.checkout_amount_changed":"Your payment couldn't be processed because the amount due at checkout has changed. Please check your order and try again.","shopify.checkout.payment_errors.deferred_payment_not_allowed":"Deferred payments are not allowed. Please check your order and try again.","shopify.checkout.payment_errors.deferred_payment_required":"This order requires a deferred payment. Please check your order and try again.","shopify.checkout.payment_errors.deferred_amount_changed":"Your payment couldn't be processed because the deferred payment amount has changed. Please check your order and try again.","shopify.checkout.payment_errors.deferred_date_changed":"Your payment couldn't be processed because the deferred payment date has changed. Please check your order and try again.","shopify.checkout.payment_errors.order_total_changed":"Your order total has changed. Review and try again.","shopify.checkout.payment_errors.payment_processing":"Your payment can’t be processed for technical reasons. Try again or use a different payment method.","shopify.checkout.payment_errors.payment_processing_no_retry":"Your payment can’t be processed for technical reasons. Please try a different payment method.","shopify.checkout.payment_errors.paypal_zero_amount":"You can’t use PayPal for %{amount} orders. Confirm your order is correct and check out without PayPal.","shopify.checkout.payment_errors.paypal_invalid_token":"PayPal wasn't available. Try again or use a different checkout option.","shopify.checkout.payment_errors.pay_later_failed":"There was an error processing your payment with Pay later. Choose another payment method and try again.","shopify.checkout.payment_errors.three_d_secure_failed":"Your payment couldn’t be verified. Try again or use a different payment method.","shopify.checkout.payment_errors.three_d_secure_failed_duplicate":"The credit card's 3D Secure authentication failed because another is already in progress.","shopify.checkout.payment_errors.three_d_secure_throttled":"Too many attempts; please wait before trying again","shopify.checkout.payment_errors.subscription_agreement_blank":"To buy a subscription your payment details need to be saved. To continue, confirm that you agree or remove subscription items from you order.","shopify.checkout.payment_errors.insufficient_funds":"Your payment was declined due to insufficient funds. Try again or use a different payment method.","shopify.checkout.payment_errors.multiple_deferred_payment_not_allowed":"Only one deferred payment allowed per request. Please check your request and try again.","shopify.checkout.payment_errors.shipping_must_match_billing":"Billing address must match shipping address. Please use a different payment method.","shopify.checkout.payment_errors.decision_rule_block":"There was an issue processing your payment. Please contact the store owner.","shopify.checkout.payment_errors.pick_up_card":"Your card was declined. Try again or use a different payment method.","shopify.checkout.payment_errors.cannot_verify":"Your payment details couldn’t be verified. Check your card details and try again.","shopify.checkout.payment_errors.invalid_number":"Enter a valid card number","shopify.checkout.payment_errors.invalid_expiry_date":"Enter a valid expiration date","shopify.checkout.payment_errors.invalid_cvc":"Enter a valid security code","shopify.checkout.payment_errors.expired_card":"Your card has expired. Use a different payment method.","shopify.checkout.payment_errors.card_declined":"Your card was declined. Try again or use a different payment method.","shopify.checkout.payment_errors.processing_error":"There was an issue processing your payment. Try again or use a different payment method.","shopify.checkout.payment_errors.processing_error_checkout_as_guest":"There was an issue processing your payment. Try again with a different payment method or {{checkout_as_guest_link}}.","shopify.checkout.payment_errors.selected_payment_method":"There was an issue with your selected payment method and you haven't been charged. Try again or use a different payment method.","shopify.checkout.payment_errors.payment_method_billing_address":"There was an issue with your selected payment method's billing address and you haven't been charged. Check the address and try again or use a different payment method.","shopify.checkout.payment_errors.call_issuer":"Your card was declined. Use a different payment method or contact your bank for more information.","shopify.checkout.payment_errors.test_mode_live_card":"This store can’t accept real orders or real payments.","shopify.checkout.payment_errors.transient_error":"There was a problem processing your payment. Try refreshing this page or check your internet connection.","shopify.checkout.payment_errors.missing_shipping_address":"Your payment couldn’t be processed because your shipping address is missing. Add a shipping address and try again.","shopify.checkout.payment_errors.invalid_shipping_address":"Your payment couldn’t be processed because we couldn’t find your shipping address. Check your shipping address and try again.","shopify.checkout.payment_errors.successful_offsite_with_gift_card_error":"There was an issue processing your gift card payment. Try again or use a different payment method.","shopify.checkout.payment_errors.development_store_order_limit_reached":"You’ve reached the limit for development store orders with this payment processor. To place another order, you’ll need to use a test payment gateway. Learn more about %{development_store_order_testing_docs_link}.","shopify.checkout.payment_errors.development_store_with_order_limit":"To place a test order, you’ll need to use a test payment gateway. Learn more about %{development_store_order_testing_docs_link}.","shopify.checkout.payment_errors.development_store_order_testing_docs_link":"testing orders in development stores","shopify.checkout.payment_errors.payment_above_threshold":"The payment amount is above the monetary limit for this region. Reduce the total and try again","shopify.checkout.payment_errors.risky":"There was an issue processing your payment. Try again or use a different payment method.","shopify.checkout.shipping_errors.shipping_method":"The shipping options have changed for your order. Review your selection and try again.","shopify.checkout.shipping_errors.shipping_method_not_available":"Your cart has been updated and the items you added can’t be shipped to your address. Remove the items to complete your order.","shopify.checkout.shipping_errors.shipping_method_not_available_generic.one":"Your order cannot be shipped to the selected address. Review your address to ensure it's correct and try again, or select a different address.","shopify.checkout.shipping_errors.shipping_method_not_available_generic.other":"Some items in your cart can’t be shipped to the address you entered. Review your address to ensure it's correct and try again, or select a different address.","shopify.checkout.shipping_errors.shipping_method_not_available_due_to_unsatisfied_conditions":"Items in the cart do not meet price or weight requirements to qualify for shipping. Update your cart and try again.","shopify.checkout.shipping_errors.shipping_method_not_available_updated.one":"The item you added doesn’t ship to your location. Remove it to check out, or contact the store.","shopify.checkout.shipping_errors.shipping_method_not_available_updated.other":"One or more items you added don’t ship to your location. Remove them to check out, or contact the store.","shopify.checkout.shipping_errors.payment_method_not_supported":"You can't use this payment method for %{country}. Please use a different payment method to ship to this country.","shopify.checkout.shipping_errors.empty_state":"Enter your shipping address to view available shipping methods.","shopify.checkout.shipping_errors.title":"Shipping not available","shopify.checkout.alternative_payment_method_banner.express_checkout":"Express checkout","shopify.checkout.alternative_payment_method_banner.or":"OR","shopify.checkout.alternative_payment_method_banner.or_pay_another_way":"Or pay another way","shopify.checkout.alternative_payment_method_banner.or_check_out_another_way":"Or check out another way","shopify.checkout.alternative_payment_method_banner.or_pay_with_credit_card":"Or pay with credit card","shopify.checkout.alternative_payment_method_banner.show_more_options":"Show more options","shopify.checkout.alternative_payment_method_banner.hide_more_options":"Hide more options","shopify.checkout.post_purchase.page_title":"Post-purchase","shopify.checkout.post_purchase.title":"Post-purchase","shopify.checkout.post_purchase.escape_confirmation":"You’ve paid for your order.","shopify.checkout.post_purchase.escape_action":"View order confirmation ›","shopify.checkout.post_purchase.components.close":"Close","shopify.checkout.post_purchase.components.expand":"View more","shopify.checkout.post_purchase.components.processing":"Processing…","shopify.checkout.post_purchase.components.submit":"Submit","shopify.checkout.processing.redirecting_page_title":"Redirecting…","shopify.checkout.processing.redirecting_title":"Redirecting…","shopify.checkout.processing.redirecting_notice":"Wait while we redirect you.","shopify.checkout.processing.redirecting_to_bank":"Redirecting to {{bank}}","shopify.checkout.processing.complete_your_purchase_title":"Complete your purchase","shopify.checkout.processing.continue_to_payment_gateway_notice":"Continue to payment to add your payment information.","shopify.checkout.processing.continue_to_payment_gateway_button_label":"Continue to payment","shopify.checkout.processing.complete_your_purchase_title_error":"Correct your payment information","shopify.checkout.processing.continue_to_payment_gateway_notice_error":"Your payment information couldn’t be verified.","shopify.checkout.processing.continue_to_payment_gateway_button_label_error":"Update payment information","shopify.checkout.processing.page_title":"Processing order","shopify.checkout.processing.title":"Processing order","shopify.checkout.processing.your_order_has_been_received_title":"Thanks for your order","shopify.checkout.processing.you_will_receive_confirmation":"We’re getting a lot of orders right now. You should receive confirmation by email or text soon. If you don't receive it in the next hour, let us know.","shopify.checkout.processing.you_will_not_be_charged":"You won't be charged yet","shopify.checkout.processing.wait.short":"Your order’s being processed.","shopify.checkout.processing.wait.medium.one":"Your order’s being processed. Estimated wait time is %{count} minute.","shopify.checkout.processing.wait.medium.other":"Your order’s being processed. Estimated wait time is %{count} minutes.","shopify.checkout.processing.wait.long":"You’ll receive an email as soon as your order’s processed. There’s currently a high volume of orders.","shopify.checkout.processing.wait.no_auto_refresh_html":"If you’re not automatically redirected, %{link}.","shopify.checkout.processing.wait.refresh_this_page":"refresh this page","shopify.checkout.processing.action_required":"Action required","shopify.checkout.failed_payment.page_title":"Payment couldn’t be processed","shopify.checkout.failed_payment.title":"Payment couldn’t be processed","shopify.checkout.failed_payment.payment_not_processed_title":"Your payment couldn’t be processed","shopify.checkout.failed_payment.payment_not_processed_text":"You haven’t been charged. Return to your cart to complete your purchase.","shopify.checkout.failed_payment.return_to_cart_button_label":"Return to cart","shopify.checkout.payment_gateway.credit_card_label":"Credit card","shopify.checkout.payment_gateway.bank_deposit_label":"Bank Deposit","shopify.checkout.payment_gateway.cash_on_delivery_label":"Cash on Delivery (COD)","shopify.checkout.payment_gateway.money_order_label":"Money Order","shopify.checkout.payment_gateway.debit_card_label":"Debit card","shopify.checkout.payment_gateway.deferred_payment_label":"Choose payment method later","shopify.checkout.payment_gateway.fixed_payment_label":"Your payment will be due on {{dueDate}}.","shopify.checkout.payment_gateway.generic_payment_terms":"You’re on {{translatedName}} terms. Your payment will be due on {{dueDate}}.","shopify.checkout.payment_gateway.login_prompt.no_access.message":"{{logIn}} to an account with access to this location to add or use saved payment methods.","shopify.checkout.payment_gateway.login_prompt.no_access.link":"Log in","shopify.checkout.payment_gateway.direct_payment_terms":"You’re on {{translatedName}} terms. Your card will be charged on {{dueDate}}.","shopify.checkout.payment_gateway.fixed_direct_payment_terms":"Your card will be charged on {{dueDate}}.","shopify.checkout.payment_gateway.order_due_on_fulfillment_choose_later":"Your payment will be due once your order is fulfilled.","shopify.checkout.payment_gateway.order_due_on_fulfillment_payment":"Your card will be charged once your order is fulfilled.","shopify.checkout.payment_gateway.order_due_on_receipt_choose_later":"Your payment will be due on receipt.","shopify.checkout.payment_gateway.order_deposit_due_now":"{{depositAmount}} is due today. The balance is on {{translatedName}} terms and is due on {{dueDate}}.","shopify.checkout.payment_gateway.order_deposit_due_on_fulfillment":"{{depositAmount}} is due today. The balance will be due once your order is fulfilled.","shopify.checkout.payment_gateway.order_deposit_due_on_receipt":"{{depositAmount}} is due today. The balance will be due later.","shopify.checkout.payment_gateway.order_deposit_due_on_fixed_date":"{{depositAmount}} is due today. The balance will be due on {{dueDate}}.","shopify.checkout.payment_gateway.draft_order_payment_due_later_no_terms":"Your payment will be due once your order is confirmed.","shopify.checkout.payment_gateway.draft_order_payment_due_later_no_terms_payment_selected":"Your card will be charged once your order is confirmed.","shopify.checkout.payment_gateway.draft_order_payment_due_later_terms":"You’ll be on {{translatedName}} terms once your order is confirmed.","shopify.checkout.payment_gateway.draft_order_payment_due_on_fulfillment":"Your payment will be due once your order has been confirmed and fulfilled.","shopify.checkout.payment_gateway.draft_order_deposit_due_later":"{{depositAmount}} will be due when your order is confirmed. The balance will be on {{translatedName}} terms.","shopify.checkout.payment_gateway.draft_order_deposit_due_on_fulfillment":"{{depositAmount}} will be due when your order is confirmed. The balance will be once your order is fulfilled.","shopify.checkout.thank_you.title":"Thank you for your purchase!","shopify.checkout.thank_you.confirmation_email_sent_text":"A confirmation email has been sent to %{email}","shopify.checkout.thank_you.return_to_store_link_label":"Continue shopping","shopify.checkout.thank_you.print_link_label":"Print receipt","shopify.checkout.thank_you.payment_information_title":"Payment information","shopify.checkout.thank_you.shipping_information_title":"Shipping information","shopify.checkout.thank_you.page_title":"Thank you, %{display_name}!","shopify.checkout.thank_you.page_title_no_name":"Thank you!","shopify.checkout.thank_you.purchase_order_number_title":"PO number #%{purchase_order_number}","shopify.checkout.thank_you.cancelled_page_title":"Order canceled","shopify.checkout.thank_you.failed_pending_payment_page_title":"There’s a problem with your payment","shopify.checkout.thank_you.customer_information_title":"Order details","shopify.checkout.thank_you.contact_information_title":"Contact information","shopify.checkout.thank_you.billing_address_title":"Billing address","shopify.checkout.thank_you.company_location_title":"Location","shopify.checkout.thank_you.shipping_address_title":"Shipping address","shopify.checkout.thank_you.shipping_address_map_title":"Google map displaying pin point of shipping address: %{address}","shopify.checkout.thank_you.payment_method_title":"Payment method","shopify.checkout.thank_you.shipping_method_title":"Shipping method","shopify.checkout.thank_you.tracking_number":"Tracking number:","shopify.checkout.thank_you.company_tracking_number":"%{company} tracking number:","shopify.checkout.thank_you.estimated_arrival":"Estimated delivery date: ","shopify.checkout.thank_you.estimated_delivery":"Current delivery estimate: ","shopify.checkout.thank_you.re-order":"Re-order the same items","shopify.checkout.thank_you.confirmed":"Confirmed","shopify.checkout.thank_you.gift_card_confirmation_by_text":"If you didn’t receive it, resend the text or contact us.","shopify.checkout.thank_you.gift_card_confirmation_by_email":"If you didn’t receive it, resend the email or contact us.","shopify.checkout.thank_you.gift_card_title":"Gift cards","shopify.checkout.thank_you.resend_gift_cards":"Resend gift cards","shopify.checkout.thank_you.thank_you_title":"Your order is confirmed","shopify.checkout.thank_you.thank_you_title_payment":"Your payment is confirmed","shopify.checkout.thank_you.thank_you_title_review":"Your order has been submitted for review","shopify.checkout.thank_you.thank_you_title_payments_app_pending_default":"Your payment is being processed","shopify.checkout.thank_you.thank_you_title_payments_app_pending_buyer_action_required":"Your order was received","shopify.checkout.thank_you.thank_you_title_payments_app_failed_pending_payment":"Your payment couldn’t be processed","shopify.checkout.thank_you.thank_you_confirmed_order_with_email":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_confirmed_order_with_phone":"You’ll receive a confirmation text with your order number shortly.","shopify.checkout.thank_you.thank_you_confirmed_order_with_email_and_phone":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_confirmed_order_with_email_payment":"You made a payment on your order %{date}.","shopify.checkout.thank_you.thank_you_confirmed_order_with_phone_payment":"You made a payment on your order %{date}.","shopify.checkout.thank_you.thank_you_confirmed_order_with_email_and_phone_payment":"You made a payment on your order %{date}.","shopify.checkout.thank_you.thank_you_confirmed_order_with_email_pick_up":"You’ll receive an email when your order is ready for pickup.","shopify.checkout.thank_you.thank_you_confirmed_order_with_phone_pick_up":"You’ll receive a text when your order is ready for pickup.","shopify.checkout.thank_you.thank_you_confirmed_order_with_email_and_phone_pick_up":"You’ll receive an email when your order is ready for pickup.","shopify.checkout.thank_you.thank_you_confirmed_order_with_missing":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_confirmed_order_with_missing_payment":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_confirmed_order_with_missing_pick_up":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_confirmed_order_with_draft":"We’ll let you know if we need more information or when your order is confirmed.","shopify.checkout.thank_you.thank_you_confirmed_order_with_draft_payment":"We’ll let you know if we need more information or when your order is confirmed.","shopify.checkout.thank_you.thank_you_confirmed_order_with_draft_pick_up":"We’ll let you know if we need more information or when your order is confirmed.","shopify.checkout.thank_you.thank_you_payments_app_failed_pending_payment":"You weren’t charged for your order. Return to your cart to review your order and pay again.","shopify.checkout.thank_you.thank_you_payments_app_failed_pending_payment_payment":"You weren’t charged for your order. Return to your cart to review your order and pay again.","shopify.checkout.thank_you.thank_you_payments_app_failed_pending_payment_pick_up":"You weren’t charged for your order. Return to your cart to review your order and pay again.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_missing":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_missing_payment":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_missing_pick_up":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_email_and_phone":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_email_and_phone_payment":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_email_and_phone_pick_up":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_email":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_email_payment":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_email_pick_up":"You’ll receive a confirmation email with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_phone":"You’ll receive a confirmation text with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_phone_payment":"You’ll receive a confirmation text with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_default_with_phone_pick_up":"You’ll receive a confirmation text with your order number shortly.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_missing":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_missing_payment":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_missing_pick_up":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_email_and_phone":"After completing your payment, you’ll receive a confirmation email with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_email_and_phone_payment":"After completing your payment, you’ll receive a confirmation email with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_email_and_phone_pick_up":"After completing your payment, you’ll receive a confirmation email with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_email":"After completing your payment, you’ll receive a confirmation email with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_email_payment":"After completing your payment, you’ll receive a confirmation email with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_email_pick_up":"After completing your payment, you’ll receive a confirmation email with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_phone":"After completing your payment, you’ll receive a confirmation text with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_phone_payment":"After completing your payment, you’ll receive a confirmation text with your order number.","shopify.checkout.thank_you.thank_you_payments_app_pending_payment_description_buyer_action_required_with_phone_pick_up":"After completing your payment, you’ll receive a confirmation text with your order number.","shopify.checkout.thank_you.order_status_confirmed_order_with_email":"You’ll receive an email when your order is ready.","shopify.checkout.thank_you.order_status_confirmed_order_with_phone":"You may receive a text when your order is ready.","shopify.checkout.thank_you.order_status_confirmed_order_with_email_and_phone":"You’ll receive an email when your order is ready.","shopify.checkout.thank_you.order_status_confirmed_order_with_email_payment":"You made a payment on your order %{date}.","shopify.checkout.thank_you.order_status_confirmed_order_with_phone_payment":"You made a payment on your order %{date}.","shopify.checkout.thank_you.order_status_confirmed_order_with_email_and_phone_payment":"You made a payment on your order %{date}.","shopify.checkout.thank_you.order_status_confirmed_order_with_email_pick_up":"You’ll receive an email when your order is ready for pickup.","shopify.checkout.thank_you.order_status_confirmed_order_with_phone_pick_up":"You’ll receive a text when your order is ready for pickup.","shopify.checkout.thank_you.order_status_confirmed_order_with_email_and_phone_pick_up":"You’ll receive an email and text when your order is ready for pickup.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_missing":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_missing_payment":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_missing_pick_up":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_email_and_phone":"You’ll get a confirmation email soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_email_and_phone_payment":"You’ll get a confirmation email soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_email_and_phone_pick_up":"You’ll get a confirmation email soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_email":"You’ll get a confirmation email soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_email_payment":"You’ll get a confirmation email soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_email_pick_up":"You’ll get a confirmation email soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_phone":"You’ll get a confirmation text soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_phone_payment":"You’ll get a confirmation text soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_default_with_phone_pick_up":"You’ll get a confirmation text soon. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_missing":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_missing_payment":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_missing_pick_up":"Contact us by email or phone to receive an order confirmation.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_email_and_phone":"After completing your payment, you’ll get a confirmation email. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_email_and_phone_payment":"After completing your payment, you’ll get a confirmation email. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_email_and_phone_pick_up":"After completing your payment, you’ll get a confirmation email. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_email":"After completing your payment, you’ll get a confirmation email. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_email_payment":"After completing your payment, you’ll get a confirmation email. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_email_pick_up":"After completing your payment, you’ll get a confirmation email. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_phone":"After completing your payment, you’ll get a confirmation text. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_phone_payment":"After completing your payment, you’ll get a confirmation text. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_pending_payment_description_buyer_action_required_with_phone_pick_up":"After completing your payment, you’ll get a confirmation text. Track your order using the Shop app.","shopify.checkout.thank_you.order_status_payments_app_failed_pending_payment":"You weren’t charged for your order. Return to your cart to review your order and pay again.","shopify.checkout.thank_you.order_status_payments_app_failed_pending_payment_payment":"You weren’t charged for your order. Return to your cart to review your order and pay again.","shopify.checkout.thank_you.order_status_payments_app_failed_pending_payment_pick_up":"You weren’t charged for your order. Return to your cart to review your order and pay again.","shopify.checkout.thank_you.order_status_confirmed_order_local":"We’re getting your order ready for delivery.","shopify.checkout.thank_you.order_status_confirmed_order_local_pick_up":"We’re getting your order ready.","shopify.checkout.thank_you.order_status_confirmed_order_local_payment":"We're getting your order ready.","shopify.checkout.thank_you.order_status_updates_with_email":"You’ll get shipping and delivery updates by email.","shopify.checkout.thank_you.order_status_updates_with_phone":"You may get shipping and delivery updates by text.","shopify.checkout.thank_you.order_status_updates_with_email_and_phone":"You’ll get shipping and delivery updates by email.","shopify.checkout.thank_you.order_status_updates_with_missing":"Choose how you want to get shipping updates.","shopify.checkout.thank_you.order_status_confirmed_with_installments_payment_return":"Please return your attention back to the sales associate.","shopify.checkout.thank_you.order_status_confirmed_with_installments_payment_confirm":"You’ll receive a confirmation email with your order number and details of your installment schedule shortly.","shopify.checkout.thank_you.confirmed_title":"Your order is confirmed","shopify.checkout.thank_you.confirmed_description":"We’ve accepted your order, and we’re getting it ready. Come back to this page for updates on your shipment status.","shopify.checkout.thank_you.ready_for_pickup_title":"Your order is ready for pickup","shopify.checkout.thank_you.ready_for_pickup_description":"Your order is ready for pickup. Please bring your order confirmation when you pick up your order.","shopify.checkout.thank_you.ready_for_delivery_title":"Your order is ready for delivery","shopify.checkout.thank_you.ready_for_delivery_description":"We’ve prepared your order.","shopify.checkout.thank_you.order_updates_title":"Order updates","shopify.checkout.thank_you.shop_phone_description":"You'll receive a text with a link to the Shop app to help track your order.","shopify.checkout.thank_you.order_updates_description_html":"Updates will be sent to %{customer_contact}","shopify.checkout.thank_you.order_updates_current_step_prefix":"Current step: ","shopify.checkout.thank_you.order_updates_past_step_prefix":"Past step: ","shopify.checkout.thank_you.order_updates_upcoming_step_prefix":"Upcoming step: ","shopify.checkout.thank_you.in_transit":"On its way","shopify.checkout.thank_you.in_transit_title":"Your order is on its way","shopify.checkout.thank_you.in_transit_description":"You'll receive updates on its progress.","shopify.checkout.thank_you.in_transit_description_days":"You should receive your order in the next %{number} days.","shopify.checkout.thank_you.in_transit_description_today":"You should receive your order today.","shopify.checkout.thank_you.in_transit_description_tomorrow":"You should receive your order in the next day.","shopify.checkout.thank_you.no_tracking_number":"There is no tracking number for this order.","shopify.checkout.thank_you.out_for_delivery":"Out for delivery","shopify.checkout.thank_you.out_for_delivery_title":"Your order is out for delivery","shopify.checkout.thank_you.out_for_delivery_description_html":"Your order is on its way and should arrive today. If it’s not delivered in the next 2 days, %{contact_us}.","shopify.checkout.thank_you.out_for_delivery_local_title":"Your order is out for delivery","shopify.checkout.thank_you.out_for_delivery_local_description_html":"Your order will arrive soon.","shopify.checkout.thank_you.attempted_delivery":"Attempted delivery","shopify.checkout.thank_you.attempted_delivery_title":"An attempt was made to deliver your order","shopify.checkout.thank_you.attempted_delivery_description_html":"An attempt was made to deliver your order but it was unsuccessful. %{contact_us} to arrange another delivery attempt.","shopify.checkout.thank_you.attempted_delivery_local_title":"Missed delivery","shopify.checkout.thank_you.attempted_delivery_local_description_html":"We weren’t able to deliver your order. To schedule another delivery, %{contact_us}.","shopify.checkout.thank_you.delivered":"Delivered","shopify.checkout.thank_you.delivered_title":"Your order has been delivered","shopify.checkout.thank_you.delivered_description_html":"Your order has been delivered to the address you provided. If you haven’t received it, or if you have any other problems, %{contact_us}.","shopify.checkout.thank_you.delivered_local_title":"Your order has been delivered","shopify.checkout.thank_you.delivered_local_description_html":"Haven’t received your order? %{let_us_know}.","shopify.checkout.thank_you.choose_payment_method_later":"Choose payment method later","shopify.checkout.thank_you.picked_up_title":"Your order has been picked up","shopify.checkout.thank_you.picked_up_description_html":"Your order was picked up at %{location_name} on %{date}.","shopify.checkout.thank_you.contact_us":"Contact us","shopify.checkout.thank_you.contact_us_lowercase":"contact us","shopify.checkout.thank_you.contact_us_html":"Need help? %{contact_us}","shopify.checkout.thank_you.updated_time":"Updated %{time_ago} ago","shopify.checkout.thank_you.failure":"Not delivered","shopify.checkout.thank_you.failed_title":"Your order couldn’t be delivered","shopify.checkout.thank_you.failed_contact_merchant":"Contact %{company} to arrange delivery.","shopify.checkout.thank_you.failed_contact_merchant_no_company":"Contact us to arrange delivery.","shopify.checkout.thank_you.non_shippable_title":"Your order is complete","shopify.checkout.thank_you.let_us_know":"Let us know","shopify.checkout.thank_you.login_title":"Log in to view all order details","shopify.checkout.thank_you.login_description":"You can find your order number in the receipt you received via email.","shopify.checkout.thank_you.login_description_phone":"You can find your order number in the receipt you received via text message.","shopify.checkout.thank_you.login_not_customer_html":"Not %{name}? You can %{link}","shopify.checkout.thank_you.login_reorder_link_text.one":"buy this product too","shopify.checkout.thank_you.login_reorder_link_text.other":"buy these products too","shopify.checkout.thank_you.customer_information_hidden_fields_message":"Log in to view all customer information.","shopify.checkout.thank_you.cancelled_title":"Your order has been canceled","shopify.checkout.thank_you.cancelled_description":"Your order was canceled on %{date}. Contact us if you have any questions.","shopify.checkout.thank_you.order_number_label":"Order number","shopify.checkout.thank_you.customer_validation_error":"Enter a valid email or order number.","shopify.checkout.thank_you.customer_validation_error_phone":"Enter a valid phone or order number.","shopify.checkout.thank_you.login":"Log in","shopify.checkout.thank_you.unfulfilled_items_title":"Preparing for shipping","shopify.checkout.thank_you.unfulfilled_items_description":"We are currently preparing these items for shipping.","shopify.checkout.thank_you.marker.current":"Current shipment location","shopify.checkout.thank_you.marker.shipping":"Shipping address","shopify.checkout.thank_you.pick_up_in_store_marker.current":"Current shipment location","shopify.checkout.thank_you.pick_up_in_store_marker.shipping":"Pickup location","shopify.checkout.thank_you.fulfillment.fulfilled_table_title":"Items in this shipment","shopify.checkout.thank_you.fulfillment.unfulfilled_table_title":"Items preparing for shipping","shopify.checkout.thank_you.fulfillment.product_image_label":"Product image","shopify.checkout.thank_you.fulfillment.description_label":"Description","shopify.checkout.thank_you.fulfillment.quantity_label":"Quantity","shopify.checkout.thank_you.order_updates_description_missing":"You are not receiving shipping updates.","shopify.checkout.thank_you.order_updates_subscribe_to_email_notifications":"Get shipping updates by email","shopify.checkout.thank_you.order_updates_subscribe_to_email_or_phone_notifications":"Get shipping updates by email or text","shopify.checkout.thank_you.order_updates_subscribe_to_phone_notifications":"Get shipping updates by text","shopify.checkout.thank_you.order_updates_submit_subscription":"Submit","shopify.checkout.thank_you.track_shipment":"Track shipment","shopify.checkout.thank_you.other_options":"Other options","shopify.checkout.thank_you.delivery_information_label":"Delivery information:","shopify.checkout.thank_you.gift_card_sent_confirmation":"Gift cards sent","shopify.checkout.thank_you.qr_code.send_link_to_phone":"Or send a link to your phone","shopify.checkout.thank_you.qr_code.title":"Track on your phone","shopify.checkout.thank_you.shop_qr_with_sms_upsell.qr_code.title":"Scan with your phone","shopify.checkout.thank_you.shop_qr_with_sms_upsell.sms.title":"Or send a link to your phone","shopify.checkout.thank_you.view_business_customer_account":"View account","shopify.checkout.thank_you.breadcrumbs_submitted":"Submitted","shopify.checkout.thank_you.breadcrumbs_in_review":"In review","shopify.checkout.thank_you.breadcrumbs_confirmed":"Confirmed","shopify.checkout.thank_you.missing_shipping_address_banner.title":"Order doesn’t have a shipping address","shopify.checkout.thank_you.missing_shipping_address_banner.text_html":"%{contact_us} to add your address","shopify.checkout.thank_you.missing_shipping_address_banner.contact_us":"Contact us","shopify.checkout.thank_you.first_payment_complete":"First payment complete","shopify.checkout.thank_you.in_store_purchase":"In-store purchase","shopify.checkout.thank_you.location_title":"Location","shopify.checkout.thank_you.thank_you_ready_for_picked_up":"Your order was picked up at %{address}.","shopify.checkout.thank_you.ready_for_delivery":"Ready for delivery","shopify.checkout.thank_you.order_updates_subscribe_to_email_notifications_failed":"We can not store this email for updates. Please try again or use another email.","shopify.checkout.thank_you.order_updates_subscribe_to_email_notifications_email_already_exists":"The email you entered already exists.","shopify.checkout.thank_you.subscriptions_management.title":"Subscription","shopify.checkout.thank_you.subscriptions_management.description":"Continue to your account to view and manage your subscriptions.","shopify.checkout.thank_you.subscriptions_management.button_label":"Manage your subscription","shopify.checkout.thank_you.manage_order_label":"Manage your order","shopify.checkout.thank_you.gift_card_confirmation_by_text_typ.one":"You’ll receive a text with your gift card in a few minutes.","shopify.checkout.thank_you.gift_card_confirmation_by_text_typ.other":"You’ll receive a text with your gift cards in a few minutes.","shopify.checkout.thank_you.gift_card_confirmation_by_email_typ.one":"You’ll receive an email with your gift card in a few minutes.","shopify.checkout.thank_you.gift_card_confirmation_by_email_typ.other":"You’ll receive an email with your gift cards in a few minutes.","shopify.checkout.thank_you.gift_card_email_title.one":"Gift card was sent by email","shopify.checkout.thank_you.gift_card_email_title.other":"Gift cards were sent by email","shopify.checkout.thank_you.gift_card_text_title.one":"Gift card was sent by text message","shopify.checkout.thank_you.gift_card_text_title.other":"Gift cards were sent by text message","shopify.checkout.thank_you.resend_gift_cards_by_email":"Resend email","shopify.checkout.thank_you.resend_gift_cards_by_text":"Resend text message","shopify.checkout.thank_you.gift_card_resent_confirmation.one":"Gift card was resent.","shopify.checkout.thank_you.gift_card_resent_confirmation.other":"Gift cards were resent.","shopify.checkout.thank_you.gift_card_resend_failure.one":"There was a problem resending your gift card. Try again or contact us.","shopify.checkout.thank_you.gift_card_resend_failure.other":"There was a problem resending your gift cards. Try again or contact us.","shopify.checkout.vaulted.change_button":"Change","shopify.checkout.review.title":"Review","shopify.checkout.review.review_title":"Review and pay","shopify.checkout.review.checkout_as_guest":"Checkout as guest","shopify.checkout.review.checkout_a_different_way":"Checkout a different way","shopify.checkout.review.review_notice_html":" ","shopify.checkout.review.blocks.contact_method_title":"Contact","shopify.checkout.review.blocks.billing_address_title":"Billing","shopify.checkout.review.blocks.shipping_address_title":"Ship to","shopify.checkout.review.blocks.shipping_method_title":"Shipping method","shopify.checkout.review.blocks.payment_method_title":"Payment method","shopify.checkout.review.blocks.change_link_label":"Change","shopify.checkout.review.blocks.change_contact_method_link_label":"Change contact information","shopify.checkout.review.blocks.change_billing_address_link_label":"Change billing address","shopify.checkout.review.blocks.change_shipping_address_link_label":"Change shipping address","shopify.checkout.review.blocks.change_shipping_method_link_label":"Change shipping method","shopify.checkout.review.blocks.change_payment_method_link_label":"Change payment method","shopify.checkout.review.blocks.pick_up_in_store_shipping_method_html":"Pickup in store · %{location_name}","shopify.checkout.review.blocks.purchase_order_number_title":"PO number","shopify.checkout.review.blocks.change_purchase_order_number_label":"Change PO number","shopify.checkout.review.blocks.change_delivery_method_link_label":"Change delivery method","shopify.checkout.review.blocks.no_address":"(No address)","shopify.checkout.review.blocks.no_purchase_order_number":"(No PO number)","shopify.checkout.review.blocks.due_after_order_reviewed_html":"Due after order is reviewed","shopify.checkout.review.blocks.review_title_free_order":"Review and complete your order","shopify.checkout.review.blocks.payment_method_saved_company_location":"Save card for this location","shopify.checkout.review.block_title":"Review your information","shopify.checkout.review.item_header.change_value":"Change value","shopify.checkout.review.item_header.section":"Section","shopify.checkout.review.item_header.value":"Value","shopify.checkout.marketing.accept_marketing_checkbox_label":"Email me with news and offers","shopify.checkout.marketing.post_accept_marketing_checkbox_label":"You are subscribed to receive email news and offers","shopify.checkout.marketing.pending_accept_marketing_checkbox_label":"Check your email to confirm your subscription to news and offers","shopify.checkout.marketing.accept_sms_checkbox_label":"Text me with news and offers","shopify.checkout.marketing.disclaimer.description_html":" ","shopify.checkout.marketing.disclaimer.privacy_policy":"Privacy Policy","shopify.checkout.marketing.disclaimer.terms_of_service":"Terms of Service","shopify.checkout.marketing.sms.disclaimer.privacy_policy":"Privacy Policy","shopify.checkout.marketing.sms.disclaimer.terms_of_service":"Terms of Service","shopify.checkout.marketing.sms.disclaimer.description_html":"By signing up via text, you agree to receive recurring automated marketing messages, including cart reminders, at the phone number provided. Consent is not a condition of purchase. Reply STOP to unsubscribe. Reply HELP for help. Message frequency varies. Msg & data rates may apply. View our %{privacy_policy_link} and %{terms_of_service_link}.","shopify.checkout.marketing.sms.disclaimer.description_transactional_html":"You may receive text messages related to order confirmation and shipping updates. Reply STOP to unsubscribe. Reply HELP for help. Message frequency varies. Msg & data rates may apply. View our %{privacy_policy_modal_link} and %{terms_of_service_modal_link}.","shopify.checkout.marketing.sms.mobile_phone_number":"Mobile phone number","shopify.checkout.marketing.sms.get_offers_by_text":"Get offers by text","shopify.checkout.marketing.unsubscribe.title":"You’ve unsubscribed","shopify.checkout.marketing.unsubscribe.description":"You won’t receive any more cart reminders from us.","shopify.checkout.marketing.accept_shop_pay_marketing_checkbox_label":"Sign me up for news and offers from this store","shopify.checkout.shop_policies.refund_policy":"Refund policy","shopify.checkout.shop_policies.privacy_policy":"Privacy policy","shopify.checkout.shop_policies.terms_of_service":"Terms of service","shopify.checkout.shop_policies.legal_notice":"Legal notice","shopify.checkout.shop_policies.shipping_policy":"Shipping policy","shopify.checkout.shop_policies.terms_of_sale":"Terms of sale","shopify.checkout.shop_policies.subscription_policy":"Subscription policy","shopify.checkout.shop_policies.purchase_options_policy":"Purchase options policy","shopify.checkout.shop_policies.contact_information":"Contact information","shopify.checkout.shop_policies.purchase_options_cancellation_policy":"Cancellation policy","shopify.checkout.mor_policies.terms_and_conditions":"Merchant of Record Terms and Conditions","shopify.checkout.mor_policies.privacy_policy":"Merchant of Record Privacy Policy","shopify.checkout.markets.invalid_market_manager_error":"Review your contact information before completing payment","shopify.checkout.notifications.title":"Notifications","shopify.checkout.order_payment_collection.custom_line_item_description":"Amount to pay for order %{order_name}","shopify.checkout.order_payment_collection.changes_summary.added.one":"Added","shopify.checkout.order_payment_collection.changes_summary.added.other":"Added %{count}","shopify.checkout.order_payment_collection.changes_summary.removed":"Removed","shopify.checkout.order_payment_collection.changes_summary.subtracted":"Removed %{count}","shopify.checkout.order_payment_collection.changes_summary.returned":"Returned %{count}","shopify.checkout.order_payment_collection.changes_summary.return_line_item_removed":"Removed %{count} from return","shopify.checkout.order_payment_collection.additional_payment_requested":"Payment of %{total_outstanding} is needed","shopify.checkout.order_payment_collection.checkout_review_and_pay":"Your order %{order_name} was updated. Review these changes, then pay to confirm your order.","shopify.checkout.order_payment_collection.order_updated_on":"Your order was updated on %{last_edited_at}.","shopify.checkout.order_payment_collection.order_review_and_pay":"Your order was updated. Review and pay to confirm your order.","shopify.checkout.order_payment_collection.pay_now":"Pay now","shopify.checkout.change_currency.currency_button_label":"%{currency} (%{currency_symbol})","shopify.checkout.change_currency.credit_card_will_be_charged_html":"Your credit card will be charged %{amount}","shopify.checkout.change_currency.payment_total_label":"Payment total","shopify.checkout.change_currency.conversion_rate":"1 %{from_currency_code} = %{rate} %{to_currency_code}","shopify.checkout.change_currency.change_currency_link":"Change to %{currency_name}","shopify.checkout.change_currency.card_provider_fx_charges_warning":"Your card provider may charge fees on %{currency_code} transactions.","shopify.checkout.change_currency.currency_not_supported_by_shop":"The currency you selected is no longer available. All prices are now in %{currency_code}.","shopify.checkout.change_country.cart_updated_based_on_country":"Your cart has been updated based on your shipping country.","shopify.checkout.change_country.cart_and_currency_updated_based_on_country":"Your cart and currency has been updated based on your shipping country.","shopify.checkout.change_cart_localization.verify_shipping_address":"Your country/region has been updated. Enter your shipping address to continue checkout.","shopify.checkout.tips.title":"Add tip","shopify.checkout.tips.description":"Show your support for the team at %{shop_name}","shopify.checkout.tips.presets_description":"Select a tip percentage","shopify.checkout.tips.custom_label":"Custom tip","shopify.checkout.tips.add_tip":"Add tip","shopify.checkout.tips.update_tip":"Update tip","shopify.checkout.tips.message":"Thank you, we appreciate it.","shopify.checkout.tips.preset_label":"%{tip_percent}%","shopify.checkout.tips.no_tip_label":"None","shopify.checkout.open_graph_meta_tag.title_with_products.zero":"Purchase %{product_name}","shopify.checkout.open_graph_meta_tag.title_with_products.one":"Purchase %{product_name} and %{count} other item","shopify.checkout.open_graph_meta_tag.title_with_products.other":"Purchase %{product_name} and %{count} other items","shopify.checkout.subscriptions.recurring_total_intervals.day.one":"day","shopify.checkout.subscriptions.recurring_total_intervals.day.other":"%{count} days","shopify.checkout.subscriptions.recurring_total_intervals.week.one":"week","shopify.checkout.subscriptions.recurring_total_intervals.week.other":"%{count} weeks","shopify.checkout.subscriptions.recurring_total_intervals.month.one":"month","shopify.checkout.subscriptions.recurring_total_intervals.month.other":"%{count} months","shopify.checkout.subscriptions.recurring_total_intervals.year.one":"year","shopify.checkout.subscriptions.recurring_total_intervals.year.other":"%{count} years","shopify.checkout.subscriptions.recurring_totals":"%{total_price} every %{interval}","shopify.checkout.subscriptions.recurring_totals_with_initial_order_shipping_discount":"First payment %{total_price_with_discount}, then %{recurring_total}","shopify.checkout.subscriptions.recurring_totals_with_policies.first_cycles.one":"First payment %{total_price}","shopify.checkout.subscriptions.recurring_totals_with_policies.first_cycles.other":"First %{count} payments %{total_price} each","shopify.checkout.subscriptions.recurring_totals_with_policies.following_cycles":", then %{total_price} every %{interval}","shopify.checkout.subscriptions.recurring_totals_with_initial_order_shipping_discount_with_policies.first_cycles.one":", then %{count} payment at %{total_price}","shopify.checkout.subscriptions.recurring_totals_with_initial_order_shipping_discount_with_policies.first_cycles.other":", then %{count} payments at %{total_price} each","shopify.checkout.customer_payment_methods.page_title":"Payment methods","shopify.checkout.customer_payment_methods.title":"Payment methods","shopify.checkout.customer_payment_methods.update_card_button_label":"Update card","shopify.checkout.customer_payment_methods.delete_customer_mandate.generic_error":"There was an issue processing your request.","shopify.checkout.customer_payment_methods.delete_customer_mandate.success_message":"Your payment method has been successfully deleted","shopify.checkout.throttle.too_many_attempts.message":"Too many attempts","shopify.checkout.throttle.too_many_attempts.description":"Please try again in a few minutes","shopify.checkout.throttle.line_to_check_out":"You’re in line to check out","shopify.checkout.throttle.cart_summary_heading":"Your cart","shopify.checkout.throttle.merchandise.available":"Available","shopify.checkout.throttle.merchandise.sold_out":"Sold Out","shopify.checkout.throttle.inventory.partial_inventory_banner":"Part of your cart is sold out and will not be available to purchase at checkout.","shopify.checkout.throttle.inventory.sold_out.heading":"Your cart is sold out","shopify.checkout.throttle.inventory.sold_out.storefront_body":"Go back to the store to continue shopping","shopify.checkout.throttle.inventory.sold_out.no_storefront_body":"Unfortunately the item you want to purchase is no longer available.","shopify.checkout.throttle.inventory.sold_out.link":"Back to store","shopify.checkout.throttle.title":"Queue","shopify.checkout.throttle.time_to_checkout_title":"Time to check out - {{shopName}}","shopify.checkout.throttle.estimated_wait_time.calculating":"Calculating estimated wait time","shopify.checkout.throttle.estimated_wait_time.less_than_one":"Estimated wait time: Less than a minute","shopify.checkout.throttle.estimated_wait_time.one":"Estimated wait time: {{count}} minute","shopify.checkout.throttle.estimated_wait_time.other":"Estimated wait time: {{count}} minutes","shopify.checkout.throttle.last_checked":"(Last checked: {{time}})","shopify.checkout.throttle.footer.heading":"Don’t refresh this page, it will update automatically.","shopify.checkout.throttle.footer.body":"Items in your cart are not reserved until you complete checkout.","shopify.checkout.cart_checkout_validation.runtime_error":"There was an issue processing your request, please contact the store owner.","shopify.checkout.no_address_location.title":"Location with no address","shopify.checkout.no_address_location.header":"You don’t have a shipping address for this location","shopify.checkout.no_address_location.alt_header":"Missing shipping address","shopify.checkout.no_address_location.message":"Contact us to add an address for this location to complete checkout.","shopify.checkout.no_address_location.email_us_button_label":"Send us an email","shopify.checkout.order_errors.creation_failure":"There was an issue creating your order. Try again, or contact us for more details.","shopify.checkout.order_errors.network_failure":"Your order couldn't be submitted because of a network error. Check your connection and try again.","shopify.checkout.order_errors.inventory_reservation_failure":"Some items are no longer available.","shopify.checkout.session_errors.session_not_unique":"There was a problem processing your order. Refresh this page to return to the store.","shopify.checkout.session_errors.session_already_finished":"This order has already been submitted. You can return to the store to start a new order.","shopify.checkout.pickup_point.location_is_currently_closed":"Closed","shopify.checkout.pickup_point.business_hours":"Opening hours","shopify.checkout.pickup_point.no_business_hours":"No opening hours available","shopify.checkout.pickup_point.open_twenty_four_hours":"Open 24/7","shopify.checkout.pickup_point.title":"Pickup point","shopify.checkout.pickup_point.or":"or","shopify.checkout.pickup_point.search_button":"Search","shopify.checkout.pickup_point.address_label":"Address","shopify.checkout.pickup_point.selector_tabs":"Pickup point selector","shopify.checkout.pickup_point.selector_tab_map":"Map","shopify.checkout.pickup_point.selector_tab_list":"List","shopify.checkout.pickup_point.could_not_resolve_address":"Your address couldn't be located. Try again or use a different address","shopify.checkout.pickup_point.no_pickup_points_near_you":"No pickup points found near the selected address","shopify.checkout.pickup_point.no_pickup_points_near_location":"No pickup points found near your location","shopify.checkout.pickup_point.no_pickup_points_found":"No pickup points found","shopify.checkout.pickup_point.paginator.next_accessibility_label":"Next page","shopify.checkout.pickup_point.paginator.previous_accessibility_label":"Previous page","shopify.checkout.pickup_point.paginator.header.one":"Showing %{first} - %{last} of %{count} point","shopify.checkout.pickup_point.paginator.header.other":"Showing %{first} - %{last} of %{count} points","shopify.checkout.pickup_point.paginator.selected_pickup_point_label.one":"%{pickup_point_index} of %{count} point","shopify.checkout.pickup_point.paginator.selected_pickup_point_label.other":"%{pickup_point_index} of %{count} points","shopify.checkout.pickup_point.paginator.selected_page.one":"%{first} - %{last} of %{count} point","shopify.checkout.pickup_point.paginator.selected_page.other":"%{first} - %{last} of %{count} points","shopify.checkout.pickup_point.number_of_pickup_points_near_location.one":"%{count} pickup point near your location","shopify.checkout.pickup_point.number_of_pickup_points_near_location.other":"%{count} pickup points near your location","shopify.checkout.pickup_point.change":"Change","shopify.checkout.pickup_point.waiting_on_pickup_point_location_notice":"Searching for pickup points...","shopify.checkout.pickup_point.geolocation.shared_location_button":"Use my location","shopify.checkout.pickup_point.geolocation.errors.unsuported_by_browser":"Getting geolocation is not supported by your browser. Try again or use a different browser.","shopify.checkout.pickup_point.geolocation.errors.permission_not_allowed":"Allow sharing your location.","shopify.checkout.pickup_point.geolocation.errors.permission_denied":"Couldn't get your location. Try again.","shopify.checkout.error_page.terminal.title":"There was a problem with our checkout","shopify.checkout.error_page.terminal.message":"Refresh this page or try again in a few minutes","shopify.checkout.error_page.terminal.action.cta":"Refresh Page","shopify.checkout.error_page.terminal.request_id":"Request ID: {{requestId}}","shopify.checkout.notice_banner.return_to_cart_link_text":"Return to cart","shopify.checkout.notice_banner.return_to_cart_to_update_quantities":"%{return_to_cart_link_text} to update the quantities","shopify.checkout.notice_banner.subscription_changed":"One of your subscriptions has changed.","shopify.checkout.notice_banner.company_location_changed":"Your cart has been updated. Review your order before submitting it.","shopify.checkout.notice_banner.company_location_changed_product_removed":"Your cart has been updated because some products are not available at this location. Review your order before submitting it.","shopify.checkout.notice_banner.violations_title":"{{violation}} is missing or invalid","shopify.checkout.notice_banner.individual_violations_title.DeliveryViolations":"Shipping address","shopify.checkout.notice_banner.individual_violations_title.PaymentViolations":"Billing address","shopify.checkout.notice_banner.individual_violations_title.OtherViolations":"Order Information","shopify.checkout.notice_banner.individual_violations_title.UnhandledViolations":"Order Information","shopify.checkout.notice_banner.all_violations_content":"Call or {{emailLink}} us to update this information and complete your order:","shopify.checkout.notice_banner.all_violations_email_link":"email","shopify.checkout.notice_banner.editable_shipping_address_violations_message_title":"Add this information to complete your order:","shopify.checkout.notice_banner.editable_shipping_address_violations_message_footer":"To permanently update the address for this location, {{emailLink}}.","shopify.checkout.notice_banner.editable_shipping_address_violations_email_link":"contact us","shopify.checkout.notice_banner.shipping_address_incomplete_title":"Shipping address is incomplete","shopify.checkout.notice_banner.calculating_shipping":"Shipping is still being calculated. Try again in a few seconds. You haven’t been charged.","shopify.checkout.notice_banner.calculating_taxes":"Taxes are still being calculated. Try again in a few seconds. You haven't been charged.","shopify.checkout.marketplaces.legal_notice.legal_text":"Review","shopify.checkout.marketplaces.legal_notice.separator":" ","shopify.checkout.marketplaces.legal_notice.link_label":"{{partnerDisplayName}} Terms and Conditions","shopify.checkout.online_store_chat.title":"Questions? Chat with us","shopify.checkout.local_pickup.location_address_search_label":"Address","shopify.checkout.local_pickup.location_information.one":"There is %{count} store with stock close to %{address}","shopify.checkout.local_pickup.location_information.other":"There are %{count} stores with stock close to %{address}","shopify.checkout.local_pickup.toggle_location":"Change my location","shopify.checkout.local_pickup.or":"OR","shopify.checkout.local_pickup.cancel":"Cancel","shopify.checkout.local_pickup.your_location":"your location","shopify.checkout.local_pickup.search_button":"Find stores","shopify.checkout.local_pickup.no_stores_found":"No stores found","shopify.checkout.local_pickup.could_not_resolve_address":"Your address couldn't be located. Try again or use a different address","shopify.checkout.local_pickup.paginator.accessibility_label":"Local pickup pagination","shopify.checkout.local_pickup.paginator.previous":"Previous page","shopify.checkout.local_pickup.paginator.next":"Next page","shopify.checkout.local_pickup.paginator.label.one":"%{first} - %{last} of %{count} store","shopify.checkout.local_pickup.paginator.label.other":"%{first} - %{last} of %{count} stores","shopify.checkout.local_pickup.reveal_more_label.one":"Show %{count} more location","shopify.checkout.local_pickup.reveal_more_label.other":"Show %{count} more locations","shopify.checkout.captcha.title":"Complete the CAPTCHA to continue","shopify.checkout.captcha.errors.not_solved":"Complete the CAPTCHA to continue","shopify.checkout.discount_errors.generic_error":"Your order couldn't be processed because your discount code is no longer available. Review your order total and try again.","shopify.checkout.shop_pay_external.errors.problem_loading":"There's a problem loading Shop Pay","shopify.checkout.shop_pay_external.errors.try_again_later":"Check your connection or close this window and try again in a few moments.","shopify.checkout.shop_pay_external.errors.checkout_has_expired":"Your checkout has expired. Close this window and try checking out again from {{shopName}}.","shopify.checkout.shop_pay_external.return_to_store":"Return to {{shopName}}","shopify.checkout.wallets.return_to_store":"Return to store","shopify.checkout.wallets.return_to_checkout":"Return to checkout","shopify.checkout.wallets.redirect_hint":"You will be asked to login with {{walletName}}.","shopify.checkout.wallets.logged_in":"Connected to {{email}}","shopify.checkout.wallets.shipping_line_label":"Shipping","shopify.checkout.wallets.connect_shipping_methods":"{{method1}} and {{method2}}","shopify.checkout.wallets.payment_in_progress_title":"Payment in progress","shopify.checkout.wallets.payment_in_progress_body":"Your payment is being processed. Your order will be completed soon.","shopify.checkout.wallets.call_to_action":"Pay with {{walletName}}","shopify.checkout.wallets.redirection_notice":"After clicking \"{{buttonLabel}}\", you will be redirected to {{walletName}} to complete your purchase securely.","shopify.checkout.wallets.errors.unavailable.title":"{{walletName}} not available","shopify.checkout.wallets.errors.unavailable.description":"{{walletName}} wasn’t available. Use a different payment method or try again later.","shopify.checkout.wallets.errors.unavailable.instructions":"There was an issue with {{walletName}}. Return to store to try again or check out a different way.","shopify.checkout.wallets.errors.unavailable.unavailable_for_country":"{{walletName}} is not available in {{countryName}}. Select a different payment method to complete your purchase","shopify.checkout.wallets.errors.unavailable_terminal.instructions":"{{walletName}} is currently unavailable for your order. To continue your purchase, choose another checkout method.","shopify.checkout.wallets.errors.generic":"There was an issue with {{walletName}}. Try again or use a different payment method.","shopify.checkout.wallets.errors.discount_code":"Unable to apply this discount code. Please review your code and try again.","shopify.checkout.wallets.errors.terminal":"There was an issue with {{walletName}}. Please use a different payment method.","shopify.checkout.wallets.errors.detour.stock_problems":"Some items are no longer available. Close {{walletName}} and try again.","shopify.checkout.wallets.errors.detour.price_change":"Some item prices have changed. Close {{walletName}} to review your order and try again.","shopify.checkout.wallets.errors.detour.queue":"You have been placed in a queue to checkout. Close {{walletName}} to continue.","shopify.checkout.wallets.errors.unsupported.address":"The merchant can’t deliver to this address","shopify.checkout.wallets.errors.unsupported.wallet_is_unavailable":"{{walletName}} cannot be used with this address. Select a different address or close {{walletName}} to complete your purchase","shopify.checkout.wallets.errors.unsupported.postal_code":"This location isn't supported","shopify.checkout.wallets.errors.outdated.shipping_method":"The shipping options have changed for your order. Review your selection.","shopify.checkout.wallets.errors.outdated.payment_terms":"The payment terms have changed. Please review your order","shopify.checkout.wallets.errors.invalid.shipping_address":"Enter a valid shipping address","shopify.checkout.wallets.errors.invalid.billing_address":"Enter a valid billing address","shopify.checkout.wallets.errors.invalid.shipping_option":"Choose a valid shipping option","shopify.checkout.wallets.errors.invalid.email":"Enter a valid email","shopify.checkout.wallets.errors.invalid.zone":"Enter a valid state / province","shopify.checkout.wallets.errors.invalid.emirate":"Enter a valid emirate","shopify.checkout.wallets.errors.invalid.postal_code":"Enter a valid ZIP / postal code","shopify.checkout.wallets.errors.invalid.phone":"Enter a valid phone number","shopify.checkout.wallets.errors.invalid.reduction_code":"Enter a valid discount code or gift card","shopify.checkout.wallets.errors.invalid.billing_must_match_shipping":"Must match shipping address","shopify.checkout.wallets.errors.missing.first_name":"Enter a first name","shopify.checkout.wallets.errors.missing.last_name":"Enter a last name","shopify.checkout.wallets.errors.missing.address1":"Enter an address","shopify.checkout.wallets.errors.missing.address2":"Enter an apartment, suite, etc.","shopify.checkout.wallets.errors.missing.city":"Enter a city","shopify.checkout.wallets.errors.missing.province":"Select a state / province","shopify.checkout.wallets.errors.missing.country":"Select a country/region","shopify.checkout.wallets.errors.missing.zip":"Enter a ZIP / postal code","shopify.checkout.wallets.errors.missing.phone":"Enter a phone number","shopify.checkout.wallets.errors.formatting.name_contains_emojis":"Delete emoji from your name","shopify.checkout.wallets.errors.formatting.postal_code_contains_emoji":"Delete emoji from your postal code","shopify.checkout.wallets.errors.formatting.first_name_too_long":"First name contains too many letters","shopify.checkout.wallets.errors.formatting.last_name_too_long":"Last name contains too many letters","shopify.checkout.wallets.errors.select_different_shipping_address_to_resolve_errors":"Your shipping address is invalid. Select a different address or use a new one.","shopify.checkout.note.length_exceeds_maximum":"Reduce the size of the note to 5000 or fewer characters.","shopify.checkout.one.errors.merchandise.gift_card_price_must_be_greater_than_zero":"Gift card price must be greater than 0.","shopify.checkout.one.errors.merchandise.gift_card_price_must_not_exceed_limit":"Gift card price must not exceed %{gift_card_limit}.","shopify.checkout.one.errors.merchandise.subtotal_limit_reached":"The maximum value of line items has been reached.","shopify.pagination.previous":"Previous","shopify.pagination.next":"Next","shopify.links.powered_by_shopify":"Powered by Shopify","shopify.links.learn_more":"Learn more","shopify.feed.more":"More","shopify.attributes.email":"email","shopify.attributes.password":"password","shopify.attributes.password_confirmation":"The password confirmation","shopify.attributes.first_name":"first name","shopify.attributes.last_name":"last name","shopify.attributes.body":"body","shopify.attributes.signature":"Address","shopify.addresses.zip_code":"ZIP code","shopify.addresses.postal_code":"Postal code","shopify.addresses.postcode":"Postcode","shopify.addresses.pincode":"Pincode","shopify.addresses.region":"Region","shopify.addresses.prefecture":"Prefecture","shopify.addresses.province":"Province","shopify.addresses.state":"State","shopify.addresses.state_and_territory":"State/territory","shopify.addresses.county":"County","shopify.addresses.emirate":"Emirate","shopify.addresses.governorate":"Governorate","shopify.addresses.confirm":"Are you sure you wish to delete this address?","shopify.collections.sorting.manual":"Featured","shopify.collections.sorting.best_selling":"Best selling","shopify.collections.sorting.az":"Alphabetically, A-Z","shopify.collections.sorting.za":"Alphabetically, Z-A","shopify.collections.sorting.price_ascending":"Price, low to high","shopify.collections.sorting.price_descending":"Price, high to low","shopify.collections.sorting.date_ascending":"Date, old to new","shopify.collections.sorting.date_descending":"Date, new to old","shopify.errors.blank":"can't be blank","shopify.errors.blocked_address":"This location isn't supported","shopify.errors.credit_card_session_expired":"Credit card authorization has expired, please enter your payment information again. Your card has not been charged.","shopify.errors.empty":"can't be empty","shopify.errors.invalid_email":"must be a valid email address","shopify.errors.discount_disabled":"This discount has been disabled","shopify.errors.discount_expired":"This discount is not valid anymore","shopify.errors.discount_limit_reached":"This discount has reached its usage limit","shopify.errors.discount_not_found":"Unable to find a valid discount matching the code entered","shopify.errors.customer_already_used_once_per_customer_discount_notice":"This discount has reached its usage limit","shopify.errors.gift_card_already_applied":"Code has already been applied to your checkout","shopify.errors.gift_card_code_invalid":"Code is invalid","shopify.errors.gift_card_currency_mismatch":"Your gift card is in %{gift_card_currency}. Contact us to have it reissued in %{checkout_currency}.","shopify.errors.gift_card_depleted":"There are no funds left on this gift card","shopify.errors.gift_card_disabled":"Gift card is disabled","shopify.errors.gift_card_expired":"Gift card is expired","shopify.errors.invalid":"is invalid","shopify.errors.bad_domain":"contains an invalid domain name","shopify.errors.taken":"has already been taken","shopify.errors.contains_html_tags":"cannot contain HTML tags","shopify.errors.too_short":"is too short (minimum is %{count} characters)","shopify.errors.too_long":"is too long (maximum is %{count} characters)","shopify.errors.password_mismatch":"must match the provided password","shopify.errors.contains_spaces":"starts or ends with spaces.","shopify.errors.email_domain_invalid":"provider is not supported","shopify.errors.invalid_for_country":"is not valid for %{country}","shopify.errors.invalid_for_country_and_province":"is not valid for %{province} and %{country}","shopify.errors.invalid_province_in_country":"is not a valid province in %{country}","shopify.errors.invalid_state_in_country":"is not a valid state in %{country}","shopify.errors.invalid_region_in_country":"is not a valid region in %{country}","shopify.errors.less_than_or_equal_to":"must be less than or equal to %{count}","shopify.errors.not_supported":"is not supported","shopify.errors.full_name_required":"Enter a first name and last name","shopify.errors.invalid_for_card_type":"is not valid","shopify.errors.invalid_type":"sorry, we do not accept cards of this type","shopify.errors.invalid_format":"format is not valid","shopify.errors.expired":"has expired","shopify.errors.invalid_start_date_or_issue_number_for_debit":"a valid start date or issue number is required","shopify.errors.invalid_expiry_year":"is not a valid expiration year","shopify.errors.reset_password_html":"This email address is already associated with an account. If this account is yours, you can <a href=\"/account/login#recover\">reset your password</a>","shopify.errors.verify_email":"We have sent an email to %{customer_email}, please click the link included to verify your email address.","shopify.errors.product_not_available":"product is not published for this customer.","shopify.errors.shop_404.title":"Create an Ecommerce Website and Sell Online! Ecommerce Software by Shopify","shopify.errors.shop_404.heros.store_unavailable":"Sorry, this store is currently unavailable.","shopify.errors.shop_404.heros.store_not_exist":"This store does not exist.","shopify.errors.shop_404.heros.no_storefront":"This store doesn't have a website yet.","shopify.errors.shop_404.links.explore_other_stores":"Explore other stores","shopify.errors.shop_404.links.start_free_trial":"Start a free trial","shopify.errors.shop_404.owner_ctas.header":"Are you the store owner?","shopify.errors.shop_404.owner_ctas.fix_domain":"Finish setting up your new web address, go to %{domain_settings_link}. Click “Connect domain” and enter: %{domain}.<br>If you're having trouble getting into your store, try the %{forgot_your_store_link} page.","shopify.errors.shop_404.owner_ctas.fix_domain_link_text":"your domain settings","shopify.errors.shop_404.owner_ctas.forgot_your_store_link_text":"forgot your store","shopify.errors.shop_404.owner_ctas.add_storefront":"You can set up your website by adding the Online Store channel in your %{admin_link}. If you're having trouble getting into your store, try the %{forgot_your_store_link} page.","shopify.errors.shop_404.owner_ctas.admin_link_text":"admin","shopify.errors.shop_404.ctas.sell_in_person.header":"Sell in person","shopify.errors.shop_404.ctas.sell_in_person.caption":"Get the features you need to run your retail store whether you're starting out or scaling up.","shopify.errors.shop_404.ctas.sell_in_person.link_text":"Start free trial","shopify.errors.shop_404.ctas.open_a_store.header":"Open a new Shopify store","shopify.errors.shop_404.ctas.open_a_store.caption":"Start a 3-day free trial, then continue for $1/month for the next 3 months.","shopify.errors.shop_404.ctas.open_a_store.link_text":"Sign up now","shopify.errors.shop_404.ctas.editions.header":"Check out Shopify Editions","shopify.errors.shop_404.ctas.editions.caption":"With 100+ product updates, you can be more productive and creative, and powerful in commerce than you ever imagined.","shopify.errors.shop_404.ctas.editions.link_text":"Explore latest Editions","shopify.errors.shop_404.ctas.store_owner.header":"Are you the store owner?","shopify.errors.shop_404.ctas.store_owner.caption":"Are you having trouble getting into your store? Try the %{forgot_your_store_link} feature. If you would like to reactivate your store contact %{shopify_support_link}.","shopify.errors.shop_404.ctas.store_owner.shopify_support_link_text":"Shopify support","shopify.notices.customer.password_reset_error":"Password reset error","shopify.notices.customer.no_account_found":"No account found with that email.","shopify.notices.customer.invalid_credentials":"Incorrect email or password.","shopify.notices.customer.denylisted_reset_password":"Your account couldn't be accessed because the current password is not secure. You will receive an email to update your password.","shopify.notices.customer.signup_disabled":"Customer account creation has been disabled.","shopify.notices.address.updated":"Successfully updated address.","shopify.notices.address.error_updating":"Error updating address","shopify.notices.address.created":"Successfully created address","shopify.notices.address.error_creating":"Error creating address.","shopify.notices.address.deleted":"Successfully deleted address","shopify.notices.address.error_deleting":"Error deleting address.","shopify.notices.line_item.item_status.add_variant":"Added %{delta}","shopify.notices.line_item.item_status.increment_item":"Added %{delta}","shopify.notices.line_item.item_status.decrement_item":"Removed %{delta} of %{total}","shopify.notices.line_item.item_status.decrement_fulfilled_line_item":"Returned %{delta} of %{total}","shopify.notices.line_item.item_status.decrement_return_line_item":"Removed %{delta} from return","shopify.notices.order.not_available":"This order is not available","shopify.notices.order.financial_status.authorized":"Authorized","shopify.notices.order.financial_status.pending":"Pending","shopify.notices.order.financial_status.paid":"Paid","shopify.notices.order.financial_status.unpaid":"Unpaid","shopify.notices.order.financial_status.voided":"Voided","shopify.notices.order.financial_status.partially_paid":"Partially paid","shopify.notices.order.financial_status.partially_refunded":"Partially refunded","shopify.notices.order.financial_status.refunded":"Refunded","shopify.notices.order.financial_status.expired":"Expired","shopify.notices.order.fulfillment_status.fulfilled":"Fulfilled","shopify.notices.order.fulfillment_status.complete":"Complete","shopify.notices.order.fulfillment_status.partial":"Partial","shopify.notices.order.fulfillment_status.unfulfilled":"Unfulfilled","shopify.notices.order.fulfillment_status.restocked":"Restocked","shopify.notices.order.transaction_status.success":"Success","shopify.notices.order.transaction_status.pending":"Pending","shopify.notices.order.transaction_status.failure":"Failure","shopify.notices.order.transaction_status.error":"Error","shopify.notices.order.cancel_reason.declined":"Payment declined","shopify.notices.order.cancel_reason.inventory":"Items unavailable","shopify.notices.order.cancel_reason.fraud":"Fraudulent order","shopify.notices.order.cancel_reason.customer":"Customer changed/cancelled order","shopify.notices.order.cancel_reason.staff":"Staff error","shopify.notices.order.cancel_reason.other":"Other","shopify.notices.order.cash_on_delivery":"Cash on Delivery (COD)","shopify.notices.cart.only_n_items_available":"You can only add %{count} %{name} to the cart.","shopify.notices.cart.too_many_items_in_cart":"You can't add more %{name} to the cart.","shopify.notices.cart.less_than_minimum":"This item has a minimum of %{min}.","shopify.notices.cart.more_than_maximum":"This item has a maximum of %{max}.","shopify.notices.cart.not_respect_step":"You can only add this item in increments of %{step}.","shopify.notices.cart.all_items_in_cart":"All %{count} %{name} are in your cart.","shopify.notices.cart.empty_update":"cannot update empty cart","shopify.notices.cart.missing_parameters":"no valid id or line parameter","shopify.notices.cart.generic_error":"Cart Error","shopify.notices.cart.product_not_available":"Product is not available","shopify.notices.cart.too_many_line_items_error":"Your cart can't contain more than %{max} items.","shopify.notices.cart.link_expired":"Link expired","shopify.notices.cart.link_no_longer_exists":"Link no longer exists.","shopify.notices.cart.stock_problems_html":"One or more items are no longer available. We've provided an <a href='%{link}'>updated cart</a>.","shopify.notices.cart.changed":"Cart changed","shopify.notices.cart.items_changed":"One or more items have changed.","shopify.notices.cart.product_sold_out":"The product '%{name}' is already sold out.","shopify.notices.cart.variant_not_found":"Cannot find variant","shopify.notices.cart.variant_requires_selling_plan":"Variant can only be purchased with a selling plan.","shopify.notices.cart.selling_plan_not_available_for_company_locations":"Only one-time purchase is available for B2B orders","shopify.notices.cart.digital_product_not_available_for_company_locations":"This item can't be added to a B2B order","shopify.notices.cart.selling_plan_not_applicable":"Cannot apply selling plan to variant","shopify.notices.cart.shipping_address_not_required":"This cart does not require shipping","shopify.notices.cart.shipping_address_invalid":"There was a problem calculating your shipping rates. Continue to checkout to choose a shipping rate before you complete your order.","shopify.notices.cart.bundle_requires_components":"The bundle product '%{name}' cannot be added to the cart.","shopify.notices.cart.gift_card_with_components_not_supported":"The bundle product '%{name}' cannot be added to the cart.","shopify.notices.cart.gift_card_price_must_be_greater_than_zero":"The bundle product '%{name}' cannot be added to the cart.","shopify.notices.cart.view_lines_limit_reached":"Lines must be less than %{limit}","shopify.notices.cart.merchandise_line_transformers.run_error":"An error occurred in your cart.","shopify.notices.storefront.invalid_password":"Password incorrect, please try again.","shopify.notices.tags.add_articles":"Narrow search to articles also having tag %{tag}","shopify.notices.tags.add_products":"Narrow selection to products matching tag %{tag}","shopify.notices.tags.remove_articles":"Widen search to articles that aren't tagged %{tag}","shopify.notices.tags.remove_products":"Remove tag %{tag}","shopify.email_marketing.subscribed.confirmation":"Thank you for subscribing to our mailing list.","shopify.email_marketing.subscribed.disclaimer":"You can unsubscribe at any time.","shopify.email_marketing.subscribed.unsubscribe":"Unsubscribe","shopify.email_marketing.unsubscribed.confirmation":"You’ve unsubscribed from our mailing list.","shopify.email_marketing.unsubscribed.disclaimer":"You won’t receive any more marketing updates from us. You can subscribe again at any time.","shopify.email_marketing.unsubscribed.preview":"You're previewing what customers will see when they unsubscribe.","shopify.email_marketing.open_tracking.opt_in.opted_in_html":"<b>You’ve opted in to email open tracking.</b>","shopify.email_marketing.open_tracking.opt_in.visibility":"Email open rates will be reported anonymously. We will only see if you’ve opened an email as part of an aggregated email open rate.","shopify.email_marketing.open_tracking.opt_in.opt_out_html":"You can <a style='text-decoration:underline;' href='%{link}'>opt out</a> of email open tracking if you do not want to share this information.","shopify.email_marketing.open_tracking.opt_in.preview_bar":"You're previewing what customers will see when they opt in to email open tracking.","shopify.email_marketing.open_tracking.opt_out.opted_out_html":"<b>You’ve opted out of email open tracking.</b>","shopify.email_marketing.open_tracking.opt_out.visibility":"We will not see if you’ve opened our emails.","shopify.email_marketing.open_tracking.opt_out.opt_in_html":"<a style='text-decoration:underline;' href='%{link}'>Opt in</a> to email open tracking.","shopify.email_marketing.open_tracking.opt_out.preview_bar":"You're previewing what customers will see when they opt out of email open tracking.","shopify.email_marketing.open_tracking.no_longer_track.status_html":"<b>We no longer track any email opens.</b>","shopify.email_marketing.open_tracking.no_longer_track.privacy_policy":"After this email was sent, we updated our privacy policy and we no longer track opens.","shopify.email_marketing.open_tracking.track.status_html":"<b>Email open tracking is reported.</b>","shopify.email_marketing.open_tracking.track.visibility":"We will only see if you’ve opened the email, as part of the total email open rate.","shopify.email_marketing.open_tracking.updated_policy.status_html":"<b>Email open tracking is reported.</b>","shopify.email_marketing.open_tracking.updated_policy.visibility":"We have updated our policy, and now track emails opens. Email open rates will be reported anonymously. We will only see if you’ve opened an email as part of the total email open rate.","shopify.email_marketing.open_tracking.updated_policy.opt_out_html":"If you do not want to share this information, you can <a style='text-decoration:underline;' href='%{link}'>unsubscribe.</a>","shopify.filters.availability.value.in_stock":"In stock","shopify.filters.availability.value.out_of_stock":"Out of stock","shopify.filters.boolean.true_label":"Yes","shopify.filters.boolean.false_label":"No","shopify.search.error":"There was a problem loading your search results. Please refresh the page or try again later.","shopify.search.sorting.relevance":"Relevance","shopify.search.sorting.price_ascending":"Price, low to high","shopify.search.sorting.price_descending":"Price, high to low","shopify.page_titles.blog_or_article_with_error":"Error - %{title}","shopify.page_titles.products":"Products","shopify.page_titles.shopping_cart":"Your Shopping Cart","shopify.page_titles.account":"Account","shopify.page_titles.create_account":"Create Account","shopify.page_titles.reset_account":"Reset Account","shopify.page_titles.addresses":"Addresses","shopify.page_titles.order":"Order %{name}","shopify.page_titles.search":"Search","shopify.page_titles.search_results.one":"Search: %{count} result found for \"%{terms}\"","shopify.page_titles.search_results.other":"Search: %{count} results found for \"%{terms}\"","shopify.page_titles.collections":"Collections","shopify.page_titles.not_found":"404 Not Found","shopify.page_titles.challenge":"Challenge","shopify.page_titles.checkpoint":"Checkpoint","shopify.cart.discounts_with_count":"%{count} discounts have been applied","shopify.challenge.message":"To continue, let us know you're not a robot.","shopify.challenge.error":"Your answer wasn't correct, please try again.","shopify.challenge.submit_button_text":"Submit","shopify.checkpoint.message":"Solve Captcha to continue","shopify.checkpoint.error":"Captcha validation failed","shopify.checkpoint.submit_button_text":"Submit","shopify.store_availability.pick_up_time.one_hour":"Usually ready in 1 hour","shopify.store_availability.pick_up_time.two_hours":"Usually ready in 2 hours","shopify.store_availability.pick_up_time.four_hours":"Usually ready in 4 hours","shopify.store_availability.pick_up_time.twenty_four_hours":"Usually ready in 24 hours","shopify.store_availability.pick_up_time.two_to_four_days":"Usually ready in 2-4 days","shopify.store_availability.pick_up_time.five_or_more_days":"Usually ready in 5+ days","shopify.store_availability.pick_up_time.zero_to_two_hours":"Usually ready in 2 hours","shopify.store_availability.pick_up_time.two_to_four_hours":"Usually ready in 4 hours","shopify.store_availability.pick_up_time.immediately":"Ready for pickup now","shopify.store_availability.pick_up_time.next_day":"Ready for pickup next day","shopify.subscriptions.buyer_consent_product":"This item is a recurring or deferred purchase. By continuing, I agree to the %{cancellationPolicyLink} and authorize you to charge my payment method at the prices, frequency and dates listed on this page until my order is fulfilled or I cancel, if permitted.","shopify.subscriptions.buyer_consent_cart":"One or more of the items in your cart is a recurring or deferred purchase. By continuing, I agree to the %{cancellationPolicyLink} and authorize you to charge my payment method at the prices, frequency and dates listed on this page until my order is fulfilled or I cancel, if permitted.","shopify.subscriptions.cancellation_policy":"cancellation policy","shopify.online_store.spam_detection.disclaimer_html":"<p data-spam-detection-disclaimer>This site is protected by reCAPTCHA and the Google <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.</p>\n"};
const schemas = [{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/translations.json","fileMatch":["locales/*.json"],"schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"anyOf\": [\n      {\n        \"type\": \"string\"\n      },\n      {\n        \"$ref\": \"#/definitions/pluralizedString\"\n      },\n      {\n        \"$ref\": \"#\"\n      }\n    ]\n  },\n  \"patternProperties\": {\n    \".*_html$\": {\n      \"type\": \"string\",\n      \"description\": \"Translation string that contains HTML. The '_html' suffix prevents the HTML content from being escaped.\"\n    }\n  },\n  \"definitions\": {\n    \"pluralizedString\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"one\": {\n          \"type\": \"string\",\n          \"description\": \"Translation for the singular form\"\n        },\n        \"other\": {\n          \"type\": \"string\",\n          \"description\": \"Translation for the plural form\"\n        },\n        \"few\": {\n          \"type\": \"string\",\n          \"description\": \"Translation for 'few' form, used in some languages\"\n        },\n        \"many\": {\n          \"type\": \"string\",\n          \"description\": \"Translation for 'many' form, used in some languages\"\n        },\n        \"two\": {\n          \"type\": \"string\",\n          \"description\": \"Translation for 'two' form, used in some languages\"\n        },\n        \"zero\": {\n          \"type\": \"string\",\n          \"description\": \"Translation for 'zero' form, used in some languages\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"description\": \"An object representing a pluralized translation string\"\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/theme_block.json","fileMatch":["blocks/*.liquid"],"schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Shopify Liquid Theme Block Schema\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"The name attribute determines the block title that's shown in the theme editor.\",\n      \"markdownDescription\": \"The `name` attribute determines the block title that's shown in the theme editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#name)\"\n    },\n\n    \"settings\": {\n      \"$ref\": \"./settings.json\"\n    },\n\n    \"blocks\": {\n      \"type\": \"array\",\n      \"description\": \"Theme blocks can accept other app and theme blocks as children using the blocks attribute of their schema.\",\n      \"markdownDescription\": \"Theme blocks can accept other app and theme blocks as children using the `blocks` attribute of their schema.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#blocks)\",\n      \"items\": {\n        \"type\": \"object\",\n        \"additionalProperties\": false,\n        \"required\": [\"type\"],\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of block that can be added to this block.\",\n            \"markdownDescription\": \"The type of block that can be added to this block.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#blocks)\"\n          }\n        },\n        \"$comment\": \"The allOf rule here exists because that's how we do discriminated unions in JSON schemas. If a rule matches, that rule will be used to document the type property. Otherwise we fallback to the docs above.\",\n        \"allOf\": [\n          {\n            \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"@theme\" } } },\n            \"then\": { \"$ref\": \"./theme_block_entry.json\" }\n          },\n          {\n            \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"@app\" } } },\n            \"then\": { \"$ref\": \"./app_block_entry.json\" }\n          },\n          {\n            \"if\": {\n              \"required\": [\"type\"],\n              \"properties\": {\n                \"type\": {\n                  \"type\": \"string\",\n                  \"not\": { \"enum\": [\"@app\", \"@theme\"] }\n                }\n              }\n            },\n            \"then\": { \"$ref\": \"./targetted_block_entry.json\" }\n          }\n        ]\n      }\n    },\n\n    \"presets\": {\n      \"type\": \"array\",\n      \"description\": \"Presets are default configurations of blocks that enable merchants to easily add a block to a JSON template through the theme editor.\",\n      \"markdownDescription\": \"Presets are default configurations of blocks that enable merchants to easily add a block to a JSON template through the theme editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#presets)\",\n      \"items\": {\n        \"$ref\": \"./preset.json\"\n      }\n    },\n\n    \"tag\": {\n      \"description\": \"The HTML element that is used to wrap the rendered block. Accepts any string up to 50 characters. Can be used to render custom HTML elements. Use null to render without a wrapping element.\",\n      \"markdownDescription\": \"The HTML element that is used to wrap the rendered block. Accepts any string up to 50 characters. Can be used to render custom HTML elements.\\n\\nUse `null` to render without a wrapping element.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#tag)\",\n      \"oneOf\": [\n        {\n          \"description\": \"If you don't want to use a <div>, then you can specify which kind of HTML element to use.\",\n          \"markdownDescription\": \"If you don't want to use a `<div>`, then you can specify which kind of HTML element to use.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#tag)\",\n          \"type\": \"string\",\n          \"maxLength\": 50\n        },\n        {\n          \"description\": \"Used to render the block without a wrapping element.\",\n          \"markdownDescription\": \"Used to render the block without a wrapping element.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#rendering-blocks-without-a-wrapper)\",\n          \"type\": \"null\"\n        }\n      ]\n    },\n\n    \"class\": {\n      \"type\": \"string\",\n      \"description\": \"When Shopify renders a block, it's wrapped in an HTML element with the shopify-block class. You can append other classes by using the class attribute.\",\n      \"markdownDescription\": \"When Shopify renders a block, it's wrapped in an HTML element with the `shopify-block` class. You can append other classes by using the class attribute.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#class)\"\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/theme_settings.json","fileMatch":["config/settings_schema.json"],"schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"JSON schema for config/settings_schema.json files.\",\n  \"description\": \"The settings that merchants can configure in the theme editor.\",\n  \"markdownDescription\": \"The settings that merchants can configure in the theme editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/config/settings-schema-json)\",\n  \"type\": \"array\",\n  \"items\": {\n    \"anyOf\": [\n      {\n        \"title\": \"Theme metadata\",\n        \"markdownDescription\": \"Additional metadata for your theme that shows up in the Theme actions menu of the theme editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/config/settings-schema-json#add-theme-metadata)\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"description\": \"You may use the 'theme_info' object for theme metadata.\",\n            \"markdownDescription\": \"[Shopify reference](https://shopify.dev/docs/themes/architecture/config/settings-schema-json#add-theme-metadata)\",\n            \"const\": \"theme_info\"\n          },\n          \"theme_name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the theme.\"\n          },\n          \"theme_author\": {\n            \"type\": \"string\",\n            \"description\": \"The author of the theme.\"\n          },\n          \"theme_version\": {\n            \"type\": \"string\",\n            \"description\": \"The version number of the theme.\"\n          },\n          \"theme_documentation_url\": {\n            \"type\": \"string\",\n            \"format\": \"uri\",\n            \"description\": \"A URL where merchants can find documentation for the theme.\"\n          },\n          \"theme_support_email\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n            \"description\": \"An email address that merchants can contact for support for the theme.\"\n          },\n          \"theme_support_url\": {\n            \"type\": \"string\",\n            \"format\": \"uri\",\n            \"description\": \"A URL where merchants can find support for the theme.\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"theme_name\",\n          \"theme_author\",\n          \"theme_version\",\n          \"theme_documentation_url\"\n        ],\n        \"oneOf\": [\n          {\n            \"required\": [\"theme_support_email\"],\n            \"not\": { \"required\": [\"theme_support_url\"] }\n          },\n          {\n            \"required\": [\"theme_support_url\"],\n            \"not\": { \"required\": [\"theme_support_email\"] }\n          }\n        ]\n      },\n      {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the category of settings.\",\n            \"markdownDescription\": \"The name of the category of settings.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/config/settings-schema-json#schema)\",\n            \"not\": {\n              \"const\": \"theme_info\"\n            }\n          },\n          \"settings\": {\n            \"$ref\": \"./settings.json\"\n          }\n        }\n      }\n    ]\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/section.json","fileMatch":["sections/*.liquid"],"schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Shopify Liquid Theme Section Schema\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"The name attribute determines the section title that is shown in the theme editor.\",\n      \"markdownDescription\": \"The `name` attribute determines the section title that is shown in the theme editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#name)\"\n    },\n\n    \"tag\": {\n      \"type\": \"string\",\n      \"description\": \"The HTML element that is used to wrap the section.\",\n      \"markdownDescription\": \"The HTML element that is used to wrap the section.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#tag)\",\n      \"enum\": [\"article\", \"aside\", \"div\", \"footer\", \"header\", \"section\"]\n    },\n\n    \"class\": {\n      \"type\": \"string\",\n      \"description\": \"Additional CSS class for the section.\",\n      \"markdownDescription\": \"Additional CSS class for the section.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#class)\"\n    },\n\n    \"limit\": {\n      \"type\": \"integer\",\n      \"description\": \"The number of times a section can be added to a template or section group.\",\n      \"markdownDescription\": \"The number of times a section can be added to a template or section group.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#limit)\",\n      \"minimum\": 1,\n      \"maximum\": 2\n    },\n\n    \"settings\": {\n      \"$ref\": \"./settings.json\"\n    },\n\n    \"max_blocks\": {\n      \"type\": \"integer\",\n      \"description\": \"There's a limit of 50 blocks per section. You can specify a lower limit with the max_blocks attribute\",\n      \"markdownDescription\": \"There's a limit of 50 blocks per section. You can specify a lower limit with the `max_blocks` attribute.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#max_blocks)\",\n      \"minimum\": 1,\n      \"maximum\": 50\n    },\n\n    \"blocks\": {\n      \"type\": \"array\",\n      \"description\": \"Blocks are reusable modules of content that can be added, removed, and reordered within a section.\",\n      \"markdownDescription\": \"Blocks are reusable modules of content that can be added, removed, and reordered within a section.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#blocks)\",\n      \"properties\": {\n        \"type\": {\n          \"description\": \"The block type. Can be one of the following values: @theme, @app, or a custom block type.\",\n          \"markdownDescription\": \"The block type. Can be one of the following values: @theme, @app, or a custom block type.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#blocks)\"\n        }\n      },\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"type\"],\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of block that can be added to this block.\",\n            \"markdownDescription\": \"The type of block that can be added to this block.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#blocks)\"\n          }\n        },\n        \"$comment\": \"The allOf rule here exists because that's how we do discriminated unions in JSON schemas. If a rule matches, that rule will be used to document the type property. Otherwise we fallback to the docs above.\",\n        \"allOf\": [\n          {\n            \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"@theme\" } } },\n            \"then\": { \"$ref\": \"./theme_block_entry.json\" }\n          },\n          {\n            \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"@app\" } } },\n            \"then\": { \"$ref\": \"./app_block_entry.json\" }\n          },\n          {\n            \"if\": {\n              \"required\": [\"type\"],\n              \"properties\": {\n                \"type\": {\n                  \"type\": \"string\",\n                  \"not\": { \"enum\": [\"@app\", \"@theme\"] }\n                }\n              }\n            },\n            \"then\": {\n              \"oneOf\": [\n                { \"$ref\": \"./targetted_block_entry.json\" },\n                { \"$ref\": \"./local_block_entry.json\" }\n              ]\n            }\n          }\n        ]\n      }\n    },\n\n    \"presets\": {\n      \"type\": \"array\",\n      \"description\": \"Presets are default configurations of sections that enable users to easily add a section to a JSON template through the theme editor.\",\n      \"markdownDescription\": \"Presets are default configurations of sections that enable users to easily add a section to a [JSON template](https://shopify.dev/docs/themes/architecture/templates/json-templates) through the theme editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#presets)\",\n      \"items\": {\n        \"$ref\": \"./preset.json\"\n      }\n    },\n\n    \"default\": {\n      \"type\": \"object\",\n      \"description\": \"Default configuration for statically rendered sections.\",\n      \"markdownDescription\": \"Default configuration for statically rendered sections.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#default)\",\n      \"properties\": {\n        \"settings\": {\n          \"$ref\": \"./default_setting_values.json\"\n        },\n        \"blocks\": {\n          \"type\": \"array\",\n          \"description\": \"Default blocks configurations to ship with this default.\",\n          \"markdownDescription\": \"Default blocks configurations to ship with this default.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#default)\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"type\"],\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"description\": \"The block type.\"\n              },\n              \"settings\": {\n                \"$ref\": \"./default_setting_values.json\"\n              }\n            }\n          }\n        }\n      }\n    },\n\n    \"locales\": {\n      \"type\": \"object\",\n      \"description\": \"Sections can provide their own set of translated strings through the locales object. This is separate from the locales directory of the theme, which makes it a useful feature for sections that are meant to be installed on multiple themes or shops.\",\n      \"markdownDescription\": \"Sections can provide their own set of translated strings through the `locales` object. This is separate from the `locales` directory of the theme, which makes it a useful feature for sections that are meant to be installed on multiple themes or shops.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#locales)\",\n      \"additionalProperties\": {\n        \"type\": \"object\",\n        \"additionalProperties\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n\n    \"enabled_on\": {\n      \"description\": \"Restrict the section to certain template page types and section group types.\",\n      \"markdownDescription\": \"Restrict the section to certain template page types and section group types.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#enabled_on)\",\n      \"$ref\": \"#/definitions/sectionToggle\"\n    },\n\n    \"disabled_on\": {\n      \"description\": \"Prevent the section from being used on certain template page types and section group types.\",\n      \"markdownDescription\": \"Prevent the section from being used on certain template page types and section group types.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#disabled_on)\",\n      \"$ref\": \"#/definitions/sectionToggle\"\n    }\n  },\n\n  \"definitions\": {\n    \"sectionToggle\": {\n      \"type\": \"object\",\n      \"description\": \"Restrict the section to certain template page types and section group types.\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"templates\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"*\",\n              \"404\",\n              \"article\",\n              \"blog\",\n              \"captcha\",\n              \"cart\",\n              \"collection\",\n              \"customers/account\",\n              \"customers/activate_account\",\n              \"customers/addresses\",\n              \"customers/login\",\n              \"customers/order\",\n              \"customers/register\",\n              \"customers/reset_password\",\n              \"gift_card\",\n              \"index\",\n              \"list-collections\",\n              \"metaobject\",\n              \"page\",\n              \"password\",\n              \"policy\",\n              \"product\",\n              \"search\"\n            ]\n          },\n          \"uniqueItems\": true\n        },\n        \"groups\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"uniqueItems\": true\n        }\n      }\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/settings.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"description\": \"Settings that merchants can configure through the theme editor.\",\n  \"markdownDescription\": \"Settings that merchants can configure through the [theme editor](https://help.shopify.com/en/manual/online-store/themes/customizing-themes#theme-editor)\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings).\",\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"./setting.json\"\n  },\n  \"minItems\": 0\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/setting.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"description\": \"The type of the input or sidebar setting. This value determines the type of field that gets rendered into the editor.\",\n      \"markdownDescription\": \"The type of the input or sidebar setting. This value determines the type of field that gets rendered into the editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings)\",\n      \"enum\": [\n        \"article\",\n        \"blog\",\n        \"checkbox\",\n        \"collection\",\n        \"collection_list\",\n        \"color\",\n        \"color_background\",\n        \"color_scheme\",\n        \"color_scheme_group\",\n        \"font_picker\",\n        \"header\",\n        \"html\",\n        \"image_picker\",\n        \"inline_richtext\",\n        \"link_list\",\n        \"liquid\",\n        \"metaobject\",\n        \"metaobject_list\",\n        \"number\",\n        \"page\",\n        \"paragraph\",\n        \"product\",\n        \"product_list\",\n        \"radio\",\n        \"range\",\n        \"richtext\",\n        \"select\",\n        \"style.layout_panel\",\n        \"style.size_panel\",\n        \"style.spacing_panel\",\n        \"text\",\n        \"text_alignment\",\n        \"textarea\",\n        \"url\",\n        \"video\",\n        \"video_url\"\n      ]\n    }\n  },\n\n  \"$comment\": \"We're doing the weird allOf here so that we have better error messages when type is invalid. We're also doing the allOf so that we can use additionalProperties properly.\",\n  \"allOf\": [\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"header\" } } },\n      \"then\": { \"$ref\": \"#/definitions/header\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"paragraph\" } } },\n      \"then\": { \"$ref\": \"#/definitions/paragraph\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"article\" } } },\n      \"then\": { \"$ref\": \"#/definitions/article\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"blog\" } } },\n      \"then\": { \"$ref\": \"#/definitions/blog\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"checkbox\" } } },\n      \"then\": { \"$ref\": \"#/definitions/checkbox\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"collection\" } } },\n      \"then\": { \"$ref\": \"#/definitions/collection\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"collection_list\" } } },\n      \"then\": { \"$ref\": \"#/definitions/collection_list\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"color\" } } },\n      \"then\": { \"$ref\": \"#/definitions/color\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"color_background\" } } },\n      \"then\": { \"$ref\": \"#/definitions/color_background\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"color_scheme\" } } },\n      \"then\": { \"$ref\": \"#/definitions/color_scheme\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"color_scheme_group\" } } },\n      \"then\": { \"$ref\": \"#/definitions/color_scheme_group\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"font_picker\" } } },\n      \"then\": { \"$ref\": \"#/definitions/font_picker\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"html\" } } },\n      \"then\": { \"$ref\": \"#/definitions/html\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"image_picker\" } } },\n      \"then\": { \"$ref\": \"#/definitions/image_picker\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"inline_richtext\" } } },\n      \"then\": { \"$ref\": \"#/definitions/inline_richtext\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"link_list\" } } },\n      \"then\": { \"$ref\": \"#/definitions/link_list\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"liquid\" } } },\n      \"then\": { \"$ref\": \"#/definitions/liquid\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"metaobject\" } } },\n      \"then\": { \"$ref\": \"#/definitions/metaobject\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"metaobject_list\" } } },\n      \"then\": { \"$ref\": \"#/definitions/metaobject_list\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"number\" } } },\n      \"then\": { \"$ref\": \"#/definitions/number\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"page\" } } },\n      \"then\": { \"$ref\": \"#/definitions/page\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"product\" } } },\n      \"then\": { \"$ref\": \"#/definitions/product\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"product_list\" } } },\n      \"then\": { \"$ref\": \"#/definitions/product_list\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"radio\" } } },\n      \"then\": { \"$ref\": \"#/definitions/radio\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"range\" } } },\n      \"then\": { \"$ref\": \"#/definitions/range\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"richtext\" } } },\n      \"then\": { \"$ref\": \"#/definitions/richtext\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"select\" } } },\n      \"then\": { \"$ref\": \"#/definitions/select\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"style.layout_panel\" } } },\n      \"then\": { \"$ref\": \"#/definitions/style.layout_panel\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"style.size_panel\" } } },\n      \"then\": { \"$ref\": \"#/definitions/style.size_panel\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"style.spacing_panel\" } } },\n      \"then\": { \"$ref\": \"#/definitions/style.spacing_panel\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"text\" } } },\n      \"then\": { \"$ref\": \"#/definitions/text\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"text_alignment\" } } },\n      \"then\": { \"$ref\": \"#/definitions/text_alignment\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"textarea\" } } },\n      \"then\": { \"$ref\": \"#/definitions/textarea\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"url\" } } },\n      \"then\": { \"$ref\": \"#/definitions/url\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"video\" } } },\n      \"then\": { \"$ref\": \"#/definitions/video\" }\n    },\n    {\n      \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"video_url\" } } },\n      \"then\": { \"$ref\": \"#/definitions/video_url\" }\n    }\n  ],\n\n  \"definitions\": {\n    \"article\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"article\",\n          \"description\": \"A setting of type article outputs an article picker field that's automatically populated with the available articles for the store. You can use these fields to capture an article selection, such as the article to feature on the homepage.\",\n          \"markdownDescription\": \"A setting of type `article` outputs an article picker field that's automatically populated with the available articles for the store. You can use these fields to capture an article selection, such as the article to feature on the homepage.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#article)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"blog\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"blog\",\n          \"description\": \"A setting of type blog outputs a blog picker field that's automatically populated with the available blogs for the store. You can use these fields to capture a blog selection, such as the blog to feature in the sidebar.\",\n          \"markdownDescription\": \"A setting of type `blog` outputs a blog picker field that's automatically populated with the available blogs for the store. You can use these fields to capture a blog selection, such as the blog to feature in the sidebar.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#blog)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"checkbox\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"checkbox\",\n          \"description\": \"A setting of type checkbox outputs a checkbox field. These fields can be used for toggling features on and off, such as whether to show an announcement bar.\",\n          \"markdownDescription\": \"A setting of type `checkbox` outputs a checkbox field. These fields can be used for toggling features on and off, such as whether to show an announcement bar.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#checkbox)\"\n        },\n        \"default\": { \"type\": \"boolean\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"collection\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"collection\",\n          \"description\": \"A setting of type collection outputs a collection picker field that's automatically populated with the available collections for the store. You can use these fields to capture a collection selection, such as a collection for featuring products on the homepage.\",\n          \"markdownDescription\": \"A setting of type `collection` outputs a collection picker field that's automatically populated with the available collections for the store. You can use these fields to capture a collection selection, such as a collection for featuring products on the homepage.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#collection)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"collection_list\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"collection_list\",\n          \"description\": \"A setting of type collection_list outputs a collection picker field that's automatically populated with the available collections for the store. You can use these fields to capture multiple collections, such as a group of collections to feature on the homepage.\",\n          \"markdownDescription\": \"A setting of type `collection_list` outputs a collection picker field that's automatically populated with the available collections for the store. You can use these fields to capture multiple collections, such as a group of collections to feature on the homepage.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#collection_list)\"\n        },\n        \"limit\": {\n          \"type\": \"integer\",\n          \"description\": \"The maximum number that the merchant can select. The default limit, and the maximum limit you can set, is 50.\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"color\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"color\",\n          \"description\": \"A setting of type color outputs a color picker field. You can use these fields to capture a color selection for various theme elements, such as the body text color.\",\n          \"markdownDescription\": \"A setting of type `color` outputs a color picker field. You can use these fields to capture a color selection for various theme elements, such as the body text color.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#color)\"\n        },\n        \"default\": { \"type\": \"string\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"color_background\": {\n      \"type\": \"object\",\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"color_background\",\n          \"description\": \"A setting of type color_background outputs a text field for entering CSS background properties. You can use these fields to capture background settings for various theme elements, such as the store background.\",\n          \"markdownDescription\": \"A setting of type `color_background` outputs a text field for entering [CSS background](https://developer.mozilla.org/en-US/docs/Web/CSS/background) properties. You can use these fields to capture background settings for various theme elements, such as the store background.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#color_background)\"\n        },\n        \"default\": { \"type\": \"string\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"color_scheme\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"color_scheme\",\n          \"description\": \"A setting of type color_scheme outputs a picker with all of the available theme color schemes, and a preview of the selected color scheme.\",\n          \"markdownDescription\": \"A setting of type `color_scheme` outputs a picker with all of the available theme color schemes, and a preview of the selected color scheme.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#color_scheme)\"\n        },\n        \"default\": { \"type\": \"string\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"color_scheme_group\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/colorSchemeGroupStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"color_scheme_group\",\n          \"description\": \"A setting of type color_scheme_group outputs a color scheme.\",\n          \"markdownDescription\": \"A setting of type `color_scheme_group` outputs a color scheme which is composed of the following input setting types:\\n\\n- `header`\\n- `color`\\n- `color_background`\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#color_scheme_group)\"\n        },\n        \"definition\": {\n          \"description\": \"An array of header, color and color_background input settings.\",\n          \"markdownDescription\": \"An array of `header`, `color` and `color_background` input settings.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#color_scheme_group)\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"enum\": [\"header\", \"color\", \"color_background\"]\n              },\n              \"visible_if\": {\n                \"not\": {\n                  \"type\": \"string\"\n                },\n                \"errorMessage\": \"The property visible_if is not allowed within color_scheme_group\"\n              }\n            },\n            \"allOf\": [\n              {\n                \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"header\" } } },\n                \"then\": { \"$ref\": \"#/definitions/header\" }\n              },\n              {\n                \"if\": { \"required\": [\"type\"], \"properties\": { \"type\": { \"const\": \"color\" } } },\n                \"then\": { \"$ref\": \"#/definitions/color\" }\n              },\n              {\n                \"if\": {\n                  \"required\": [\"type\"],\n                  \"properties\": { \"type\": { \"const\": \"color_background\" } }\n                },\n                \"then\": { \"$ref\": \"#/definitions/color_background\" }\n              }\n            ]\n          }\n        },\n        \"role\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"background\": {\n              \"description\": \"Renders the background color of the preview\",\n              \"oneOf\": [{ \"type\": \"string\" }, { \"$ref\": \"#/definitions/gradient\" }]\n            },\n            \"text\": {\n              \"description\": \"Renders the text color of the preview\",\n              \"type\": \"string\"\n            },\n            \"primary_button\": {\n              \"description\": \"Renders the first pill in the preview\",\n              \"oneOf\": [{ \"type\": \"string\" }, { \"$ref\": \"#/definitions/gradient\" }]\n            },\n            \"secondary_button\": {\n              \"description\": \"Renders the second pill in the preview\",\n              \"oneOf\": [{ \"type\": \"string\" }, { \"$ref\": \"#/definitions/gradient\" }]\n            },\n            \"primary_button_border\": {\n              \"description\": \"Render the first pills' border in the preview\",\n              \"type\": \"string\"\n            },\n            \"secondary_button_border\": {\n              \"description\": \"Render the second pills' border in the preview\",\n              \"type\": \"string\"\n            },\n            \"on_primary_button\": {\n              \"description\": \"Not used in the preview\",\n              \"type\": \"string\"\n            },\n            \"on_secondary_button\": {\n              \"description\": \"Not used in the preview\",\n              \"type\": \"string\"\n            },\n            \"links\": {\n              \"description\": \"Not used in the preview\",\n              \"type\": \"string\"\n            },\n            \"icons\": {\n              \"description\": \"Not used in the preview\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"background\",\n            \"text\",\n            \"primary_button\",\n            \"secondary_button\",\n            \"primary_button_border\",\n            \"secondary_button_border\",\n            \"on_primary_button\",\n            \"on_secondary_button\",\n            \"links\",\n            \"icons\"\n          ]\n        },\n        \"info\": true,\n        \"id\": true\n      },\n      \"required\": [\"definition\", \"role\"],\n      \"additionalProperties\": false\n    },\n\n    \"font_picker\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"font_picker\",\n          \"description\": \"A setting of type font_picker outputs a font picker field that's automatically populated with fonts from the Shopify font library. This library includes web-safe fonts, a selection of Google Fonts, and fonts licensed by Monotype.\",\n          \"markdownDescription\": \"A setting of type `font_picker` outputs a font picker field that's automatically populated with fonts from the [Shopify font library](https://shopify.dev/docs/themes/architecture/settings/fonts#shopify-font-library). This library includes web-safe fonts, a selection of Google Fonts, and fonts licensed by Monotype.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#font_picker)\"\n        },\n        \"default\": {\n          \"type\": \"string\",\n          \"description\": \"The default font from the Shopify font library.\",\n          \"markdownDescription\": \"The default font from the [Shopify font library](https://shopify.dev/docs/themes/architecture/settings/fonts#shopify-font-library).\"\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"required\": [\"default\"],\n      \"additionalProperties\": false\n    },\n\n    \"html\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"html\",\n          \"description\": \"A setting of type html outputs a multi-line text field that accepts HTML markup.\",\n          \"markdownDescription\": \"A setting of type `html` outputs a multi-line text field that accepts HTML markup.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#html)\"\n        },\n        \"default\": {\n          \"type\": \"string\"\n        },\n        \"placeholder\": {\n          \"type\": \"string\",\n          \"description\": \"A placeholder value for the input.\"\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"image_picker\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"image_picker\",\n          \"description\": \"A setting of type image_picker outputs an image picker field that's automatically populated with the available images from the Files section of Shopify admin, and has the option to upload new images. Merchants also have an opportunity to enter alt text and select a focal point for their image.\",\n          \"markdownDescription\": \"A setting of type `image_picker` outputs an image picker field that's automatically populated with the available images from the [Files](https://help.shopify.com/manual/shopify-admin/productivity-tools/file-uploads) section of Shopify admin, and has the option to upload new images. Merchants also have an opportunity to enter alt text and select a [focal point](https://shopify.dev/docs/themes/architecture/settings/input-settings#image-focal-points) for their image.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#image_picker)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"inline_richtext\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"inline_richtext\",\n          \"description\": \"A setting of type inline_richtext outputs HTML markup that isn't wrapped in paragraph tags (<p>)\",\n          \"markdownDescription\": \"A setting of type `inline_richtext` outputs HTML markup that isn't wrapped in paragraph tags (`<p>`). The setting includes the following basic formatting options:\\n\\n- Bold\\n- Italic\\n- Link\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#inline_richtext)\"\n        },\n        \"default\": { \"type\": \"string\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"link_list\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"link_list\",\n          \"description\": \"A setting of type link_list outputs a menu picker field that's automatically populated with the available menus for the store. You can use these fields to capture a menu selection, such as the menu to use for footer links.\",\n          \"markdownDescription\": \"A setting of type `link_list` outputs a menu picker field that's automatically populated with the available menus for the store. You can use these fields to capture a menu selection, such as the menu to use for footer links.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#link_list)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"liquid\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"liquid\",\n          \"description\": \"A setting of type liquid outputs a multi-line text field that accepts HTML and limited Liquid markup. You can use these fields to capture custom blocks of HTML and Liquid content, such as a product-specific message. Merchants can also use a liquid setting to add the code needed to integrate certain types of apps into your theme.\",\n          \"markdownDescription\": \"A setting of type `liquid` outputs a multi-line text field that accepts HTML and [limited](https://shopify.dev/docs/themes/architecture/settings/input-settings#limitations) Liquid markup. You can use these fields to capture custom blocks of HTML and Liquid content, such as a product-specific message. Merchants can also use a liquid setting to add the code needed to integrate certain types of [apps](https://shopify.dev/docs/apps/online-store) into your theme.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#liquid)\"\n        },\n        \"default\": { \"type\": \"string\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"metaobject\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"metaobject\",\n          \"description\": \"A setting of type metaobject outputs a metaobject picker field that's automatically populated with the compatible metaobject entries for the store. You can use these fields to capture a metaobject entry selection for a known metaobject type.\",\n          \"markdownDescription\": \"A setting of type `metaobject` outputs a metaobject picker field that's automatically populated with the compatible metaobject entries for the store. You can use these fields to capture a metaobject entry selection for a known metaobject type. \\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#metaobject)\"\n        },\n        \"metaobject_type\": {\n          \"type\": \"string\",\n          \"description\": \"The metaobject type allowed by the picker.\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"required\": [\"metaobject_type\"],\n      \"additionalProperties\": false\n    },\n\n    \"metaobject_list\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"metaobject_list\",\n          \"description\": \"A setting of type metaobject_list outputs a metaobject picker field that's automatically populated with the compatible metaobject entries for the store. You can use these fields to capture multiple metaobject entry selections for a known metaobject type.\",\n          \"markdownDescription\": \"A setting of type `metaobject_list` outputs a metaobject picker field that's automatically populated with the compatible metaobject entries for the store. You can use these fields to capture multiple metaobject entry selections for a known metaobject type.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#metaobject_list)\"\n        },\n        \"metaobject_type\": {\n          \"type\": \"string\",\n          \"description\": \"The metaobject type allowed by the picker.\"\n        },\n        \"limit\": {\n          \"type\": \"integer\",\n          \"description\": \"The maximum number that the merchant can select. The default limit, and the maximum limit you can set, is 50.\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"required\": [\"metaobject_type\"],\n      \"additionalProperties\": false\n    },\n    \"number\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"number\",\n          \"description\": \"A setting of type number outputs a single number field.\",\n          \"markdownDescription\": \"A setting of type `number` outputs a single number field.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#number)\"\n        },\n        \"placeholder\": {\n          \"type\": \"string\",\n          \"description\": \"A placeholder value for the input.\"\n        },\n        \"default\": { \"type\": \"number\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"page\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"page\",\n          \"description\": \"A setting of type page outputs a page picker field that's automatically populated with the available pages for the store. You can use these fields to capture a page selection, such as the page to feature content for in a size-chart display.\",\n          \"markdownDescription\": \"A setting of type `page` outputs a page picker field that's automatically populated with the available pages for the store. You can use these fields to capture a page selection, such as the page to feature content for in a size-chart display.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#page)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"product\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"product\",\n          \"description\": \"A setting of type product outputs a product picker field that's automatically populated with the available products for the store. You can use these fields to capture a product selection, such as the product to feature on the homepage.\",\n          \"markdownDescription\": \"A setting of type `product` outputs a product picker field that's automatically populated with the available products for the store. You can use these fields to capture a product selection, such as the product to feature on the homepage.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#product)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"product_list\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"product_list\",\n          \"description\": \"A setting of type product_list outputs a product picker field that's automatically populated with the available products for the store. You can use these fields to capture multiple products, such as a group of products to feature on the homepage.\",\n          \"markdownDescription\": \"A setting of type `product_list` outputs a product picker field that's automatically populated with the available products for the store. You can use these fields to capture multiple products, such as a group of products to feature on the homepage.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#product_list)\"\n        },\n        \"limit\": {\n          \"type\": \"integer\",\n          \"description\": \"The maximum number that the merchant can select. The default limit, and the maximum limit you can set, is 50.\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"radio\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"radio\",\n          \"description\": \"A setting of type radio outputs a radio option field.\",\n          \"markdownDescription\": \"A setting of type `radio` outputs a radio option field.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#radio)\"\n        },\n        \"default\": {\n          \"type\": \"string\",\n          \"description\": \"The value of the default option\"\n        },\n        \"options\": { \"$ref\": \"#/definitions/options\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"required\": [\"options\"],\n      \"additionalProperties\": false\n    },\n\n    \"range\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"range\",\n          \"description\": \"A setting of type range outputs a range slider field with an input field.\",\n          \"markdownDescription\": \"A setting of type `range` outputs a range slider field with an input field.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#range)\"\n        },\n        \"default\": {\n          \"type\": \"number\"\n        },\n        \"min\": {\n          \"type\": \"number\",\n          \"description\": \"The minimum value of the input\"\n        },\n        \"max\": {\n          \"type\": \"number\",\n          \"description\": \"The maximum value of the input\"\n        },\n        \"step\": {\n          \"type\": \"number\",\n          \"description\": \"The increment size between steps of the slider\"\n        },\n        \"unit\": {\n          \"type\": \"string\",\n          \"description\": \"The unit for the input. For example, you can set \\\"px\\\" for a font-size slider\",\n          \"markdownDescription\": \"The unit for the input. For example, you can set `px` for a font-size slider\"\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"required\": [\"default\", \"min\", \"max\"],\n      \"additionalProperties\": false\n    },\n\n    \"richtext\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"richtext\",\n          \"description\": \"A setting of type richtext outputs a multi-line text field.\",\n          \"markdownDescription\": \"A setting of type `richtext` outputs a multi-line text field with the following basic formatting options:\\n\\n- Bold\\n- Italic\\n- Underline\\n- Link\\n- Paragraph\\n- Unordered list\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#richtext)\"\n        },\n        \"default\": { \"type\": \"string\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"select\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"select\",\n          \"description\": \"A setting of type select outputs different selector fields, depending on certain criteria.\",\n          \"markdownDescription\": \"A setting of type `select` outputs [different selector fields](https://shopify.dev/docs/themes/architecture/settings/input-settings#selector-fields), depending on certain criteria.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#select)\"\n        },\n        \"default\": {\n          \"type\": \"string\",\n          \"description\": \"The value of the default option\"\n        },\n        \"group\": {\n          \"type\": \"string\",\n          \"description\": \"An optional attribute that you can add to each option to create option groups in the drop-down.\"\n        },\n        \"options\": { \"$ref\": \"#/definitions/options\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"required\": [\"options\"],\n      \"additionalProperties\": false\n    },\n\n    \"lengthPattern\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[0-9]+(px|%)$\"\n    },\n\n    \"lengthAutoPattern\": {\n      \"type\": \"string\",\n      \"pattern\": \"^([0-9]+(px|%)|auto|fit-content)$\"\n    },\n\n    \"lengthNonePattern\": {\n      \"type\": \"string\",\n      \"pattern\": \"^([0-9]+(px|%)|none|fit-content)$\"\n    },\n\n    \"negativeLengthPattern\": {\n      \"type\": \"string\",\n      \"pattern\": \"^-?[0-9]+(px|%)$\"\n    },\n\n    \"numberPattern\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[0-9]+$\"\n    },\n\n    \"negativeNumberPattern\": {\n      \"type\": \"string\",\n      \"pattern\": \"^-?[0-9]+$\"\n    },\n\n    \"style.layout_panel\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"style.layout_panel\",\n          \"description\": \"A setting of type style.layout_panel outputs style settings for layout.\",\n          \"markdownDescription\": \"A setting of type `style.layout_panel` outputs style settings for layout.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#style.layout_panel)\"\n        },\n        \"default\": {\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/style.flex_layout_properties\"\n            }\n          ],\n          \"properties\": {\n            \"@media (--mobile)\": {\n              \"type\": \"object\",\n              \"description\": \"Style settings for the mobile breakpoint\",\n              \"$ref\": \"#/definitions/style.flex_layout_properties\",\n              \"unevaluatedProperties\": false\n            }\n          },\n          \"unevaluatedProperties\": false\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"style.size_panel\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"style.size_panel\",\n          \"description\": \"A setting of type style.size_panel outputs style settings for size.\",\n          \"markdownDescription\": \"A setting of type `style.size_panel` outputs style settings for size.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#style.size_panel)\"\n        },\n        \"default\": {\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/style.size_properties\"\n            }\n          ],\n          \"properties\": {\n            \"@media (--mobile)\": {\n              \"type\": \"object\",\n              \"description\": \"Style settings for the mobile breakpoint\",\n              \"$ref\": \"#/definitions/style.size_properties\",\n              \"unevaluatedProperties\": false\n            }\n          },\n          \"unevaluatedProperties\": false\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"style.spacing_panel\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"style.spacing_panel\",\n          \"description\": \"A setting of type style.spacing_panel outputs style settings for spacing.\",\n          \"markdownDescription\": \"A setting of type `style.spacing_panel` outputs style settings for spacing.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#style.spacing_panel)\"\n        },\n        \"default\": {\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/style.spacing_properties\"\n            }\n          ],\n          \"properties\": {\n            \"@media (--mobile)\": {\n              \"type\": \"object\",\n              \"description\": \"Style settings for the mobile breakpoint\",\n              \"$ref\": \"#/definitions/style.spacing_properties\",\n              \"unevaluatedProperties\": false\n            }\n          },\n          \"unevaluatedProperties\": false\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"text\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"text\",\n          \"description\": \"A setting of type text outputs a single-line text field.\",\n          \"markdownDescription\": \"A setting of type `text` outputs a single-line text field.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#text)\"\n        },\n        \"default\": {\n          \"type\": \"string\"\n        },\n        \"placeholder\": {\n          \"type\": \"string\",\n          \"description\": \"A placeholder value for the input.\"\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"text_alignment\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"text_alignment\",\n          \"description\": \"A setting of type text_alignment outputs a SegmentedControl field with icons.\",\n          \"markdownDescription\": \"A setting of type `text_alignment` outputs a `SegmentedControl` field with icons.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#text_alignment)\"\n        },\n        \"default\": {\n          \"type\": \"string\",\n          \"enum\": [\"left\", \"right\", \"center\"]\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"textarea\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"textarea\",\n          \"description\": \"A setting of type textarea outputs a multi-line text field.\",\n          \"markdownDescription\": \"A setting of type `textarea` outputs a multi-line text field\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#textarea)\"\n        },\n        \"default\": {\n          \"type\": \"string\"\n        },\n        \"placeholder\": {\n          \"type\": \"string\",\n          \"description\": \"A placeholder value for the input.\"\n        },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"url\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"url\",\n          \"description\": \"A setting of type url outputs a URL entry field where you can manually enter external URLs and relative paths.\",\n          \"markdownDescription\": \"A setting of type `url` outputs a URL entry field where you can manually enter external URLs and relative paths.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#url)\"\n        },\n        \"default\": { \"type\": \"string\" },\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"video\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"video\",\n          \"description\": \"A setting of type video outputs a video picker that's automatically populated with the available videos from the Files section of the Shopify admin. The merchant also has the option to upload new videos.\",\n          \"markdownDescription\": \"A setting of type `video` outputs a video picker that's automatically populated with the available videos from the [Files](https://help.shopify.com/en/manual/shopify-admin/productivity-tools/file-uploads) section of the Shopify admin. The merchant also has the option to upload new videos.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#video)\"\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"video_url\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/inputSettingsStandardAttributes\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"video_url\",\n          \"description\": \"A setting of type video_url outputs a URL entry field.\",\n          \"markdownDescription\": \"A setting of type `video_url` outputs a URL entry field.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#video_url)\"\n        },\n        \"placeholder\": {\n          \"type\": \"string\",\n          \"description\": \"A placeholder value for the input.\"\n        },\n        \"accept\": {\n          \"description\": \"Takes an array of accepted video providers. Valid values are youtube, vimeo, or both.\",\n          \"markdownDescription\": \"Takes an array of accepted video providers. Valid values are `youtube`, `vimeo`, or both.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"enum\": [\"youtube\", \"vimeo\"]\n          }\n        },\n        \"default\": true,\n        \"label\": true,\n        \"info\": true,\n        \"id\": true,\n        \"visible_if\": true\n      },\n      \"required\": [\"accept\"],\n      \"additionalProperties\": false\n    },\n\n    \"header\": {\n      \"allOf\": [\n        { \"$ref\": \"#/definitions/sidebarStandardSettings\" },\n        { \"$ref\": \"#/definitions/conditionalSetting\" }\n      ],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"header\",\n          \"description\": \"A setting of type `header` outputs a header element to help you better organize your input settings.\",\n          \"markdownDescription\": \"A setting of type `header` outputs a header element to help you better organize your input settings.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/sidebar-settings#header)\"\n        },\n        \"info\": { \"$ref\": \"#/definitions/info\" },\n        \"content\": true,\n        \"visible_if\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"paragraph\": {\n      \"allOf\": [{ \"$ref\": \"#/definitions/sidebarStandardSettings\" }],\n      \"properties\": {\n        \"type\": {\n          \"const\": \"paragraph\",\n          \"description\": \"A setting of type paragraph outputs a text element to help you better describe your input settings.\",\n          \"markdownDescription\": \"A setting of type `paragraph` outputs a text element to help you better describe your input settings.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/sidebar-settings#paragraph)\"\n        },\n        \"content\": true\n      },\n      \"additionalProperties\": false\n    },\n\n    \"sidebarStandardSettings\": {\n      \"$comment\": \"Sidebar standard settings\",\n      \"required\": [\"type\", \"content\"],\n      \"properties\": {\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"The setting content, which will show in the theme editor.\"\n        }\n      }\n    },\n\n    \"conditionalSetting\": {\n      \"$comment\": \"Conditional setting property\",\n      \"properties\": {\n        \"visible_if\": {\n          \"type\": \"string\",\n          \"description\": \"A liquid expression that determines whether the setting should be visible.\",\n          \"markdownDescription\": \"A liquid expression that determines whether the setting should be visible.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#visible_if)\"\n        }\n      }\n    },\n\n    \"inputSettingsStandardAttributes\": {\n      \"required\": [\"type\", \"id\", \"label\"],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"description\": \"The unique identifier for the setting, which is used to access the setting value.\",\n          \"markdownDescription\": \"The unique identifier for the setting, which is used to access the setting value.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#standard-attributes)\"\n        },\n        \"label\": {\n          \"type\": \"string\",\n          \"description\": \"The label for the setting, which will show in the theme editor.\"\n        },\n        \"default\": {\n          \"description\": \"The default value for the setting.\"\n        },\n        \"info\": {\n          \"$ref\": \"#/definitions/info\"\n        }\n      }\n    },\n\n    \"colorSchemeGroupStandardAttributes\": {\n      \"required\": [\"type\", \"id\"],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"description\": \"The unique identifier for the setting, which is used to access the setting value.\",\n          \"markdownDescription\": \"The unique identifier for the setting, which is used to access the setting value.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/settings/input-settings#standard-attributes)\"\n        }\n      }\n    },\n\n    \"info\": {\n      \"type\": \"string\",\n      \"description\": \"An option for informational text about the setting.\"\n    },\n\n    \"gradient\": {\n      \"type\": \"object\",\n      \"required\": [\"solid\", \"gradient\"],\n      \"properties\": {\n        \"solid\": { \"type\": \"string\" },\n        \"gradient\": { \"type\": \"string\" }\n      }\n    },\n\n    \"style.flex_layout_properties\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"flex-direction\": {\n          \"type\": \"string\",\n          \"description\": \"Determines how flex items are arranged within the flex container by specifying the main axis and direction. Valid values are row (default), row-reverse, column, and column-reverse.\",\n          \"enum\": [\"row\", \"row-reverse\", \"column\", \"column-reverse\"]\n        },\n        \"flex-wrap\": {\n          \"type\": \"string\",\n          \"description\": \"Specifies whether flex items are confined to a single line or can flow onto multiple lines. If wrapping is allowed, it defines the stacking direction of the lines. Valid values are nowrap (default), wrap, and wrap-reverse.\",\n          \"enum\": [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n        },\n        \"row-gap\": {\n          \"$ref\": \"#/definitions/lengthPattern\",\n          \"description\": \"Defines the size of the gap between the rows of a wrapped flex container.\"\n        },\n        \"column-gap\": {\n          \"$ref\": \"#/definitions/lengthPattern\",\n          \"description\": \"Defines the size of the gap between flex items.\"\n        },\n        \"gap\": {\n          \"type\": \"string\",\n          \"description\": \"Shorthand for row-gap and column-gap. Defines the gaps between flex items.\",\n          \"pattern\": \"^([0-9]+(px|%) ?){1,2}$\"\n        },\n        \"justify-content\": {\n          \"type\": \"string\",\n          \"description\": \"Defines the alignment of flex items along the main axis of the flex container. Valid values are flex-start (default), flex-end, start, end, left, right, center, space-between, space-around and space-evenly.\",\n          \"enum\": [\n            \"flex-start\",\n            \"flex-end\",\n            \"start\",\n            \"end\",\n            \"left\",\n            \"right\",\n            \"center\",\n            \"space-between\",\n            \"space-around\",\n            \"space-evenly\"\n          ]\n        },\n        \"align-items\": {\n          \"type\": \"string\",\n          \"description\": \"Defines the alignment of flex items along the cross axis of the flex container. Valid values are stretch (default), flex-start / start / self-start, flex-end / end / self-end, center and baseline.\",\n          \"enum\": [\n            \"stretch\",\n            \"flex-start\",\n            \"start\",\n            \"self-start\",\n            \"flex-end\",\n            \"end\",\n            \"self-end\",\n            \"center\",\n            \"baseline\"\n          ]\n        },\n        \"align-content\": {\n          \"type\": \"string\",\n          \"description\": \"Defines the distribution of space between and around flex items along the cross axis. Valid values are stretch, flex-start / start, flex-end / end, center, space-between, space-around, and space-evenly.\",\n          \"enum\": [\n            \"stretch\",\n            \"flex-start\",\n            \"start\",\n            \"flex-end\",\n            \"end\",\n            \"center\",\n            \"space-between\",\n            \"space-around\",\n            \"space-evenly\"\n          ]\n        }\n      }\n    },\n\n    \"style.size_properties\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"flex-grow\": {\n          \"$ref\": \"#/definitions/numberPattern\",\n          \"description\": \"Defines the flex grow factor of a flex item, determining how much of the available space in the flex container the item should occupy.\"\n        },\n        \"flex-shrink\": {\n          \"$ref\": \"#/definitions/numberPattern\",\n          \"description\": \"Defines the flex shrink factor of a flex item, determining how much the item should reduce in size compared to the other flex items when space is insufficient.\"\n        },\n        \"flex-basis\": {\n          \"$ref\": \"#/definitions/lengthAutoPattern\",\n          \"description\": \"Defines the initial main size of a flex item, determining the size of the content-box unless otherwise specified by box-sizing.\"\n        },\n        \"width\": {\n          \"$ref\": \"#/definitions/lengthAutoPattern\",\n          \"description\": \"Defines the width of an item.\"\n        },\n        \"min-width\": {\n          \"$ref\": \"#/definitions/lengthAutoPattern\",\n          \"description\": \"Defines the minimum width of an item.\"\n        },\n        \"max-width\": {\n          \"$ref\": \"#/definitions/lengthNonePattern\",\n          \"description\": \"Defines the maximum width of an item.\"\n        },\n        \"height\": {\n          \"$ref\": \"#/definitions/lengthAutoPattern\",\n          \"description\": \"Defines the height of an item.\"\n        },\n        \"min-height\": {\n          \"$ref\": \"#/definitions/lengthAutoPattern\",\n          \"description\": \"Defines the minimum height of an item.\"\n        },\n        \"max-height\": {\n          \"$ref\": \"#/definitions/lengthNonePattern\",\n          \"description\": \"Defines the maximum height of an item.\"\n        }\n      }\n    },\n\n    \"style.spacing_properties\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"padding\": {\n          \"description\": \"Shorthand that defines the padding on all four sides of an element.\",\n          \"pattern\": \"^([0-9]+(px|%) ?){1,4}$\"\n        },\n        \"padding-top\": {\n          \"description\": \"Defines the padding on the top side of an element.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-right\": {\n          \"description\": \"Defines the padding on the right side of an element.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-bottom\": {\n          \"description\": \"Defines the padding on the bottom side of an element.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-left\": {\n          \"description\": \"Defines the padding on the left side of an element.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-block-start\": {\n          \"description\": \"Defines the logical block start padding of an element, translating to physical padding based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-block-end\": {\n          \"description\": \"Defines the logical block end padding of an element, translating to physical padding based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-block\": {\n          \"type\": \"string\",\n          \"description\": \"Shorthand for padding-block-start and padding-block end. Defines the logical block start and end padding of an element, translating to physical padding based on the element's writing mode, text direction, and text orientation.\",\n          \"pattern\": \"^([0-9]+(px|%) ?){1,2}$\"\n        },\n        \"padding-inline-start\": {\n          \"description\": \"Defines the logical inline start padding of an element, translating to physical padding based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-inline-end\": {\n          \"description\": \"Defines the logical inline end padding of an element, translating to physical padding based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/lengthPattern\"\n        },\n        \"padding-inline\": {\n          \"type\": \"string\",\n          \"description\": \"Shorthand that defines the logical inline start and end padding of an element, translating to physical padding based on the element's writing mode, text direction, and text orientation.\",\n          \"pattern\": \"^([0-9]+(px|%) ?){1,2}$\"\n        },\n        \"margin\": {\n          \"type\": \"string\",\n          \"description\": \"Shorthand that defines the margin on all four sides of an element.\",\n          \"pattern\": \"^(-?[0-9]+(px|%) ?){1,4}$\"\n        },\n        \"margin-top\": {\n          \"description\": \"Defines the margin on the top side of an element.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-right\": {\n          \"description\": \"Defines the margin on the right side of an element.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-bottom\": {\n          \"description\": \"Defines the margin on the bottom side of an element.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-left\": {\n          \"description\": \"Defines the margin on the left side of an element.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-block-start\": {\n          \"description\": \"Defines the logical block start margin of an element, translating to physical margin based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-block-end\": {\n          \"description\": \"Defines the logical block end margin of an element, translating to physical margin based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-block\": {\n          \"type\": \"string\",\n          \"description\": \"Shorthand that defines the logical block start and end margins of an element, translating to physical margin based on the element's writing mode, text direction, and text orientation.\",\n          \"pattern\": \"^(-?[0-9]+(px|%) ?){1,2}$\"\n        },\n        \"margin-inline-start\": {\n          \"description\": \"Defines the logical inline start margin of an element, translating to physical margin based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-inline-end\": {\n          \"description\": \"Defines the logical inline end margin of an element, translating to physical margin based on the element's writing mode, text direction, and text orientation.\",\n          \"$ref\": \"#/definitions/negativeLengthPattern\"\n        },\n        \"margin-inline\": {\n          \"type\": \"string\",\n          \"description\": \"Shorthand that defines both the logical inline start and end margins of an element, translating to physical margin based on the element's writing mode, text direction, and text orientation.\",\n          \"pattern\": \"^(-?[0-9]+(px|%) ?){1,2}$\"\n        }\n      }\n    },\n\n    \"options\": {\n      \"description\": \"Takes an array of `value`/`label` definitions.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"value\": {\n            \"description\": \"The value of the option.\",\n            \"type\": \"string\"\n          },\n          \"label\": {\n            \"description\": \"The label of the option.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\"value\", \"label\"]\n      }\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/default_setting_values.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"description\": \"A list of default values for any settings that you might want to populate. Each entry should include the setting name and the value.\",\n  \"properties\": {\n    \"layout\": {\n      \"type\": \"object\",\n      \"description\": \"Layout style settings for the preset\",\n      \"allOf\": [\n        {\n          \"$ref\": \"./setting.json#/definitions/style.flex_layout_properties\"\n        }\n      ],\n      \"properties\": {\n        \"@media (--mobile)\": {\n          \"type\": \"object\",\n          \"description\": \"Layout style settings for the mobile breakpoint\",\n          \"$ref\": \"./setting.json#/definitions/style.flex_layout_properties\",\n          \"unevaluatedProperties\": false\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"size\": {\n      \"type\": \"object\",\n      \"description\": \"Size style settings for the preset\",\n      \"allOf\": [\n        {\n          \"$ref\": \"./setting.json#/definitions/style.size_properties\"\n        }\n      ],\n      \"properties\": {\n        \"@media (--mobile)\": {\n          \"type\": \"object\",\n          \"description\": \"Size style settings for the mobile breakpoint\",\n          \"$ref\": \"./setting.json#/definitions/style.size_properties\",\n          \"unevaluatedProperties\": false\n        }\n      },\n      \"unevaluatedProperties\": false\n    },\n    \"spacing\": {\n      \"type\": \"object\",\n      \"description\": \"Spacing style settings for the preset\",\n      \"allOf\": [\n        {\n          \"$ref\": \"./setting.json#/definitions/style.spacing_properties\"\n        }\n      ],\n      \"properties\": {\n        \"@media (--mobile)\": {\n          \"type\": \"object\",\n          \"description\": \"Spacing style settings for the mobile breakpoint\",\n          \"$ref\": \"./setting.json#/definitions/style.spacing_properties\",\n          \"unevaluatedProperties\": false\n        }\n      },\n      \"unevaluatedProperties\": false\n    }\n  },\n  \"additionalProperties\": {\n    \"anyOf\": [\n      {\n        \"type\": \"number\"\n      },\n      {\n        \"type\": \"boolean\"\n      },\n      {\n        \"type\": \"string\"\n      },\n      {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        }\n      }\n    ]\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/app_block_entry.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$comment\": \"An @app block entry\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"type\": {\n      \"const\": \"@app\",\n      \"description\": \"The \\\"@app\\\" type is used to denote that this container accepts app blocks. App blocks enable app developers to create blocks for merchants to add app content to their theme without having to directly edit theme code.\",\n      \"markdownDescription\": \"The `@app` type is used to denote that this container accepts app blocks. [App blocks](/docs/themes/architecture/sections/app-blocks) enable app developers to create blocks for merchants to add app content to their theme without having to directly edit theme code.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/app-blocks#supporting-app-blocks)\"\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/theme_block_entry.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$comment\": \"A @theme block entry\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"required\": [\"type\"],\n  \"properties\": {\n    \"type\": {\n      \"const\": \"@theme\",\n      \"description\": \"Developer preview: The \\\"@theme\\\" type denotes that this container accepts theme blocks that live in the blocks/ folder of the theme.\",\n      \"markdownDescription\": \"🔮 **Developer preview**: The `@theme` type denotes that this container accepts theme blocks that live in the `blocks/` folder of the theme.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#blocks)\"\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/targetted_block_entry.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$comment\": \"A targetted private or public theme block from the blocks/ folder.\",\n  \"type\": \"object\",\n  \"required\": [\"type\"],\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[a-zA-Z0-9_-]+$\",\n      \"description\": \"Developer preview: The name of a theme block found in the blocks/ folder of the theme.\",\n      \"markdownDescription\": \"🔮 **Developer preview**: The name of a theme block found in the `blocks/` folder of the theme.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/blocks/theme-blocks/schema#blocks)\"\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/preset_blocks.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Shopify Liquid Preset Blocks Schema\",\n  \"definitions\": {\n    \"blocksArray\": {\n      \"type\": \"array\",\n      \"description\": \"A list of child blocks that you might want to include.\",\n      \"markdownDescription\": \"A list of child blocks that you might want to include.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#presets)\",\n      \"items\": {\n        \"type\": \"object\",\n        \"allOf\": [\n          {\n            \"$ref\": \"#/definitions/commonBlockAttributes\"\n          }\n        ],\n        \"properties\": {\n          \"static\": true,\n          \"type\": true,\n          \"name\": true,\n          \"settings\": true,\n          \"blocks\": {\n            \"$ref\": \"#/definitions/blocksArray\"\n          },\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"A unique identifier for the block.\"\n          }\n        },\n        \"additionalProperties\": false,\n        \"if\": {\n          \"properties\": {\n            \"static\": {\n              \"const\": true\n            }\n          },\n          \"required\": [\"static\"]\n        },\n        \"then\": {\n          \"required\": [\"id\"]\n        }\n      }\n    },\n    \"blocksHash\": {\n      \"type\": \"object\",\n      \"description\": \"A list of child blocks that you might want to include.\",\n      \"markdownDescription\": \"A list of child blocks that you might want to include.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#presets)\",\n      \"additionalProperties\": {\n        \"allOf\": [\n          {\n            \"$ref\": \"#/definitions/commonBlockAttributes\"\n          }\n        ],\n        \"properties\": {\n          \"static\": true,\n          \"type\": true,\n          \"name\": true,\n          \"settings\": true,\n          \"blocks\": {\n            \"$ref\": \"#/definitions/blocksHash\"\n          },\n          \"block_order\": {\n            \"type\": \"array\",\n            \"description\": \"The order of the blocks in the section.\"\n          }\n        },\n        \"additionalProperties\": false\n      }\n    },\n    \"commonBlockAttributes\": {\n      \"type\": \"object\",\n      \"required\": [\"type\"],\n      \"properties\": {\n        \"type\": {\n          \"type\": \"string\",\n          \"description\": \"The block type.\"\n        },\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The block name.\"\n        },\n        \"settings\": {\n          \"$ref\": \"./default_setting_values.json\"\n        },\n        \"static\": {\n          \"type\": \"boolean\",\n          \"description\": \"If the block is rendered statically or not.\"\n        }\n      }\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/preset.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Shopify Liquid Section or Block Preset Schema\",\n  \"oneOf\": [\n    {\n      \"$ref\": \"#/definitions/presetWithBlocksArray\"\n    },\n    {\n      \"$ref\": \"#/definitions/presetWithBlocksHash\"\n    }\n  ],\n  \"definitions\": {\n    \"presetBase\": {\n      \"type\": \"object\",\n      \"required\": [\"name\"],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The preset name, which will show in the 'Add section' or 'Add block' picker of the theme editor.\",\n          \"markdownDescription\": \"The preset name, which will show in the 'Add section' or 'Add block' picker of the theme editor.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#presets)\"\n        },\n        \"settings\": {\n          \"$ref\": \"./default_setting_values.json\"\n        }\n      }\n    },\n    \"presetWithBlocksArray\": {\n      \"type\": \"object\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/presetBase\"\n        }\n      ],\n      \"properties\": {\n        \"name\": true,\n        \"settings\": true,\n        \"blocks\": {\n          \"$ref\": \"./preset_blocks.json#/definitions/blocksArray\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"presetWithBlocksHash\": {\n      \"type\": \"object\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/presetBase\"\n        }\n      ],\n      \"required\": [\"blocks\"],\n      \"properties\": {\n        \"name\": true,\n        \"settings\": true,\n        \"blocks\": {\n          \"$ref\": \"./preset_blocks.json#/definitions/blocksHash\"\n        },\n        \"block_order\": {\n          \"type\": \"array\",\n          \"description\": \"The order of blocks in the preset.\",\n          \"markdownDescription\": \"The order of blocks in the preset.\"\n        },\n        \"additionalProperties\": false\n      }\n    }\n  }\n}\n"},{"uri":"https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/theme/local_block_entry.json","schema":"{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$comment\": \"For block definitions that are local to the file.\",\n  \"type\": \"object\",\n  \"required\": [\"type\", \"name\"],\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"description\": \"The block type. This is a free-form string that you can use as an identifier.\",\n      \"markdownDescription\": \"The block type. This is a free-form string that you can use as an identifier.\\n\\n---\\n\\n[Shopify reference](https://shopify.dev/docs/themes/architecture/sections/section-schema#blocks)\"\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"The block name, which will show as the block title in the theme editor.\"\n    },\n    \"limit\": {\n      \"type\": \"integer\",\n      \"description\": \"The number of blocks of this type that can be used.\"\n    },\n    \"settings\": {\n      \"$ref\": \"./settings.json\"\n    }\n  }\n}\n"}];
const worker = self;
const connection = (0, theme_language_server_browser_1.getConnection)(worker);
const fileSystem = new VsCodeFileSystem_1.VsCodeFileSystem(connection, {});
const dependencies = {
    fs: fileSystem,
    log: console.info.bind(console),
    loadConfig: async (uri, fs) => {
        const fileExists = (0, theme_check_common_1.makeFileExists)(fs);
        const rootUri = await (0, theme_check_common_1.findRoot)(uri, fileExists);
        return {
            context: 'theme',
            settings: {},
            checks: theme_language_server_browser_1.recommendedChecks,
            rootUri,
        };
    },
    themeDocset: {
        filters: async () => filters,
        objects: async () => objects,
        tags: async () => tags,
        systemTranslations: async () => systemTranslations,
    },
    jsonValidationSet: {
        schemas: async () => schemas,
    },
};
(0, theme_language_server_browser_1.startServer)(worker, dependencies, connection);

})();

serverExportVar = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=server.js.map